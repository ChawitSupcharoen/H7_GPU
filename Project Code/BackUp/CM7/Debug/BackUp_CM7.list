
BackUp_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008480  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008718  08008718  00018718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008758  08008758  000868b0  2**0
                  CONTENTS
  4 .ARM          00000008  08008758  08008758  00018758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008760  08008760  000868b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008760  08008760  00018760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008764  08008764  00018764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000668b0  24000000  08008768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  240668b0  0806f018  000868b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24066a28  0806f018  00086a28  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000868b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000868de  2**0
                  CONTENTS, READONLY
 13 .debug_info   000164d0  00000000  00000000  00086921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028dd  00000000  00000000  0009cdf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  0009f6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dcb  00000000  00000000  000a0868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003a095  00000000  00000000  000a1633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e2f  00000000  00000000  000db6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00184062  00000000  00000000  000f44f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004aec  00000000  00000000  0027855c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0027d048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240668b0 	.word	0x240668b0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008700 	.word	0x08008700

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240668b4 	.word	0x240668b4
 80002d4:	08008700 	.word	0x08008700

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <main+0xe8>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 fa33 	bl	8000b94 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fb7f 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f867 	bl	8000804 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000736:	4b2c      	ldr	r3, [pc, #176]	; (80007e8 <main+0xe8>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a2a      	ldr	r2, [pc, #168]	; (80007e8 <main+0xe8>)
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <main+0xe8>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000754:	2000      	movs	r0, #0
 8000756:	f002 ffb9 	bl	80036cc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f002 ffcf 	bl	8003700 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000766:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <main+0xe8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x80>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x6a>
if ( timeout < 0 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x8a>
{
Error_Handler();
 8000786:	f000 fa05 	bl	8000b94 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 f999 	bl	8000ac0 <MX_GPIO_Init>
  MX_DMA_Init();
 800078e:	f000 f977 	bl	8000a80 <MX_DMA_Init>
  MX_TIM3_Init();
 8000792:	f000 f8b5 	bl	8000900 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000796:	f000 f927 	bl	80009e8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

//  hdma_tim3_ch1.XferCpltCallback = end_of_scanline;

  TIM3->DIER |= 1 << 14;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <main+0xec>)
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	4a13      	ldr	r2, [pc, #76]	; (80007ec <main+0xec>)
 80007a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a4:	60d3      	str	r3, [r2, #12]
  TIM3->DIER |= 1 << 9;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <main+0xec>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	4a10      	ldr	r2, [pc, #64]	; (80007ec <main+0xec>)
 80007ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007b0:	60d3      	str	r3, [r2, #12]

  HAL_TIM_Base_Start(&htim3);
 80007b2:	480f      	ldr	r0, [pc, #60]	; (80007f0 <main+0xf0>)
 80007b4:	f005 fe7c 	bl	80064b0 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 80007b8:	2100      	movs	r1, #0
 80007ba:	480d      	ldr	r0, [pc, #52]	; (80007f0 <main+0xf0>)
 80007bc:	f005 ff4a 	bl	8006654 <HAL_TIM_OC_Start>
  HAL_DMAEx_MultiBufferStart_IT(&hdma_tim3_ch1, (uint32_t)frame, (uint32_t)&GPIOB->ODR, (uint32_t)(frame + (400*490)), 400);
 80007c0:	490c      	ldr	r1, [pc, #48]	; (80007f4 <main+0xf4>)
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <main+0xf8>)
 80007c4:	461a      	mov	r2, r3
 80007c6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	4613      	mov	r3, r2
 80007ce:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <main+0xfc>)
 80007d0:	480b      	ldr	r0, [pc, #44]	; (8000800 <main+0x100>)
 80007d2:	f002 f99d 	bl	8002b10 <HAL_DMAEx_MultiBufferStart_IT>
  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC1);
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <main+0xf0>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	68da      	ldr	r2, [r3, #12]
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <main+0xf0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <main+0xe6>
 80007e8:	58024400 	.word	0x58024400
 80007ec:	40000400 	.word	0x40000400
 80007f0:	240668cc 	.word	0x240668cc
 80007f4:	24000008 	.word	0x24000008
 80007f8:	2405fb48 	.word	0x2405fb48
 80007fc:	58020414 	.word	0x58020414
 8000800:	24066918 	.word	0x24066918

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b09c      	sub	sp, #112	; 0x70
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080e:	224c      	movs	r2, #76	; 0x4c
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f007 ff48 	bl	80086a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2220      	movs	r2, #32
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f007 ff42 	bl	80086a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000824:	2004      	movs	r0, #4
 8000826:	f002 ff7f 	bl	8003728 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b32      	ldr	r3, [pc, #200]	; (80008f8 <SystemClock_Config+0xf4>)
 8000830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000832:	4a31      	ldr	r2, [pc, #196]	; (80008f8 <SystemClock_Config+0xf4>)
 8000834:	f023 0301 	bic.w	r3, r3, #1
 8000838:	62d3      	str	r3, [r2, #44]	; 0x2c
 800083a:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <SystemClock_Config+0xf4>)
 800083c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <SystemClock_Config+0xf8>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800084c:	4a2b      	ldr	r2, [pc, #172]	; (80008fc <SystemClock_Config+0xf8>)
 800084e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b29      	ldr	r3, [pc, #164]	; (80008fc <SystemClock_Config+0xf8>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000860:	bf00      	nop
 8000862:	4b26      	ldr	r3, [pc, #152]	; (80008fc <SystemClock_Config+0xf8>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800086a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800086e:	d1f8      	bne.n	8000862 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000870:	2301      	movs	r3, #1
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000874:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087a:	2302      	movs	r3, #2
 800087c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087e:	2302      	movs	r3, #2
 8000880:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000882:	2301      	movs	r3, #1
 8000884:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 39;
 8000886:	2327      	movs	r3, #39	; 0x27
 8000888:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800088a:	2302      	movs	r3, #2
 800088c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800088e:	2302      	movs	r3, #2
 8000890:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000892:	2302      	movs	r3, #2
 8000894:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000896:	230c      	movs	r3, #12
 8000898:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800089a:	2300      	movs	r3, #0
 800089c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800089e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a8:	4618      	mov	r0, r3
 80008aa:	f002 ff97 	bl	80037dc <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008b4:	f000 f96e 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	233f      	movs	r3, #63	; 0x3f
 80008ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2303      	movs	r3, #3
 80008be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008c8:	2340      	movs	r3, #64	; 0x40
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008cc:	2340      	movs	r3, #64	; 0x40
 80008ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008d6:	2340      	movs	r3, #64	; 0x40
 80008d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2103      	movs	r1, #3
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 fbd6 	bl	8004090 <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xea>
  {
    Error_Handler();
 80008ea:	f000 f953 	bl	8000b94 <Error_Handler>
  }
}
 80008ee:	bf00      	nop
 80008f0:	3770      	adds	r7, #112	; 0x70
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	58000400 	.word	0x58000400
 80008fc:	58024800 	.word	0x58024800

08000900 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08e      	sub	sp, #56	; 0x38
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000920:	463b      	mov	r3, r7
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]
 800092e:	615a      	str	r2, [r3, #20]
 8000930:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000932:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <MX_TIM3_Init+0xe0>)
 8000934:	4a2b      	ldr	r2, [pc, #172]	; (80009e4 <MX_TIM3_Init+0xe4>)
 8000936:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000938:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <MX_TIM3_Init+0xe0>)
 800093a:	2200      	movs	r2, #0
 800093c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <MX_TIM3_Init+0xe0>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 12;
 8000944:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <MX_TIM3_Init+0xe0>)
 8000946:	220c      	movs	r2, #12
 8000948:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094a:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <MX_TIM3_Init+0xe0>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000950:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <MX_TIM3_Init+0xe0>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000956:	4822      	ldr	r0, [pc, #136]	; (80009e0 <MX_TIM3_Init+0xe0>)
 8000958:	f005 fd52 	bl	8006400 <HAL_TIM_Base_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000962:	f000 f917 	bl	8000b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800096c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000970:	4619      	mov	r1, r3
 8000972:	481b      	ldr	r0, [pc, #108]	; (80009e0 <MX_TIM3_Init+0xe0>)
 8000974:	f005 fff6 	bl	8006964 <HAL_TIM_ConfigClockSource>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800097e:	f000 f909 	bl	8000b94 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000982:	4817      	ldr	r0, [pc, #92]	; (80009e0 <MX_TIM3_Init+0xe0>)
 8000984:	f005 fe04 	bl	8006590 <HAL_TIM_OC_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800098e:	f000 f901 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	480f      	ldr	r0, [pc, #60]	; (80009e0 <MX_TIM3_Init+0xe0>)
 80009a2:	f006 fd17 	bl	80073d4 <HAL_TIMEx_MasterConfigSynchronization>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80009ac:	f000 f8f2 	bl	8000b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80009b0:	2300      	movs	r3, #0
 80009b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009c0:	463b      	mov	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <MX_TIM3_Init+0xe0>)
 80009c8:	f005 ff52 	bl	8006870 <HAL_TIM_OC_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80009d2:	f000 f8df 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	3738      	adds	r7, #56	; 0x38
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	240668cc 	.word	0x240668cc
 80009e4:	40000400 	.word	0x40000400

080009e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 80009ee:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <MX_USART3_UART_Init+0x94>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009f2:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a30:	4811      	ldr	r0, [pc, #68]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a32:	f006 fd5d 	bl	80074f0 <HAL_UART_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a3c:	f000 f8aa 	bl	8000b94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a44:	f007 fd65 	bl	8008512 <HAL_UARTEx_SetTxFifoThreshold>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a4e:	f000 f8a1 	bl	8000b94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4808      	ldr	r0, [pc, #32]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a56:	f007 fd9a 	bl	800858e <HAL_UARTEx_SetRxFifoThreshold>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a60:	f000 f898 	bl	8000b94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a66:	f007 fd1b 	bl	80084a0 <HAL_UARTEx_DisableFifoMode>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a70:	f000 f890 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	24066990 	.word	0x24066990
 8000a7c:	40004800 	.word	0x40004800

08000a80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <MX_DMA_Init+0x3c>)
 8000a88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a8c:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <MX_DMA_Init+0x3c>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_DMA_Init+0x3c>)
 8000a98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	200b      	movs	r0, #11
 8000aaa:	f000 fb3a 	bl	8001122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000aae:	200b      	movs	r0, #11
 8000ab0:	f000 fb51 	bl	8001156 <HAL_NVIC_EnableIRQ>

}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	58024400 	.word	0x58024400

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	4b2d      	ldr	r3, [pc, #180]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	4a2b      	ldr	r2, [pc, #172]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000ade:	f043 0304 	orr.w	r3, r3, #4
 8000ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae6:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af4:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	4a24      	ldr	r2, [pc, #144]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b04:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	4a1c      	ldr	r2, [pc, #112]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b22:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b36:	4a15      	ldr	r2, [pc, #84]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2103      	movs	r1, #3
 8000b52:	480f      	ldr	r0, [pc, #60]	; (8000b90 <MX_GPIO_Init+0xd0>)
 8000b54:	f002 fda0 	bl	8003698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8000b5e:	480c      	ldr	r0, [pc, #48]	; (8000b90 <MX_GPIO_Init+0xd0>)
 8000b60:	f002 fd9a 	bl	8003698 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000b64:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000b68:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_GPIO_Init+0xd0>)
 8000b7e:	f002 fbdb 	bl	8003338 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	58024400 	.word	0x58024400
 8000b90:	58020400 	.word	0x58020400

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HAL_MspInit+0x30>)
 8000ba8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bac:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_MspInit+0x30>)
 8000bae:	f043 0302 	orr.w	r3, r3, #2
 8000bb2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_MspInit+0x30>)
 8000bb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	58024400 	.word	0x58024400

08000bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a23      	ldr	r2, [pc, #140]	; (8000c70 <HAL_TIM_Base_MspInit+0x9c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d13f      	bne.n	8000c66 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000be6:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <HAL_TIM_Base_MspInit+0xa0>)
 8000be8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bec:	4a21      	ldr	r2, [pc, #132]	; (8000c74 <HAL_TIM_Base_MspInit+0xa0>)
 8000bee:	f043 0302 	orr.w	r3, r3, #2
 8000bf2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <HAL_TIM_Base_MspInit+0xa0>)
 8000bf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Stream0;
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <HAL_TIM_Base_MspInit+0xa4>)
 8000c06:	4a1d      	ldr	r2, [pc, #116]	; (8000c7c <HAL_TIM_Base_MspInit+0xa8>)
 8000c08:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <HAL_TIM_Base_MspInit+0xa4>)
 8000c0c:	2217      	movs	r2, #23
 8000c0e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <HAL_TIM_Base_MspInit+0xa4>)
 8000c12:	2240      	movs	r2, #64	; 0x40
 8000c14:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_TIM_Base_MspInit+0xa4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_TIM_Base_MspInit+0xa4>)
 8000c1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c22:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <HAL_TIM_Base_MspInit+0xa4>)
 8000c26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c2a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_TIM_Base_MspInit+0xa4>)
 8000c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c32:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_CIRCULAR;
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <HAL_TIM_Base_MspInit+0xa4>)
 8000c36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c3a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_TIM_Base_MspInit+0xa4>)
 8000c3e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c42:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_TIM_Base_MspInit+0xa4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8000c4a:	480b      	ldr	r0, [pc, #44]	; (8000c78 <HAL_TIM_Base_MspInit+0xa4>)
 8000c4c:	f000 fa9e 	bl	800118c <HAL_DMA_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8000c56:	f7ff ff9d 	bl	8000b94 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a06      	ldr	r2, [pc, #24]	; (8000c78 <HAL_TIM_Base_MspInit+0xa4>)
 8000c5e:	625a      	str	r2, [r3, #36]	; 0x24
 8000c60:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <HAL_TIM_Base_MspInit+0xa4>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40000400 	.word	0x40000400
 8000c74:	58024400 	.word	0x58024400
 8000c78:	24066918 	.word	0x24066918
 8000c7c:	40020010 	.word	0x40020010

08000c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0ba      	sub	sp, #232	; 0xe8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	22c0      	movs	r2, #192	; 0xc0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f007 fd01 	bl	80086a8 <memset>
  if(huart->Instance==USART3)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a2f      	ldr	r2, [pc, #188]	; (8000d68 <HAL_UART_MspInit+0xe8>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d157      	bne.n	8000d60 <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cb0:	f04f 0202 	mov.w	r2, #2
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000cc0:	2312      	movs	r3, #18
 8000cc2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 3;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000cd0:	23c0      	movs	r3, #192	; 0xc0
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000cd4:	2320      	movs	r3, #32
 8000cd6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000cd8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cdc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f003 fd5d 	bl	80047a8 <HAL_RCCEx_PeriphCLKConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <HAL_UART_MspInit+0x78>
    {
      Error_Handler();
 8000cf4:	f7ff ff4e 	bl	8000b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cf8:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <HAL_UART_MspInit+0xec>)
 8000cfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cfe:	4a1b      	ldr	r2, [pc, #108]	; (8000d6c <HAL_UART_MspInit+0xec>)
 8000d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d04:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_UART_MspInit+0xec>)
 8000d0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_UART_MspInit+0xec>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1c:	4a13      	ldr	r2, [pc, #76]	; (8000d6c <HAL_UART_MspInit+0xec>)
 8000d1e:	f043 0308 	orr.w	r3, r3, #8
 8000d22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HAL_UART_MspInit+0xec>)
 8000d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2c:	f003 0308 	and.w	r3, r3, #8
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d4e:	2307      	movs	r3, #7
 8000d50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <HAL_UART_MspInit+0xf0>)
 8000d5c:	f002 faec 	bl	8003338 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d60:	bf00      	nop
 8000d62:	37e8      	adds	r7, #232	; 0xe8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40004800 	.word	0x40004800
 8000d6c:	58024400 	.word	0x58024400
 8000d70:	58020c00 	.word	0x58020c00

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <NMI_Handler+0x4>

08000d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <HardFault_Handler+0x4>

08000d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <MemManage_Handler+0x4>

08000d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <BusFault_Handler+0x4>

08000d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <UsageFault_Handler+0x4>

08000d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc0:	f000 f8a8 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <DMA1_Stream0_IRQHandler+0x10>)
 8000dce:	f000 fd39 	bl	8001844 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	24066918 	.word	0x24066918

08000ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000de0:	f7ff fbf8 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000de6:	490d      	ldr	r1, [pc, #52]	; (8000e1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de8:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dfc:	4c0a      	ldr	r4, [pc, #40]	; (8000e28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f007 fc55 	bl	80086b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0e:	f7ff fc77 	bl	8000700 <main>
  bx  lr
 8000e12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e14:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e18:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e1c:	240668b0 	.word	0x240668b0
  ldr r2, =_sidata
 8000e20:	08008768 	.word	0x08008768
  ldr r2, =_sbss
 8000e24:	240668b0 	.word	0x240668b0
  ldr r4, =_ebss
 8000e28:	24066a28 	.word	0x24066a28

08000e2c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC3_IRQHandler>
	...

08000e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e36:	2003      	movs	r0, #3
 8000e38:	f000 f968 	bl	800110c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e3c:	f003 fade 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 8000e40:	4602      	mov	r2, r0
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_Init+0x68>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	0a1b      	lsrs	r3, r3, #8
 8000e48:	f003 030f 	and.w	r3, r3, #15
 8000e4c:	4913      	ldr	r1, [pc, #76]	; (8000e9c <HAL_Init+0x6c>)
 8000e4e:	5ccb      	ldrb	r3, [r1, r3]
 8000e50:	f003 031f 	and.w	r3, r3, #31
 8000e54:	fa22 f303 	lsr.w	r3, r2, r3
 8000e58:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_Init+0x68>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <HAL_Init+0x6c>)
 8000e64:	5cd3      	ldrb	r3, [r2, r3]
 8000e66:	f003 031f 	and.w	r3, r3, #31
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e70:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <HAL_Init+0x70>)
 8000e72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e74:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <HAL_Init+0x74>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f000 f814 	bl	8000ea8 <HAL_InitTick>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e002      	b.n	8000e90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8a:	f7ff fe89 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	58024400 	.word	0x58024400
 8000e9c:	08008718 	.word	0x08008718
 8000ea0:	24000004 	.word	0x24000004
 8000ea4:	24000000 	.word	0x24000000

08000ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_InitTick+0x60>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d101      	bne.n	8000ebc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e021      	b.n	8000f00 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_InitTick+0x64>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_InitTick+0x60>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f94d 	bl	8001172 <HAL_SYSTICK_Config>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00e      	b.n	8000f00 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d80a      	bhi.n	8000efe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f000 f917 	bl	8001122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef4:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <HAL_InitTick+0x68>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e000      	b.n	8000f00 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	240668ac 	.word	0x240668ac
 8000f0c:	24000000 	.word	0x24000000
 8000f10:	240668a8 	.word	0x240668a8

08000f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x20>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x24>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <HAL_IncTick+0x24>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	240668ac 	.word	0x240668ac
 8000f38:	24066a24 	.word	0x24066a24

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_GetTick+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	24066a24 	.word	0x24066a24

08000f54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <HAL_GetREVID+0x14>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	0c1b      	lsrs	r3, r3, #16
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	5c001000 	.word	0x5c001000

08000f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <__NVIC_SetPriorityGrouping+0x40>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	4313      	orrs	r3, r2
 8000f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9a:	4a04      	ldr	r2, [pc, #16]	; (8000fac <__NVIC_SetPriorityGrouping+0x40>)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	60d3      	str	r3, [r2, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00
 8000fb0:	05fa0000 	.word	0x05fa0000

08000fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <__NVIC_GetPriorityGrouping+0x18>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	f003 0307 	and.w	r3, r3, #7
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	db0b      	blt.n	8000ffa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	f003 021f 	and.w	r2, r3, #31
 8000fe8:	4907      	ldr	r1, [pc, #28]	; (8001008 <__NVIC_EnableIRQ+0x38>)
 8000fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fee:	095b      	lsrs	r3, r3, #5
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000e100 	.word	0xe000e100

0800100c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001018:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800101c:	2b00      	cmp	r3, #0
 800101e:	db0a      	blt.n	8001036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	b2da      	uxtb	r2, r3
 8001024:	490c      	ldr	r1, [pc, #48]	; (8001058 <__NVIC_SetPriority+0x4c>)
 8001026:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800102a:	0112      	lsls	r2, r2, #4
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	440b      	add	r3, r1
 8001030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001034:	e00a      	b.n	800104c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4908      	ldr	r1, [pc, #32]	; (800105c <__NVIC_SetPriority+0x50>)
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	3b04      	subs	r3, #4
 8001044:	0112      	lsls	r2, r2, #4
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	440b      	add	r3, r1
 800104a:	761a      	strb	r2, [r3, #24]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000e100 	.word	0xe000e100
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f1c3 0307 	rsb	r3, r3, #7
 800107a:	2b04      	cmp	r3, #4
 800107c:	bf28      	it	cs
 800107e:	2304      	movcs	r3, #4
 8001080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3304      	adds	r3, #4
 8001086:	2b06      	cmp	r3, #6
 8001088:	d902      	bls.n	8001090 <NVIC_EncodePriority+0x30>
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3b03      	subs	r3, #3
 800108e:	e000      	b.n	8001092 <NVIC_EncodePriority+0x32>
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 32ff 	mov.w	r2, #4294967295
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43da      	mvns	r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	401a      	ands	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	43d9      	mvns	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	4313      	orrs	r3, r2
         );
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3724      	adds	r7, #36	; 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d8:	d301      	bcc.n	80010de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010da:	2301      	movs	r3, #1
 80010dc:	e00f      	b.n	80010fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <SysTick_Config+0x40>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e6:	210f      	movs	r1, #15
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f7ff ff8e 	bl	800100c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <SysTick_Config+0x40>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <SysTick_Config+0x40>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	e000e010 	.word	0xe000e010

0800110c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff29 	bl	8000f6c <__NVIC_SetPriorityGrouping>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff40 	bl	8000fb4 <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff90 	bl	8001060 <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5f 	bl	800100c <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001160:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff33 	bl	8000fd0 <__NVIC_EnableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffa4 	bl	80010c8 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001194:	f7ff fed2 	bl	8000f3c <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d101      	bne.n	80011a4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e316      	b.n	80017d2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a66      	ldr	r2, [pc, #408]	; (8001344 <HAL_DMA_Init+0x1b8>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d04a      	beq.n	8001244 <HAL_DMA_Init+0xb8>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a65      	ldr	r2, [pc, #404]	; (8001348 <HAL_DMA_Init+0x1bc>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d045      	beq.n	8001244 <HAL_DMA_Init+0xb8>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a63      	ldr	r2, [pc, #396]	; (800134c <HAL_DMA_Init+0x1c0>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d040      	beq.n	8001244 <HAL_DMA_Init+0xb8>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a62      	ldr	r2, [pc, #392]	; (8001350 <HAL_DMA_Init+0x1c4>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d03b      	beq.n	8001244 <HAL_DMA_Init+0xb8>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a60      	ldr	r2, [pc, #384]	; (8001354 <HAL_DMA_Init+0x1c8>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d036      	beq.n	8001244 <HAL_DMA_Init+0xb8>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a5f      	ldr	r2, [pc, #380]	; (8001358 <HAL_DMA_Init+0x1cc>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d031      	beq.n	8001244 <HAL_DMA_Init+0xb8>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a5d      	ldr	r2, [pc, #372]	; (800135c <HAL_DMA_Init+0x1d0>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d02c      	beq.n	8001244 <HAL_DMA_Init+0xb8>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a5c      	ldr	r2, [pc, #368]	; (8001360 <HAL_DMA_Init+0x1d4>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d027      	beq.n	8001244 <HAL_DMA_Init+0xb8>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a5a      	ldr	r2, [pc, #360]	; (8001364 <HAL_DMA_Init+0x1d8>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d022      	beq.n	8001244 <HAL_DMA_Init+0xb8>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a59      	ldr	r2, [pc, #356]	; (8001368 <HAL_DMA_Init+0x1dc>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d01d      	beq.n	8001244 <HAL_DMA_Init+0xb8>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a57      	ldr	r2, [pc, #348]	; (800136c <HAL_DMA_Init+0x1e0>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d018      	beq.n	8001244 <HAL_DMA_Init+0xb8>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a56      	ldr	r2, [pc, #344]	; (8001370 <HAL_DMA_Init+0x1e4>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d013      	beq.n	8001244 <HAL_DMA_Init+0xb8>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a54      	ldr	r2, [pc, #336]	; (8001374 <HAL_DMA_Init+0x1e8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d00e      	beq.n	8001244 <HAL_DMA_Init+0xb8>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a53      	ldr	r2, [pc, #332]	; (8001378 <HAL_DMA_Init+0x1ec>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d009      	beq.n	8001244 <HAL_DMA_Init+0xb8>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a51      	ldr	r2, [pc, #324]	; (800137c <HAL_DMA_Init+0x1f0>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d004      	beq.n	8001244 <HAL_DMA_Init+0xb8>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a50      	ldr	r2, [pc, #320]	; (8001380 <HAL_DMA_Init+0x1f4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d101      	bne.n	8001248 <HAL_DMA_Init+0xbc>
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <HAL_DMA_Init+0xbe>
 8001248:	2300      	movs	r3, #0
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 813b 	beq.w	80014c6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2202      	movs	r2, #2
 8001254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a37      	ldr	r2, [pc, #220]	; (8001344 <HAL_DMA_Init+0x1b8>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d04a      	beq.n	8001300 <HAL_DMA_Init+0x174>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a36      	ldr	r2, [pc, #216]	; (8001348 <HAL_DMA_Init+0x1bc>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d045      	beq.n	8001300 <HAL_DMA_Init+0x174>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a34      	ldr	r2, [pc, #208]	; (800134c <HAL_DMA_Init+0x1c0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d040      	beq.n	8001300 <HAL_DMA_Init+0x174>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a33      	ldr	r2, [pc, #204]	; (8001350 <HAL_DMA_Init+0x1c4>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d03b      	beq.n	8001300 <HAL_DMA_Init+0x174>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a31      	ldr	r2, [pc, #196]	; (8001354 <HAL_DMA_Init+0x1c8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d036      	beq.n	8001300 <HAL_DMA_Init+0x174>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a30      	ldr	r2, [pc, #192]	; (8001358 <HAL_DMA_Init+0x1cc>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d031      	beq.n	8001300 <HAL_DMA_Init+0x174>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a2e      	ldr	r2, [pc, #184]	; (800135c <HAL_DMA_Init+0x1d0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d02c      	beq.n	8001300 <HAL_DMA_Init+0x174>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a2d      	ldr	r2, [pc, #180]	; (8001360 <HAL_DMA_Init+0x1d4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d027      	beq.n	8001300 <HAL_DMA_Init+0x174>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a2b      	ldr	r2, [pc, #172]	; (8001364 <HAL_DMA_Init+0x1d8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d022      	beq.n	8001300 <HAL_DMA_Init+0x174>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a2a      	ldr	r2, [pc, #168]	; (8001368 <HAL_DMA_Init+0x1dc>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d01d      	beq.n	8001300 <HAL_DMA_Init+0x174>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a28      	ldr	r2, [pc, #160]	; (800136c <HAL_DMA_Init+0x1e0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d018      	beq.n	8001300 <HAL_DMA_Init+0x174>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a27      	ldr	r2, [pc, #156]	; (8001370 <HAL_DMA_Init+0x1e4>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d013      	beq.n	8001300 <HAL_DMA_Init+0x174>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a25      	ldr	r2, [pc, #148]	; (8001374 <HAL_DMA_Init+0x1e8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d00e      	beq.n	8001300 <HAL_DMA_Init+0x174>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a24      	ldr	r2, [pc, #144]	; (8001378 <HAL_DMA_Init+0x1ec>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d009      	beq.n	8001300 <HAL_DMA_Init+0x174>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a22      	ldr	r2, [pc, #136]	; (800137c <HAL_DMA_Init+0x1f0>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d004      	beq.n	8001300 <HAL_DMA_Init+0x174>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a21      	ldr	r2, [pc, #132]	; (8001380 <HAL_DMA_Init+0x1f4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d108      	bne.n	8001312 <HAL_DMA_Init+0x186>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0201 	bic.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	e007      	b.n	8001322 <HAL_DMA_Init+0x196>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0201 	bic.w	r2, r2, #1
 8001320:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001322:	e02f      	b.n	8001384 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001324:	f7ff fe0a 	bl	8000f3c <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b05      	cmp	r3, #5
 8001330:	d928      	bls.n	8001384 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2220      	movs	r2, #32
 8001336:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2203      	movs	r2, #3
 800133c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e246      	b.n	80017d2 <HAL_DMA_Init+0x646>
 8001344:	40020010 	.word	0x40020010
 8001348:	40020028 	.word	0x40020028
 800134c:	40020040 	.word	0x40020040
 8001350:	40020058 	.word	0x40020058
 8001354:	40020070 	.word	0x40020070
 8001358:	40020088 	.word	0x40020088
 800135c:	400200a0 	.word	0x400200a0
 8001360:	400200b8 	.word	0x400200b8
 8001364:	40020410 	.word	0x40020410
 8001368:	40020428 	.word	0x40020428
 800136c:	40020440 	.word	0x40020440
 8001370:	40020458 	.word	0x40020458
 8001374:	40020470 	.word	0x40020470
 8001378:	40020488 	.word	0x40020488
 800137c:	400204a0 	.word	0x400204a0
 8001380:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1c8      	bne.n	8001324 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4b83      	ldr	r3, [pc, #524]	; (80015ac <HAL_DMA_Init+0x420>)
 800139e:	4013      	ands	r3, r2
 80013a0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80013aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	d107      	bne.n	80013e8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	4313      	orrs	r3, r2
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80013e8:	4b71      	ldr	r3, [pc, #452]	; (80015b0 <HAL_DMA_Init+0x424>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b71      	ldr	r3, [pc, #452]	; (80015b4 <HAL_DMA_Init+0x428>)
 80013ee:	4013      	ands	r3, r2
 80013f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013f4:	d328      	bcc.n	8001448 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b28      	cmp	r3, #40	; 0x28
 80013fc:	d903      	bls.n	8001406 <HAL_DMA_Init+0x27a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b2e      	cmp	r3, #46	; 0x2e
 8001404:	d917      	bls.n	8001436 <HAL_DMA_Init+0x2aa>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b3e      	cmp	r3, #62	; 0x3e
 800140c:	d903      	bls.n	8001416 <HAL_DMA_Init+0x28a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b42      	cmp	r3, #66	; 0x42
 8001414:	d90f      	bls.n	8001436 <HAL_DMA_Init+0x2aa>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b46      	cmp	r3, #70	; 0x46
 800141c:	d903      	bls.n	8001426 <HAL_DMA_Init+0x29a>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b48      	cmp	r3, #72	; 0x48
 8001424:	d907      	bls.n	8001436 <HAL_DMA_Init+0x2aa>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b4e      	cmp	r3, #78	; 0x4e
 800142c:	d905      	bls.n	800143a <HAL_DMA_Init+0x2ae>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b52      	cmp	r3, #82	; 0x52
 8001434:	d801      	bhi.n	800143a <HAL_DMA_Init+0x2ae>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <HAL_DMA_Init+0x2b0>
 800143a:	2300      	movs	r3, #0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001446:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f023 0307 	bic.w	r3, r3, #7
 800145e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	4313      	orrs	r3, r2
 8001468:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146e:	2b04      	cmp	r3, #4
 8001470:	d117      	bne.n	80014a2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4313      	orrs	r3, r2
 800147a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00e      	beq.n	80014a2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f001 f9b9 	bl	80027fc <DMA_CheckFifoParam>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d008      	beq.n	80014a2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2240      	movs	r2, #64	; 0x40
 8001494:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2201      	movs	r2, #1
 800149a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e197      	b.n	80017d2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f001 f8f4 	bl	8002698 <DMA_CalcBaseAndBitshift>
 80014b0:	4603      	mov	r3, r0
 80014b2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b8:	f003 031f 	and.w	r3, r3, #31
 80014bc:	223f      	movs	r2, #63	; 0x3f
 80014be:	409a      	lsls	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	e0cd      	b.n	8001662 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a3b      	ldr	r2, [pc, #236]	; (80015b8 <HAL_DMA_Init+0x42c>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d022      	beq.n	8001516 <HAL_DMA_Init+0x38a>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a39      	ldr	r2, [pc, #228]	; (80015bc <HAL_DMA_Init+0x430>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d01d      	beq.n	8001516 <HAL_DMA_Init+0x38a>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a38      	ldr	r2, [pc, #224]	; (80015c0 <HAL_DMA_Init+0x434>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d018      	beq.n	8001516 <HAL_DMA_Init+0x38a>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a36      	ldr	r2, [pc, #216]	; (80015c4 <HAL_DMA_Init+0x438>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d013      	beq.n	8001516 <HAL_DMA_Init+0x38a>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a35      	ldr	r2, [pc, #212]	; (80015c8 <HAL_DMA_Init+0x43c>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d00e      	beq.n	8001516 <HAL_DMA_Init+0x38a>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a33      	ldr	r2, [pc, #204]	; (80015cc <HAL_DMA_Init+0x440>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d009      	beq.n	8001516 <HAL_DMA_Init+0x38a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a32      	ldr	r2, [pc, #200]	; (80015d0 <HAL_DMA_Init+0x444>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d004      	beq.n	8001516 <HAL_DMA_Init+0x38a>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a30      	ldr	r2, [pc, #192]	; (80015d4 <HAL_DMA_Init+0x448>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d101      	bne.n	800151a <HAL_DMA_Init+0x38e>
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <HAL_DMA_Init+0x390>
 800151a:	2300      	movs	r3, #0
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 8097 	beq.w	8001650 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a24      	ldr	r2, [pc, #144]	; (80015b8 <HAL_DMA_Init+0x42c>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d021      	beq.n	8001570 <HAL_DMA_Init+0x3e4>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a22      	ldr	r2, [pc, #136]	; (80015bc <HAL_DMA_Init+0x430>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d01c      	beq.n	8001570 <HAL_DMA_Init+0x3e4>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a21      	ldr	r2, [pc, #132]	; (80015c0 <HAL_DMA_Init+0x434>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d017      	beq.n	8001570 <HAL_DMA_Init+0x3e4>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a1f      	ldr	r2, [pc, #124]	; (80015c4 <HAL_DMA_Init+0x438>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d012      	beq.n	8001570 <HAL_DMA_Init+0x3e4>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a1e      	ldr	r2, [pc, #120]	; (80015c8 <HAL_DMA_Init+0x43c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d00d      	beq.n	8001570 <HAL_DMA_Init+0x3e4>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a1c      	ldr	r2, [pc, #112]	; (80015cc <HAL_DMA_Init+0x440>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d008      	beq.n	8001570 <HAL_DMA_Init+0x3e4>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <HAL_DMA_Init+0x444>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d003      	beq.n	8001570 <HAL_DMA_Init+0x3e4>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a19      	ldr	r2, [pc, #100]	; (80015d4 <HAL_DMA_Init+0x448>)
 800156e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2202      	movs	r2, #2
 8001574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <HAL_DMA_Init+0x44c>)
 800158c:	4013      	ands	r3, r2
 800158e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b40      	cmp	r3, #64	; 0x40
 8001596:	d021      	beq.n	80015dc <HAL_DMA_Init+0x450>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b80      	cmp	r3, #128	; 0x80
 800159e:	d102      	bne.n	80015a6 <HAL_DMA_Init+0x41a>
 80015a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015a4:	e01b      	b.n	80015de <HAL_DMA_Init+0x452>
 80015a6:	2300      	movs	r3, #0
 80015a8:	e019      	b.n	80015de <HAL_DMA_Init+0x452>
 80015aa:	bf00      	nop
 80015ac:	fe10803f 	.word	0xfe10803f
 80015b0:	5c001000 	.word	0x5c001000
 80015b4:	ffff0000 	.word	0xffff0000
 80015b8:	58025408 	.word	0x58025408
 80015bc:	5802541c 	.word	0x5802541c
 80015c0:	58025430 	.word	0x58025430
 80015c4:	58025444 	.word	0x58025444
 80015c8:	58025458 	.word	0x58025458
 80015cc:	5802546c 	.word	0x5802546c
 80015d0:	58025480 	.word	0x58025480
 80015d4:	58025494 	.word	0x58025494
 80015d8:	fffe000f 	.word	0xfffe000f
 80015dc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68d2      	ldr	r2, [r2, #12]
 80015e2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80015e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80015ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80015f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80015fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001604:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800160c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	4313      	orrs	r3, r2
 8001612:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b6e      	ldr	r3, [pc, #440]	; (80017dc <HAL_DMA_Init+0x650>)
 8001624:	4413      	add	r3, r2
 8001626:	4a6e      	ldr	r2, [pc, #440]	; (80017e0 <HAL_DMA_Init+0x654>)
 8001628:	fba2 2303 	umull	r2, r3, r2, r3
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	009a      	lsls	r2, r3, #2
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f001 f82f 	bl	8002698 <DMA_CalcBaseAndBitshift>
 800163a:	4603      	mov	r3, r0
 800163c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001642:	f003 031f 	and.w	r3, r3, #31
 8001646:	2201      	movs	r2, #1
 8001648:	409a      	lsls	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	e008      	b.n	8001662 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2240      	movs	r2, #64	; 0x40
 8001654:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2203      	movs	r2, #3
 800165a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e0b7      	b.n	80017d2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a5f      	ldr	r2, [pc, #380]	; (80017e4 <HAL_DMA_Init+0x658>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d072      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a5d      	ldr	r2, [pc, #372]	; (80017e8 <HAL_DMA_Init+0x65c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d06d      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a5c      	ldr	r2, [pc, #368]	; (80017ec <HAL_DMA_Init+0x660>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d068      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a5a      	ldr	r2, [pc, #360]	; (80017f0 <HAL_DMA_Init+0x664>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d063      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a59      	ldr	r2, [pc, #356]	; (80017f4 <HAL_DMA_Init+0x668>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d05e      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a57      	ldr	r2, [pc, #348]	; (80017f8 <HAL_DMA_Init+0x66c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d059      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a56      	ldr	r2, [pc, #344]	; (80017fc <HAL_DMA_Init+0x670>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d054      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a54      	ldr	r2, [pc, #336]	; (8001800 <HAL_DMA_Init+0x674>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d04f      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a53      	ldr	r2, [pc, #332]	; (8001804 <HAL_DMA_Init+0x678>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d04a      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a51      	ldr	r2, [pc, #324]	; (8001808 <HAL_DMA_Init+0x67c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d045      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a50      	ldr	r2, [pc, #320]	; (800180c <HAL_DMA_Init+0x680>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d040      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a4e      	ldr	r2, [pc, #312]	; (8001810 <HAL_DMA_Init+0x684>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d03b      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a4d      	ldr	r2, [pc, #308]	; (8001814 <HAL_DMA_Init+0x688>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d036      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a4b      	ldr	r2, [pc, #300]	; (8001818 <HAL_DMA_Init+0x68c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d031      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a4a      	ldr	r2, [pc, #296]	; (800181c <HAL_DMA_Init+0x690>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d02c      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a48      	ldr	r2, [pc, #288]	; (8001820 <HAL_DMA_Init+0x694>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d027      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a47      	ldr	r2, [pc, #284]	; (8001824 <HAL_DMA_Init+0x698>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d022      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a45      	ldr	r2, [pc, #276]	; (8001828 <HAL_DMA_Init+0x69c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d01d      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a44      	ldr	r2, [pc, #272]	; (800182c <HAL_DMA_Init+0x6a0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d018      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a42      	ldr	r2, [pc, #264]	; (8001830 <HAL_DMA_Init+0x6a4>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d013      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a41      	ldr	r2, [pc, #260]	; (8001834 <HAL_DMA_Init+0x6a8>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d00e      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a3f      	ldr	r2, [pc, #252]	; (8001838 <HAL_DMA_Init+0x6ac>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d009      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a3e      	ldr	r2, [pc, #248]	; (800183c <HAL_DMA_Init+0x6b0>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d004      	beq.n	8001752 <HAL_DMA_Init+0x5c6>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a3c      	ldr	r2, [pc, #240]	; (8001840 <HAL_DMA_Init+0x6b4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_DMA_Init+0x5ca>
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <HAL_DMA_Init+0x5cc>
 8001756:	2300      	movs	r3, #0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d032      	beq.n	80017c2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f001 f8c9 	bl	80028f4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b80      	cmp	r3, #128	; 0x80
 8001768:	d102      	bne.n	8001770 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001784:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d010      	beq.n	80017b0 <HAL_DMA_Init+0x624>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b08      	cmp	r3, #8
 8001794:	d80c      	bhi.n	80017b0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f001 f946 	bl	8002a28 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	e008      	b.n	80017c2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	a7fdabf8 	.word	0xa7fdabf8
 80017e0:	cccccccd 	.word	0xcccccccd
 80017e4:	40020010 	.word	0x40020010
 80017e8:	40020028 	.word	0x40020028
 80017ec:	40020040 	.word	0x40020040
 80017f0:	40020058 	.word	0x40020058
 80017f4:	40020070 	.word	0x40020070
 80017f8:	40020088 	.word	0x40020088
 80017fc:	400200a0 	.word	0x400200a0
 8001800:	400200b8 	.word	0x400200b8
 8001804:	40020410 	.word	0x40020410
 8001808:	40020428 	.word	0x40020428
 800180c:	40020440 	.word	0x40020440
 8001810:	40020458 	.word	0x40020458
 8001814:	40020470 	.word	0x40020470
 8001818:	40020488 	.word	0x40020488
 800181c:	400204a0 	.word	0x400204a0
 8001820:	400204b8 	.word	0x400204b8
 8001824:	58025408 	.word	0x58025408
 8001828:	5802541c 	.word	0x5802541c
 800182c:	58025430 	.word	0x58025430
 8001830:	58025444 	.word	0x58025444
 8001834:	58025458 	.word	0x58025458
 8001838:	5802546c 	.word	0x5802546c
 800183c:	58025480 	.word	0x58025480
 8001840:	58025494 	.word	0x58025494

08001844 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001850:	4b67      	ldr	r3, [pc, #412]	; (80019f0 <HAL_DMA_IRQHandler+0x1ac>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a67      	ldr	r2, [pc, #412]	; (80019f4 <HAL_DMA_IRQHandler+0x1b0>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	0a9b      	lsrs	r3, r3, #10
 800185c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001868:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a5f      	ldr	r2, [pc, #380]	; (80019f8 <HAL_DMA_IRQHandler+0x1b4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d04a      	beq.n	8001916 <HAL_DMA_IRQHandler+0xd2>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a5d      	ldr	r2, [pc, #372]	; (80019fc <HAL_DMA_IRQHandler+0x1b8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d045      	beq.n	8001916 <HAL_DMA_IRQHandler+0xd2>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a5c      	ldr	r2, [pc, #368]	; (8001a00 <HAL_DMA_IRQHandler+0x1bc>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d040      	beq.n	8001916 <HAL_DMA_IRQHandler+0xd2>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a5a      	ldr	r2, [pc, #360]	; (8001a04 <HAL_DMA_IRQHandler+0x1c0>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d03b      	beq.n	8001916 <HAL_DMA_IRQHandler+0xd2>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a59      	ldr	r2, [pc, #356]	; (8001a08 <HAL_DMA_IRQHandler+0x1c4>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d036      	beq.n	8001916 <HAL_DMA_IRQHandler+0xd2>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a57      	ldr	r2, [pc, #348]	; (8001a0c <HAL_DMA_IRQHandler+0x1c8>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d031      	beq.n	8001916 <HAL_DMA_IRQHandler+0xd2>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a56      	ldr	r2, [pc, #344]	; (8001a10 <HAL_DMA_IRQHandler+0x1cc>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d02c      	beq.n	8001916 <HAL_DMA_IRQHandler+0xd2>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a54      	ldr	r2, [pc, #336]	; (8001a14 <HAL_DMA_IRQHandler+0x1d0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d027      	beq.n	8001916 <HAL_DMA_IRQHandler+0xd2>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a53      	ldr	r2, [pc, #332]	; (8001a18 <HAL_DMA_IRQHandler+0x1d4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d022      	beq.n	8001916 <HAL_DMA_IRQHandler+0xd2>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a51      	ldr	r2, [pc, #324]	; (8001a1c <HAL_DMA_IRQHandler+0x1d8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d01d      	beq.n	8001916 <HAL_DMA_IRQHandler+0xd2>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a50      	ldr	r2, [pc, #320]	; (8001a20 <HAL_DMA_IRQHandler+0x1dc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d018      	beq.n	8001916 <HAL_DMA_IRQHandler+0xd2>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a4e      	ldr	r2, [pc, #312]	; (8001a24 <HAL_DMA_IRQHandler+0x1e0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d013      	beq.n	8001916 <HAL_DMA_IRQHandler+0xd2>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a4d      	ldr	r2, [pc, #308]	; (8001a28 <HAL_DMA_IRQHandler+0x1e4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d00e      	beq.n	8001916 <HAL_DMA_IRQHandler+0xd2>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a4b      	ldr	r2, [pc, #300]	; (8001a2c <HAL_DMA_IRQHandler+0x1e8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d009      	beq.n	8001916 <HAL_DMA_IRQHandler+0xd2>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a4a      	ldr	r2, [pc, #296]	; (8001a30 <HAL_DMA_IRQHandler+0x1ec>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d004      	beq.n	8001916 <HAL_DMA_IRQHandler+0xd2>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a48      	ldr	r2, [pc, #288]	; (8001a34 <HAL_DMA_IRQHandler+0x1f0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d101      	bne.n	800191a <HAL_DMA_IRQHandler+0xd6>
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <HAL_DMA_IRQHandler+0xd8>
 800191a:	2300      	movs	r3, #0
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 842b 	beq.w	8002178 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001926:	f003 031f 	and.w	r3, r3, #31
 800192a:	2208      	movs	r2, #8
 800192c:	409a      	lsls	r2, r3
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 80a2 	beq.w	8001a7c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a2e      	ldr	r2, [pc, #184]	; (80019f8 <HAL_DMA_IRQHandler+0x1b4>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d04a      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x194>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a2d      	ldr	r2, [pc, #180]	; (80019fc <HAL_DMA_IRQHandler+0x1b8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d045      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x194>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a2b      	ldr	r2, [pc, #172]	; (8001a00 <HAL_DMA_IRQHandler+0x1bc>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d040      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x194>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a2a      	ldr	r2, [pc, #168]	; (8001a04 <HAL_DMA_IRQHandler+0x1c0>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d03b      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x194>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a28      	ldr	r2, [pc, #160]	; (8001a08 <HAL_DMA_IRQHandler+0x1c4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d036      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x194>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a27      	ldr	r2, [pc, #156]	; (8001a0c <HAL_DMA_IRQHandler+0x1c8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d031      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x194>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a25      	ldr	r2, [pc, #148]	; (8001a10 <HAL_DMA_IRQHandler+0x1cc>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d02c      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x194>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a24      	ldr	r2, [pc, #144]	; (8001a14 <HAL_DMA_IRQHandler+0x1d0>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d027      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x194>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a22      	ldr	r2, [pc, #136]	; (8001a18 <HAL_DMA_IRQHandler+0x1d4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d022      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x194>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a21      	ldr	r2, [pc, #132]	; (8001a1c <HAL_DMA_IRQHandler+0x1d8>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d01d      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x194>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a1f      	ldr	r2, [pc, #124]	; (8001a20 <HAL_DMA_IRQHandler+0x1dc>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d018      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x194>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a1e      	ldr	r2, [pc, #120]	; (8001a24 <HAL_DMA_IRQHandler+0x1e0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d013      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x194>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1c      	ldr	r2, [pc, #112]	; (8001a28 <HAL_DMA_IRQHandler+0x1e4>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d00e      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x194>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a1b      	ldr	r2, [pc, #108]	; (8001a2c <HAL_DMA_IRQHandler+0x1e8>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d009      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x194>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a19      	ldr	r2, [pc, #100]	; (8001a30 <HAL_DMA_IRQHandler+0x1ec>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d004      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x194>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a18      	ldr	r2, [pc, #96]	; (8001a34 <HAL_DMA_IRQHandler+0x1f0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d12f      	bne.n	8001a38 <HAL_DMA_IRQHandler+0x1f4>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	bf14      	ite	ne
 80019e6:	2301      	movne	r3, #1
 80019e8:	2300      	moveq	r3, #0
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	e02e      	b.n	8001a4c <HAL_DMA_IRQHandler+0x208>
 80019ee:	bf00      	nop
 80019f0:	24000000 	.word	0x24000000
 80019f4:	1b4e81b5 	.word	0x1b4e81b5
 80019f8:	40020010 	.word	0x40020010
 80019fc:	40020028 	.word	0x40020028
 8001a00:	40020040 	.word	0x40020040
 8001a04:	40020058 	.word	0x40020058
 8001a08:	40020070 	.word	0x40020070
 8001a0c:	40020088 	.word	0x40020088
 8001a10:	400200a0 	.word	0x400200a0
 8001a14:	400200b8 	.word	0x400200b8
 8001a18:	40020410 	.word	0x40020410
 8001a1c:	40020428 	.word	0x40020428
 8001a20:	40020440 	.word	0x40020440
 8001a24:	40020458 	.word	0x40020458
 8001a28:	40020470 	.word	0x40020470
 8001a2c:	40020488 	.word	0x40020488
 8001a30:	400204a0 	.word	0x400204a0
 8001a34:	400204b8 	.word	0x400204b8
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	bf14      	ite	ne
 8001a46:	2301      	movne	r3, #1
 8001a48:	2300      	moveq	r3, #0
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d015      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0204 	bic.w	r2, r2, #4
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a64:	f003 031f 	and.w	r3, r3, #31
 8001a68:	2208      	movs	r2, #8
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a74:	f043 0201 	orr.w	r2, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d06e      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a69      	ldr	r2, [pc, #420]	; (8001c3c <HAL_DMA_IRQHandler+0x3f8>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d04a      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x2ee>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a67      	ldr	r2, [pc, #412]	; (8001c40 <HAL_DMA_IRQHandler+0x3fc>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d045      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x2ee>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a66      	ldr	r2, [pc, #408]	; (8001c44 <HAL_DMA_IRQHandler+0x400>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d040      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x2ee>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a64      	ldr	r2, [pc, #400]	; (8001c48 <HAL_DMA_IRQHandler+0x404>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d03b      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x2ee>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a63      	ldr	r2, [pc, #396]	; (8001c4c <HAL_DMA_IRQHandler+0x408>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d036      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x2ee>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a61      	ldr	r2, [pc, #388]	; (8001c50 <HAL_DMA_IRQHandler+0x40c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d031      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x2ee>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a60      	ldr	r2, [pc, #384]	; (8001c54 <HAL_DMA_IRQHandler+0x410>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d02c      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x2ee>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a5e      	ldr	r2, [pc, #376]	; (8001c58 <HAL_DMA_IRQHandler+0x414>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d027      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x2ee>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a5d      	ldr	r2, [pc, #372]	; (8001c5c <HAL_DMA_IRQHandler+0x418>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d022      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x2ee>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a5b      	ldr	r2, [pc, #364]	; (8001c60 <HAL_DMA_IRQHandler+0x41c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d01d      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x2ee>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a5a      	ldr	r2, [pc, #360]	; (8001c64 <HAL_DMA_IRQHandler+0x420>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d018      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x2ee>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a58      	ldr	r2, [pc, #352]	; (8001c68 <HAL_DMA_IRQHandler+0x424>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d013      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x2ee>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a57      	ldr	r2, [pc, #348]	; (8001c6c <HAL_DMA_IRQHandler+0x428>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d00e      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x2ee>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a55      	ldr	r2, [pc, #340]	; (8001c70 <HAL_DMA_IRQHandler+0x42c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d009      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x2ee>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a54      	ldr	r2, [pc, #336]	; (8001c74 <HAL_DMA_IRQHandler+0x430>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d004      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x2ee>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a52      	ldr	r2, [pc, #328]	; (8001c78 <HAL_DMA_IRQHandler+0x434>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d10a      	bne.n	8001b48 <HAL_DMA_IRQHandler+0x304>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	bf14      	ite	ne
 8001b40:	2301      	movne	r3, #1
 8001b42:	2300      	moveq	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	e003      	b.n	8001b50 <HAL_DMA_IRQHandler+0x30c>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00d      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b68:	f043 0202 	orr.w	r2, r3, #2
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	2204      	movs	r2, #4
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 808f 	beq.w	8001ca4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a2c      	ldr	r2, [pc, #176]	; (8001c3c <HAL_DMA_IRQHandler+0x3f8>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d04a      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x3e2>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a2a      	ldr	r2, [pc, #168]	; (8001c40 <HAL_DMA_IRQHandler+0x3fc>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d045      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x3e2>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a29      	ldr	r2, [pc, #164]	; (8001c44 <HAL_DMA_IRQHandler+0x400>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d040      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x3e2>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a27      	ldr	r2, [pc, #156]	; (8001c48 <HAL_DMA_IRQHandler+0x404>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d03b      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x3e2>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a26      	ldr	r2, [pc, #152]	; (8001c4c <HAL_DMA_IRQHandler+0x408>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d036      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x3e2>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a24      	ldr	r2, [pc, #144]	; (8001c50 <HAL_DMA_IRQHandler+0x40c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d031      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x3e2>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <HAL_DMA_IRQHandler+0x410>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d02c      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x3e2>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a21      	ldr	r2, [pc, #132]	; (8001c58 <HAL_DMA_IRQHandler+0x414>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d027      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x3e2>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a20      	ldr	r2, [pc, #128]	; (8001c5c <HAL_DMA_IRQHandler+0x418>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d022      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x3e2>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1e      	ldr	r2, [pc, #120]	; (8001c60 <HAL_DMA_IRQHandler+0x41c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d01d      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x3e2>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1d      	ldr	r2, [pc, #116]	; (8001c64 <HAL_DMA_IRQHandler+0x420>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d018      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x3e2>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <HAL_DMA_IRQHandler+0x424>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d013      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x3e2>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a1a      	ldr	r2, [pc, #104]	; (8001c6c <HAL_DMA_IRQHandler+0x428>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d00e      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x3e2>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a18      	ldr	r2, [pc, #96]	; (8001c70 <HAL_DMA_IRQHandler+0x42c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d009      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x3e2>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <HAL_DMA_IRQHandler+0x430>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d004      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x3e2>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a15      	ldr	r2, [pc, #84]	; (8001c78 <HAL_DMA_IRQHandler+0x434>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d12a      	bne.n	8001c7c <HAL_DMA_IRQHandler+0x438>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	bf14      	ite	ne
 8001c34:	2301      	movne	r3, #1
 8001c36:	2300      	moveq	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	e023      	b.n	8001c84 <HAL_DMA_IRQHandler+0x440>
 8001c3c:	40020010 	.word	0x40020010
 8001c40:	40020028 	.word	0x40020028
 8001c44:	40020040 	.word	0x40020040
 8001c48:	40020058 	.word	0x40020058
 8001c4c:	40020070 	.word	0x40020070
 8001c50:	40020088 	.word	0x40020088
 8001c54:	400200a0 	.word	0x400200a0
 8001c58:	400200b8 	.word	0x400200b8
 8001c5c:	40020410 	.word	0x40020410
 8001c60:	40020428 	.word	0x40020428
 8001c64:	40020440 	.word	0x40020440
 8001c68:	40020458 	.word	0x40020458
 8001c6c:	40020470 	.word	0x40020470
 8001c70:	40020488 	.word	0x40020488
 8001c74:	400204a0 	.word	0x400204a0
 8001c78:	400204b8 	.word	0x400204b8
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2300      	movs	r3, #0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00d      	beq.n	8001ca4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	2204      	movs	r2, #4
 8001c92:	409a      	lsls	r2, r3
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9c:	f043 0204 	orr.w	r2, r3, #4
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	2210      	movs	r2, #16
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80a6 	beq.w	8001e06 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a85      	ldr	r2, [pc, #532]	; (8001ed4 <HAL_DMA_IRQHandler+0x690>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d04a      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x516>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a83      	ldr	r2, [pc, #524]	; (8001ed8 <HAL_DMA_IRQHandler+0x694>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d045      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x516>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a82      	ldr	r2, [pc, #520]	; (8001edc <HAL_DMA_IRQHandler+0x698>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d040      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x516>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a80      	ldr	r2, [pc, #512]	; (8001ee0 <HAL_DMA_IRQHandler+0x69c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d03b      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x516>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a7f      	ldr	r2, [pc, #508]	; (8001ee4 <HAL_DMA_IRQHandler+0x6a0>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d036      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x516>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a7d      	ldr	r2, [pc, #500]	; (8001ee8 <HAL_DMA_IRQHandler+0x6a4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d031      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x516>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a7c      	ldr	r2, [pc, #496]	; (8001eec <HAL_DMA_IRQHandler+0x6a8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d02c      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x516>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a7a      	ldr	r2, [pc, #488]	; (8001ef0 <HAL_DMA_IRQHandler+0x6ac>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d027      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x516>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a79      	ldr	r2, [pc, #484]	; (8001ef4 <HAL_DMA_IRQHandler+0x6b0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d022      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x516>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a77      	ldr	r2, [pc, #476]	; (8001ef8 <HAL_DMA_IRQHandler+0x6b4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d01d      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x516>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a76      	ldr	r2, [pc, #472]	; (8001efc <HAL_DMA_IRQHandler+0x6b8>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d018      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x516>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a74      	ldr	r2, [pc, #464]	; (8001f00 <HAL_DMA_IRQHandler+0x6bc>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x516>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a73      	ldr	r2, [pc, #460]	; (8001f04 <HAL_DMA_IRQHandler+0x6c0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d00e      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x516>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a71      	ldr	r2, [pc, #452]	; (8001f08 <HAL_DMA_IRQHandler+0x6c4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d009      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x516>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a70      	ldr	r2, [pc, #448]	; (8001f0c <HAL_DMA_IRQHandler+0x6c8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d004      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x516>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a6e      	ldr	r2, [pc, #440]	; (8001f10 <HAL_DMA_IRQHandler+0x6cc>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10a      	bne.n	8001d70 <HAL_DMA_IRQHandler+0x52c>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	bf14      	ite	ne
 8001d68:	2301      	movne	r3, #1
 8001d6a:	2300      	moveq	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	e009      	b.n	8001d84 <HAL_DMA_IRQHandler+0x540>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	bf14      	ite	ne
 8001d7e:	2301      	movne	r3, #1
 8001d80:	2300      	moveq	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d03e      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8c:	f003 031f 	and.w	r3, r3, #31
 8001d90:	2210      	movs	r2, #16
 8001d92:	409a      	lsls	r2, r3
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d018      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d108      	bne.n	8001dc6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d024      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	4798      	blx	r3
 8001dc4:	e01f      	b.n	8001e06 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d01b      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	4798      	blx	r3
 8001dd6:	e016      	b.n	8001e06 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d107      	bne.n	8001df6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0208 	bic.w	r2, r2, #8
 8001df4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	2220      	movs	r2, #32
 8001e10:	409a      	lsls	r2, r3
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8110 	beq.w	800203c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a2c      	ldr	r2, [pc, #176]	; (8001ed4 <HAL_DMA_IRQHandler+0x690>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d04a      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x678>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a2b      	ldr	r2, [pc, #172]	; (8001ed8 <HAL_DMA_IRQHandler+0x694>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d045      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x678>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a29      	ldr	r2, [pc, #164]	; (8001edc <HAL_DMA_IRQHandler+0x698>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d040      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x678>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a28      	ldr	r2, [pc, #160]	; (8001ee0 <HAL_DMA_IRQHandler+0x69c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d03b      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x678>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a26      	ldr	r2, [pc, #152]	; (8001ee4 <HAL_DMA_IRQHandler+0x6a0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d036      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x678>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a25      	ldr	r2, [pc, #148]	; (8001ee8 <HAL_DMA_IRQHandler+0x6a4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d031      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x678>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a23      	ldr	r2, [pc, #140]	; (8001eec <HAL_DMA_IRQHandler+0x6a8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d02c      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x678>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a22      	ldr	r2, [pc, #136]	; (8001ef0 <HAL_DMA_IRQHandler+0x6ac>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d027      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x678>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a20      	ldr	r2, [pc, #128]	; (8001ef4 <HAL_DMA_IRQHandler+0x6b0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d022      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x678>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1f      	ldr	r2, [pc, #124]	; (8001ef8 <HAL_DMA_IRQHandler+0x6b4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d01d      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x678>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <HAL_DMA_IRQHandler+0x6b8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d018      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x678>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_DMA_IRQHandler+0x6bc>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d013      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x678>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1a      	ldr	r2, [pc, #104]	; (8001f04 <HAL_DMA_IRQHandler+0x6c0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00e      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x678>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_DMA_IRQHandler+0x6c4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d009      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x678>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <HAL_DMA_IRQHandler+0x6c8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d004      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x678>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <HAL_DMA_IRQHandler+0x6cc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d12b      	bne.n	8001f14 <HAL_DMA_IRQHandler+0x6d0>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	bf14      	ite	ne
 8001eca:	2301      	movne	r3, #1
 8001ecc:	2300      	moveq	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	e02a      	b.n	8001f28 <HAL_DMA_IRQHandler+0x6e4>
 8001ed2:	bf00      	nop
 8001ed4:	40020010 	.word	0x40020010
 8001ed8:	40020028 	.word	0x40020028
 8001edc:	40020040 	.word	0x40020040
 8001ee0:	40020058 	.word	0x40020058
 8001ee4:	40020070 	.word	0x40020070
 8001ee8:	40020088 	.word	0x40020088
 8001eec:	400200a0 	.word	0x400200a0
 8001ef0:	400200b8 	.word	0x400200b8
 8001ef4:	40020410 	.word	0x40020410
 8001ef8:	40020428 	.word	0x40020428
 8001efc:	40020440 	.word	0x40020440
 8001f00:	40020458 	.word	0x40020458
 8001f04:	40020470 	.word	0x40020470
 8001f08:	40020488 	.word	0x40020488
 8001f0c:	400204a0 	.word	0x400204a0
 8001f10:	400204b8 	.word	0x400204b8
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	bf14      	ite	ne
 8001f22:	2301      	movne	r3, #1
 8001f24:	2300      	moveq	r3, #0
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 8087 	beq.w	800203c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	2220      	movs	r2, #32
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d139      	bne.n	8001fbe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0216 	bic.w	r2, r2, #22
 8001f58:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695a      	ldr	r2, [r3, #20]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f68:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d103      	bne.n	8001f7a <HAL_DMA_IRQHandler+0x736>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d007      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0208 	bic.w	r2, r2, #8
 8001f88:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8e:	f003 031f 	and.w	r3, r3, #31
 8001f92:	223f      	movs	r2, #63	; 0x3f
 8001f94:	409a      	lsls	r2, r3
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 834a 	beq.w	8002648 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	4798      	blx	r3
          }
          return;
 8001fbc:	e344      	b.n	8002648 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d018      	beq.n	8001ffe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d108      	bne.n	8001fec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d02c      	beq.n	800203c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	4798      	blx	r3
 8001fea:	e027      	b.n	800203c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d023      	beq.n	800203c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
 8001ffc:	e01e      	b.n	800203c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10f      	bne.n	800202c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0210 	bic.w	r2, r2, #16
 800201a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 8306 	beq.w	8002652 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 8088 	beq.w	8002164 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2204      	movs	r2, #4
 8002058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a7a      	ldr	r2, [pc, #488]	; (800224c <HAL_DMA_IRQHandler+0xa08>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d04a      	beq.n	80020fc <HAL_DMA_IRQHandler+0x8b8>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a79      	ldr	r2, [pc, #484]	; (8002250 <HAL_DMA_IRQHandler+0xa0c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d045      	beq.n	80020fc <HAL_DMA_IRQHandler+0x8b8>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a77      	ldr	r2, [pc, #476]	; (8002254 <HAL_DMA_IRQHandler+0xa10>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d040      	beq.n	80020fc <HAL_DMA_IRQHandler+0x8b8>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a76      	ldr	r2, [pc, #472]	; (8002258 <HAL_DMA_IRQHandler+0xa14>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d03b      	beq.n	80020fc <HAL_DMA_IRQHandler+0x8b8>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a74      	ldr	r2, [pc, #464]	; (800225c <HAL_DMA_IRQHandler+0xa18>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d036      	beq.n	80020fc <HAL_DMA_IRQHandler+0x8b8>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a73      	ldr	r2, [pc, #460]	; (8002260 <HAL_DMA_IRQHandler+0xa1c>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d031      	beq.n	80020fc <HAL_DMA_IRQHandler+0x8b8>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a71      	ldr	r2, [pc, #452]	; (8002264 <HAL_DMA_IRQHandler+0xa20>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d02c      	beq.n	80020fc <HAL_DMA_IRQHandler+0x8b8>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a70      	ldr	r2, [pc, #448]	; (8002268 <HAL_DMA_IRQHandler+0xa24>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d027      	beq.n	80020fc <HAL_DMA_IRQHandler+0x8b8>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a6e      	ldr	r2, [pc, #440]	; (800226c <HAL_DMA_IRQHandler+0xa28>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d022      	beq.n	80020fc <HAL_DMA_IRQHandler+0x8b8>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6d      	ldr	r2, [pc, #436]	; (8002270 <HAL_DMA_IRQHandler+0xa2c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d01d      	beq.n	80020fc <HAL_DMA_IRQHandler+0x8b8>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a6b      	ldr	r2, [pc, #428]	; (8002274 <HAL_DMA_IRQHandler+0xa30>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d018      	beq.n	80020fc <HAL_DMA_IRQHandler+0x8b8>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a6a      	ldr	r2, [pc, #424]	; (8002278 <HAL_DMA_IRQHandler+0xa34>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d013      	beq.n	80020fc <HAL_DMA_IRQHandler+0x8b8>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a68      	ldr	r2, [pc, #416]	; (800227c <HAL_DMA_IRQHandler+0xa38>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00e      	beq.n	80020fc <HAL_DMA_IRQHandler+0x8b8>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a67      	ldr	r2, [pc, #412]	; (8002280 <HAL_DMA_IRQHandler+0xa3c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d009      	beq.n	80020fc <HAL_DMA_IRQHandler+0x8b8>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a65      	ldr	r2, [pc, #404]	; (8002284 <HAL_DMA_IRQHandler+0xa40>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d004      	beq.n	80020fc <HAL_DMA_IRQHandler+0x8b8>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a64      	ldr	r2, [pc, #400]	; (8002288 <HAL_DMA_IRQHandler+0xa44>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d108      	bne.n	800210e <HAL_DMA_IRQHandler+0x8ca>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0201 	bic.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	e007      	b.n	800211e <HAL_DMA_IRQHandler+0x8da>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0201 	bic.w	r2, r2, #1
 800211c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	3301      	adds	r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002126:	429a      	cmp	r2, r3
 8002128:	d307      	bcc.n	800213a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f2      	bne.n	800211e <HAL_DMA_IRQHandler+0x8da>
 8002138:	e000      	b.n	800213c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800213a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d004      	beq.n	8002154 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2203      	movs	r2, #3
 800214e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002152:	e003      	b.n	800215c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 8272 	beq.w	8002652 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	4798      	blx	r3
 8002176:	e26c      	b.n	8002652 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a43      	ldr	r2, [pc, #268]	; (800228c <HAL_DMA_IRQHandler+0xa48>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d022      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x984>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a42      	ldr	r2, [pc, #264]	; (8002290 <HAL_DMA_IRQHandler+0xa4c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d01d      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x984>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a40      	ldr	r2, [pc, #256]	; (8002294 <HAL_DMA_IRQHandler+0xa50>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d018      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x984>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a3f      	ldr	r2, [pc, #252]	; (8002298 <HAL_DMA_IRQHandler+0xa54>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d013      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x984>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a3d      	ldr	r2, [pc, #244]	; (800229c <HAL_DMA_IRQHandler+0xa58>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00e      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x984>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a3c      	ldr	r2, [pc, #240]	; (80022a0 <HAL_DMA_IRQHandler+0xa5c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d009      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x984>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a3a      	ldr	r2, [pc, #232]	; (80022a4 <HAL_DMA_IRQHandler+0xa60>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d004      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x984>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a39      	ldr	r2, [pc, #228]	; (80022a8 <HAL_DMA_IRQHandler+0xa64>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d101      	bne.n	80021cc <HAL_DMA_IRQHandler+0x988>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <HAL_DMA_IRQHandler+0x98a>
 80021cc:	2300      	movs	r3, #0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 823f 	beq.w	8002652 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	2204      	movs	r2, #4
 80021e6:	409a      	lsls	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80cd 	beq.w	800238c <HAL_DMA_IRQHandler+0xb48>
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80c7 	beq.w	800238c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	2204      	movs	r2, #4
 8002208:	409a      	lsls	r2, r3
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d049      	beq.n	80022ac <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 8210 	beq.w	800264c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002234:	e20a      	b.n	800264c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8206 	beq.w	800264c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002248:	e200      	b.n	800264c <HAL_DMA_IRQHandler+0xe08>
 800224a:	bf00      	nop
 800224c:	40020010 	.word	0x40020010
 8002250:	40020028 	.word	0x40020028
 8002254:	40020040 	.word	0x40020040
 8002258:	40020058 	.word	0x40020058
 800225c:	40020070 	.word	0x40020070
 8002260:	40020088 	.word	0x40020088
 8002264:	400200a0 	.word	0x400200a0
 8002268:	400200b8 	.word	0x400200b8
 800226c:	40020410 	.word	0x40020410
 8002270:	40020428 	.word	0x40020428
 8002274:	40020440 	.word	0x40020440
 8002278:	40020458 	.word	0x40020458
 800227c:	40020470 	.word	0x40020470
 8002280:	40020488 	.word	0x40020488
 8002284:	400204a0 	.word	0x400204a0
 8002288:	400204b8 	.word	0x400204b8
 800228c:	58025408 	.word	0x58025408
 8002290:	5802541c 	.word	0x5802541c
 8002294:	58025430 	.word	0x58025430
 8002298:	58025444 	.word	0x58025444
 800229c:	58025458 	.word	0x58025458
 80022a0:	5802546c 	.word	0x5802546c
 80022a4:	58025480 	.word	0x58025480
 80022a8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	f003 0320 	and.w	r3, r3, #32
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d160      	bne.n	8002378 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a7f      	ldr	r2, [pc, #508]	; (80024b8 <HAL_DMA_IRQHandler+0xc74>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d04a      	beq.n	8002356 <HAL_DMA_IRQHandler+0xb12>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a7d      	ldr	r2, [pc, #500]	; (80024bc <HAL_DMA_IRQHandler+0xc78>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d045      	beq.n	8002356 <HAL_DMA_IRQHandler+0xb12>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a7c      	ldr	r2, [pc, #496]	; (80024c0 <HAL_DMA_IRQHandler+0xc7c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d040      	beq.n	8002356 <HAL_DMA_IRQHandler+0xb12>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a7a      	ldr	r2, [pc, #488]	; (80024c4 <HAL_DMA_IRQHandler+0xc80>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d03b      	beq.n	8002356 <HAL_DMA_IRQHandler+0xb12>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a79      	ldr	r2, [pc, #484]	; (80024c8 <HAL_DMA_IRQHandler+0xc84>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d036      	beq.n	8002356 <HAL_DMA_IRQHandler+0xb12>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a77      	ldr	r2, [pc, #476]	; (80024cc <HAL_DMA_IRQHandler+0xc88>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d031      	beq.n	8002356 <HAL_DMA_IRQHandler+0xb12>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a76      	ldr	r2, [pc, #472]	; (80024d0 <HAL_DMA_IRQHandler+0xc8c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d02c      	beq.n	8002356 <HAL_DMA_IRQHandler+0xb12>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a74      	ldr	r2, [pc, #464]	; (80024d4 <HAL_DMA_IRQHandler+0xc90>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d027      	beq.n	8002356 <HAL_DMA_IRQHandler+0xb12>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a73      	ldr	r2, [pc, #460]	; (80024d8 <HAL_DMA_IRQHandler+0xc94>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d022      	beq.n	8002356 <HAL_DMA_IRQHandler+0xb12>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a71      	ldr	r2, [pc, #452]	; (80024dc <HAL_DMA_IRQHandler+0xc98>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d01d      	beq.n	8002356 <HAL_DMA_IRQHandler+0xb12>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a70      	ldr	r2, [pc, #448]	; (80024e0 <HAL_DMA_IRQHandler+0xc9c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d018      	beq.n	8002356 <HAL_DMA_IRQHandler+0xb12>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a6e      	ldr	r2, [pc, #440]	; (80024e4 <HAL_DMA_IRQHandler+0xca0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d013      	beq.n	8002356 <HAL_DMA_IRQHandler+0xb12>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a6d      	ldr	r2, [pc, #436]	; (80024e8 <HAL_DMA_IRQHandler+0xca4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d00e      	beq.n	8002356 <HAL_DMA_IRQHandler+0xb12>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a6b      	ldr	r2, [pc, #428]	; (80024ec <HAL_DMA_IRQHandler+0xca8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d009      	beq.n	8002356 <HAL_DMA_IRQHandler+0xb12>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a6a      	ldr	r2, [pc, #424]	; (80024f0 <HAL_DMA_IRQHandler+0xcac>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d004      	beq.n	8002356 <HAL_DMA_IRQHandler+0xb12>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a68      	ldr	r2, [pc, #416]	; (80024f4 <HAL_DMA_IRQHandler+0xcb0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d108      	bne.n	8002368 <HAL_DMA_IRQHandler+0xb24>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0208 	bic.w	r2, r2, #8
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	e007      	b.n	8002378 <HAL_DMA_IRQHandler+0xb34>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0204 	bic.w	r2, r2, #4
 8002376:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 8165 	beq.w	800264c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800238a:	e15f      	b.n	800264c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002390:	f003 031f 	and.w	r3, r3, #31
 8002394:	2202      	movs	r2, #2
 8002396:	409a      	lsls	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	4013      	ands	r3, r2
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 80c5 	beq.w	800252c <HAL_DMA_IRQHandler+0xce8>
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80bf 	beq.w	800252c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	2202      	movs	r2, #2
 80023b8:	409a      	lsls	r2, r3
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d018      	beq.n	80023fa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 813a 	beq.w	8002650 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80023e4:	e134      	b.n	8002650 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8130 	beq.w	8002650 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80023f8:	e12a      	b.n	8002650 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b00      	cmp	r3, #0
 8002402:	f040 8089 	bne.w	8002518 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a2b      	ldr	r2, [pc, #172]	; (80024b8 <HAL_DMA_IRQHandler+0xc74>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d04a      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xc62>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a29      	ldr	r2, [pc, #164]	; (80024bc <HAL_DMA_IRQHandler+0xc78>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d045      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xc62>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a28      	ldr	r2, [pc, #160]	; (80024c0 <HAL_DMA_IRQHandler+0xc7c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d040      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xc62>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a26      	ldr	r2, [pc, #152]	; (80024c4 <HAL_DMA_IRQHandler+0xc80>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d03b      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xc62>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a25      	ldr	r2, [pc, #148]	; (80024c8 <HAL_DMA_IRQHandler+0xc84>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d036      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xc62>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a23      	ldr	r2, [pc, #140]	; (80024cc <HAL_DMA_IRQHandler+0xc88>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d031      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xc62>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a22      	ldr	r2, [pc, #136]	; (80024d0 <HAL_DMA_IRQHandler+0xc8c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d02c      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xc62>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a20      	ldr	r2, [pc, #128]	; (80024d4 <HAL_DMA_IRQHandler+0xc90>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d027      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xc62>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a1f      	ldr	r2, [pc, #124]	; (80024d8 <HAL_DMA_IRQHandler+0xc94>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d022      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xc62>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <HAL_DMA_IRQHandler+0xc98>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01d      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xc62>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <HAL_DMA_IRQHandler+0xc9c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d018      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xc62>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a1a      	ldr	r2, [pc, #104]	; (80024e4 <HAL_DMA_IRQHandler+0xca0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xc62>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a19      	ldr	r2, [pc, #100]	; (80024e8 <HAL_DMA_IRQHandler+0xca4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00e      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xc62>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a17      	ldr	r2, [pc, #92]	; (80024ec <HAL_DMA_IRQHandler+0xca8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d009      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xc62>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a16      	ldr	r2, [pc, #88]	; (80024f0 <HAL_DMA_IRQHandler+0xcac>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d004      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xc62>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <HAL_DMA_IRQHandler+0xcb0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d128      	bne.n	80024f8 <HAL_DMA_IRQHandler+0xcb4>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0214 	bic.w	r2, r2, #20
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e027      	b.n	8002508 <HAL_DMA_IRQHandler+0xcc4>
 80024b8:	40020010 	.word	0x40020010
 80024bc:	40020028 	.word	0x40020028
 80024c0:	40020040 	.word	0x40020040
 80024c4:	40020058 	.word	0x40020058
 80024c8:	40020070 	.word	0x40020070
 80024cc:	40020088 	.word	0x40020088
 80024d0:	400200a0 	.word	0x400200a0
 80024d4:	400200b8 	.word	0x400200b8
 80024d8:	40020410 	.word	0x40020410
 80024dc:	40020428 	.word	0x40020428
 80024e0:	40020440 	.word	0x40020440
 80024e4:	40020458 	.word	0x40020458
 80024e8:	40020470 	.word	0x40020470
 80024ec:	40020488 	.word	0x40020488
 80024f0:	400204a0 	.word	0x400204a0
 80024f4:	400204b8 	.word	0x400204b8
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 020a 	bic.w	r2, r2, #10
 8002506:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 8097 	beq.w	8002650 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800252a:	e091      	b.n	8002650 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002530:	f003 031f 	and.w	r3, r3, #31
 8002534:	2208      	movs	r2, #8
 8002536:	409a      	lsls	r2, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	4013      	ands	r3, r2
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 8088 	beq.w	8002652 <HAL_DMA_IRQHandler+0xe0e>
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 8082 	beq.w	8002652 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a41      	ldr	r2, [pc, #260]	; (8002658 <HAL_DMA_IRQHandler+0xe14>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d04a      	beq.n	80025ee <HAL_DMA_IRQHandler+0xdaa>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a3f      	ldr	r2, [pc, #252]	; (800265c <HAL_DMA_IRQHandler+0xe18>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d045      	beq.n	80025ee <HAL_DMA_IRQHandler+0xdaa>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a3e      	ldr	r2, [pc, #248]	; (8002660 <HAL_DMA_IRQHandler+0xe1c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d040      	beq.n	80025ee <HAL_DMA_IRQHandler+0xdaa>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a3c      	ldr	r2, [pc, #240]	; (8002664 <HAL_DMA_IRQHandler+0xe20>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d03b      	beq.n	80025ee <HAL_DMA_IRQHandler+0xdaa>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a3b      	ldr	r2, [pc, #236]	; (8002668 <HAL_DMA_IRQHandler+0xe24>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d036      	beq.n	80025ee <HAL_DMA_IRQHandler+0xdaa>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a39      	ldr	r2, [pc, #228]	; (800266c <HAL_DMA_IRQHandler+0xe28>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d031      	beq.n	80025ee <HAL_DMA_IRQHandler+0xdaa>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a38      	ldr	r2, [pc, #224]	; (8002670 <HAL_DMA_IRQHandler+0xe2c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d02c      	beq.n	80025ee <HAL_DMA_IRQHandler+0xdaa>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a36      	ldr	r2, [pc, #216]	; (8002674 <HAL_DMA_IRQHandler+0xe30>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d027      	beq.n	80025ee <HAL_DMA_IRQHandler+0xdaa>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a35      	ldr	r2, [pc, #212]	; (8002678 <HAL_DMA_IRQHandler+0xe34>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d022      	beq.n	80025ee <HAL_DMA_IRQHandler+0xdaa>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a33      	ldr	r2, [pc, #204]	; (800267c <HAL_DMA_IRQHandler+0xe38>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d01d      	beq.n	80025ee <HAL_DMA_IRQHandler+0xdaa>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a32      	ldr	r2, [pc, #200]	; (8002680 <HAL_DMA_IRQHandler+0xe3c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d018      	beq.n	80025ee <HAL_DMA_IRQHandler+0xdaa>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a30      	ldr	r2, [pc, #192]	; (8002684 <HAL_DMA_IRQHandler+0xe40>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d013      	beq.n	80025ee <HAL_DMA_IRQHandler+0xdaa>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a2f      	ldr	r2, [pc, #188]	; (8002688 <HAL_DMA_IRQHandler+0xe44>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00e      	beq.n	80025ee <HAL_DMA_IRQHandler+0xdaa>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a2d      	ldr	r2, [pc, #180]	; (800268c <HAL_DMA_IRQHandler+0xe48>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d009      	beq.n	80025ee <HAL_DMA_IRQHandler+0xdaa>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a2c      	ldr	r2, [pc, #176]	; (8002690 <HAL_DMA_IRQHandler+0xe4c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d004      	beq.n	80025ee <HAL_DMA_IRQHandler+0xdaa>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a2a      	ldr	r2, [pc, #168]	; (8002694 <HAL_DMA_IRQHandler+0xe50>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d108      	bne.n	8002600 <HAL_DMA_IRQHandler+0xdbc>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 021c 	bic.w	r2, r2, #28
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	e007      	b.n	8002610 <HAL_DMA_IRQHandler+0xdcc>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 020e 	bic.w	r2, r2, #14
 800260e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	2201      	movs	r2, #1
 800261a:	409a      	lsls	r2, r3
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	4798      	blx	r3
 8002646:	e004      	b.n	8002652 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002648:	bf00      	nop
 800264a:	e002      	b.n	8002652 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800264c:	bf00      	nop
 800264e:	e000      	b.n	8002652 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002650:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002652:	3728      	adds	r7, #40	; 0x28
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40020010 	.word	0x40020010
 800265c:	40020028 	.word	0x40020028
 8002660:	40020040 	.word	0x40020040
 8002664:	40020058 	.word	0x40020058
 8002668:	40020070 	.word	0x40020070
 800266c:	40020088 	.word	0x40020088
 8002670:	400200a0 	.word	0x400200a0
 8002674:	400200b8 	.word	0x400200b8
 8002678:	40020410 	.word	0x40020410
 800267c:	40020428 	.word	0x40020428
 8002680:	40020440 	.word	0x40020440
 8002684:	40020458 	.word	0x40020458
 8002688:	40020470 	.word	0x40020470
 800268c:	40020488 	.word	0x40020488
 8002690:	400204a0 	.word	0x400204a0
 8002694:	400204b8 	.word	0x400204b8

08002698 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a42      	ldr	r2, [pc, #264]	; (80027b0 <DMA_CalcBaseAndBitshift+0x118>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d04a      	beq.n	8002740 <DMA_CalcBaseAndBitshift+0xa8>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a41      	ldr	r2, [pc, #260]	; (80027b4 <DMA_CalcBaseAndBitshift+0x11c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d045      	beq.n	8002740 <DMA_CalcBaseAndBitshift+0xa8>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a3f      	ldr	r2, [pc, #252]	; (80027b8 <DMA_CalcBaseAndBitshift+0x120>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d040      	beq.n	8002740 <DMA_CalcBaseAndBitshift+0xa8>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a3e      	ldr	r2, [pc, #248]	; (80027bc <DMA_CalcBaseAndBitshift+0x124>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d03b      	beq.n	8002740 <DMA_CalcBaseAndBitshift+0xa8>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a3c      	ldr	r2, [pc, #240]	; (80027c0 <DMA_CalcBaseAndBitshift+0x128>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d036      	beq.n	8002740 <DMA_CalcBaseAndBitshift+0xa8>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a3b      	ldr	r2, [pc, #236]	; (80027c4 <DMA_CalcBaseAndBitshift+0x12c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d031      	beq.n	8002740 <DMA_CalcBaseAndBitshift+0xa8>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a39      	ldr	r2, [pc, #228]	; (80027c8 <DMA_CalcBaseAndBitshift+0x130>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d02c      	beq.n	8002740 <DMA_CalcBaseAndBitshift+0xa8>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a38      	ldr	r2, [pc, #224]	; (80027cc <DMA_CalcBaseAndBitshift+0x134>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d027      	beq.n	8002740 <DMA_CalcBaseAndBitshift+0xa8>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a36      	ldr	r2, [pc, #216]	; (80027d0 <DMA_CalcBaseAndBitshift+0x138>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d022      	beq.n	8002740 <DMA_CalcBaseAndBitshift+0xa8>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a35      	ldr	r2, [pc, #212]	; (80027d4 <DMA_CalcBaseAndBitshift+0x13c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d01d      	beq.n	8002740 <DMA_CalcBaseAndBitshift+0xa8>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a33      	ldr	r2, [pc, #204]	; (80027d8 <DMA_CalcBaseAndBitshift+0x140>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d018      	beq.n	8002740 <DMA_CalcBaseAndBitshift+0xa8>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a32      	ldr	r2, [pc, #200]	; (80027dc <DMA_CalcBaseAndBitshift+0x144>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d013      	beq.n	8002740 <DMA_CalcBaseAndBitshift+0xa8>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a30      	ldr	r2, [pc, #192]	; (80027e0 <DMA_CalcBaseAndBitshift+0x148>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00e      	beq.n	8002740 <DMA_CalcBaseAndBitshift+0xa8>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a2f      	ldr	r2, [pc, #188]	; (80027e4 <DMA_CalcBaseAndBitshift+0x14c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d009      	beq.n	8002740 <DMA_CalcBaseAndBitshift+0xa8>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a2d      	ldr	r2, [pc, #180]	; (80027e8 <DMA_CalcBaseAndBitshift+0x150>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d004      	beq.n	8002740 <DMA_CalcBaseAndBitshift+0xa8>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a2c      	ldr	r2, [pc, #176]	; (80027ec <DMA_CalcBaseAndBitshift+0x154>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d101      	bne.n	8002744 <DMA_CalcBaseAndBitshift+0xac>
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <DMA_CalcBaseAndBitshift+0xae>
 8002744:	2300      	movs	r3, #0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d024      	beq.n	8002794 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	3b10      	subs	r3, #16
 8002752:	4a27      	ldr	r2, [pc, #156]	; (80027f0 <DMA_CalcBaseAndBitshift+0x158>)
 8002754:	fba2 2303 	umull	r2, r3, r2, r3
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	4a24      	ldr	r2, [pc, #144]	; (80027f4 <DMA_CalcBaseAndBitshift+0x15c>)
 8002764:	5cd3      	ldrb	r3, [r2, r3]
 8002766:	461a      	mov	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b03      	cmp	r3, #3
 8002770:	d908      	bls.n	8002784 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	4b1f      	ldr	r3, [pc, #124]	; (80027f8 <DMA_CalcBaseAndBitshift+0x160>)
 800277a:	4013      	ands	r3, r2
 800277c:	1d1a      	adds	r2, r3, #4
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	659a      	str	r2, [r3, #88]	; 0x58
 8002782:	e00d      	b.n	80027a0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <DMA_CalcBaseAndBitshift+0x160>)
 800278c:	4013      	ands	r3, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6593      	str	r3, [r2, #88]	; 0x58
 8002792:	e005      	b.n	80027a0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	40020010 	.word	0x40020010
 80027b4:	40020028 	.word	0x40020028
 80027b8:	40020040 	.word	0x40020040
 80027bc:	40020058 	.word	0x40020058
 80027c0:	40020070 	.word	0x40020070
 80027c4:	40020088 	.word	0x40020088
 80027c8:	400200a0 	.word	0x400200a0
 80027cc:	400200b8 	.word	0x400200b8
 80027d0:	40020410 	.word	0x40020410
 80027d4:	40020428 	.word	0x40020428
 80027d8:	40020440 	.word	0x40020440
 80027dc:	40020458 	.word	0x40020458
 80027e0:	40020470 	.word	0x40020470
 80027e4:	40020488 	.word	0x40020488
 80027e8:	400204a0 	.word	0x400204a0
 80027ec:	400204b8 	.word	0x400204b8
 80027f0:	aaaaaaab 	.word	0xaaaaaaab
 80027f4:	08008728 	.word	0x08008728
 80027f8:	fffffc00 	.word	0xfffffc00

080027fc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002804:	2300      	movs	r3, #0
 8002806:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d120      	bne.n	8002852 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	2b03      	cmp	r3, #3
 8002816:	d858      	bhi.n	80028ca <DMA_CheckFifoParam+0xce>
 8002818:	a201      	add	r2, pc, #4	; (adr r2, 8002820 <DMA_CheckFifoParam+0x24>)
 800281a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281e:	bf00      	nop
 8002820:	08002831 	.word	0x08002831
 8002824:	08002843 	.word	0x08002843
 8002828:	08002831 	.word	0x08002831
 800282c:	080028cb 	.word	0x080028cb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d048      	beq.n	80028ce <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002840:	e045      	b.n	80028ce <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002846:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800284a:	d142      	bne.n	80028d2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002850:	e03f      	b.n	80028d2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800285a:	d123      	bne.n	80028a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	2b03      	cmp	r3, #3
 8002862:	d838      	bhi.n	80028d6 <DMA_CheckFifoParam+0xda>
 8002864:	a201      	add	r2, pc, #4	; (adr r2, 800286c <DMA_CheckFifoParam+0x70>)
 8002866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286a:	bf00      	nop
 800286c:	0800287d 	.word	0x0800287d
 8002870:	08002883 	.word	0x08002883
 8002874:	0800287d 	.word	0x0800287d
 8002878:	08002895 	.word	0x08002895
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
        break;
 8002880:	e030      	b.n	80028e4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d025      	beq.n	80028da <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002892:	e022      	b.n	80028da <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800289c:	d11f      	bne.n	80028de <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80028a2:	e01c      	b.n	80028de <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d902      	bls.n	80028b2 <DMA_CheckFifoParam+0xb6>
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d003      	beq.n	80028b8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80028b0:	e018      	b.n	80028e4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	73fb      	strb	r3, [r7, #15]
        break;
 80028b6:	e015      	b.n	80028e4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00e      	beq.n	80028e2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
    break;
 80028c8:	e00b      	b.n	80028e2 <DMA_CheckFifoParam+0xe6>
        break;
 80028ca:	bf00      	nop
 80028cc:	e00a      	b.n	80028e4 <DMA_CheckFifoParam+0xe8>
        break;
 80028ce:	bf00      	nop
 80028d0:	e008      	b.n	80028e4 <DMA_CheckFifoParam+0xe8>
        break;
 80028d2:	bf00      	nop
 80028d4:	e006      	b.n	80028e4 <DMA_CheckFifoParam+0xe8>
        break;
 80028d6:	bf00      	nop
 80028d8:	e004      	b.n	80028e4 <DMA_CheckFifoParam+0xe8>
        break;
 80028da:	bf00      	nop
 80028dc:	e002      	b.n	80028e4 <DMA_CheckFifoParam+0xe8>
        break;
 80028de:	bf00      	nop
 80028e0:	e000      	b.n	80028e4 <DMA_CheckFifoParam+0xe8>
    break;
 80028e2:	bf00      	nop
    }
  }

  return status;
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop

080028f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a38      	ldr	r2, [pc, #224]	; (80029e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d022      	beq.n	8002952 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a36      	ldr	r2, [pc, #216]	; (80029ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d01d      	beq.n	8002952 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a35      	ldr	r2, [pc, #212]	; (80029f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d018      	beq.n	8002952 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a33      	ldr	r2, [pc, #204]	; (80029f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d013      	beq.n	8002952 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a32      	ldr	r2, [pc, #200]	; (80029f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00e      	beq.n	8002952 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a30      	ldr	r2, [pc, #192]	; (80029fc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d009      	beq.n	8002952 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a2f      	ldr	r2, [pc, #188]	; (8002a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d004      	beq.n	8002952 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a2d      	ldr	r2, [pc, #180]	; (8002a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d101      	bne.n	8002956 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002956:	2300      	movs	r3, #0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d01a      	beq.n	8002992 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	3b08      	subs	r3, #8
 8002964:	4a28      	ldr	r2, [pc, #160]	; (8002a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	091b      	lsrs	r3, r3, #4
 800296c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	461a      	mov	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a24      	ldr	r2, [pc, #144]	; (8002a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002980:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	2201      	movs	r2, #1
 800298a:	409a      	lsls	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002990:	e024      	b.n	80029dc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	3b10      	subs	r3, #16
 800299a:	4a1e      	ldr	r2, [pc, #120]	; (8002a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4a1c      	ldr	r2, [pc, #112]	; (8002a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d806      	bhi.n	80029ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4a1b      	ldr	r2, [pc, #108]	; (8002a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d902      	bls.n	80029ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3308      	adds	r3, #8
 80029b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	461a      	mov	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a16      	ldr	r2, [pc, #88]	; (8002a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80029cc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	2201      	movs	r2, #1
 80029d6:	409a      	lsls	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	669a      	str	r2, [r3, #104]	; 0x68
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	58025408 	.word	0x58025408
 80029ec:	5802541c 	.word	0x5802541c
 80029f0:	58025430 	.word	0x58025430
 80029f4:	58025444 	.word	0x58025444
 80029f8:	58025458 	.word	0x58025458
 80029fc:	5802546c 	.word	0x5802546c
 8002a00:	58025480 	.word	0x58025480
 8002a04:	58025494 	.word	0x58025494
 8002a08:	cccccccd 	.word	0xcccccccd
 8002a0c:	16009600 	.word	0x16009600
 8002a10:	58025880 	.word	0x58025880
 8002a14:	aaaaaaab 	.word	0xaaaaaaab
 8002a18:	400204b8 	.word	0x400204b8
 8002a1c:	4002040f 	.word	0x4002040f
 8002a20:	10008200 	.word	0x10008200
 8002a24:	40020880 	.word	0x40020880

08002a28 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d04a      	beq.n	8002ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d847      	bhi.n	8002ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a25      	ldr	r2, [pc, #148]	; (8002ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d022      	beq.n	8002a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a24      	ldr	r2, [pc, #144]	; (8002ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d01d      	beq.n	8002a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d018      	beq.n	8002a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a21      	ldr	r2, [pc, #132]	; (8002aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d013      	beq.n	8002a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1f      	ldr	r2, [pc, #124]	; (8002af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00e      	beq.n	8002a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1e      	ldr	r2, [pc, #120]	; (8002af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d009      	beq.n	8002a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1c      	ldr	r2, [pc, #112]	; (8002af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d004      	beq.n	8002a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1b      	ldr	r2, [pc, #108]	; (8002afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d101      	bne.n	8002a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4b17      	ldr	r3, [pc, #92]	; (8002b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a15      	ldr	r2, [pc, #84]	; (8002b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002ab0:	671a      	str	r2, [r3, #112]	; 0x70
 8002ab2:	e009      	b.n	8002ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	461a      	mov	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a11      	ldr	r2, [pc, #68]	; (8002b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002ac6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	2201      	movs	r2, #1
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	58025408 	.word	0x58025408
 8002ae4:	5802541c 	.word	0x5802541c
 8002ae8:	58025430 	.word	0x58025430
 8002aec:	58025444 	.word	0x58025444
 8002af0:	58025458 	.word	0x58025458
 8002af4:	5802546c 	.word	0x5802546c
 8002af8:	58025480 	.word	0x58025480
 8002afc:	58025494 	.word	0x58025494
 8002b00:	1600963f 	.word	0x1600963f
 8002b04:	58025940 	.word	0x58025940
 8002b08:	1000823f 	.word	0x1000823f
 8002b0c:	40020940 	.word	0x40020940

08002b10 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b80      	cmp	r3, #128	; 0x80
 8002b28:	d105      	bne.n	8002b36 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e315      	b.n	8003162 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e30e      	b.n	8003162 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	f040 82fd 	bne.w	8003154 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a82      	ldr	r2, [pc, #520]	; (8002d78 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d04a      	beq.n	8002c08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a81      	ldr	r2, [pc, #516]	; (8002d7c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d045      	beq.n	8002c08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a7f      	ldr	r2, [pc, #508]	; (8002d80 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d040      	beq.n	8002c08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a7e      	ldr	r2, [pc, #504]	; (8002d84 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d03b      	beq.n	8002c08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a7c      	ldr	r2, [pc, #496]	; (8002d88 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d036      	beq.n	8002c08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a7b      	ldr	r2, [pc, #492]	; (8002d8c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d031      	beq.n	8002c08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a79      	ldr	r2, [pc, #484]	; (8002d90 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d02c      	beq.n	8002c08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a78      	ldr	r2, [pc, #480]	; (8002d94 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d027      	beq.n	8002c08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a76      	ldr	r2, [pc, #472]	; (8002d98 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d022      	beq.n	8002c08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a75      	ldr	r2, [pc, #468]	; (8002d9c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d01d      	beq.n	8002c08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a73      	ldr	r2, [pc, #460]	; (8002da0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d018      	beq.n	8002c08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a72      	ldr	r2, [pc, #456]	; (8002da4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d013      	beq.n	8002c08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a70      	ldr	r2, [pc, #448]	; (8002da8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00e      	beq.n	8002c08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a6f      	ldr	r2, [pc, #444]	; (8002dac <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d009      	beq.n	8002c08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a6d      	ldr	r2, [pc, #436]	; (8002db0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d004      	beq.n	8002c08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a6c      	ldr	r2, [pc, #432]	; (8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d101      	bne.n	8002c0c <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d018      	beq.n	8002c44 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002c20:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2e:	3308      	adds	r3, #8
 8002c30:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c36:	f003 031f 	and.w	r3, r3, #31
 8002c3a:	223f      	movs	r2, #63	; 0x3f
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	e018      	b.n	8002c76 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6819      	ldr	r1, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	f248 0320 	movw	r3, #32800	; 0x8020
 8002c52:	430b      	orrs	r3, r1
 8002c54:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c62:	3304      	adds	r3, #4
 8002c64:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	2201      	movs	r2, #1
 8002c70:	409a      	lsls	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	68b9      	ldr	r1, [r7, #8]
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 faa5 	bl	80031cc <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a3c      	ldr	r2, [pc, #240]	; (8002d78 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d072      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a3a      	ldr	r2, [pc, #232]	; (8002d7c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d06d      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a39      	ldr	r2, [pc, #228]	; (8002d80 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d068      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a37      	ldr	r2, [pc, #220]	; (8002d84 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d063      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a36      	ldr	r2, [pc, #216]	; (8002d88 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d05e      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a34      	ldr	r2, [pc, #208]	; (8002d8c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d059      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a33      	ldr	r2, [pc, #204]	; (8002d90 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d054      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a31      	ldr	r2, [pc, #196]	; (8002d94 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d04f      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a30      	ldr	r2, [pc, #192]	; (8002d98 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d04a      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a2e      	ldr	r2, [pc, #184]	; (8002d9c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d045      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a2d      	ldr	r2, [pc, #180]	; (8002da0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d040      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a2b      	ldr	r2, [pc, #172]	; (8002da4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d03b      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a2a      	ldr	r2, [pc, #168]	; (8002da8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d036      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a28      	ldr	r2, [pc, #160]	; (8002dac <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d031      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a27      	ldr	r2, [pc, #156]	; (8002db0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d02c      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a25      	ldr	r2, [pc, #148]	; (8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d027      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a24      	ldr	r2, [pc, #144]	; (8002db8 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d022      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a22      	ldr	r2, [pc, #136]	; (8002dbc <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d01d      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a21      	ldr	r2, [pc, #132]	; (8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d018      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a1f      	ldr	r2, [pc, #124]	; (8002dc4 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a1e      	ldr	r2, [pc, #120]	; (8002dc8 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00e      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a1c      	ldr	r2, [pc, #112]	; (8002dcc <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d009      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a1b      	ldr	r2, [pc, #108]	; (8002dd0 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d004      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a19      	ldr	r2, [pc, #100]	; (8002dd4 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d132      	bne.n	8002dd8 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e031      	b.n	8002dda <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8002d76:	bf00      	nop
 8002d78:	40020010 	.word	0x40020010
 8002d7c:	40020028 	.word	0x40020028
 8002d80:	40020040 	.word	0x40020040
 8002d84:	40020058 	.word	0x40020058
 8002d88:	40020070 	.word	0x40020070
 8002d8c:	40020088 	.word	0x40020088
 8002d90:	400200a0 	.word	0x400200a0
 8002d94:	400200b8 	.word	0x400200b8
 8002d98:	40020410 	.word	0x40020410
 8002d9c:	40020428 	.word	0x40020428
 8002da0:	40020440 	.word	0x40020440
 8002da4:	40020458 	.word	0x40020458
 8002da8:	40020470 	.word	0x40020470
 8002dac:	40020488 	.word	0x40020488
 8002db0:	400204a0 	.word	0x400204a0
 8002db4:	400204b8 	.word	0x400204b8
 8002db8:	58025408 	.word	0x58025408
 8002dbc:	5802541c 	.word	0x5802541c
 8002dc0:	58025430 	.word	0x58025430
 8002dc4:	58025444 	.word	0x58025444
 8002dc8:	58025458 	.word	0x58025458
 8002dcc:	5802546c 	.word	0x5802546c
 8002dd0:	58025480 	.word	0x58025480
 8002dd4:	58025494 	.word	0x58025494
 8002dd8:	2300      	movs	r3, #0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00d      	beq.n	8002dfa <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002de6:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d004      	beq.n	8002dfa <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002df8:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a3b      	ldr	r2, [pc, #236]	; (8002eec <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d04a      	beq.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a39      	ldr	r2, [pc, #228]	; (8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d045      	beq.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a38      	ldr	r2, [pc, #224]	; (8002ef4 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d040      	beq.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a36      	ldr	r2, [pc, #216]	; (8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d03b      	beq.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a35      	ldr	r2, [pc, #212]	; (8002efc <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d036      	beq.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a33      	ldr	r2, [pc, #204]	; (8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d031      	beq.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a32      	ldr	r2, [pc, #200]	; (8002f04 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d02c      	beq.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a30      	ldr	r2, [pc, #192]	; (8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d027      	beq.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a2f      	ldr	r2, [pc, #188]	; (8002f0c <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d022      	beq.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a2d      	ldr	r2, [pc, #180]	; (8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d01d      	beq.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a2c      	ldr	r2, [pc, #176]	; (8002f14 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d018      	beq.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a2a      	ldr	r2, [pc, #168]	; (8002f18 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d013      	beq.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a29      	ldr	r2, [pc, #164]	; (8002f1c <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d00e      	beq.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a27      	ldr	r2, [pc, #156]	; (8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d009      	beq.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a26      	ldr	r2, [pc, #152]	; (8002f24 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d004      	beq.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a24      	ldr	r2, [pc, #144]	; (8002f28 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d101      	bne.n	8002e9e <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d043      	beq.n	8002f2c <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 021e 	bic.w	r2, r3, #30
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0216 	orr.w	r2, r2, #22
 8002eb6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ec6:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d103      	bne.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d043      	beq.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0208 	orr.w	r2, r2, #8
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	e03a      	b.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8002eea:	bf00      	nop
 8002eec:	40020010 	.word	0x40020010
 8002ef0:	40020028 	.word	0x40020028
 8002ef4:	40020040 	.word	0x40020040
 8002ef8:	40020058 	.word	0x40020058
 8002efc:	40020070 	.word	0x40020070
 8002f00:	40020088 	.word	0x40020088
 8002f04:	400200a0 	.word	0x400200a0
 8002f08:	400200b8 	.word	0x400200b8
 8002f0c:	40020410 	.word	0x40020410
 8002f10:	40020428 	.word	0x40020428
 8002f14:	40020440 	.word	0x40020440
 8002f18:	40020458 	.word	0x40020458
 8002f1c:	40020470 	.word	0x40020470
 8002f20:	40020488 	.word	0x40020488
 8002f24:	400204a0 	.word	0x400204a0
 8002f28:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 020e 	bic.w	r2, r3, #14
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 020a 	orr.w	r2, r2, #10
 8002f3e:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d103      	bne.n	8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d007      	beq.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0204 	orr.w	r2, r2, #4
 8002f5e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a81      	ldr	r2, [pc, #516]	; (800316c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d072      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a80      	ldr	r2, [pc, #512]	; (8003170 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d06d      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a7e      	ldr	r2, [pc, #504]	; (8003174 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d068      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a7d      	ldr	r2, [pc, #500]	; (8003178 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d063      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a7b      	ldr	r2, [pc, #492]	; (800317c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d05e      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a7a      	ldr	r2, [pc, #488]	; (8003180 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d059      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a78      	ldr	r2, [pc, #480]	; (8003184 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d054      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a77      	ldr	r2, [pc, #476]	; (8003188 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d04f      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a75      	ldr	r2, [pc, #468]	; (800318c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d04a      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a74      	ldr	r2, [pc, #464]	; (8003190 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d045      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a72      	ldr	r2, [pc, #456]	; (8003194 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d040      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a71      	ldr	r2, [pc, #452]	; (8003198 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d03b      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a6f      	ldr	r2, [pc, #444]	; (800319c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d036      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a6e      	ldr	r2, [pc, #440]	; (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d031      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a6c      	ldr	r2, [pc, #432]	; (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d02c      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a6b      	ldr	r2, [pc, #428]	; (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d027      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a69      	ldr	r2, [pc, #420]	; (80031ac <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d022      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a68      	ldr	r2, [pc, #416]	; (80031b0 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d01d      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a66      	ldr	r2, [pc, #408]	; (80031b4 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d018      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a65      	ldr	r2, [pc, #404]	; (80031b8 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d013      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a63      	ldr	r2, [pc, #396]	; (80031bc <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d00e      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a62      	ldr	r2, [pc, #392]	; (80031c0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d009      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a60      	ldr	r2, [pc, #384]	; (80031c4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d004      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a5f      	ldr	r2, [pc, #380]	; (80031c8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d101      	bne.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8003054:	2300      	movs	r3, #0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d01a      	beq.n	8003090 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d007      	beq.n	8003078 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003072:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003076:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800308a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800308e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a35      	ldr	r2, [pc, #212]	; (800316c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d04a      	beq.n	8003130 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a34      	ldr	r2, [pc, #208]	; (8003170 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d045      	beq.n	8003130 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a32      	ldr	r2, [pc, #200]	; (8003174 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d040      	beq.n	8003130 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a31      	ldr	r2, [pc, #196]	; (8003178 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d03b      	beq.n	8003130 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a2f      	ldr	r2, [pc, #188]	; (800317c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d036      	beq.n	8003130 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a2e      	ldr	r2, [pc, #184]	; (8003180 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d031      	beq.n	8003130 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a2c      	ldr	r2, [pc, #176]	; (8003184 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d02c      	beq.n	8003130 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a2b      	ldr	r2, [pc, #172]	; (8003188 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d027      	beq.n	8003130 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a29      	ldr	r2, [pc, #164]	; (800318c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d022      	beq.n	8003130 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a28      	ldr	r2, [pc, #160]	; (8003190 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d01d      	beq.n	8003130 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a26      	ldr	r2, [pc, #152]	; (8003194 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d018      	beq.n	8003130 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a25      	ldr	r2, [pc, #148]	; (8003198 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d013      	beq.n	8003130 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a23      	ldr	r2, [pc, #140]	; (800319c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00e      	beq.n	8003130 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a22      	ldr	r2, [pc, #136]	; (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d009      	beq.n	8003130 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a20      	ldr	r2, [pc, #128]	; (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d004      	beq.n	8003130 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d108      	bne.n	8003142 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	e00e      	b.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f042 0201 	orr.w	r2, r2, #1
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	e005      	b.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800315a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003160:	7dfb      	ldrb	r3, [r7, #23]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40020010 	.word	0x40020010
 8003170:	40020028 	.word	0x40020028
 8003174:	40020040 	.word	0x40020040
 8003178:	40020058 	.word	0x40020058
 800317c:	40020070 	.word	0x40020070
 8003180:	40020088 	.word	0x40020088
 8003184:	400200a0 	.word	0x400200a0
 8003188:	400200b8 	.word	0x400200b8
 800318c:	40020410 	.word	0x40020410
 8003190:	40020428 	.word	0x40020428
 8003194:	40020440 	.word	0x40020440
 8003198:	40020458 	.word	0x40020458
 800319c:	40020470 	.word	0x40020470
 80031a0:	40020488 	.word	0x40020488
 80031a4:	400204a0 	.word	0x400204a0
 80031a8:	400204b8 	.word	0x400204b8
 80031ac:	58025408 	.word	0x58025408
 80031b0:	5802541c 	.word	0x5802541c
 80031b4:	58025430 	.word	0x58025430
 80031b8:	58025444 	.word	0x58025444
 80031bc:	58025458 	.word	0x58025458
 80031c0:	5802546c 	.word	0x5802546c
 80031c4:	58025480 	.word	0x58025480
 80031c8:	58025494 	.word	0x58025494

080031cc <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a46      	ldr	r2, [pc, #280]	; (80032f8 <DMA_MultiBufferSetConfig+0x12c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d04a      	beq.n	800327a <DMA_MultiBufferSetConfig+0xae>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a44      	ldr	r2, [pc, #272]	; (80032fc <DMA_MultiBufferSetConfig+0x130>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d045      	beq.n	800327a <DMA_MultiBufferSetConfig+0xae>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a43      	ldr	r2, [pc, #268]	; (8003300 <DMA_MultiBufferSetConfig+0x134>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d040      	beq.n	800327a <DMA_MultiBufferSetConfig+0xae>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a41      	ldr	r2, [pc, #260]	; (8003304 <DMA_MultiBufferSetConfig+0x138>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d03b      	beq.n	800327a <DMA_MultiBufferSetConfig+0xae>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a40      	ldr	r2, [pc, #256]	; (8003308 <DMA_MultiBufferSetConfig+0x13c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d036      	beq.n	800327a <DMA_MultiBufferSetConfig+0xae>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a3e      	ldr	r2, [pc, #248]	; (800330c <DMA_MultiBufferSetConfig+0x140>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d031      	beq.n	800327a <DMA_MultiBufferSetConfig+0xae>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a3d      	ldr	r2, [pc, #244]	; (8003310 <DMA_MultiBufferSetConfig+0x144>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d02c      	beq.n	800327a <DMA_MultiBufferSetConfig+0xae>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a3b      	ldr	r2, [pc, #236]	; (8003314 <DMA_MultiBufferSetConfig+0x148>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d027      	beq.n	800327a <DMA_MultiBufferSetConfig+0xae>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a3a      	ldr	r2, [pc, #232]	; (8003318 <DMA_MultiBufferSetConfig+0x14c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d022      	beq.n	800327a <DMA_MultiBufferSetConfig+0xae>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a38      	ldr	r2, [pc, #224]	; (800331c <DMA_MultiBufferSetConfig+0x150>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d01d      	beq.n	800327a <DMA_MultiBufferSetConfig+0xae>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a37      	ldr	r2, [pc, #220]	; (8003320 <DMA_MultiBufferSetConfig+0x154>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d018      	beq.n	800327a <DMA_MultiBufferSetConfig+0xae>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a35      	ldr	r2, [pc, #212]	; (8003324 <DMA_MultiBufferSetConfig+0x158>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <DMA_MultiBufferSetConfig+0xae>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a34      	ldr	r2, [pc, #208]	; (8003328 <DMA_MultiBufferSetConfig+0x15c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00e      	beq.n	800327a <DMA_MultiBufferSetConfig+0xae>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a32      	ldr	r2, [pc, #200]	; (800332c <DMA_MultiBufferSetConfig+0x160>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d009      	beq.n	800327a <DMA_MultiBufferSetConfig+0xae>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a31      	ldr	r2, [pc, #196]	; (8003330 <DMA_MultiBufferSetConfig+0x164>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d004      	beq.n	800327a <DMA_MultiBufferSetConfig+0xae>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a2f      	ldr	r2, [pc, #188]	; (8003334 <DMA_MultiBufferSetConfig+0x168>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d101      	bne.n	800327e <DMA_MultiBufferSetConfig+0xb2>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <DMA_MultiBufferSetConfig+0xb4>
 800327e:	2300      	movs	r3, #0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d019      	beq.n	80032b8 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	d108      	bne.n	80032a6 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 80032a4:	e021      	b.n	80032ea <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	60da      	str	r2, [r3, #12]
}
 80032b6:	e018      	b.n	80032ea <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b40      	cmp	r3, #64	; 0x40
 80032c6:	d108      	bne.n	80032da <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	60da      	str	r2, [r3, #12]
}
 80032d8:	e007      	b.n	80032ea <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	60da      	str	r2, [r3, #12]
}
 80032ea:	bf00      	nop
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40020010 	.word	0x40020010
 80032fc:	40020028 	.word	0x40020028
 8003300:	40020040 	.word	0x40020040
 8003304:	40020058 	.word	0x40020058
 8003308:	40020070 	.word	0x40020070
 800330c:	40020088 	.word	0x40020088
 8003310:	400200a0 	.word	0x400200a0
 8003314:	400200b8 	.word	0x400200b8
 8003318:	40020410 	.word	0x40020410
 800331c:	40020428 	.word	0x40020428
 8003320:	40020440 	.word	0x40020440
 8003324:	40020458 	.word	0x40020458
 8003328:	40020470 	.word	0x40020470
 800332c:	40020488 	.word	0x40020488
 8003330:	400204a0 	.word	0x400204a0
 8003334:	400204b8 	.word	0x400204b8

08003338 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003338:	b480      	push	{r7}
 800333a:	b089      	sub	sp, #36	; 0x24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003346:	4b89      	ldr	r3, [pc, #548]	; (800356c <HAL_GPIO_Init+0x234>)
 8003348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800334a:	e194      	b.n	8003676 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	2101      	movs	r1, #1
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	fa01 f303 	lsl.w	r3, r1, r3
 8003358:	4013      	ands	r3, r2
 800335a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 8186 	beq.w	8003670 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d005      	beq.n	800337c <HAL_GPIO_Init+0x44>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d130      	bne.n	80033de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	2203      	movs	r2, #3
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033b2:	2201      	movs	r2, #1
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	091b      	lsrs	r3, r3, #4
 80033c8:	f003 0201 	and.w	r2, r3, #1
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	d017      	beq.n	800341a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	2203      	movs	r2, #3
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4313      	orrs	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d123      	bne.n	800346e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	08da      	lsrs	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3208      	adds	r2, #8
 800342e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	220f      	movs	r2, #15
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4313      	orrs	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	08da      	lsrs	r2, r3, #3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3208      	adds	r2, #8
 8003468:	69b9      	ldr	r1, [r7, #24]
 800346a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	2203      	movs	r2, #3
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f003 0203 	and.w	r2, r3, #3
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4313      	orrs	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 80e0 	beq.w	8003670 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b0:	4b2f      	ldr	r3, [pc, #188]	; (8003570 <HAL_GPIO_Init+0x238>)
 80034b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034b6:	4a2e      	ldr	r2, [pc, #184]	; (8003570 <HAL_GPIO_Init+0x238>)
 80034b8:	f043 0302 	orr.w	r3, r3, #2
 80034bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80034c0:	4b2b      	ldr	r3, [pc, #172]	; (8003570 <HAL_GPIO_Init+0x238>)
 80034c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034ce:	4a29      	ldr	r2, [pc, #164]	; (8003574 <HAL_GPIO_Init+0x23c>)
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	089b      	lsrs	r3, r3, #2
 80034d4:	3302      	adds	r3, #2
 80034d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	220f      	movs	r2, #15
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4013      	ands	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a20      	ldr	r2, [pc, #128]	; (8003578 <HAL_GPIO_Init+0x240>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d052      	beq.n	80035a0 <HAL_GPIO_Init+0x268>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a1f      	ldr	r2, [pc, #124]	; (800357c <HAL_GPIO_Init+0x244>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d031      	beq.n	8003566 <HAL_GPIO_Init+0x22e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <HAL_GPIO_Init+0x248>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d02b      	beq.n	8003562 <HAL_GPIO_Init+0x22a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <HAL_GPIO_Init+0x24c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d025      	beq.n	800355e <HAL_GPIO_Init+0x226>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a1c      	ldr	r2, [pc, #112]	; (8003588 <HAL_GPIO_Init+0x250>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d01f      	beq.n	800355a <HAL_GPIO_Init+0x222>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a1b      	ldr	r2, [pc, #108]	; (800358c <HAL_GPIO_Init+0x254>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d019      	beq.n	8003556 <HAL_GPIO_Init+0x21e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a1a      	ldr	r2, [pc, #104]	; (8003590 <HAL_GPIO_Init+0x258>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <HAL_GPIO_Init+0x21a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a19      	ldr	r2, [pc, #100]	; (8003594 <HAL_GPIO_Init+0x25c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00d      	beq.n	800354e <HAL_GPIO_Init+0x216>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a18      	ldr	r2, [pc, #96]	; (8003598 <HAL_GPIO_Init+0x260>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d007      	beq.n	800354a <HAL_GPIO_Init+0x212>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a17      	ldr	r2, [pc, #92]	; (800359c <HAL_GPIO_Init+0x264>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d101      	bne.n	8003546 <HAL_GPIO_Init+0x20e>
 8003542:	2309      	movs	r3, #9
 8003544:	e02d      	b.n	80035a2 <HAL_GPIO_Init+0x26a>
 8003546:	230a      	movs	r3, #10
 8003548:	e02b      	b.n	80035a2 <HAL_GPIO_Init+0x26a>
 800354a:	2308      	movs	r3, #8
 800354c:	e029      	b.n	80035a2 <HAL_GPIO_Init+0x26a>
 800354e:	2307      	movs	r3, #7
 8003550:	e027      	b.n	80035a2 <HAL_GPIO_Init+0x26a>
 8003552:	2306      	movs	r3, #6
 8003554:	e025      	b.n	80035a2 <HAL_GPIO_Init+0x26a>
 8003556:	2305      	movs	r3, #5
 8003558:	e023      	b.n	80035a2 <HAL_GPIO_Init+0x26a>
 800355a:	2304      	movs	r3, #4
 800355c:	e021      	b.n	80035a2 <HAL_GPIO_Init+0x26a>
 800355e:	2303      	movs	r3, #3
 8003560:	e01f      	b.n	80035a2 <HAL_GPIO_Init+0x26a>
 8003562:	2302      	movs	r3, #2
 8003564:	e01d      	b.n	80035a2 <HAL_GPIO_Init+0x26a>
 8003566:	2301      	movs	r3, #1
 8003568:	e01b      	b.n	80035a2 <HAL_GPIO_Init+0x26a>
 800356a:	bf00      	nop
 800356c:	58000080 	.word	0x58000080
 8003570:	58024400 	.word	0x58024400
 8003574:	58000400 	.word	0x58000400
 8003578:	58020000 	.word	0x58020000
 800357c:	58020400 	.word	0x58020400
 8003580:	58020800 	.word	0x58020800
 8003584:	58020c00 	.word	0x58020c00
 8003588:	58021000 	.word	0x58021000
 800358c:	58021400 	.word	0x58021400
 8003590:	58021800 	.word	0x58021800
 8003594:	58021c00 	.word	0x58021c00
 8003598:	58022000 	.word	0x58022000
 800359c:	58022400 	.word	0x58022400
 80035a0:	2300      	movs	r3, #0
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	f002 0203 	and.w	r2, r2, #3
 80035a8:	0092      	lsls	r2, r2, #2
 80035aa:	4093      	lsls	r3, r2
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035b2:	4938      	ldr	r1, [pc, #224]	; (8003694 <HAL_GPIO_Init+0x35c>)
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	089b      	lsrs	r3, r3, #2
 80035b8:	3302      	adds	r3, #2
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4013      	ands	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80035e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80035ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	43db      	mvns	r3, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4013      	ands	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	3301      	adds	r3, #1
 8003674:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	f47f ae63 	bne.w	800334c <HAL_GPIO_Init+0x14>
  }
}
 8003686:	bf00      	nop
 8003688:	bf00      	nop
 800368a:	3724      	adds	r7, #36	; 0x24
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	58000400 	.word	0x58000400

08003698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	807b      	strh	r3, [r7, #2]
 80036a4:	4613      	mov	r3, r2
 80036a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036a8:	787b      	ldrb	r3, [r7, #1]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ae:	887a      	ldrh	r2, [r7, #2]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80036b4:	e003      	b.n	80036be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80036b6:	887b      	ldrh	r3, [r7, #2]
 80036b8:	041a      	lsls	r2, r3, #16
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	619a      	str	r2, [r3, #24]
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
	...

080036cc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80036d4:	4a08      	ldr	r2, [pc, #32]	; (80036f8 <HAL_HSEM_FastTake+0x2c>)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3320      	adds	r3, #32
 80036da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036de:	4a07      	ldr	r2, [pc, #28]	; (80036fc <HAL_HSEM_FastTake+0x30>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d101      	bne.n	80036e8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	e000      	b.n	80036ea <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	58026400 	.word	0x58026400
 80036fc:	80000300 	.word	0x80000300

08003700 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800370a:	4906      	ldr	r1, [pc, #24]	; (8003724 <HAL_HSEM_Release+0x24>)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	58026400 	.word	0x58026400

08003728 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003730:	4b29      	ldr	r3, [pc, #164]	; (80037d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	2b06      	cmp	r3, #6
 800373a:	d00a      	beq.n	8003752 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800373c:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	429a      	cmp	r2, r3
 8003748:	d001      	beq.n	800374e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e040      	b.n	80037d0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	e03e      	b.n	80037d0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003752:	4b21      	ldr	r3, [pc, #132]	; (80037d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800375a:	491f      	ldr	r1, [pc, #124]	; (80037d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4313      	orrs	r3, r2
 8003760:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003762:	f7fd fbeb 	bl	8000f3c <HAL_GetTick>
 8003766:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003768:	e009      	b.n	800377e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800376a:	f7fd fbe7 	bl	8000f3c <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003778:	d901      	bls.n	800377e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e028      	b.n	80037d0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800377e:	4b16      	ldr	r3, [pc, #88]	; (80037d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800378a:	d1ee      	bne.n	800376a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b1e      	cmp	r3, #30
 8003790:	d008      	beq.n	80037a4 <HAL_PWREx_ConfigSupply+0x7c>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b2e      	cmp	r3, #46	; 0x2e
 8003796:	d005      	beq.n	80037a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b1d      	cmp	r3, #29
 800379c:	d002      	beq.n	80037a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b2d      	cmp	r3, #45	; 0x2d
 80037a2:	d114      	bne.n	80037ce <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80037a4:	f7fd fbca 	bl	8000f3c <HAL_GetTick>
 80037a8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80037aa:	e009      	b.n	80037c0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80037ac:	f7fd fbc6 	bl	8000f3c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037ba:	d901      	bls.n	80037c0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e007      	b.n	80037d0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <HAL_PWREx_ConfigSupply+0xb0>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037cc:	d1ee      	bne.n	80037ac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	58024800 	.word	0x58024800

080037dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08c      	sub	sp, #48	; 0x30
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d102      	bne.n	80037f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	f000 bc48 	b.w	8004080 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8088 	beq.w	800390e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037fe:	4b99      	ldr	r3, [pc, #612]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003806:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003808:	4b96      	ldr	r3, [pc, #600]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 800380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	2b10      	cmp	r3, #16
 8003812:	d007      	beq.n	8003824 <HAL_RCC_OscConfig+0x48>
 8003814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003816:	2b18      	cmp	r3, #24
 8003818:	d111      	bne.n	800383e <HAL_RCC_OscConfig+0x62>
 800381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381c:	f003 0303 	and.w	r3, r3, #3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d10c      	bne.n	800383e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003824:	4b8f      	ldr	r3, [pc, #572]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d06d      	beq.n	800390c <HAL_RCC_OscConfig+0x130>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d169      	bne.n	800390c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	f000 bc21 	b.w	8004080 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003846:	d106      	bne.n	8003856 <HAL_RCC_OscConfig+0x7a>
 8003848:	4b86      	ldr	r3, [pc, #536]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a85      	ldr	r2, [pc, #532]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 800384e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	e02e      	b.n	80038b4 <HAL_RCC_OscConfig+0xd8>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10c      	bne.n	8003878 <HAL_RCC_OscConfig+0x9c>
 800385e:	4b81      	ldr	r3, [pc, #516]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a80      	ldr	r2, [pc, #512]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 8003864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	4b7e      	ldr	r3, [pc, #504]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a7d      	ldr	r2, [pc, #500]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 8003870:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	e01d      	b.n	80038b4 <HAL_RCC_OscConfig+0xd8>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003880:	d10c      	bne.n	800389c <HAL_RCC_OscConfig+0xc0>
 8003882:	4b78      	ldr	r3, [pc, #480]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a77      	ldr	r2, [pc, #476]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 8003888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	4b75      	ldr	r3, [pc, #468]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a74      	ldr	r2, [pc, #464]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 8003894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	e00b      	b.n	80038b4 <HAL_RCC_OscConfig+0xd8>
 800389c:	4b71      	ldr	r3, [pc, #452]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a70      	ldr	r2, [pc, #448]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 80038a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	4b6e      	ldr	r3, [pc, #440]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a6d      	ldr	r2, [pc, #436]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 80038ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d013      	beq.n	80038e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038bc:	f7fd fb3e 	bl	8000f3c <HAL_GetTick>
 80038c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c4:	f7fd fb3a 	bl	8000f3c <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b64      	cmp	r3, #100	; 0x64
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e3d4      	b.n	8004080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038d6:	4b63      	ldr	r3, [pc, #396]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f0      	beq.n	80038c4 <HAL_RCC_OscConfig+0xe8>
 80038e2:	e014      	b.n	800390e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fd fb2a 	bl	8000f3c <HAL_GetTick>
 80038e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ec:	f7fd fb26 	bl	8000f3c <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b64      	cmp	r3, #100	; 0x64
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e3c0      	b.n	8004080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038fe:	4b59      	ldr	r3, [pc, #356]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x110>
 800390a:	e000      	b.n	800390e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 80ca 	beq.w	8003ab0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800391c:	4b51      	ldr	r3, [pc, #324]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003924:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003926:	4b4f      	ldr	r3, [pc, #316]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d007      	beq.n	8003942 <HAL_RCC_OscConfig+0x166>
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	2b18      	cmp	r3, #24
 8003936:	d156      	bne.n	80039e6 <HAL_RCC_OscConfig+0x20a>
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d151      	bne.n	80039e6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003942:	4b48      	ldr	r3, [pc, #288]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <HAL_RCC_OscConfig+0x17e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e392      	b.n	8004080 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800395a:	4b42      	ldr	r3, [pc, #264]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 0219 	bic.w	r2, r3, #25
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	493f      	ldr	r1, [pc, #252]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 8003968:	4313      	orrs	r3, r2
 800396a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396c:	f7fd fae6 	bl	8000f3c <HAL_GetTick>
 8003970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003974:	f7fd fae2 	bl	8000f3c <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e37c      	b.n	8004080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003986:	4b37      	ldr	r3, [pc, #220]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003992:	f7fd fadf 	bl	8000f54 <HAL_GetREVID>
 8003996:	4603      	mov	r3, r0
 8003998:	f241 0203 	movw	r2, #4099	; 0x1003
 800399c:	4293      	cmp	r3, r2
 800399e:	d817      	bhi.n	80039d0 <HAL_RCC_OscConfig+0x1f4>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d108      	bne.n	80039ba <HAL_RCC_OscConfig+0x1de>
 80039a8:	4b2e      	ldr	r3, [pc, #184]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80039b0:	4a2c      	ldr	r2, [pc, #176]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 80039b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039b8:	e07a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ba:	4b2a      	ldr	r3, [pc, #168]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	031b      	lsls	r3, r3, #12
 80039c8:	4926      	ldr	r1, [pc, #152]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039ce:	e06f      	b.n	8003ab0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d0:	4b24      	ldr	r3, [pc, #144]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	061b      	lsls	r3, r3, #24
 80039de:	4921      	ldr	r1, [pc, #132]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039e4:	e064      	b.n	8003ab0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d047      	beq.n	8003a7e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039ee:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f023 0219 	bic.w	r2, r3, #25
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	491a      	ldr	r1, [pc, #104]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fd fa9c 	bl	8000f3c <HAL_GetTick>
 8003a04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a08:	f7fd fa98 	bl	8000f3c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e332      	b.n	8004080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a1a:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a26:	f7fd fa95 	bl	8000f54 <HAL_GetREVID>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d819      	bhi.n	8003a68 <HAL_RCC_OscConfig+0x28c>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b40      	cmp	r3, #64	; 0x40
 8003a3a:	d108      	bne.n	8003a4e <HAL_RCC_OscConfig+0x272>
 8003a3c:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a44:	4a07      	ldr	r2, [pc, #28]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 8003a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4a:	6053      	str	r3, [r2, #4]
 8003a4c:	e030      	b.n	8003ab0 <HAL_RCC_OscConfig+0x2d4>
 8003a4e:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	031b      	lsls	r3, r3, #12
 8003a5c:	4901      	ldr	r1, [pc, #4]	; (8003a64 <HAL_RCC_OscConfig+0x288>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	604b      	str	r3, [r1, #4]
 8003a62:	e025      	b.n	8003ab0 <HAL_RCC_OscConfig+0x2d4>
 8003a64:	58024400 	.word	0x58024400
 8003a68:	4b9a      	ldr	r3, [pc, #616]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	061b      	lsls	r3, r3, #24
 8003a76:	4997      	ldr	r1, [pc, #604]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	604b      	str	r3, [r1, #4]
 8003a7c:	e018      	b.n	8003ab0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7e:	4b95      	ldr	r3, [pc, #596]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a94      	ldr	r2, [pc, #592]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8a:	f7fd fa57 	bl	8000f3c <HAL_GetTick>
 8003a8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a92:	f7fd fa53 	bl	8000f3c <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e2ed      	b.n	8004080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003aa4:	4b8b      	ldr	r3, [pc, #556]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1f0      	bne.n	8003a92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 80a9 	beq.w	8003c10 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003abe:	4b85      	ldr	r3, [pc, #532]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ac6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ac8:	4b82      	ldr	r3, [pc, #520]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d007      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x308>
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	2b18      	cmp	r3, #24
 8003ad8:	d13a      	bne.n	8003b50 <HAL_RCC_OscConfig+0x374>
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d135      	bne.n	8003b50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ae4:	4b7b      	ldr	r3, [pc, #492]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <HAL_RCC_OscConfig+0x320>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	2b80      	cmp	r3, #128	; 0x80
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e2c1      	b.n	8004080 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003afc:	f7fd fa2a 	bl	8000f54 <HAL_GetREVID>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d817      	bhi.n	8003b3a <HAL_RCC_OscConfig+0x35e>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	d108      	bne.n	8003b24 <HAL_RCC_OscConfig+0x348>
 8003b12:	4b70      	ldr	r3, [pc, #448]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b1a:	4a6e      	ldr	r2, [pc, #440]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003b1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b20:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b22:	e075      	b.n	8003c10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b24:	4b6b      	ldr	r3, [pc, #428]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	069b      	lsls	r3, r3, #26
 8003b32:	4968      	ldr	r1, [pc, #416]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b38:	e06a      	b.n	8003c10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b3a:	4b66      	ldr	r3, [pc, #408]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	061b      	lsls	r3, r3, #24
 8003b48:	4962      	ldr	r1, [pc, #392]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b4e:	e05f      	b.n	8003c10 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d042      	beq.n	8003bde <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b58:	4b5e      	ldr	r3, [pc, #376]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a5d      	ldr	r2, [pc, #372]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b64:	f7fd f9ea 	bl	8000f3c <HAL_GetTick>
 8003b68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b6c:	f7fd f9e6 	bl	8000f3c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e280      	b.n	8004080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b7e:	4b55      	ldr	r3, [pc, #340]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b8a:	f7fd f9e3 	bl	8000f54 <HAL_GetREVID>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d817      	bhi.n	8003bc8 <HAL_RCC_OscConfig+0x3ec>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d108      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x3d6>
 8003ba0:	4b4c      	ldr	r3, [pc, #304]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003ba8:	4a4a      	ldr	r2, [pc, #296]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003baa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bae:	6053      	str	r3, [r2, #4]
 8003bb0:	e02e      	b.n	8003c10 <HAL_RCC_OscConfig+0x434>
 8003bb2:	4b48      	ldr	r3, [pc, #288]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	069b      	lsls	r3, r3, #26
 8003bc0:	4944      	ldr	r1, [pc, #272]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	604b      	str	r3, [r1, #4]
 8003bc6:	e023      	b.n	8003c10 <HAL_RCC_OscConfig+0x434>
 8003bc8:	4b42      	ldr	r3, [pc, #264]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	061b      	lsls	r3, r3, #24
 8003bd6:	493f      	ldr	r1, [pc, #252]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60cb      	str	r3, [r1, #12]
 8003bdc:	e018      	b.n	8003c10 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003bde:	4b3d      	ldr	r3, [pc, #244]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a3c      	ldr	r2, [pc, #240]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003be4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bea:	f7fd f9a7 	bl	8000f3c <HAL_GetTick>
 8003bee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bf2:	f7fd f9a3 	bl	8000f3c <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e23d      	b.n	8004080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c04:	4b33      	ldr	r3, [pc, #204]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1f0      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d036      	beq.n	8003c8a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d019      	beq.n	8003c58 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c24:	4b2b      	ldr	r3, [pc, #172]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c28:	4a2a      	ldr	r2, [pc, #168]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c30:	f7fd f984 	bl	8000f3c <HAL_GetTick>
 8003c34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c38:	f7fd f980 	bl	8000f3c <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e21a      	b.n	8004080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c4a:	4b22      	ldr	r3, [pc, #136]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCC_OscConfig+0x45c>
 8003c56:	e018      	b.n	8003c8a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c58:	4b1e      	ldr	r3, [pc, #120]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5c:	4a1d      	ldr	r2, [pc, #116]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003c5e:	f023 0301 	bic.w	r3, r3, #1
 8003c62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c64:	f7fd f96a 	bl	8000f3c <HAL_GetTick>
 8003c68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c6c:	f7fd f966 	bl	8000f3c <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e200      	b.n	8004080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c7e:	4b15      	ldr	r3, [pc, #84]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d039      	beq.n	8003d0a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d01c      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a0c      	ldr	r2, [pc, #48]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003ca4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ca8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003caa:	f7fd f947 	bl	8000f3c <HAL_GetTick>
 8003cae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cb2:	f7fd f943 	bl	8000f3c <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e1dd      	b.n	8004080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cc4:	4b03      	ldr	r3, [pc, #12]	; (8003cd4 <HAL_RCC_OscConfig+0x4f8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f0      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x4d6>
 8003cd0:	e01b      	b.n	8003d0a <HAL_RCC_OscConfig+0x52e>
 8003cd2:	bf00      	nop
 8003cd4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cd8:	4b9b      	ldr	r3, [pc, #620]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a9a      	ldr	r2, [pc, #616]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ce2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ce4:	f7fd f92a 	bl	8000f3c <HAL_GetTick>
 8003ce8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cec:	f7fd f926 	bl	8000f3c <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e1c0      	b.n	8004080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cfe:	4b92      	ldr	r3, [pc, #584]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 8081 	beq.w	8003e1a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d18:	4b8c      	ldr	r3, [pc, #560]	; (8003f4c <HAL_RCC_OscConfig+0x770>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a8b      	ldr	r2, [pc, #556]	; (8003f4c <HAL_RCC_OscConfig+0x770>)
 8003d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d24:	f7fd f90a 	bl	8000f3c <HAL_GetTick>
 8003d28:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2c:	f7fd f906 	bl	8000f3c <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b64      	cmp	r3, #100	; 0x64
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e1a0      	b.n	8004080 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d3e:	4b83      	ldr	r3, [pc, #524]	; (8003f4c <HAL_RCC_OscConfig+0x770>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0f0      	beq.n	8003d2c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d106      	bne.n	8003d60 <HAL_RCC_OscConfig+0x584>
 8003d52:	4b7d      	ldr	r3, [pc, #500]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	4a7c      	ldr	r2, [pc, #496]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5e:	e02d      	b.n	8003dbc <HAL_RCC_OscConfig+0x5e0>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10c      	bne.n	8003d82 <HAL_RCC_OscConfig+0x5a6>
 8003d68:	4b77      	ldr	r3, [pc, #476]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	4a76      	ldr	r2, [pc, #472]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003d6e:	f023 0301 	bic.w	r3, r3, #1
 8003d72:	6713      	str	r3, [r2, #112]	; 0x70
 8003d74:	4b74      	ldr	r3, [pc, #464]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	4a73      	ldr	r2, [pc, #460]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003d7a:	f023 0304 	bic.w	r3, r3, #4
 8003d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d80:	e01c      	b.n	8003dbc <HAL_RCC_OscConfig+0x5e0>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b05      	cmp	r3, #5
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x5c8>
 8003d8a:	4b6f      	ldr	r3, [pc, #444]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	4a6e      	ldr	r2, [pc, #440]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003d90:	f043 0304 	orr.w	r3, r3, #4
 8003d94:	6713      	str	r3, [r2, #112]	; 0x70
 8003d96:	4b6c      	ldr	r3, [pc, #432]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	4a6b      	ldr	r2, [pc, #428]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	6713      	str	r3, [r2, #112]	; 0x70
 8003da2:	e00b      	b.n	8003dbc <HAL_RCC_OscConfig+0x5e0>
 8003da4:	4b68      	ldr	r3, [pc, #416]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da8:	4a67      	ldr	r2, [pc, #412]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003daa:	f023 0301 	bic.w	r3, r3, #1
 8003dae:	6713      	str	r3, [r2, #112]	; 0x70
 8003db0:	4b65      	ldr	r3, [pc, #404]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db4:	4a64      	ldr	r2, [pc, #400]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003db6:	f023 0304 	bic.w	r3, r3, #4
 8003dba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d015      	beq.n	8003df0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc4:	f7fd f8ba 	bl	8000f3c <HAL_GetTick>
 8003dc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dca:	e00a      	b.n	8003de2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dcc:	f7fd f8b6 	bl	8000f3c <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e14e      	b.n	8004080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003de2:	4b59      	ldr	r3, [pc, #356]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0ee      	beq.n	8003dcc <HAL_RCC_OscConfig+0x5f0>
 8003dee:	e014      	b.n	8003e1a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df0:	f7fd f8a4 	bl	8000f3c <HAL_GetTick>
 8003df4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003df6:	e00a      	b.n	8003e0e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df8:	f7fd f8a0 	bl	8000f3c <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e138      	b.n	8004080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e0e:	4b4e      	ldr	r3, [pc, #312]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1ee      	bne.n	8003df8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 812d 	beq.w	800407e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e24:	4b48      	ldr	r3, [pc, #288]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e2c:	2b18      	cmp	r3, #24
 8003e2e:	f000 80bd 	beq.w	8003fac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	f040 809e 	bne.w	8003f78 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3c:	4b42      	ldr	r3, [pc, #264]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a41      	ldr	r2, [pc, #260]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fd f878 	bl	8000f3c <HAL_GetTick>
 8003e4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e50:	f7fd f874 	bl	8000f3c <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e10e      	b.n	8004080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e62:	4b39      	ldr	r3, [pc, #228]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e6e:	4b36      	ldr	r3, [pc, #216]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e72:	4b37      	ldr	r3, [pc, #220]	; (8003f50 <HAL_RCC_OscConfig+0x774>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e7e:	0112      	lsls	r2, r2, #4
 8003e80:	430a      	orrs	r2, r1
 8003e82:	4931      	ldr	r1, [pc, #196]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	628b      	str	r3, [r1, #40]	; 0x28
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e96:	3b01      	subs	r3, #1
 8003e98:	025b      	lsls	r3, r3, #9
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	041b      	lsls	r3, r3, #16
 8003ea6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	061b      	lsls	r3, r3, #24
 8003eb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003eb8:	4923      	ldr	r1, [pc, #140]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003ebe:	4b22      	ldr	r3, [pc, #136]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	4a21      	ldr	r2, [pc, #132]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003eca:	4b1f      	ldr	r3, [pc, #124]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ece:	4b21      	ldr	r3, [pc, #132]	; (8003f54 <HAL_RCC_OscConfig+0x778>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ed6:	00d2      	lsls	r2, r2, #3
 8003ed8:	491b      	ldr	r1, [pc, #108]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ede:	4b1a      	ldr	r3, [pc, #104]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	f023 020c 	bic.w	r2, r3, #12
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	4917      	ldr	r1, [pc, #92]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003ef0:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	f023 0202 	bic.w	r2, r3, #2
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efc:	4912      	ldr	r1, [pc, #72]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f02:	4b11      	ldr	r3, [pc, #68]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	4a10      	ldr	r2, [pc, #64]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f0e:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	4a0d      	ldr	r2, [pc, #52]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1e:	4a0a      	ldr	r2, [pc, #40]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f26:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	4a07      	ldr	r2, [pc, #28]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f32:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <HAL_RCC_OscConfig+0x76c>)
 8003f38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3e:	f7fc fffd 	bl	8000f3c <HAL_GetTick>
 8003f42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f44:	e011      	b.n	8003f6a <HAL_RCC_OscConfig+0x78e>
 8003f46:	bf00      	nop
 8003f48:	58024400 	.word	0x58024400
 8003f4c:	58024800 	.word	0x58024800
 8003f50:	fffffc0c 	.word	0xfffffc0c
 8003f54:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f58:	f7fc fff0 	bl	8000f3c <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e08a      	b.n	8004080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f6a:	4b47      	ldr	r3, [pc, #284]	; (8004088 <HAL_RCC_OscConfig+0x8ac>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0x77c>
 8003f76:	e082      	b.n	800407e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f78:	4b43      	ldr	r3, [pc, #268]	; (8004088 <HAL_RCC_OscConfig+0x8ac>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a42      	ldr	r2, [pc, #264]	; (8004088 <HAL_RCC_OscConfig+0x8ac>)
 8003f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fc ffda 	bl	8000f3c <HAL_GetTick>
 8003f88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8c:	f7fc ffd6 	bl	8000f3c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e070      	b.n	8004080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f9e:	4b3a      	ldr	r3, [pc, #232]	; (8004088 <HAL_RCC_OscConfig+0x8ac>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x7b0>
 8003faa:	e068      	b.n	800407e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003fac:	4b36      	ldr	r3, [pc, #216]	; (8004088 <HAL_RCC_OscConfig+0x8ac>)
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003fb2:	4b35      	ldr	r3, [pc, #212]	; (8004088 <HAL_RCC_OscConfig+0x8ac>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d031      	beq.n	8004024 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f003 0203 	and.w	r2, r3, #3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d12a      	bne.n	8004024 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d122      	bne.n	8004024 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d11a      	bne.n	8004024 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	0a5b      	lsrs	r3, r3, #9
 8003ff2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d111      	bne.n	8004024 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	0c1b      	lsrs	r3, r3, #16
 8004004:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800400e:	429a      	cmp	r2, r3
 8004010:	d108      	bne.n	8004024 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	0e1b      	lsrs	r3, r3, #24
 8004016:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004020:	429a      	cmp	r2, r3
 8004022:	d001      	beq.n	8004028 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e02b      	b.n	8004080 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004028:	4b17      	ldr	r3, [pc, #92]	; (8004088 <HAL_RCC_OscConfig+0x8ac>)
 800402a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402c:	08db      	lsrs	r3, r3, #3
 800402e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004032:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	429a      	cmp	r2, r3
 800403c:	d01f      	beq.n	800407e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800403e:	4b12      	ldr	r3, [pc, #72]	; (8004088 <HAL_RCC_OscConfig+0x8ac>)
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	4a11      	ldr	r2, [pc, #68]	; (8004088 <HAL_RCC_OscConfig+0x8ac>)
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800404a:	f7fc ff77 	bl	8000f3c <HAL_GetTick>
 800404e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004050:	bf00      	nop
 8004052:	f7fc ff73 	bl	8000f3c <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	4293      	cmp	r3, r2
 800405c:	d0f9      	beq.n	8004052 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800405e:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <HAL_RCC_OscConfig+0x8ac>)
 8004060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004062:	4b0a      	ldr	r3, [pc, #40]	; (800408c <HAL_RCC_OscConfig+0x8b0>)
 8004064:	4013      	ands	r3, r2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800406a:	00d2      	lsls	r2, r2, #3
 800406c:	4906      	ldr	r1, [pc, #24]	; (8004088 <HAL_RCC_OscConfig+0x8ac>)
 800406e:	4313      	orrs	r3, r2
 8004070:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004072:	4b05      	ldr	r3, [pc, #20]	; (8004088 <HAL_RCC_OscConfig+0x8ac>)
 8004074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004076:	4a04      	ldr	r2, [pc, #16]	; (8004088 <HAL_RCC_OscConfig+0x8ac>)
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3730      	adds	r7, #48	; 0x30
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	58024400 	.word	0x58024400
 800408c:	ffff0007 	.word	0xffff0007

08004090 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e19c      	b.n	80043de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040a4:	4b8a      	ldr	r3, [pc, #552]	; (80042d0 <HAL_RCC_ClockConfig+0x240>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d910      	bls.n	80040d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b87      	ldr	r3, [pc, #540]	; (80042d0 <HAL_RCC_ClockConfig+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 020f 	bic.w	r2, r3, #15
 80040ba:	4985      	ldr	r1, [pc, #532]	; (80042d0 <HAL_RCC_ClockConfig+0x240>)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	4313      	orrs	r3, r2
 80040c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c2:	4b83      	ldr	r3, [pc, #524]	; (80042d0 <HAL_RCC_ClockConfig+0x240>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e184      	b.n	80043de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d010      	beq.n	8004102 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	4b7b      	ldr	r3, [pc, #492]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d908      	bls.n	8004102 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040f0:	4b78      	ldr	r3, [pc, #480]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	4975      	ldr	r1, [pc, #468]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0308 	and.w	r3, r3, #8
 800410a:	2b00      	cmp	r3, #0
 800410c:	d010      	beq.n	8004130 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	4b70      	ldr	r3, [pc, #448]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800411a:	429a      	cmp	r2, r3
 800411c:	d908      	bls.n	8004130 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800411e:	4b6d      	ldr	r3, [pc, #436]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	496a      	ldr	r1, [pc, #424]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 800412c:	4313      	orrs	r3, r2
 800412e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b00      	cmp	r3, #0
 800413a:	d010      	beq.n	800415e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699a      	ldr	r2, [r3, #24]
 8004140:	4b64      	ldr	r3, [pc, #400]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004148:	429a      	cmp	r2, r3
 800414a:	d908      	bls.n	800415e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800414c:	4b61      	ldr	r3, [pc, #388]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	495e      	ldr	r1, [pc, #376]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 800415a:	4313      	orrs	r3, r2
 800415c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	2b00      	cmp	r3, #0
 8004168:	d010      	beq.n	800418c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69da      	ldr	r2, [r3, #28]
 800416e:	4b59      	ldr	r3, [pc, #356]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004176:	429a      	cmp	r2, r3
 8004178:	d908      	bls.n	800418c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800417a:	4b56      	ldr	r3, [pc, #344]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	4953      	ldr	r1, [pc, #332]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004188:	4313      	orrs	r3, r2
 800418a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d010      	beq.n	80041ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	4b4d      	ldr	r3, [pc, #308]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d908      	bls.n	80041ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a8:	4b4a      	ldr	r3, [pc, #296]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	f023 020f 	bic.w	r2, r3, #15
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	4947      	ldr	r1, [pc, #284]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d055      	beq.n	8004272 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80041c6:	4b43      	ldr	r3, [pc, #268]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	4940      	ldr	r1, [pc, #256]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d107      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041e0:	4b3c      	ldr	r3, [pc, #240]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d121      	bne.n	8004230 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0f6      	b.n	80043de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d107      	bne.n	8004208 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041f8:	4b36      	ldr	r3, [pc, #216]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d115      	bne.n	8004230 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0ea      	b.n	80043de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d107      	bne.n	8004220 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004210:	4b30      	ldr	r3, [pc, #192]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004218:	2b00      	cmp	r3, #0
 800421a:	d109      	bne.n	8004230 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0de      	b.n	80043de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004220:	4b2c      	ldr	r3, [pc, #176]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0d6      	b.n	80043de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004230:	4b28      	ldr	r3, [pc, #160]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f023 0207 	bic.w	r2, r3, #7
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4925      	ldr	r1, [pc, #148]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 800423e:	4313      	orrs	r3, r2
 8004240:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004242:	f7fc fe7b 	bl	8000f3c <HAL_GetTick>
 8004246:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004248:	e00a      	b.n	8004260 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800424a:	f7fc fe77 	bl	8000f3c <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	f241 3288 	movw	r2, #5000	; 0x1388
 8004258:	4293      	cmp	r3, r2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e0be      	b.n	80043de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004260:	4b1c      	ldr	r3, [pc, #112]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	429a      	cmp	r2, r3
 8004270:	d1eb      	bne.n	800424a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d010      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	429a      	cmp	r2, r3
 800428c:	d208      	bcs.n	80042a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800428e:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	f023 020f 	bic.w	r2, r3, #15
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	490e      	ldr	r1, [pc, #56]	; (80042d4 <HAL_RCC_ClockConfig+0x244>)
 800429c:	4313      	orrs	r3, r2
 800429e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042a0:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <HAL_RCC_ClockConfig+0x240>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 030f 	and.w	r3, r3, #15
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d214      	bcs.n	80042d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ae:	4b08      	ldr	r3, [pc, #32]	; (80042d0 <HAL_RCC_ClockConfig+0x240>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f023 020f 	bic.w	r2, r3, #15
 80042b6:	4906      	ldr	r1, [pc, #24]	; (80042d0 <HAL_RCC_ClockConfig+0x240>)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042be:	4b04      	ldr	r3, [pc, #16]	; (80042d0 <HAL_RCC_ClockConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d005      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e086      	b.n	80043de <HAL_RCC_ClockConfig+0x34e>
 80042d0:	52002000 	.word	0x52002000
 80042d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d010      	beq.n	8004306 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	4b3f      	ldr	r3, [pc, #252]	; (80043e8 <HAL_RCC_ClockConfig+0x358>)
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d208      	bcs.n	8004306 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042f4:	4b3c      	ldr	r3, [pc, #240]	; (80043e8 <HAL_RCC_ClockConfig+0x358>)
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	4939      	ldr	r1, [pc, #228]	; (80043e8 <HAL_RCC_ClockConfig+0x358>)
 8004302:	4313      	orrs	r3, r2
 8004304:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d010      	beq.n	8004334 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	4b34      	ldr	r3, [pc, #208]	; (80043e8 <HAL_RCC_ClockConfig+0x358>)
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800431e:	429a      	cmp	r2, r3
 8004320:	d208      	bcs.n	8004334 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004322:	4b31      	ldr	r3, [pc, #196]	; (80043e8 <HAL_RCC_ClockConfig+0x358>)
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	492e      	ldr	r1, [pc, #184]	; (80043e8 <HAL_RCC_ClockConfig+0x358>)
 8004330:	4313      	orrs	r3, r2
 8004332:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0310 	and.w	r3, r3, #16
 800433c:	2b00      	cmp	r3, #0
 800433e:	d010      	beq.n	8004362 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699a      	ldr	r2, [r3, #24]
 8004344:	4b28      	ldr	r3, [pc, #160]	; (80043e8 <HAL_RCC_ClockConfig+0x358>)
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800434c:	429a      	cmp	r2, r3
 800434e:	d208      	bcs.n	8004362 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004350:	4b25      	ldr	r3, [pc, #148]	; (80043e8 <HAL_RCC_ClockConfig+0x358>)
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	4922      	ldr	r1, [pc, #136]	; (80043e8 <HAL_RCC_ClockConfig+0x358>)
 800435e:	4313      	orrs	r3, r2
 8004360:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b00      	cmp	r3, #0
 800436c:	d010      	beq.n	8004390 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69da      	ldr	r2, [r3, #28]
 8004372:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <HAL_RCC_ClockConfig+0x358>)
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800437a:	429a      	cmp	r2, r3
 800437c:	d208      	bcs.n	8004390 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800437e:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <HAL_RCC_ClockConfig+0x358>)
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	4917      	ldr	r1, [pc, #92]	; (80043e8 <HAL_RCC_ClockConfig+0x358>)
 800438c:	4313      	orrs	r3, r2
 800438e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004390:	f000 f834 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 8004394:	4602      	mov	r2, r0
 8004396:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <HAL_RCC_ClockConfig+0x358>)
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	0a1b      	lsrs	r3, r3, #8
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	4912      	ldr	r1, [pc, #72]	; (80043ec <HAL_RCC_ClockConfig+0x35c>)
 80043a2:	5ccb      	ldrb	r3, [r1, r3]
 80043a4:	f003 031f 	and.w	r3, r3, #31
 80043a8:	fa22 f303 	lsr.w	r3, r2, r3
 80043ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043ae:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <HAL_RCC_ClockConfig+0x358>)
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	4a0d      	ldr	r2, [pc, #52]	; (80043ec <HAL_RCC_ClockConfig+0x35c>)
 80043b8:	5cd3      	ldrb	r3, [r2, r3]
 80043ba:	f003 031f 	and.w	r3, r3, #31
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	fa22 f303 	lsr.w	r3, r2, r3
 80043c4:	4a0a      	ldr	r2, [pc, #40]	; (80043f0 <HAL_RCC_ClockConfig+0x360>)
 80043c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043c8:	4a0a      	ldr	r2, [pc, #40]	; (80043f4 <HAL_RCC_ClockConfig+0x364>)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80043ce:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <HAL_RCC_ClockConfig+0x368>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fc fd68 	bl	8000ea8 <HAL_InitTick>
 80043d8:	4603      	mov	r3, r0
 80043da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	58024400 	.word	0x58024400
 80043ec:	08008718 	.word	0x08008718
 80043f0:	24000004 	.word	0x24000004
 80043f4:	24000000 	.word	0x24000000
 80043f8:	240668a8 	.word	0x240668a8

080043fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b089      	sub	sp, #36	; 0x24
 8004400:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004402:	4bb3      	ldr	r3, [pc, #716]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800440a:	2b18      	cmp	r3, #24
 800440c:	f200 8155 	bhi.w	80046ba <HAL_RCC_GetSysClockFreq+0x2be>
 8004410:	a201      	add	r2, pc, #4	; (adr r2, 8004418 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004416:	bf00      	nop
 8004418:	0800447d 	.word	0x0800447d
 800441c:	080046bb 	.word	0x080046bb
 8004420:	080046bb 	.word	0x080046bb
 8004424:	080046bb 	.word	0x080046bb
 8004428:	080046bb 	.word	0x080046bb
 800442c:	080046bb 	.word	0x080046bb
 8004430:	080046bb 	.word	0x080046bb
 8004434:	080046bb 	.word	0x080046bb
 8004438:	080044a3 	.word	0x080044a3
 800443c:	080046bb 	.word	0x080046bb
 8004440:	080046bb 	.word	0x080046bb
 8004444:	080046bb 	.word	0x080046bb
 8004448:	080046bb 	.word	0x080046bb
 800444c:	080046bb 	.word	0x080046bb
 8004450:	080046bb 	.word	0x080046bb
 8004454:	080046bb 	.word	0x080046bb
 8004458:	080044a9 	.word	0x080044a9
 800445c:	080046bb 	.word	0x080046bb
 8004460:	080046bb 	.word	0x080046bb
 8004464:	080046bb 	.word	0x080046bb
 8004468:	080046bb 	.word	0x080046bb
 800446c:	080046bb 	.word	0x080046bb
 8004470:	080046bb 	.word	0x080046bb
 8004474:	080046bb 	.word	0x080046bb
 8004478:	080044af 	.word	0x080044af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800447c:	4b94      	ldr	r3, [pc, #592]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d009      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004488:	4b91      	ldr	r3, [pc, #580]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	08db      	lsrs	r3, r3, #3
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	4a90      	ldr	r2, [pc, #576]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
 8004498:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800449a:	e111      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800449c:	4b8d      	ldr	r3, [pc, #564]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800449e:	61bb      	str	r3, [r7, #24]
      break;
 80044a0:	e10e      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80044a2:	4b8d      	ldr	r3, [pc, #564]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044a4:	61bb      	str	r3, [r7, #24]
      break;
 80044a6:	e10b      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80044a8:	4b8c      	ldr	r3, [pc, #560]	; (80046dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80044aa:	61bb      	str	r3, [r7, #24]
      break;
 80044ac:	e108      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044ae:	4b88      	ldr	r3, [pc, #544]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80044b8:	4b85      	ldr	r3, [pc, #532]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	091b      	lsrs	r3, r3, #4
 80044be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80044c4:	4b82      	ldr	r3, [pc, #520]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80044ce:	4b80      	ldr	r3, [pc, #512]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d2:	08db      	lsrs	r3, r3, #3
 80044d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	fb02 f303 	mul.w	r3, r2, r3
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80e1 	beq.w	80046b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	f000 8083 	beq.w	8004600 <HAL_RCC_GetSysClockFreq+0x204>
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	f200 80a1 	bhi.w	8004644 <HAL_RCC_GetSysClockFreq+0x248>
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <HAL_RCC_GetSysClockFreq+0x114>
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d056      	beq.n	80045bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800450e:	e099      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004510:	4b6f      	ldr	r3, [pc, #444]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d02d      	beq.n	8004578 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800451c:	4b6c      	ldr	r3, [pc, #432]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	08db      	lsrs	r3, r3, #3
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	4a6b      	ldr	r2, [pc, #428]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
 800452c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	ee07 3a90 	vmov	s15, r3
 8004534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	ee07 3a90 	vmov	s15, r3
 800453e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004546:	4b62      	ldr	r3, [pc, #392]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004556:	ed97 6a02 	vldr	s12, [r7, #8]
 800455a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80046e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800455e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800456a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800456e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004572:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004576:	e087      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004582:	eddf 6a58 	vldr	s13, [pc, #352]	; 80046e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800458a:	4b51      	ldr	r3, [pc, #324]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800459a:	ed97 6a02 	vldr	s12, [r7, #8]
 800459e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80046e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045ba:	e065      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80046e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80045ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ce:	4b40      	ldr	r3, [pc, #256]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045de:	ed97 6a02 	vldr	s12, [r7, #8]
 80045e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80046e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045fe:	e043      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80046ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800460e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004612:	4b2f      	ldr	r3, [pc, #188]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004622:	ed97 6a02 	vldr	s12, [r7, #8]
 8004626:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80046e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800462a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800462e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800463a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004642:	e021      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80046e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004656:	4b1e      	ldr	r3, [pc, #120]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004666:	ed97 6a02 	vldr	s12, [r7, #8]
 800466a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80046e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800466e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800467a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800467e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004682:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004686:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004688:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	0a5b      	lsrs	r3, r3, #9
 800468e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004692:	3301      	adds	r3, #1
 8004694:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	ee07 3a90 	vmov	s15, r3
 800469c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80046a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ac:	ee17 3a90 	vmov	r3, s15
 80046b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80046b2:	e005      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	61bb      	str	r3, [r7, #24]
      break;
 80046b8:	e002      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80046ba:	4b07      	ldr	r3, [pc, #28]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046bc:	61bb      	str	r3, [r7, #24]
      break;
 80046be:	bf00      	nop
  }

  return sysclockfreq;
 80046c0:	69bb      	ldr	r3, [r7, #24]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3724      	adds	r7, #36	; 0x24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	58024400 	.word	0x58024400
 80046d4:	03d09000 	.word	0x03d09000
 80046d8:	003d0900 	.word	0x003d0900
 80046dc:	007a1200 	.word	0x007a1200
 80046e0:	46000000 	.word	0x46000000
 80046e4:	4c742400 	.word	0x4c742400
 80046e8:	4a742400 	.word	0x4a742400
 80046ec:	4af42400 	.word	0x4af42400

080046f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80046f6:	f7ff fe81 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 80046fa:	4602      	mov	r2, r0
 80046fc:	4b10      	ldr	r3, [pc, #64]	; (8004740 <HAL_RCC_GetHCLKFreq+0x50>)
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	0a1b      	lsrs	r3, r3, #8
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	490f      	ldr	r1, [pc, #60]	; (8004744 <HAL_RCC_GetHCLKFreq+0x54>)
 8004708:	5ccb      	ldrb	r3, [r1, r3]
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	fa22 f303 	lsr.w	r3, r2, r3
 8004712:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004714:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <HAL_RCC_GetHCLKFreq+0x50>)
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	f003 030f 	and.w	r3, r3, #15
 800471c:	4a09      	ldr	r2, [pc, #36]	; (8004744 <HAL_RCC_GetHCLKFreq+0x54>)
 800471e:	5cd3      	ldrb	r3, [r2, r3]
 8004720:	f003 031f 	and.w	r3, r3, #31
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	fa22 f303 	lsr.w	r3, r2, r3
 800472a:	4a07      	ldr	r2, [pc, #28]	; (8004748 <HAL_RCC_GetHCLKFreq+0x58>)
 800472c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800472e:	4a07      	ldr	r2, [pc, #28]	; (800474c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004734:	4b04      	ldr	r3, [pc, #16]	; (8004748 <HAL_RCC_GetHCLKFreq+0x58>)
 8004736:	681b      	ldr	r3, [r3, #0]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	58024400 	.word	0x58024400
 8004744:	08008718 	.word	0x08008718
 8004748:	24000004 	.word	0x24000004
 800474c:	24000000 	.word	0x24000000

08004750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004754:	f7ff ffcc 	bl	80046f0 <HAL_RCC_GetHCLKFreq>
 8004758:	4602      	mov	r2, r0
 800475a:	4b06      	ldr	r3, [pc, #24]	; (8004774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	091b      	lsrs	r3, r3, #4
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	4904      	ldr	r1, [pc, #16]	; (8004778 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004766:	5ccb      	ldrb	r3, [r1, r3]
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004770:	4618      	mov	r0, r3
 8004772:	bd80      	pop	{r7, pc}
 8004774:	58024400 	.word	0x58024400
 8004778:	08008718 	.word	0x08008718

0800477c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004780:	f7ff ffb6 	bl	80046f0 <HAL_RCC_GetHCLKFreq>
 8004784:	4602      	mov	r2, r0
 8004786:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	0a1b      	lsrs	r3, r3, #8
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	4904      	ldr	r1, [pc, #16]	; (80047a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004792:	5ccb      	ldrb	r3, [r1, r3]
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800479c:	4618      	mov	r0, r3
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	58024400 	.word	0x58024400
 80047a4:	08008718 	.word	0x08008718

080047a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ac:	b0ca      	sub	sp, #296	; 0x128
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047b4:	2300      	movs	r3, #0
 80047b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047ba:	2300      	movs	r3, #0
 80047bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80047cc:	2500      	movs	r5, #0
 80047ce:	ea54 0305 	orrs.w	r3, r4, r5
 80047d2:	d049      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80047d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047de:	d02f      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80047e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047e4:	d828      	bhi.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80047e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047ea:	d01a      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80047ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047f0:	d822      	bhi.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80047f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047fa:	d007      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80047fc:	e01c      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047fe:	4bb8      	ldr	r3, [pc, #736]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	4ab7      	ldr	r2, [pc, #732]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004808:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800480a:	e01a      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800480c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004810:	3308      	adds	r3, #8
 8004812:	2102      	movs	r1, #2
 8004814:	4618      	mov	r0, r3
 8004816:	f001 fc8f 	bl	8006138 <RCCEx_PLL2_Config>
 800481a:	4603      	mov	r3, r0
 800481c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004820:	e00f      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004826:	3328      	adds	r3, #40	; 0x28
 8004828:	2102      	movs	r1, #2
 800482a:	4618      	mov	r0, r3
 800482c:	f001 fd36 	bl	800629c <RCCEx_PLL3_Config>
 8004830:	4603      	mov	r3, r0
 8004832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004836:	e004      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800483e:	e000      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004842:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10a      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800484a:	4ba5      	ldr	r3, [pc, #660]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800484c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004858:	4aa1      	ldr	r2, [pc, #644]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800485a:	430b      	orrs	r3, r1
 800485c:	6513      	str	r3, [r2, #80]	; 0x50
 800485e:	e003      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004860:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004864:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004870:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004874:	f04f 0900 	mov.w	r9, #0
 8004878:	ea58 0309 	orrs.w	r3, r8, r9
 800487c:	d047      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800487e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004884:	2b04      	cmp	r3, #4
 8004886:	d82a      	bhi.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004888:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800488a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488e:	bf00      	nop
 8004890:	080048a5 	.word	0x080048a5
 8004894:	080048b3 	.word	0x080048b3
 8004898:	080048c9 	.word	0x080048c9
 800489c:	080048e7 	.word	0x080048e7
 80048a0:	080048e7 	.word	0x080048e7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a4:	4b8e      	ldr	r3, [pc, #568]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	4a8d      	ldr	r2, [pc, #564]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048b0:	e01a      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b6:	3308      	adds	r3, #8
 80048b8:	2100      	movs	r1, #0
 80048ba:	4618      	mov	r0, r3
 80048bc:	f001 fc3c 	bl	8006138 <RCCEx_PLL2_Config>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048c6:	e00f      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048cc:	3328      	adds	r3, #40	; 0x28
 80048ce:	2100      	movs	r1, #0
 80048d0:	4618      	mov	r0, r3
 80048d2:	f001 fce3 	bl	800629c <RCCEx_PLL3_Config>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048dc:	e004      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048e4:	e000      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80048e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048f0:	4b7b      	ldr	r3, [pc, #492]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f4:	f023 0107 	bic.w	r1, r3, #7
 80048f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fe:	4a78      	ldr	r2, [pc, #480]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004900:	430b      	orrs	r3, r1
 8004902:	6513      	str	r3, [r2, #80]	; 0x50
 8004904:	e003      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004906:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800490a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800490e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004916:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800491a:	f04f 0b00 	mov.w	fp, #0
 800491e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004922:	d04c      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492e:	d030      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004934:	d829      	bhi.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004936:	2bc0      	cmp	r3, #192	; 0xc0
 8004938:	d02d      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800493a:	2bc0      	cmp	r3, #192	; 0xc0
 800493c:	d825      	bhi.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800493e:	2b80      	cmp	r3, #128	; 0x80
 8004940:	d018      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004942:	2b80      	cmp	r3, #128	; 0x80
 8004944:	d821      	bhi.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800494a:	2b40      	cmp	r3, #64	; 0x40
 800494c:	d007      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800494e:	e01c      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004950:	4b63      	ldr	r3, [pc, #396]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	4a62      	ldr	r2, [pc, #392]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800495a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800495c:	e01c      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800495e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004962:	3308      	adds	r3, #8
 8004964:	2100      	movs	r1, #0
 8004966:	4618      	mov	r0, r3
 8004968:	f001 fbe6 	bl	8006138 <RCCEx_PLL2_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004972:	e011      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004978:	3328      	adds	r3, #40	; 0x28
 800497a:	2100      	movs	r1, #0
 800497c:	4618      	mov	r0, r3
 800497e:	f001 fc8d 	bl	800629c <RCCEx_PLL3_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004988:	e006      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004990:	e002      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004992:	bf00      	nop
 8004994:	e000      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004998:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10a      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80049a0:	4b4f      	ldr	r3, [pc, #316]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80049a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ae:	4a4c      	ldr	r2, [pc, #304]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049b0:	430b      	orrs	r3, r1
 80049b2:	6513      	str	r3, [r2, #80]	; 0x50
 80049b4:	e003      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80049be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80049ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80049ce:	2300      	movs	r3, #0
 80049d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80049d4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80049d8:	460b      	mov	r3, r1
 80049da:	4313      	orrs	r3, r2
 80049dc:	d053      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80049de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80049e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049ea:	d035      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80049ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049f0:	d82e      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80049f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80049f6:	d031      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80049f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80049fc:	d828      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80049fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a02:	d01a      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a08:	d822      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004a0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a12:	d007      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004a14:	e01c      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a16:	4b32      	ldr	r3, [pc, #200]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	4a31      	ldr	r2, [pc, #196]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a22:	e01c      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a28:	3308      	adds	r3, #8
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f001 fb83 	bl	8006138 <RCCEx_PLL2_Config>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004a38:	e011      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a3e:	3328      	adds	r3, #40	; 0x28
 8004a40:	2100      	movs	r1, #0
 8004a42:	4618      	mov	r0, r3
 8004a44:	f001 fc2a 	bl	800629c <RCCEx_PLL3_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a4e:	e006      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a56:	e002      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004a58:	bf00      	nop
 8004a5a:	e000      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10b      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a66:	4b1e      	ldr	r3, [pc, #120]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a76:	4a1a      	ldr	r2, [pc, #104]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a7c:	e003      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004a92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004a96:	2300      	movs	r3, #0
 8004a98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004a9c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	d056      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aaa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004aae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ab2:	d038      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004ab4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ab8:	d831      	bhi.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004aba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004abe:	d034      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004ac0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ac4:	d82b      	bhi.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ac6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004aca:	d01d      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004acc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ad0:	d825      	bhi.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d006      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004ad6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ada:	d00a      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004adc:	e01f      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ade:	bf00      	nop
 8004ae0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae4:	4ba2      	ldr	r3, [pc, #648]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	4aa1      	ldr	r2, [pc, #644]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004af0:	e01c      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af6:	3308      	adds	r3, #8
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f001 fb1c 	bl	8006138 <RCCEx_PLL2_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004b06:	e011      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b0c:	3328      	adds	r3, #40	; 0x28
 8004b0e:	2100      	movs	r1, #0
 8004b10:	4618      	mov	r0, r3
 8004b12:	f001 fbc3 	bl	800629c <RCCEx_PLL3_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b1c:	e006      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b24:	e002      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004b26:	bf00      	nop
 8004b28:	e000      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10b      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004b34:	4b8e      	ldr	r3, [pc, #568]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b38:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b44:	4a8a      	ldr	r2, [pc, #552]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b46:	430b      	orrs	r3, r1
 8004b48:	6593      	str	r3, [r2, #88]	; 0x58
 8004b4a:	e003      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004b60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004b64:	2300      	movs	r3, #0
 8004b66:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004b6a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4313      	orrs	r3, r2
 8004b72:	d03a      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7a:	2b30      	cmp	r3, #48	; 0x30
 8004b7c:	d01f      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004b7e:	2b30      	cmp	r3, #48	; 0x30
 8004b80:	d819      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004b82:	2b20      	cmp	r3, #32
 8004b84:	d00c      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	d815      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d019      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004b8e:	2b10      	cmp	r3, #16
 8004b90:	d111      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b92:	4b77      	ldr	r3, [pc, #476]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	4a76      	ldr	r2, [pc, #472]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004b9e:	e011      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ba4:	3308      	adds	r3, #8
 8004ba6:	2102      	movs	r1, #2
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f001 fac5 	bl	8006138 <RCCEx_PLL2_Config>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004bb4:	e006      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bbc:	e002      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004bbe:	bf00      	nop
 8004bc0:	e000      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10a      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004bcc:	4b68      	ldr	r3, [pc, #416]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bda:	4a65      	ldr	r2, [pc, #404]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004be0:	e003      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004be6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004bf6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004c00:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4313      	orrs	r3, r2
 8004c08:	d051      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c14:	d035      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004c16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c1a:	d82e      	bhi.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004c1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c20:	d031      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004c22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c26:	d828      	bhi.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c2c:	d01a      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c32:	d822      	bhi.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3c:	d007      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004c3e:	e01c      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c40:	4b4b      	ldr	r3, [pc, #300]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	4a4a      	ldr	r2, [pc, #296]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c4c:	e01c      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c52:	3308      	adds	r3, #8
 8004c54:	2100      	movs	r1, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	f001 fa6e 	bl	8006138 <RCCEx_PLL2_Config>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c62:	e011      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c68:	3328      	adds	r3, #40	; 0x28
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f001 fb15 	bl	800629c <RCCEx_PLL3_Config>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c78:	e006      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c80:	e002      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004c82:	bf00      	nop
 8004c84:	e000      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004c86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c90:	4b37      	ldr	r3, [pc, #220]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c94:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c9e:	4a34      	ldr	r2, [pc, #208]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	6513      	str	r3, [r2, #80]	; 0x50
 8004ca4:	e003      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004caa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004cba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004cc4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	d056      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd8:	d033      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004cda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cde:	d82c      	bhi.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ce0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ce4:	d02f      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004ce6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cea:	d826      	bhi.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004cec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cf0:	d02b      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004cf2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cf6:	d820      	bhi.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004cf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cfc:	d012      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004cfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d02:	d81a      	bhi.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d022      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d0c:	d115      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d12:	3308      	adds	r3, #8
 8004d14:	2101      	movs	r1, #1
 8004d16:	4618      	mov	r0, r3
 8004d18:	f001 fa0e 	bl	8006138 <RCCEx_PLL2_Config>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d22:	e015      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d28:	3328      	adds	r3, #40	; 0x28
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f001 fab5 	bl	800629c <RCCEx_PLL3_Config>
 8004d32:	4603      	mov	r3, r0
 8004d34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d38:	e00a      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d40:	e006      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d42:	bf00      	nop
 8004d44:	e004      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d46:	bf00      	nop
 8004d48:	e002      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d4a:	bf00      	nop
 8004d4c:	e000      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10d      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d58:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d5c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d66:	4a02      	ldr	r2, [pc, #8]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d68:	430b      	orrs	r3, r1
 8004d6a:	6513      	str	r3, [r2, #80]	; 0x50
 8004d6c:	e006      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004d6e:	bf00      	nop
 8004d70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d84:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004d88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d92:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	d055      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004da0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004da8:	d033      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dae:	d82c      	bhi.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db4:	d02f      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dba:	d826      	bhi.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004dbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004dc0:	d02b      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004dc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004dc6:	d820      	bhi.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dcc:	d012      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dd2:	d81a      	bhi.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d022      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004dd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ddc:	d115      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004de2:	3308      	adds	r3, #8
 8004de4:	2101      	movs	r1, #1
 8004de6:	4618      	mov	r0, r3
 8004de8:	f001 f9a6 	bl	8006138 <RCCEx_PLL2_Config>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004df2:	e015      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004df8:	3328      	adds	r3, #40	; 0x28
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f001 fa4d 	bl	800629c <RCCEx_PLL3_Config>
 8004e02:	4603      	mov	r3, r0
 8004e04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e08:	e00a      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e10:	e006      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e12:	bf00      	nop
 8004e14:	e004      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e16:	bf00      	nop
 8004e18:	e002      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e1a:	bf00      	nop
 8004e1c:	e000      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10b      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e28:	4ba3      	ldr	r3, [pc, #652]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e38:	4a9f      	ldr	r2, [pc, #636]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e3a:	430b      	orrs	r3, r1
 8004e3c:	6593      	str	r3, [r2, #88]	; 0x58
 8004e3e:	e003      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e50:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004e5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e62:	460b      	mov	r3, r1
 8004e64:	4313      	orrs	r3, r2
 8004e66:	d037      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e72:	d00e      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e78:	d816      	bhi.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d018      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e82:	d111      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e84:	4b8c      	ldr	r3, [pc, #560]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	4a8b      	ldr	r2, [pc, #556]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e90:	e00f      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e96:	3308      	adds	r3, #8
 8004e98:	2101      	movs	r1, #1
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f001 f94c 	bl	8006138 <RCCEx_PLL2_Config>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004ea6:	e004      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004eae:	e000      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10a      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004eba:	4b7f      	ldr	r3, [pc, #508]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ebe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec8:	4a7b      	ldr	r2, [pc, #492]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eca:	430b      	orrs	r3, r1
 8004ecc:	6513      	str	r3, [r2, #80]	; 0x50
 8004ece:	e003      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ed4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004eee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	d039      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d81c      	bhi.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004f02:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f08:	08004f45 	.word	0x08004f45
 8004f0c:	08004f19 	.word	0x08004f19
 8004f10:	08004f27 	.word	0x08004f27
 8004f14:	08004f45 	.word	0x08004f45
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f18:	4b67      	ldr	r3, [pc, #412]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	4a66      	ldr	r2, [pc, #408]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f24:	e00f      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f2a:	3308      	adds	r3, #8
 8004f2c:	2102      	movs	r1, #2
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f001 f902 	bl	8006138 <RCCEx_PLL2_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f3a:	e004      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f42:	e000      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10a      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f4e:	4b5a      	ldr	r3, [pc, #360]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f52:	f023 0103 	bic.w	r1, r3, #3
 8004f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f5c:	4a56      	ldr	r2, [pc, #344]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f5e:	430b      	orrs	r3, r1
 8004f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f62:	e003      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f74:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004f78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004f86:	460b      	mov	r3, r1
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f000 809f 	beq.w	80050cc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f8e:	4b4b      	ldr	r3, [pc, #300]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a4a      	ldr	r2, [pc, #296]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f9a:	f7fb ffcf 	bl	8000f3c <HAL_GetTick>
 8004f9e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fa2:	e00b      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fa4:	f7fb ffca 	bl	8000f3c <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b64      	cmp	r3, #100	; 0x64
 8004fb2:	d903      	bls.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004fba:	e005      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fbc:	4b3f      	ldr	r3, [pc, #252]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0ed      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d179      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004fd0:	4b39      	ldr	r3, [pc, #228]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004fdc:	4053      	eors	r3, r2
 8004fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d015      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fe6:	4b34      	ldr	r3, [pc, #208]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ff2:	4b31      	ldr	r3, [pc, #196]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff6:	4a30      	ldr	r2, [pc, #192]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ffe:	4b2e      	ldr	r3, [pc, #184]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005002:	4a2d      	ldr	r2, [pc, #180]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005008:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800500a:	4a2b      	ldr	r2, [pc, #172]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800500c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005010:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005016:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800501a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800501e:	d118      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005020:	f7fb ff8c 	bl	8000f3c <HAL_GetTick>
 8005024:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005028:	e00d      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800502a:	f7fb ff87 	bl	8000f3c <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005034:	1ad2      	subs	r2, r2, r3
 8005036:	f241 3388 	movw	r3, #5000	; 0x1388
 800503a:	429a      	cmp	r2, r3
 800503c:	d903      	bls.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005044:	e005      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005046:	4b1c      	ldr	r3, [pc, #112]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0eb      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005052:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005056:	2b00      	cmp	r3, #0
 8005058:	d129      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800505a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800505e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800506a:	d10e      	bne.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800506c:	4b12      	ldr	r3, [pc, #72]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005078:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800507c:	091a      	lsrs	r2, r3, #4
 800507e:	4b10      	ldr	r3, [pc, #64]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005080:	4013      	ands	r3, r2
 8005082:	4a0d      	ldr	r2, [pc, #52]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005084:	430b      	orrs	r3, r1
 8005086:	6113      	str	r3, [r2, #16]
 8005088:	e005      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800508a:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	4a0a      	ldr	r2, [pc, #40]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005090:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005094:	6113      	str	r3, [r2, #16]
 8005096:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005098:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800509a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800509e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80050a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050a6:	4a04      	ldr	r2, [pc, #16]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050a8:	430b      	orrs	r3, r1
 80050aa:	6713      	str	r3, [r2, #112]	; 0x70
 80050ac:	e00e      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80050b6:	e009      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80050b8:	58024400 	.word	0x58024400
 80050bc:	58024800 	.word	0x58024800
 80050c0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80050cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d4:	f002 0301 	and.w	r3, r2, #1
 80050d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050dc:	2300      	movs	r3, #0
 80050de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f000 8089 	beq.w	8005200 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80050ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050f4:	2b28      	cmp	r3, #40	; 0x28
 80050f6:	d86b      	bhi.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80050f8:	a201      	add	r2, pc, #4	; (adr r2, 8005100 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80050fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fe:	bf00      	nop
 8005100:	080051d9 	.word	0x080051d9
 8005104:	080051d1 	.word	0x080051d1
 8005108:	080051d1 	.word	0x080051d1
 800510c:	080051d1 	.word	0x080051d1
 8005110:	080051d1 	.word	0x080051d1
 8005114:	080051d1 	.word	0x080051d1
 8005118:	080051d1 	.word	0x080051d1
 800511c:	080051d1 	.word	0x080051d1
 8005120:	080051a5 	.word	0x080051a5
 8005124:	080051d1 	.word	0x080051d1
 8005128:	080051d1 	.word	0x080051d1
 800512c:	080051d1 	.word	0x080051d1
 8005130:	080051d1 	.word	0x080051d1
 8005134:	080051d1 	.word	0x080051d1
 8005138:	080051d1 	.word	0x080051d1
 800513c:	080051d1 	.word	0x080051d1
 8005140:	080051bb 	.word	0x080051bb
 8005144:	080051d1 	.word	0x080051d1
 8005148:	080051d1 	.word	0x080051d1
 800514c:	080051d1 	.word	0x080051d1
 8005150:	080051d1 	.word	0x080051d1
 8005154:	080051d1 	.word	0x080051d1
 8005158:	080051d1 	.word	0x080051d1
 800515c:	080051d1 	.word	0x080051d1
 8005160:	080051d9 	.word	0x080051d9
 8005164:	080051d1 	.word	0x080051d1
 8005168:	080051d1 	.word	0x080051d1
 800516c:	080051d1 	.word	0x080051d1
 8005170:	080051d1 	.word	0x080051d1
 8005174:	080051d1 	.word	0x080051d1
 8005178:	080051d1 	.word	0x080051d1
 800517c:	080051d1 	.word	0x080051d1
 8005180:	080051d9 	.word	0x080051d9
 8005184:	080051d1 	.word	0x080051d1
 8005188:	080051d1 	.word	0x080051d1
 800518c:	080051d1 	.word	0x080051d1
 8005190:	080051d1 	.word	0x080051d1
 8005194:	080051d1 	.word	0x080051d1
 8005198:	080051d1 	.word	0x080051d1
 800519c:	080051d1 	.word	0x080051d1
 80051a0:	080051d9 	.word	0x080051d9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a8:	3308      	adds	r3, #8
 80051aa:	2101      	movs	r1, #1
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 ffc3 	bl	8006138 <RCCEx_PLL2_Config>
 80051b2:	4603      	mov	r3, r0
 80051b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051b8:	e00f      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051be:	3328      	adds	r3, #40	; 0x28
 80051c0:	2101      	movs	r1, #1
 80051c2:	4618      	mov	r0, r3
 80051c4:	f001 f86a 	bl	800629c <RCCEx_PLL3_Config>
 80051c8:	4603      	mov	r3, r0
 80051ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051ce:	e004      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051d6:	e000      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80051d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10a      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80051e2:	4bbf      	ldr	r3, [pc, #764]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80051ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051f0:	4abb      	ldr	r2, [pc, #748]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051f2:	430b      	orrs	r3, r1
 80051f4:	6553      	str	r3, [r2, #84]	; 0x54
 80051f6:	e003      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005208:	f002 0302 	and.w	r3, r2, #2
 800520c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005210:	2300      	movs	r3, #0
 8005212:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005216:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800521a:	460b      	mov	r3, r1
 800521c:	4313      	orrs	r3, r2
 800521e:	d041      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005226:	2b05      	cmp	r3, #5
 8005228:	d824      	bhi.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800522a:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	0800527d 	.word	0x0800527d
 8005234:	08005249 	.word	0x08005249
 8005238:	0800525f 	.word	0x0800525f
 800523c:	0800527d 	.word	0x0800527d
 8005240:	0800527d 	.word	0x0800527d
 8005244:	0800527d 	.word	0x0800527d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800524c:	3308      	adds	r3, #8
 800524e:	2101      	movs	r1, #1
 8005250:	4618      	mov	r0, r3
 8005252:	f000 ff71 	bl	8006138 <RCCEx_PLL2_Config>
 8005256:	4603      	mov	r3, r0
 8005258:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800525c:	e00f      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800525e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005262:	3328      	adds	r3, #40	; 0x28
 8005264:	2101      	movs	r1, #1
 8005266:	4618      	mov	r0, r3
 8005268:	f001 f818 	bl	800629c <RCCEx_PLL3_Config>
 800526c:	4603      	mov	r3, r0
 800526e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005272:	e004      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800527a:	e000      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800527c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800527e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10a      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005286:	4b96      	ldr	r3, [pc, #600]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528a:	f023 0107 	bic.w	r1, r3, #7
 800528e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005292:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005294:	4a92      	ldr	r2, [pc, #584]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005296:	430b      	orrs	r3, r1
 8005298:	6553      	str	r3, [r2, #84]	; 0x54
 800529a:	e003      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ac:	f002 0304 	and.w	r3, r2, #4
 80052b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052b4:	2300      	movs	r3, #0
 80052b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80052be:	460b      	mov	r3, r1
 80052c0:	4313      	orrs	r3, r2
 80052c2:	d044      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80052c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052cc:	2b05      	cmp	r3, #5
 80052ce:	d825      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80052d0:	a201      	add	r2, pc, #4	; (adr r2, 80052d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80052d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d6:	bf00      	nop
 80052d8:	08005325 	.word	0x08005325
 80052dc:	080052f1 	.word	0x080052f1
 80052e0:	08005307 	.word	0x08005307
 80052e4:	08005325 	.word	0x08005325
 80052e8:	08005325 	.word	0x08005325
 80052ec:	08005325 	.word	0x08005325
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052f4:	3308      	adds	r3, #8
 80052f6:	2101      	movs	r1, #1
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 ff1d 	bl	8006138 <RCCEx_PLL2_Config>
 80052fe:	4603      	mov	r3, r0
 8005300:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005304:	e00f      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800530a:	3328      	adds	r3, #40	; 0x28
 800530c:	2101      	movs	r1, #1
 800530e:	4618      	mov	r0, r3
 8005310:	f000 ffc4 	bl	800629c <RCCEx_PLL3_Config>
 8005314:	4603      	mov	r3, r0
 8005316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800531a:	e004      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005322:	e000      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10b      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800532e:	4b6c      	ldr	r3, [pc, #432]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005332:	f023 0107 	bic.w	r1, r3, #7
 8005336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800533a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800533e:	4a68      	ldr	r2, [pc, #416]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005340:	430b      	orrs	r3, r1
 8005342:	6593      	str	r3, [r2, #88]	; 0x58
 8005344:	e003      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800534a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800534e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005356:	f002 0320 	and.w	r3, r2, #32
 800535a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800535e:	2300      	movs	r3, #0
 8005360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005364:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005368:	460b      	mov	r3, r1
 800536a:	4313      	orrs	r3, r2
 800536c:	d055      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800536e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005376:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800537a:	d033      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800537c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005380:	d82c      	bhi.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005386:	d02f      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538c:	d826      	bhi.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800538e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005392:	d02b      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005394:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005398:	d820      	bhi.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800539a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800539e:	d012      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80053a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053a4:	d81a      	bhi.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d022      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80053aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053ae:	d115      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053b4:	3308      	adds	r3, #8
 80053b6:	2100      	movs	r1, #0
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 febd 	bl	8006138 <RCCEx_PLL2_Config>
 80053be:	4603      	mov	r3, r0
 80053c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80053c4:	e015      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ca:	3328      	adds	r3, #40	; 0x28
 80053cc:	2102      	movs	r1, #2
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 ff64 	bl	800629c <RCCEx_PLL3_Config>
 80053d4:	4603      	mov	r3, r0
 80053d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80053da:	e00a      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053e2:	e006      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053e4:	bf00      	nop
 80053e6:	e004      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053e8:	bf00      	nop
 80053ea:	e002      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053ec:	bf00      	nop
 80053ee:	e000      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10b      	bne.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053fa:	4b39      	ldr	r3, [pc, #228]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540a:	4a35      	ldr	r2, [pc, #212]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800540c:	430b      	orrs	r3, r1
 800540e:	6553      	str	r3, [r2, #84]	; 0x54
 8005410:	e003      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005416:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800541a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800541e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005422:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005426:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800542a:	2300      	movs	r3, #0
 800542c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005430:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005434:	460b      	mov	r3, r1
 8005436:	4313      	orrs	r3, r2
 8005438:	d058      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800543a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800543e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005442:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005446:	d033      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005448:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800544c:	d82c      	bhi.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800544e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005452:	d02f      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005458:	d826      	bhi.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800545a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800545e:	d02b      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005460:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005464:	d820      	bhi.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800546a:	d012      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800546c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005470:	d81a      	bhi.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005472:	2b00      	cmp	r3, #0
 8005474:	d022      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800547a:	d115      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800547c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005480:	3308      	adds	r3, #8
 8005482:	2100      	movs	r1, #0
 8005484:	4618      	mov	r0, r3
 8005486:	f000 fe57 	bl	8006138 <RCCEx_PLL2_Config>
 800548a:	4603      	mov	r3, r0
 800548c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005490:	e015      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005496:	3328      	adds	r3, #40	; 0x28
 8005498:	2102      	movs	r1, #2
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fefe 	bl	800629c <RCCEx_PLL3_Config>
 80054a0:	4603      	mov	r3, r0
 80054a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80054a6:	e00a      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054ae:	e006      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80054b0:	bf00      	nop
 80054b2:	e004      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80054b4:	bf00      	nop
 80054b6:	e002      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80054b8:	bf00      	nop
 80054ba:	e000      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80054bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10e      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054c6:	4b06      	ldr	r3, [pc, #24]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ca:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80054ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054d6:	4a02      	ldr	r2, [pc, #8]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054d8:	430b      	orrs	r3, r1
 80054da:	6593      	str	r3, [r2, #88]	; 0x58
 80054dc:	e006      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80054de:	bf00      	nop
 80054e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80054f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054fc:	2300      	movs	r3, #0
 80054fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005502:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005506:	460b      	mov	r3, r1
 8005508:	4313      	orrs	r3, r2
 800550a:	d055      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800550c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005510:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005514:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005518:	d033      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800551a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800551e:	d82c      	bhi.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005524:	d02f      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800552a:	d826      	bhi.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800552c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005530:	d02b      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005532:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005536:	d820      	bhi.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800553c:	d012      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800553e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005542:	d81a      	bhi.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005544:	2b00      	cmp	r3, #0
 8005546:	d022      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800554c:	d115      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800554e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005552:	3308      	adds	r3, #8
 8005554:	2100      	movs	r1, #0
 8005556:	4618      	mov	r0, r3
 8005558:	f000 fdee 	bl	8006138 <RCCEx_PLL2_Config>
 800555c:	4603      	mov	r3, r0
 800555e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005562:	e015      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005568:	3328      	adds	r3, #40	; 0x28
 800556a:	2102      	movs	r1, #2
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fe95 	bl	800629c <RCCEx_PLL3_Config>
 8005572:	4603      	mov	r3, r0
 8005574:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005578:	e00a      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005580:	e006      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005582:	bf00      	nop
 8005584:	e004      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005586:	bf00      	nop
 8005588:	e002      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800558a:	bf00      	nop
 800558c:	e000      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800558e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005590:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10b      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005598:	4ba1      	ldr	r3, [pc, #644]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800559a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80055a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80055a8:	4a9d      	ldr	r2, [pc, #628]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055aa:	430b      	orrs	r3, r1
 80055ac:	6593      	str	r3, [r2, #88]	; 0x58
 80055ae:	e003      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80055b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f002 0308 	and.w	r3, r2, #8
 80055c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055c8:	2300      	movs	r3, #0
 80055ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80055ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80055d2:	460b      	mov	r3, r1
 80055d4:	4313      	orrs	r3, r2
 80055d6:	d01e      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80055d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e4:	d10c      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ea:	3328      	adds	r3, #40	; 0x28
 80055ec:	2102      	movs	r1, #2
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fe54 	bl	800629c <RCCEx_PLL3_Config>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005600:	4b87      	ldr	r3, [pc, #540]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005604:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800560c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005610:	4a83      	ldr	r2, [pc, #524]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005612:	430b      	orrs	r3, r1
 8005614:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800561a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561e:	f002 0310 	and.w	r3, r2, #16
 8005622:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005626:	2300      	movs	r3, #0
 8005628:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800562c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005630:	460b      	mov	r3, r1
 8005632:	4313      	orrs	r3, r2
 8005634:	d01e      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800563a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800563e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005642:	d10c      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005648:	3328      	adds	r3, #40	; 0x28
 800564a:	2102      	movs	r1, #2
 800564c:	4618      	mov	r0, r3
 800564e:	f000 fe25 	bl	800629c <RCCEx_PLL3_Config>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800565e:	4b70      	ldr	r3, [pc, #448]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005662:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800566a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800566e:	4a6c      	ldr	r2, [pc, #432]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005670:	430b      	orrs	r3, r1
 8005672:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005680:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005684:	2300      	movs	r3, #0
 8005686:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800568a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800568e:	460b      	mov	r3, r1
 8005690:	4313      	orrs	r3, r2
 8005692:	d03e      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005698:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800569c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056a0:	d022      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80056a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056a6:	d81b      	bhi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80056ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b0:	d00b      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80056b2:	e015      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b8:	3308      	adds	r3, #8
 80056ba:	2100      	movs	r1, #0
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fd3b 	bl	8006138 <RCCEx_PLL2_Config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056c8:	e00f      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ce:	3328      	adds	r3, #40	; 0x28
 80056d0:	2102      	movs	r1, #2
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fde2 	bl	800629c <RCCEx_PLL3_Config>
 80056d8:	4603      	mov	r3, r0
 80056da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056de:	e004      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056e6:	e000      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80056e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10b      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056f2:	4b4b      	ldr	r3, [pc, #300]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80056fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005702:	4a47      	ldr	r2, [pc, #284]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005704:	430b      	orrs	r3, r1
 8005706:	6593      	str	r3, [r2, #88]	; 0x58
 8005708:	e003      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800570e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800571e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005720:	2300      	movs	r3, #0
 8005722:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005724:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005728:	460b      	mov	r3, r1
 800572a:	4313      	orrs	r3, r2
 800572c:	d03b      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800572e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005736:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800573a:	d01f      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800573c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005740:	d818      	bhi.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005746:	d003      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005748:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800574c:	d007      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800574e:	e011      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005750:	4b33      	ldr	r3, [pc, #204]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	4a32      	ldr	r2, [pc, #200]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800575a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800575c:	e00f      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800575e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005762:	3328      	adds	r3, #40	; 0x28
 8005764:	2101      	movs	r1, #1
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fd98 	bl	800629c <RCCEx_PLL3_Config>
 800576c:	4603      	mov	r3, r0
 800576e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005772:	e004      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800577a:	e000      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800577c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800577e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10b      	bne.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005786:	4b26      	ldr	r3, [pc, #152]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800578e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005796:	4a22      	ldr	r2, [pc, #136]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005798:	430b      	orrs	r3, r1
 800579a:	6553      	str	r3, [r2, #84]	; 0x54
 800579c:	e003      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80057a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80057b2:	673b      	str	r3, [r7, #112]	; 0x70
 80057b4:	2300      	movs	r3, #0
 80057b6:	677b      	str	r3, [r7, #116]	; 0x74
 80057b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80057bc:	460b      	mov	r3, r1
 80057be:	4313      	orrs	r3, r2
 80057c0:	d034      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80057c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80057cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d0:	d007      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80057d2:	e011      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057d4:	4b12      	ldr	r3, [pc, #72]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	4a11      	ldr	r2, [pc, #68]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057e0:	e00e      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e6:	3308      	adds	r3, #8
 80057e8:	2102      	movs	r1, #2
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fca4 	bl	8006138 <RCCEx_PLL2_Config>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057f6:	e003      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005800:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10d      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005808:	4b05      	ldr	r3, [pc, #20]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800580a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800580c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005816:	4a02      	ldr	r2, [pc, #8]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005818:	430b      	orrs	r3, r1
 800581a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800581c:	e006      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800581e:	bf00      	nop
 8005820:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005824:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005828:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800582c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005834:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005838:	66bb      	str	r3, [r7, #104]	; 0x68
 800583a:	2300      	movs	r3, #0
 800583c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800583e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005842:	460b      	mov	r3, r1
 8005844:	4313      	orrs	r3, r2
 8005846:	d00c      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800584c:	3328      	adds	r3, #40	; 0x28
 800584e:	2102      	movs	r1, #2
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fd23 	bl	800629c <RCCEx_PLL3_Config>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800586e:	663b      	str	r3, [r7, #96]	; 0x60
 8005870:	2300      	movs	r3, #0
 8005872:	667b      	str	r3, [r7, #100]	; 0x64
 8005874:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005878:	460b      	mov	r3, r1
 800587a:	4313      	orrs	r3, r2
 800587c:	d038      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800587e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005886:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800588a:	d018      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800588c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005890:	d811      	bhi.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005896:	d014      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800589c:	d80b      	bhi.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d011      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80058a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058a6:	d106      	bne.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a8:	4bc3      	ldr	r3, [pc, #780]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	4ac2      	ldr	r2, [pc, #776]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80058b4:	e008      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058bc:	e004      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80058be:	bf00      	nop
 80058c0:	e002      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80058c2:	bf00      	nop
 80058c4:	e000      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80058c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10b      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058d0:	4bb9      	ldr	r3, [pc, #740]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058e0:	4ab5      	ldr	r2, [pc, #724]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058e2:	430b      	orrs	r3, r1
 80058e4:	6553      	str	r3, [r2, #84]	; 0x54
 80058e6:	e003      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80058fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80058fe:	2300      	movs	r3, #0
 8005900:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005902:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005906:	460b      	mov	r3, r1
 8005908:	4313      	orrs	r3, r2
 800590a:	d009      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800590c:	4baa      	ldr	r3, [pc, #680]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800590e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005910:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800591a:	4aa7      	ldr	r2, [pc, #668]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800591c:	430b      	orrs	r3, r1
 800591e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005928:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800592c:	653b      	str	r3, [r7, #80]	; 0x50
 800592e:	2300      	movs	r3, #0
 8005930:	657b      	str	r3, [r7, #84]	; 0x54
 8005932:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005936:	460b      	mov	r3, r1
 8005938:	4313      	orrs	r3, r2
 800593a:	d00a      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800593c:	4b9e      	ldr	r3, [pc, #632]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005948:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800594c:	4a9a      	ldr	r2, [pc, #616]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800594e:	430b      	orrs	r3, r1
 8005950:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800595e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005960:	2300      	movs	r3, #0
 8005962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005964:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005968:	460b      	mov	r3, r1
 800596a:	4313      	orrs	r3, r2
 800596c:	d009      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800596e:	4b92      	ldr	r3, [pc, #584]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005972:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800597a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800597c:	4a8e      	ldr	r2, [pc, #568]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800597e:	430b      	orrs	r3, r1
 8005980:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800598e:	643b      	str	r3, [r7, #64]	; 0x40
 8005990:	2300      	movs	r3, #0
 8005992:	647b      	str	r3, [r7, #68]	; 0x44
 8005994:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005998:	460b      	mov	r3, r1
 800599a:	4313      	orrs	r3, r2
 800599c:	d00e      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800599e:	4b86      	ldr	r3, [pc, #536]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	4a85      	ldr	r2, [pc, #532]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059a8:	6113      	str	r3, [r2, #16]
 80059aa:	4b83      	ldr	r3, [pc, #524]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059ac:	6919      	ldr	r1, [r3, #16]
 80059ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80059b6:	4a80      	ldr	r2, [pc, #512]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059b8:	430b      	orrs	r3, r1
 80059ba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80059bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80059c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80059ca:	2300      	movs	r3, #0
 80059cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059ce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80059d2:	460b      	mov	r3, r1
 80059d4:	4313      	orrs	r3, r2
 80059d6:	d009      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80059d8:	4b77      	ldr	r3, [pc, #476]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059dc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80059e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e6:	4a74      	ldr	r2, [pc, #464]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059e8:	430b      	orrs	r3, r1
 80059ea:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80059f8:	633b      	str	r3, [r7, #48]	; 0x30
 80059fa:	2300      	movs	r3, #0
 80059fc:	637b      	str	r3, [r7, #52]	; 0x34
 80059fe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005a02:	460b      	mov	r3, r1
 8005a04:	4313      	orrs	r3, r2
 8005a06:	d00a      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a08:	4b6b      	ldr	r3, [pc, #428]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a18:	4a67      	ldr	r2, [pc, #412]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a1a:	430b      	orrs	r3, r1
 8005a1c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a26:	2100      	movs	r1, #0
 8005a28:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a30:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005a34:	460b      	mov	r3, r1
 8005a36:	4313      	orrs	r3, r2
 8005a38:	d011      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a3e:	3308      	adds	r3, #8
 8005a40:	2100      	movs	r1, #0
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fb78 	bl	8006138 <RCCEx_PLL2_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a66:	2100      	movs	r1, #0
 8005a68:	6239      	str	r1, [r7, #32]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a70:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a74:	460b      	mov	r3, r1
 8005a76:	4313      	orrs	r3, r2
 8005a78:	d011      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a7e:	3308      	adds	r3, #8
 8005a80:	2101      	movs	r1, #1
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fb58 	bl	8006138 <RCCEx_PLL2_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	61b9      	str	r1, [r7, #24]
 8005aaa:	f003 0304 	and.w	r3, r3, #4
 8005aae:	61fb      	str	r3, [r7, #28]
 8005ab0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	d011      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005abe:	3308      	adds	r3, #8
 8005ac0:	2102      	movs	r1, #2
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fb38 	bl	8006138 <RCCEx_PLL2_Config>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005ace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ada:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	6139      	str	r1, [r7, #16]
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005af4:	460b      	mov	r3, r1
 8005af6:	4313      	orrs	r3, r2
 8005af8:	d011      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005afe:	3328      	adds	r3, #40	; 0x28
 8005b00:	2100      	movs	r1, #0
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fbca 	bl	800629c <RCCEx_PLL3_Config>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b26:	2100      	movs	r1, #0
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	f003 0310 	and.w	r3, r3, #16
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005b34:	460b      	mov	r3, r1
 8005b36:	4313      	orrs	r3, r2
 8005b38:	d011      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b3e:	3328      	adds	r3, #40	; 0x28
 8005b40:	2101      	movs	r1, #1
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fbaa 	bl	800629c <RCCEx_PLL3_Config>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b66:	2100      	movs	r1, #0
 8005b68:	6039      	str	r1, [r7, #0]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	607b      	str	r3, [r7, #4]
 8005b70:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b74:	460b      	mov	r3, r1
 8005b76:	4313      	orrs	r3, r2
 8005b78:	d011      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b7e:	3328      	adds	r3, #40	; 0x28
 8005b80:	2102      	movs	r1, #2
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 fb8a 	bl	800629c <RCCEx_PLL3_Config>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005b9e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	e000      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bb8:	58024400 	.word	0x58024400

08005bbc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005bc0:	f7fe fd96 	bl	80046f0 <HAL_RCC_GetHCLKFreq>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	091b      	lsrs	r3, r3, #4
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	4904      	ldr	r1, [pc, #16]	; (8005be4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005bd2:	5ccb      	ldrb	r3, [r1, r3]
 8005bd4:	f003 031f 	and.w	r3, r3, #31
 8005bd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	58024400 	.word	0x58024400
 8005be4:	08008718 	.word	0x08008718

08005be8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b089      	sub	sp, #36	; 0x24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bf0:	4ba1      	ldr	r3, [pc, #644]	; (8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf4:	f003 0303 	and.w	r3, r3, #3
 8005bf8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005bfa:	4b9f      	ldr	r3, [pc, #636]	; (8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfe:	0b1b      	lsrs	r3, r3, #12
 8005c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c04:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c06:	4b9c      	ldr	r3, [pc, #624]	; (8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	091b      	lsrs	r3, r3, #4
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005c12:	4b99      	ldr	r3, [pc, #612]	; (8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c16:	08db      	lsrs	r3, r3, #3
 8005c18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	fb02 f303 	mul.w	r3, r2, r3
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 8111 	beq.w	8005e58 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	f000 8083 	beq.w	8005d44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	f200 80a1 	bhi.w	8005d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d056      	beq.n	8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005c52:	e099      	b.n	8005d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c54:	4b88      	ldr	r3, [pc, #544]	; (8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0320 	and.w	r3, r3, #32
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d02d      	beq.n	8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c60:	4b85      	ldr	r3, [pc, #532]	; (8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	08db      	lsrs	r3, r3, #3
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	4a84      	ldr	r2, [pc, #528]	; (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c70:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	ee07 3a90 	vmov	s15, r3
 8005c78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	ee07 3a90 	vmov	s15, r3
 8005c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8a:	4b7b      	ldr	r3, [pc, #492]	; (8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005cba:	e087      	b.n	8005dcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	ee07 3a90 	vmov	s15, r3
 8005cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cce:	4b6a      	ldr	r3, [pc, #424]	; (8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ce2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005e80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cfe:	e065      	b.n	8005dcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d12:	4b59      	ldr	r3, [pc, #356]	; (8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d1a:	ee07 3a90 	vmov	s15, r3
 8005d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005e80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d42:	e043      	b.n	8005dcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d56:	4b48      	ldr	r3, [pc, #288]	; (8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d86:	e021      	b.n	8005dcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d9a:	4b37      	ldr	r3, [pc, #220]	; (8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005e80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005dcc:	4b2a      	ldr	r3, [pc, #168]	; (8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd0:	0a5b      	lsrs	r3, r3, #9
 8005dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005de2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005de6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005df2:	ee17 2a90 	vmov	r2, s15
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005dfa:	4b1f      	ldr	r3, [pc, #124]	; (8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfe:	0c1b      	lsrs	r3, r3, #16
 8005e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e04:	ee07 3a90 	vmov	s15, r3
 8005e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e14:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e20:	ee17 2a90 	vmov	r2, s15
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005e28:	4b13      	ldr	r3, [pc, #76]	; (8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2c:	0e1b      	lsrs	r3, r3, #24
 8005e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e32:	ee07 3a90 	vmov	s15, r3
 8005e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e42:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e4e:	ee17 2a90 	vmov	r2, s15
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e56:	e008      	b.n	8005e6a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	609a      	str	r2, [r3, #8]
}
 8005e6a:	bf00      	nop
 8005e6c:	3724      	adds	r7, #36	; 0x24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	58024400 	.word	0x58024400
 8005e7c:	03d09000 	.word	0x03d09000
 8005e80:	46000000 	.word	0x46000000
 8005e84:	4c742400 	.word	0x4c742400
 8005e88:	4a742400 	.word	0x4a742400
 8005e8c:	4af42400 	.word	0x4af42400

08005e90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b089      	sub	sp, #36	; 0x24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e98:	4ba1      	ldr	r3, [pc, #644]	; (8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9c:	f003 0303 	and.w	r3, r3, #3
 8005ea0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005ea2:	4b9f      	ldr	r3, [pc, #636]	; (8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea6:	0d1b      	lsrs	r3, r3, #20
 8005ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005eae:	4b9c      	ldr	r3, [pc, #624]	; (8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb2:	0a1b      	lsrs	r3, r3, #8
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005eba:	4b99      	ldr	r3, [pc, #612]	; (8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ebe:	08db      	lsrs	r3, r3, #3
 8005ec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	fb02 f303 	mul.w	r3, r2, r3
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 8111 	beq.w	8006100 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	f000 8083 	beq.w	8005fec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	f200 80a1 	bhi.w	8006030 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d056      	beq.n	8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005efa:	e099      	b.n	8006030 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005efc:	4b88      	ldr	r3, [pc, #544]	; (8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0320 	and.w	r3, r3, #32
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d02d      	beq.n	8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f08:	4b85      	ldr	r3, [pc, #532]	; (8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	08db      	lsrs	r3, r3, #3
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	4a84      	ldr	r2, [pc, #528]	; (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f14:	fa22 f303 	lsr.w	r3, r2, r3
 8005f18:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	ee07 3a90 	vmov	s15, r3
 8005f20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f32:	4b7b      	ldr	r3, [pc, #492]	; (8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f62:	e087      	b.n	8006074 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	ee07 3a90 	vmov	s15, r3
 8005f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800612c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f76:	4b6a      	ldr	r3, [pc, #424]	; (8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f7e:	ee07 3a90 	vmov	s15, r3
 8005f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fa6:	e065      	b.n	8006074 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	ee07 3a90 	vmov	s15, r3
 8005fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006130 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fba:	4b59      	ldr	r3, [pc, #356]	; (8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc2:	ee07 3a90 	vmov	s15, r3
 8005fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fea:	e043      	b.n	8006074 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	ee07 3a90 	vmov	s15, r3
 8005ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006134 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ffe:	4b48      	ldr	r3, [pc, #288]	; (8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800600e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006012:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800601a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800601e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800602a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800602e:	e021      	b.n	8006074 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006130 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800603e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006042:	4b37      	ldr	r3, [pc, #220]	; (8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006052:	ed97 6a03 	vldr	s12, [r7, #12]
 8006056:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800605a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800605e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800606a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006072:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006074:	4b2a      	ldr	r3, [pc, #168]	; (8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006078:	0a5b      	lsrs	r3, r3, #9
 800607a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800607e:	ee07 3a90 	vmov	s15, r3
 8006082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006086:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800608a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800608e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800609a:	ee17 2a90 	vmov	r2, s15
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80060a2:	4b1f      	ldr	r3, [pc, #124]	; (8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	0c1b      	lsrs	r3, r3, #16
 80060a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ac:	ee07 3a90 	vmov	s15, r3
 80060b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80060c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060c8:	ee17 2a90 	vmov	r2, s15
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80060d0:	4b13      	ldr	r3, [pc, #76]	; (8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d4:	0e1b      	lsrs	r3, r3, #24
 80060d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060da:	ee07 3a90 	vmov	s15, r3
 80060de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80060ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060f6:	ee17 2a90 	vmov	r2, s15
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80060fe:	e008      	b.n	8006112 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	609a      	str	r2, [r3, #8]
}
 8006112:	bf00      	nop
 8006114:	3724      	adds	r7, #36	; 0x24
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	58024400 	.word	0x58024400
 8006124:	03d09000 	.word	0x03d09000
 8006128:	46000000 	.word	0x46000000
 800612c:	4c742400 	.word	0x4c742400
 8006130:	4a742400 	.word	0x4a742400
 8006134:	4af42400 	.word	0x4af42400

08006138 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006142:	2300      	movs	r3, #0
 8006144:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006146:	4b53      	ldr	r3, [pc, #332]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 8006148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614a:	f003 0303 	and.w	r3, r3, #3
 800614e:	2b03      	cmp	r3, #3
 8006150:	d101      	bne.n	8006156 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e099      	b.n	800628a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006156:	4b4f      	ldr	r3, [pc, #316]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a4e      	ldr	r2, [pc, #312]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 800615c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006160:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006162:	f7fa feeb 	bl	8000f3c <HAL_GetTick>
 8006166:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006168:	e008      	b.n	800617c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800616a:	f7fa fee7 	bl	8000f3c <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d901      	bls.n	800617c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e086      	b.n	800628a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800617c:	4b45      	ldr	r3, [pc, #276]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1f0      	bne.n	800616a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006188:	4b42      	ldr	r3, [pc, #264]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 800618a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	031b      	lsls	r3, r3, #12
 8006196:	493f      	ldr	r1, [pc, #252]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 8006198:	4313      	orrs	r3, r2
 800619a:	628b      	str	r3, [r1, #40]	; 0x28
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	3b01      	subs	r3, #1
 80061a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	025b      	lsls	r3, r3, #9
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	431a      	orrs	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	041b      	lsls	r3, r3, #16
 80061ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	061b      	lsls	r3, r3, #24
 80061c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80061cc:	4931      	ldr	r1, [pc, #196]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80061d2:	4b30      	ldr	r3, [pc, #192]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 80061d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	492d      	ldr	r1, [pc, #180]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80061e4:	4b2b      	ldr	r3, [pc, #172]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	f023 0220 	bic.w	r2, r3, #32
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	4928      	ldr	r1, [pc, #160]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80061f6:	4b27      	ldr	r3, [pc, #156]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 80061f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fa:	4a26      	ldr	r2, [pc, #152]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 80061fc:	f023 0310 	bic.w	r3, r3, #16
 8006200:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006202:	4b24      	ldr	r3, [pc, #144]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 8006204:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006206:	4b24      	ldr	r3, [pc, #144]	; (8006298 <RCCEx_PLL2_Config+0x160>)
 8006208:	4013      	ands	r3, r2
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	69d2      	ldr	r2, [r2, #28]
 800620e:	00d2      	lsls	r2, r2, #3
 8006210:	4920      	ldr	r1, [pc, #128]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 8006212:	4313      	orrs	r3, r2
 8006214:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006216:	4b1f      	ldr	r3, [pc, #124]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 8006218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621a:	4a1e      	ldr	r2, [pc, #120]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 800621c:	f043 0310 	orr.w	r3, r3, #16
 8006220:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d106      	bne.n	8006236 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006228:	4b1a      	ldr	r3, [pc, #104]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 800622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622c:	4a19      	ldr	r2, [pc, #100]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 800622e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006232:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006234:	e00f      	b.n	8006256 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d106      	bne.n	800624a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800623c:	4b15      	ldr	r3, [pc, #84]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	4a14      	ldr	r2, [pc, #80]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 8006242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006246:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006248:	e005      	b.n	8006256 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800624a:	4b12      	ldr	r3, [pc, #72]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 800624c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624e:	4a11      	ldr	r2, [pc, #68]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 8006250:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006254:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006256:	4b0f      	ldr	r3, [pc, #60]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a0e      	ldr	r2, [pc, #56]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 800625c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006260:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006262:	f7fa fe6b 	bl	8000f3c <HAL_GetTick>
 8006266:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006268:	e008      	b.n	800627c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800626a:	f7fa fe67 	bl	8000f3c <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	2b02      	cmp	r3, #2
 8006276:	d901      	bls.n	800627c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e006      	b.n	800628a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800627c:	4b05      	ldr	r3, [pc, #20]	; (8006294 <RCCEx_PLL2_Config+0x15c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0f0      	beq.n	800626a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006288:	7bfb      	ldrb	r3, [r7, #15]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	58024400 	.word	0x58024400
 8006298:	ffff0007 	.word	0xffff0007

0800629c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062aa:	4b53      	ldr	r3, [pc, #332]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 80062ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ae:	f003 0303 	and.w	r3, r3, #3
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d101      	bne.n	80062ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e099      	b.n	80063ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80062ba:	4b4f      	ldr	r3, [pc, #316]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a4e      	ldr	r2, [pc, #312]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 80062c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062c6:	f7fa fe39 	bl	8000f3c <HAL_GetTick>
 80062ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062cc:	e008      	b.n	80062e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062ce:	f7fa fe35 	bl	8000f3c <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d901      	bls.n	80062e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e086      	b.n	80063ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062e0:	4b45      	ldr	r3, [pc, #276]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1f0      	bne.n	80062ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80062ec:	4b42      	ldr	r3, [pc, #264]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 80062ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	051b      	lsls	r3, r3, #20
 80062fa:	493f      	ldr	r1, [pc, #252]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	628b      	str	r3, [r1, #40]	; 0x28
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	3b01      	subs	r3, #1
 8006306:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	3b01      	subs	r3, #1
 8006310:	025b      	lsls	r3, r3, #9
 8006312:	b29b      	uxth	r3, r3
 8006314:	431a      	orrs	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	3b01      	subs	r3, #1
 800631c:	041b      	lsls	r3, r3, #16
 800631e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	3b01      	subs	r3, #1
 800632a:	061b      	lsls	r3, r3, #24
 800632c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006330:	4931      	ldr	r1, [pc, #196]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 8006332:	4313      	orrs	r3, r2
 8006334:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006336:	4b30      	ldr	r3, [pc, #192]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 8006338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	492d      	ldr	r1, [pc, #180]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 8006344:	4313      	orrs	r3, r2
 8006346:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006348:	4b2b      	ldr	r3, [pc, #172]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	4928      	ldr	r1, [pc, #160]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 8006356:	4313      	orrs	r3, r2
 8006358:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800635a:	4b27      	ldr	r3, [pc, #156]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 800635c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635e:	4a26      	ldr	r2, [pc, #152]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 8006360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006364:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006366:	4b24      	ldr	r3, [pc, #144]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 8006368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800636a:	4b24      	ldr	r3, [pc, #144]	; (80063fc <RCCEx_PLL3_Config+0x160>)
 800636c:	4013      	ands	r3, r2
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	69d2      	ldr	r2, [r2, #28]
 8006372:	00d2      	lsls	r2, r2, #3
 8006374:	4920      	ldr	r1, [pc, #128]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 8006376:	4313      	orrs	r3, r2
 8006378:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800637a:	4b1f      	ldr	r3, [pc, #124]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 800637c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637e:	4a1e      	ldr	r2, [pc, #120]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 8006380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006384:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d106      	bne.n	800639a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800638c:	4b1a      	ldr	r3, [pc, #104]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	4a19      	ldr	r2, [pc, #100]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 8006392:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006396:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006398:	e00f      	b.n	80063ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d106      	bne.n	80063ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80063a0:	4b15      	ldr	r3, [pc, #84]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	4a14      	ldr	r2, [pc, #80]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 80063a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80063aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063ac:	e005      	b.n	80063ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80063ae:	4b12      	ldr	r3, [pc, #72]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	4a11      	ldr	r2, [pc, #68]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 80063b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80063ba:	4b0f      	ldr	r3, [pc, #60]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a0e      	ldr	r2, [pc, #56]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 80063c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063c6:	f7fa fdb9 	bl	8000f3c <HAL_GetTick>
 80063ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063cc:	e008      	b.n	80063e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80063ce:	f7fa fdb5 	bl	8000f3c <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d901      	bls.n	80063e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e006      	b.n	80063ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063e0:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <RCCEx_PLL3_Config+0x15c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d0f0      	beq.n	80063ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	58024400 	.word	0x58024400
 80063fc:	ffff0007 	.word	0xffff0007

08006400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e049      	b.n	80064a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d106      	bne.n	800642c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7fa fbd4 	bl	8000bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3304      	adds	r3, #4
 800643c:	4619      	mov	r1, r3
 800643e:	4610      	mov	r0, r2
 8006440:	f000 fb88 	bl	8006b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
	...

080064b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d001      	beq.n	80064c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e04c      	b.n	8006562 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a26      	ldr	r2, [pc, #152]	; (8006570 <HAL_TIM_Base_Start+0xc0>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d022      	beq.n	8006520 <HAL_TIM_Base_Start+0x70>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e2:	d01d      	beq.n	8006520 <HAL_TIM_Base_Start+0x70>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a22      	ldr	r2, [pc, #136]	; (8006574 <HAL_TIM_Base_Start+0xc4>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d018      	beq.n	8006520 <HAL_TIM_Base_Start+0x70>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a21      	ldr	r2, [pc, #132]	; (8006578 <HAL_TIM_Base_Start+0xc8>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d013      	beq.n	8006520 <HAL_TIM_Base_Start+0x70>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a1f      	ldr	r2, [pc, #124]	; (800657c <HAL_TIM_Base_Start+0xcc>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d00e      	beq.n	8006520 <HAL_TIM_Base_Start+0x70>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a1e      	ldr	r2, [pc, #120]	; (8006580 <HAL_TIM_Base_Start+0xd0>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d009      	beq.n	8006520 <HAL_TIM_Base_Start+0x70>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a1c      	ldr	r2, [pc, #112]	; (8006584 <HAL_TIM_Base_Start+0xd4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d004      	beq.n	8006520 <HAL_TIM_Base_Start+0x70>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a1b      	ldr	r2, [pc, #108]	; (8006588 <HAL_TIM_Base_Start+0xd8>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d115      	bne.n	800654c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689a      	ldr	r2, [r3, #8]
 8006526:	4b19      	ldr	r3, [pc, #100]	; (800658c <HAL_TIM_Base_Start+0xdc>)
 8006528:	4013      	ands	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2b06      	cmp	r3, #6
 8006530:	d015      	beq.n	800655e <HAL_TIM_Base_Start+0xae>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006538:	d011      	beq.n	800655e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f042 0201 	orr.w	r2, r2, #1
 8006548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800654a:	e008      	b.n	800655e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0201 	orr.w	r2, r2, #1
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	e000      	b.n	8006560 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800655e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	40010000 	.word	0x40010000
 8006574:	40000400 	.word	0x40000400
 8006578:	40000800 	.word	0x40000800
 800657c:	40000c00 	.word	0x40000c00
 8006580:	40010400 	.word	0x40010400
 8006584:	40001800 	.word	0x40001800
 8006588:	40014000 	.word	0x40014000
 800658c:	00010007 	.word	0x00010007

08006590 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e049      	b.n	8006636 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d106      	bne.n	80065bc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f841 	bl	800663e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	3304      	adds	r3, #4
 80065cc:	4619      	mov	r1, r3
 80065ce:	4610      	mov	r0, r2
 80065d0:	f000 fac0 	bl	8006b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800663e:	b480      	push	{r7}
 8006640:	b083      	sub	sp, #12
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006646:	bf00      	nop
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
	...

08006654 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d109      	bne.n	8006678 <HAL_TIM_OC_Start+0x24>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b01      	cmp	r3, #1
 800666e:	bf14      	ite	ne
 8006670:	2301      	movne	r3, #1
 8006672:	2300      	moveq	r3, #0
 8006674:	b2db      	uxtb	r3, r3
 8006676:	e03c      	b.n	80066f2 <HAL_TIM_OC_Start+0x9e>
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2b04      	cmp	r3, #4
 800667c:	d109      	bne.n	8006692 <HAL_TIM_OC_Start+0x3e>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b01      	cmp	r3, #1
 8006688:	bf14      	ite	ne
 800668a:	2301      	movne	r3, #1
 800668c:	2300      	moveq	r3, #0
 800668e:	b2db      	uxtb	r3, r3
 8006690:	e02f      	b.n	80066f2 <HAL_TIM_OC_Start+0x9e>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b08      	cmp	r3, #8
 8006696:	d109      	bne.n	80066ac <HAL_TIM_OC_Start+0x58>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	bf14      	ite	ne
 80066a4:	2301      	movne	r3, #1
 80066a6:	2300      	moveq	r3, #0
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	e022      	b.n	80066f2 <HAL_TIM_OC_Start+0x9e>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2b0c      	cmp	r3, #12
 80066b0:	d109      	bne.n	80066c6 <HAL_TIM_OC_Start+0x72>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	bf14      	ite	ne
 80066be:	2301      	movne	r3, #1
 80066c0:	2300      	moveq	r3, #0
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	e015      	b.n	80066f2 <HAL_TIM_OC_Start+0x9e>
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b10      	cmp	r3, #16
 80066ca:	d109      	bne.n	80066e0 <HAL_TIM_OC_Start+0x8c>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	bf14      	ite	ne
 80066d8:	2301      	movne	r3, #1
 80066da:	2300      	moveq	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	e008      	b.n	80066f2 <HAL_TIM_OC_Start+0x9e>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	bf14      	ite	ne
 80066ec:	2301      	movne	r3, #1
 80066ee:	2300      	moveq	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e0a1      	b.n	800683e <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d104      	bne.n	800670a <HAL_TIM_OC_Start+0xb6>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006708:	e023      	b.n	8006752 <HAL_TIM_OC_Start+0xfe>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b04      	cmp	r3, #4
 800670e:	d104      	bne.n	800671a <HAL_TIM_OC_Start+0xc6>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006718:	e01b      	b.n	8006752 <HAL_TIM_OC_Start+0xfe>
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	2b08      	cmp	r3, #8
 800671e:	d104      	bne.n	800672a <HAL_TIM_OC_Start+0xd6>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2202      	movs	r2, #2
 8006724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006728:	e013      	b.n	8006752 <HAL_TIM_OC_Start+0xfe>
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2b0c      	cmp	r3, #12
 800672e:	d104      	bne.n	800673a <HAL_TIM_OC_Start+0xe6>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006738:	e00b      	b.n	8006752 <HAL_TIM_OC_Start+0xfe>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b10      	cmp	r3, #16
 800673e:	d104      	bne.n	800674a <HAL_TIM_OC_Start+0xf6>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006748:	e003      	b.n	8006752 <HAL_TIM_OC_Start+0xfe>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2202      	movs	r2, #2
 800674e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2201      	movs	r2, #1
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	4618      	mov	r0, r3
 800675c:	f000 fe14 	bl	8007388 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a38      	ldr	r2, [pc, #224]	; (8006848 <HAL_TIM_OC_Start+0x1f4>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d013      	beq.n	8006792 <HAL_TIM_OC_Start+0x13e>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a37      	ldr	r2, [pc, #220]	; (800684c <HAL_TIM_OC_Start+0x1f8>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d00e      	beq.n	8006792 <HAL_TIM_OC_Start+0x13e>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a35      	ldr	r2, [pc, #212]	; (8006850 <HAL_TIM_OC_Start+0x1fc>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d009      	beq.n	8006792 <HAL_TIM_OC_Start+0x13e>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a34      	ldr	r2, [pc, #208]	; (8006854 <HAL_TIM_OC_Start+0x200>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d004      	beq.n	8006792 <HAL_TIM_OC_Start+0x13e>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a32      	ldr	r2, [pc, #200]	; (8006858 <HAL_TIM_OC_Start+0x204>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d101      	bne.n	8006796 <HAL_TIM_OC_Start+0x142>
 8006792:	2301      	movs	r3, #1
 8006794:	e000      	b.n	8006798 <HAL_TIM_OC_Start+0x144>
 8006796:	2300      	movs	r3, #0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d007      	beq.n	80067ac <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a25      	ldr	r2, [pc, #148]	; (8006848 <HAL_TIM_OC_Start+0x1f4>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d022      	beq.n	80067fc <HAL_TIM_OC_Start+0x1a8>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067be:	d01d      	beq.n	80067fc <HAL_TIM_OC_Start+0x1a8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a25      	ldr	r2, [pc, #148]	; (800685c <HAL_TIM_OC_Start+0x208>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d018      	beq.n	80067fc <HAL_TIM_OC_Start+0x1a8>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a24      	ldr	r2, [pc, #144]	; (8006860 <HAL_TIM_OC_Start+0x20c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d013      	beq.n	80067fc <HAL_TIM_OC_Start+0x1a8>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a22      	ldr	r2, [pc, #136]	; (8006864 <HAL_TIM_OC_Start+0x210>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d00e      	beq.n	80067fc <HAL_TIM_OC_Start+0x1a8>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a1a      	ldr	r2, [pc, #104]	; (800684c <HAL_TIM_OC_Start+0x1f8>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d009      	beq.n	80067fc <HAL_TIM_OC_Start+0x1a8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a1e      	ldr	r2, [pc, #120]	; (8006868 <HAL_TIM_OC_Start+0x214>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d004      	beq.n	80067fc <HAL_TIM_OC_Start+0x1a8>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a16      	ldr	r2, [pc, #88]	; (8006850 <HAL_TIM_OC_Start+0x1fc>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d115      	bne.n	8006828 <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	4b1a      	ldr	r3, [pc, #104]	; (800686c <HAL_TIM_OC_Start+0x218>)
 8006804:	4013      	ands	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b06      	cmp	r3, #6
 800680c:	d015      	beq.n	800683a <HAL_TIM_OC_Start+0x1e6>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006814:	d011      	beq.n	800683a <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f042 0201 	orr.w	r2, r2, #1
 8006824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006826:	e008      	b.n	800683a <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0201 	orr.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	e000      	b.n	800683c <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800683a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	40010000 	.word	0x40010000
 800684c:	40010400 	.word	0x40010400
 8006850:	40014000 	.word	0x40014000
 8006854:	40014400 	.word	0x40014400
 8006858:	40014800 	.word	0x40014800
 800685c:	40000400 	.word	0x40000400
 8006860:	40000800 	.word	0x40000800
 8006864:	40000c00 	.word	0x40000c00
 8006868:	40001800 	.word	0x40001800
 800686c:	00010007 	.word	0x00010007

08006870 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006886:	2b01      	cmp	r3, #1
 8006888:	d101      	bne.n	800688e <HAL_TIM_OC_ConfigChannel+0x1e>
 800688a:	2302      	movs	r3, #2
 800688c:	e066      	b.n	800695c <HAL_TIM_OC_ConfigChannel+0xec>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b14      	cmp	r3, #20
 800689a:	d857      	bhi.n	800694c <HAL_TIM_OC_ConfigChannel+0xdc>
 800689c:	a201      	add	r2, pc, #4	; (adr r2, 80068a4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800689e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a2:	bf00      	nop
 80068a4:	080068f9 	.word	0x080068f9
 80068a8:	0800694d 	.word	0x0800694d
 80068ac:	0800694d 	.word	0x0800694d
 80068b0:	0800694d 	.word	0x0800694d
 80068b4:	08006907 	.word	0x08006907
 80068b8:	0800694d 	.word	0x0800694d
 80068bc:	0800694d 	.word	0x0800694d
 80068c0:	0800694d 	.word	0x0800694d
 80068c4:	08006915 	.word	0x08006915
 80068c8:	0800694d 	.word	0x0800694d
 80068cc:	0800694d 	.word	0x0800694d
 80068d0:	0800694d 	.word	0x0800694d
 80068d4:	08006923 	.word	0x08006923
 80068d8:	0800694d 	.word	0x0800694d
 80068dc:	0800694d 	.word	0x0800694d
 80068e0:	0800694d 	.word	0x0800694d
 80068e4:	08006931 	.word	0x08006931
 80068e8:	0800694d 	.word	0x0800694d
 80068ec:	0800694d 	.word	0x0800694d
 80068f0:	0800694d 	.word	0x0800694d
 80068f4:	0800693f 	.word	0x0800693f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68b9      	ldr	r1, [r7, #8]
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 f9ce 	bl	8006ca0 <TIM_OC1_SetConfig>
      break;
 8006904:	e025      	b.n	8006952 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68b9      	ldr	r1, [r7, #8]
 800690c:	4618      	mov	r0, r3
 800690e:	f000 fa57 	bl	8006dc0 <TIM_OC2_SetConfig>
      break;
 8006912:	e01e      	b.n	8006952 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68b9      	ldr	r1, [r7, #8]
 800691a:	4618      	mov	r0, r3
 800691c:	f000 fada 	bl	8006ed4 <TIM_OC3_SetConfig>
      break;
 8006920:	e017      	b.n	8006952 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68b9      	ldr	r1, [r7, #8]
 8006928:	4618      	mov	r0, r3
 800692a:	f000 fb5b 	bl	8006fe4 <TIM_OC4_SetConfig>
      break;
 800692e:	e010      	b.n	8006952 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68b9      	ldr	r1, [r7, #8]
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fbbe 	bl	80070b8 <TIM_OC5_SetConfig>
      break;
 800693c:	e009      	b.n	8006952 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68b9      	ldr	r1, [r7, #8]
 8006944:	4618      	mov	r0, r3
 8006946:	f000 fc1b 	bl	8007180 <TIM_OC6_SetConfig>
      break;
 800694a:	e002      	b.n	8006952 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	75fb      	strb	r3, [r7, #23]
      break;
 8006950:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800695a:	7dfb      	ldrb	r3, [r7, #23]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3718      	adds	r7, #24
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800696e:	2300      	movs	r3, #0
 8006970:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006978:	2b01      	cmp	r3, #1
 800697a:	d101      	bne.n	8006980 <HAL_TIM_ConfigClockSource+0x1c>
 800697c:	2302      	movs	r3, #2
 800697e:	e0dc      	b.n	8006b3a <HAL_TIM_ConfigClockSource+0x1d6>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	4b6a      	ldr	r3, [pc, #424]	; (8006b44 <HAL_TIM_ConfigClockSource+0x1e0>)
 800699c:	4013      	ands	r3, r2
 800699e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a64      	ldr	r2, [pc, #400]	; (8006b48 <HAL_TIM_ConfigClockSource+0x1e4>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	f000 80a9 	beq.w	8006b0e <HAL_TIM_ConfigClockSource+0x1aa>
 80069bc:	4a62      	ldr	r2, [pc, #392]	; (8006b48 <HAL_TIM_ConfigClockSource+0x1e4>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	f200 80ae 	bhi.w	8006b20 <HAL_TIM_ConfigClockSource+0x1bc>
 80069c4:	4a61      	ldr	r2, [pc, #388]	; (8006b4c <HAL_TIM_ConfigClockSource+0x1e8>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	f000 80a1 	beq.w	8006b0e <HAL_TIM_ConfigClockSource+0x1aa>
 80069cc:	4a5f      	ldr	r2, [pc, #380]	; (8006b4c <HAL_TIM_ConfigClockSource+0x1e8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	f200 80a6 	bhi.w	8006b20 <HAL_TIM_ConfigClockSource+0x1bc>
 80069d4:	4a5e      	ldr	r2, [pc, #376]	; (8006b50 <HAL_TIM_ConfigClockSource+0x1ec>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	f000 8099 	beq.w	8006b0e <HAL_TIM_ConfigClockSource+0x1aa>
 80069dc:	4a5c      	ldr	r2, [pc, #368]	; (8006b50 <HAL_TIM_ConfigClockSource+0x1ec>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	f200 809e 	bhi.w	8006b20 <HAL_TIM_ConfigClockSource+0x1bc>
 80069e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80069e8:	f000 8091 	beq.w	8006b0e <HAL_TIM_ConfigClockSource+0x1aa>
 80069ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80069f0:	f200 8096 	bhi.w	8006b20 <HAL_TIM_ConfigClockSource+0x1bc>
 80069f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069f8:	f000 8089 	beq.w	8006b0e <HAL_TIM_ConfigClockSource+0x1aa>
 80069fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a00:	f200 808e 	bhi.w	8006b20 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a08:	d03e      	beq.n	8006a88 <HAL_TIM_ConfigClockSource+0x124>
 8006a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a0e:	f200 8087 	bhi.w	8006b20 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a16:	f000 8086 	beq.w	8006b26 <HAL_TIM_ConfigClockSource+0x1c2>
 8006a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a1e:	d87f      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a20:	2b70      	cmp	r3, #112	; 0x70
 8006a22:	d01a      	beq.n	8006a5a <HAL_TIM_ConfigClockSource+0xf6>
 8006a24:	2b70      	cmp	r3, #112	; 0x70
 8006a26:	d87b      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a28:	2b60      	cmp	r3, #96	; 0x60
 8006a2a:	d050      	beq.n	8006ace <HAL_TIM_ConfigClockSource+0x16a>
 8006a2c:	2b60      	cmp	r3, #96	; 0x60
 8006a2e:	d877      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a30:	2b50      	cmp	r3, #80	; 0x50
 8006a32:	d03c      	beq.n	8006aae <HAL_TIM_ConfigClockSource+0x14a>
 8006a34:	2b50      	cmp	r3, #80	; 0x50
 8006a36:	d873      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a38:	2b40      	cmp	r3, #64	; 0x40
 8006a3a:	d058      	beq.n	8006aee <HAL_TIM_ConfigClockSource+0x18a>
 8006a3c:	2b40      	cmp	r3, #64	; 0x40
 8006a3e:	d86f      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a40:	2b30      	cmp	r3, #48	; 0x30
 8006a42:	d064      	beq.n	8006b0e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a44:	2b30      	cmp	r3, #48	; 0x30
 8006a46:	d86b      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a48:	2b20      	cmp	r3, #32
 8006a4a:	d060      	beq.n	8006b0e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a4c:	2b20      	cmp	r3, #32
 8006a4e:	d867      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d05c      	beq.n	8006b0e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a54:	2b10      	cmp	r3, #16
 8006a56:	d05a      	beq.n	8006b0e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a58:	e062      	b.n	8006b20 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a6a:	f000 fc6d 	bl	8007348 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	609a      	str	r2, [r3, #8]
      break;
 8006a86:	e04f      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a98:	f000 fc56 	bl	8007348 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006aaa:	609a      	str	r2, [r3, #8]
      break;
 8006aac:	e03c      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aba:	461a      	mov	r2, r3
 8006abc:	f000 fbc6 	bl	800724c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2150      	movs	r1, #80	; 0x50
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fc20 	bl	800730c <TIM_ITRx_SetConfig>
      break;
 8006acc:	e02c      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ada:	461a      	mov	r2, r3
 8006adc:	f000 fbe5 	bl	80072aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2160      	movs	r1, #96	; 0x60
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 fc10 	bl	800730c <TIM_ITRx_SetConfig>
      break;
 8006aec:	e01c      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006afa:	461a      	mov	r2, r3
 8006afc:	f000 fba6 	bl	800724c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2140      	movs	r1, #64	; 0x40
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fc00 	bl	800730c <TIM_ITRx_SetConfig>
      break;
 8006b0c:	e00c      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4619      	mov	r1, r3
 8006b18:	4610      	mov	r0, r2
 8006b1a:	f000 fbf7 	bl	800730c <TIM_ITRx_SetConfig>
      break;
 8006b1e:	e003      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	73fb      	strb	r3, [r7, #15]
      break;
 8006b24:	e000      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006b26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	ffceff88 	.word	0xffceff88
 8006b48:	00100040 	.word	0x00100040
 8006b4c:	00100030 	.word	0x00100030
 8006b50:	00100020 	.word	0x00100020

08006b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a46      	ldr	r2, [pc, #280]	; (8006c80 <TIM_Base_SetConfig+0x12c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d013      	beq.n	8006b94 <TIM_Base_SetConfig+0x40>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b72:	d00f      	beq.n	8006b94 <TIM_Base_SetConfig+0x40>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a43      	ldr	r2, [pc, #268]	; (8006c84 <TIM_Base_SetConfig+0x130>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d00b      	beq.n	8006b94 <TIM_Base_SetConfig+0x40>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a42      	ldr	r2, [pc, #264]	; (8006c88 <TIM_Base_SetConfig+0x134>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d007      	beq.n	8006b94 <TIM_Base_SetConfig+0x40>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a41      	ldr	r2, [pc, #260]	; (8006c8c <TIM_Base_SetConfig+0x138>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d003      	beq.n	8006b94 <TIM_Base_SetConfig+0x40>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a40      	ldr	r2, [pc, #256]	; (8006c90 <TIM_Base_SetConfig+0x13c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d108      	bne.n	8006ba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a35      	ldr	r2, [pc, #212]	; (8006c80 <TIM_Base_SetConfig+0x12c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d01f      	beq.n	8006bee <TIM_Base_SetConfig+0x9a>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb4:	d01b      	beq.n	8006bee <TIM_Base_SetConfig+0x9a>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a32      	ldr	r2, [pc, #200]	; (8006c84 <TIM_Base_SetConfig+0x130>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d017      	beq.n	8006bee <TIM_Base_SetConfig+0x9a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a31      	ldr	r2, [pc, #196]	; (8006c88 <TIM_Base_SetConfig+0x134>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d013      	beq.n	8006bee <TIM_Base_SetConfig+0x9a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a30      	ldr	r2, [pc, #192]	; (8006c8c <TIM_Base_SetConfig+0x138>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d00f      	beq.n	8006bee <TIM_Base_SetConfig+0x9a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a2f      	ldr	r2, [pc, #188]	; (8006c90 <TIM_Base_SetConfig+0x13c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00b      	beq.n	8006bee <TIM_Base_SetConfig+0x9a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a2e      	ldr	r2, [pc, #184]	; (8006c94 <TIM_Base_SetConfig+0x140>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d007      	beq.n	8006bee <TIM_Base_SetConfig+0x9a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a2d      	ldr	r2, [pc, #180]	; (8006c98 <TIM_Base_SetConfig+0x144>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d003      	beq.n	8006bee <TIM_Base_SetConfig+0x9a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a2c      	ldr	r2, [pc, #176]	; (8006c9c <TIM_Base_SetConfig+0x148>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d108      	bne.n	8006c00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a16      	ldr	r2, [pc, #88]	; (8006c80 <TIM_Base_SetConfig+0x12c>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d00f      	beq.n	8006c4c <TIM_Base_SetConfig+0xf8>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a18      	ldr	r2, [pc, #96]	; (8006c90 <TIM_Base_SetConfig+0x13c>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d00b      	beq.n	8006c4c <TIM_Base_SetConfig+0xf8>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a17      	ldr	r2, [pc, #92]	; (8006c94 <TIM_Base_SetConfig+0x140>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d007      	beq.n	8006c4c <TIM_Base_SetConfig+0xf8>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a16      	ldr	r2, [pc, #88]	; (8006c98 <TIM_Base_SetConfig+0x144>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d003      	beq.n	8006c4c <TIM_Base_SetConfig+0xf8>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a15      	ldr	r2, [pc, #84]	; (8006c9c <TIM_Base_SetConfig+0x148>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d103      	bne.n	8006c54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	691a      	ldr	r2, [r3, #16]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d105      	bne.n	8006c72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	f023 0201 	bic.w	r2, r3, #1
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	611a      	str	r2, [r3, #16]
  }
}
 8006c72:	bf00      	nop
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	40010000 	.word	0x40010000
 8006c84:	40000400 	.word	0x40000400
 8006c88:	40000800 	.word	0x40000800
 8006c8c:	40000c00 	.word	0x40000c00
 8006c90:	40010400 	.word	0x40010400
 8006c94:	40014000 	.word	0x40014000
 8006c98:	40014400 	.word	0x40014400
 8006c9c:	40014800 	.word	0x40014800

08006ca0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	f023 0201 	bic.w	r2, r3, #1
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4b37      	ldr	r3, [pc, #220]	; (8006da8 <TIM_OC1_SetConfig+0x108>)
 8006ccc:	4013      	ands	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0303 	bic.w	r3, r3, #3
 8006cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f023 0302 	bic.w	r3, r3, #2
 8006ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a2d      	ldr	r2, [pc, #180]	; (8006dac <TIM_OC1_SetConfig+0x10c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d00f      	beq.n	8006d1c <TIM_OC1_SetConfig+0x7c>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a2c      	ldr	r2, [pc, #176]	; (8006db0 <TIM_OC1_SetConfig+0x110>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d00b      	beq.n	8006d1c <TIM_OC1_SetConfig+0x7c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a2b      	ldr	r2, [pc, #172]	; (8006db4 <TIM_OC1_SetConfig+0x114>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d007      	beq.n	8006d1c <TIM_OC1_SetConfig+0x7c>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a2a      	ldr	r2, [pc, #168]	; (8006db8 <TIM_OC1_SetConfig+0x118>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d003      	beq.n	8006d1c <TIM_OC1_SetConfig+0x7c>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a29      	ldr	r2, [pc, #164]	; (8006dbc <TIM_OC1_SetConfig+0x11c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d10c      	bne.n	8006d36 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f023 0308 	bic.w	r3, r3, #8
 8006d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f023 0304 	bic.w	r3, r3, #4
 8006d34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a1c      	ldr	r2, [pc, #112]	; (8006dac <TIM_OC1_SetConfig+0x10c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d00f      	beq.n	8006d5e <TIM_OC1_SetConfig+0xbe>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a1b      	ldr	r2, [pc, #108]	; (8006db0 <TIM_OC1_SetConfig+0x110>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d00b      	beq.n	8006d5e <TIM_OC1_SetConfig+0xbe>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a1a      	ldr	r2, [pc, #104]	; (8006db4 <TIM_OC1_SetConfig+0x114>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d007      	beq.n	8006d5e <TIM_OC1_SetConfig+0xbe>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a19      	ldr	r2, [pc, #100]	; (8006db8 <TIM_OC1_SetConfig+0x118>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d003      	beq.n	8006d5e <TIM_OC1_SetConfig+0xbe>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a18      	ldr	r2, [pc, #96]	; (8006dbc <TIM_OC1_SetConfig+0x11c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d111      	bne.n	8006d82 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	621a      	str	r2, [r3, #32]
}
 8006d9c:	bf00      	nop
 8006d9e:	371c      	adds	r7, #28
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	fffeff8f 	.word	0xfffeff8f
 8006dac:	40010000 	.word	0x40010000
 8006db0:	40010400 	.word	0x40010400
 8006db4:	40014000 	.word	0x40014000
 8006db8:	40014400 	.word	0x40014400
 8006dbc:	40014800 	.word	0x40014800

08006dc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	f023 0210 	bic.w	r2, r3, #16
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	4b34      	ldr	r3, [pc, #208]	; (8006ebc <TIM_OC2_SetConfig+0xfc>)
 8006dec:	4013      	ands	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	021b      	lsls	r3, r3, #8
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f023 0320 	bic.w	r3, r3, #32
 8006e0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	011b      	lsls	r3, r3, #4
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a29      	ldr	r2, [pc, #164]	; (8006ec0 <TIM_OC2_SetConfig+0x100>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d003      	beq.n	8006e28 <TIM_OC2_SetConfig+0x68>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a28      	ldr	r2, [pc, #160]	; (8006ec4 <TIM_OC2_SetConfig+0x104>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d10d      	bne.n	8006e44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	011b      	lsls	r3, r3, #4
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a1e      	ldr	r2, [pc, #120]	; (8006ec0 <TIM_OC2_SetConfig+0x100>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d00f      	beq.n	8006e6c <TIM_OC2_SetConfig+0xac>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a1d      	ldr	r2, [pc, #116]	; (8006ec4 <TIM_OC2_SetConfig+0x104>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d00b      	beq.n	8006e6c <TIM_OC2_SetConfig+0xac>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a1c      	ldr	r2, [pc, #112]	; (8006ec8 <TIM_OC2_SetConfig+0x108>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d007      	beq.n	8006e6c <TIM_OC2_SetConfig+0xac>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a1b      	ldr	r2, [pc, #108]	; (8006ecc <TIM_OC2_SetConfig+0x10c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d003      	beq.n	8006e6c <TIM_OC2_SetConfig+0xac>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a1a      	ldr	r2, [pc, #104]	; (8006ed0 <TIM_OC2_SetConfig+0x110>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d113      	bne.n	8006e94 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	685a      	ldr	r2, [r3, #4]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	621a      	str	r2, [r3, #32]
}
 8006eae:	bf00      	nop
 8006eb0:	371c      	adds	r7, #28
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	feff8fff 	.word	0xfeff8fff
 8006ec0:	40010000 	.word	0x40010000
 8006ec4:	40010400 	.word	0x40010400
 8006ec8:	40014000 	.word	0x40014000
 8006ecc:	40014400 	.word	0x40014400
 8006ed0:	40014800 	.word	0x40014800

08006ed4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	4b33      	ldr	r3, [pc, #204]	; (8006fcc <TIM_OC3_SetConfig+0xf8>)
 8006f00:	4013      	ands	r3, r2
 8006f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 0303 	bic.w	r3, r3, #3
 8006f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	021b      	lsls	r3, r3, #8
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a28      	ldr	r2, [pc, #160]	; (8006fd0 <TIM_OC3_SetConfig+0xfc>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d003      	beq.n	8006f3a <TIM_OC3_SetConfig+0x66>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a27      	ldr	r2, [pc, #156]	; (8006fd4 <TIM_OC3_SetConfig+0x100>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d10d      	bne.n	8006f56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	021b      	lsls	r3, r3, #8
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a1d      	ldr	r2, [pc, #116]	; (8006fd0 <TIM_OC3_SetConfig+0xfc>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d00f      	beq.n	8006f7e <TIM_OC3_SetConfig+0xaa>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a1c      	ldr	r2, [pc, #112]	; (8006fd4 <TIM_OC3_SetConfig+0x100>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00b      	beq.n	8006f7e <TIM_OC3_SetConfig+0xaa>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a1b      	ldr	r2, [pc, #108]	; (8006fd8 <TIM_OC3_SetConfig+0x104>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d007      	beq.n	8006f7e <TIM_OC3_SetConfig+0xaa>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a1a      	ldr	r2, [pc, #104]	; (8006fdc <TIM_OC3_SetConfig+0x108>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d003      	beq.n	8006f7e <TIM_OC3_SetConfig+0xaa>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a19      	ldr	r2, [pc, #100]	; (8006fe0 <TIM_OC3_SetConfig+0x10c>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d113      	bne.n	8006fa6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	011b      	lsls	r3, r3, #4
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	011b      	lsls	r3, r3, #4
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	621a      	str	r2, [r3, #32]
}
 8006fc0:	bf00      	nop
 8006fc2:	371c      	adds	r7, #28
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	fffeff8f 	.word	0xfffeff8f
 8006fd0:	40010000 	.word	0x40010000
 8006fd4:	40010400 	.word	0x40010400
 8006fd8:	40014000 	.word	0x40014000
 8006fdc:	40014400 	.word	0x40014400
 8006fe0:	40014800 	.word	0x40014800

08006fe4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	4b24      	ldr	r3, [pc, #144]	; (80070a0 <TIM_OC4_SetConfig+0xbc>)
 8007010:	4013      	ands	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800701a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	021b      	lsls	r3, r3, #8
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800702e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	031b      	lsls	r3, r3, #12
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	4313      	orrs	r3, r2
 800703a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a19      	ldr	r2, [pc, #100]	; (80070a4 <TIM_OC4_SetConfig+0xc0>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d00f      	beq.n	8007064 <TIM_OC4_SetConfig+0x80>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a18      	ldr	r2, [pc, #96]	; (80070a8 <TIM_OC4_SetConfig+0xc4>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d00b      	beq.n	8007064 <TIM_OC4_SetConfig+0x80>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a17      	ldr	r2, [pc, #92]	; (80070ac <TIM_OC4_SetConfig+0xc8>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d007      	beq.n	8007064 <TIM_OC4_SetConfig+0x80>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a16      	ldr	r2, [pc, #88]	; (80070b0 <TIM_OC4_SetConfig+0xcc>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d003      	beq.n	8007064 <TIM_OC4_SetConfig+0x80>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a15      	ldr	r2, [pc, #84]	; (80070b4 <TIM_OC4_SetConfig+0xd0>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d109      	bne.n	8007078 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800706a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	019b      	lsls	r3, r3, #6
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	4313      	orrs	r3, r2
 8007076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	621a      	str	r2, [r3, #32]
}
 8007092:	bf00      	nop
 8007094:	371c      	adds	r7, #28
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	feff8fff 	.word	0xfeff8fff
 80070a4:	40010000 	.word	0x40010000
 80070a8:	40010400 	.word	0x40010400
 80070ac:	40014000 	.word	0x40014000
 80070b0:	40014400 	.word	0x40014400
 80070b4:	40014800 	.word	0x40014800

080070b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	4b21      	ldr	r3, [pc, #132]	; (8007168 <TIM_OC5_SetConfig+0xb0>)
 80070e4:	4013      	ands	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80070f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	041b      	lsls	r3, r3, #16
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	4313      	orrs	r3, r2
 8007104:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a18      	ldr	r2, [pc, #96]	; (800716c <TIM_OC5_SetConfig+0xb4>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d00f      	beq.n	800712e <TIM_OC5_SetConfig+0x76>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a17      	ldr	r2, [pc, #92]	; (8007170 <TIM_OC5_SetConfig+0xb8>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00b      	beq.n	800712e <TIM_OC5_SetConfig+0x76>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a16      	ldr	r2, [pc, #88]	; (8007174 <TIM_OC5_SetConfig+0xbc>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d007      	beq.n	800712e <TIM_OC5_SetConfig+0x76>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a15      	ldr	r2, [pc, #84]	; (8007178 <TIM_OC5_SetConfig+0xc0>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d003      	beq.n	800712e <TIM_OC5_SetConfig+0x76>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a14      	ldr	r2, [pc, #80]	; (800717c <TIM_OC5_SetConfig+0xc4>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d109      	bne.n	8007142 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007134:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	021b      	lsls	r3, r3, #8
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	4313      	orrs	r3, r2
 8007140:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	621a      	str	r2, [r3, #32]
}
 800715c:	bf00      	nop
 800715e:	371c      	adds	r7, #28
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	fffeff8f 	.word	0xfffeff8f
 800716c:	40010000 	.word	0x40010000
 8007170:	40010400 	.word	0x40010400
 8007174:	40014000 	.word	0x40014000
 8007178:	40014400 	.word	0x40014400
 800717c:	40014800 	.word	0x40014800

08007180 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	4b22      	ldr	r3, [pc, #136]	; (8007234 <TIM_OC6_SetConfig+0xb4>)
 80071ac:	4013      	ands	r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	021b      	lsls	r3, r3, #8
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	051b      	lsls	r3, r3, #20
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a19      	ldr	r2, [pc, #100]	; (8007238 <TIM_OC6_SetConfig+0xb8>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00f      	beq.n	80071f8 <TIM_OC6_SetConfig+0x78>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a18      	ldr	r2, [pc, #96]	; (800723c <TIM_OC6_SetConfig+0xbc>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00b      	beq.n	80071f8 <TIM_OC6_SetConfig+0x78>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a17      	ldr	r2, [pc, #92]	; (8007240 <TIM_OC6_SetConfig+0xc0>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d007      	beq.n	80071f8 <TIM_OC6_SetConfig+0x78>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a16      	ldr	r2, [pc, #88]	; (8007244 <TIM_OC6_SetConfig+0xc4>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d003      	beq.n	80071f8 <TIM_OC6_SetConfig+0x78>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a15      	ldr	r2, [pc, #84]	; (8007248 <TIM_OC6_SetConfig+0xc8>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d109      	bne.n	800720c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	029b      	lsls	r3, r3, #10
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	4313      	orrs	r3, r2
 800720a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	621a      	str	r2, [r3, #32]
}
 8007226:	bf00      	nop
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	feff8fff 	.word	0xfeff8fff
 8007238:	40010000 	.word	0x40010000
 800723c:	40010400 	.word	0x40010400
 8007240:	40014000 	.word	0x40014000
 8007244:	40014400 	.word	0x40014400
 8007248:	40014800 	.word	0x40014800

0800724c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	f023 0201 	bic.w	r2, r3, #1
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	4313      	orrs	r3, r2
 8007280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f023 030a 	bic.w	r3, r3, #10
 8007288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	4313      	orrs	r3, r2
 8007290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	621a      	str	r2, [r3, #32]
}
 800729e:	bf00      	nop
 80072a0:	371c      	adds	r7, #28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b087      	sub	sp, #28
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	f023 0210 	bic.w	r2, r3, #16
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	031b      	lsls	r3, r3, #12
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	4313      	orrs	r3, r2
 80072de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	011b      	lsls	r3, r3, #4
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	621a      	str	r2, [r3, #32]
}
 80072fe:	bf00      	nop
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
	...

0800730c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	4b09      	ldr	r3, [pc, #36]	; (8007344 <TIM_ITRx_SetConfig+0x38>)
 8007320:	4013      	ands	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	4313      	orrs	r3, r2
 800732a:	f043 0307 	orr.w	r3, r3, #7
 800732e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	609a      	str	r2, [r3, #8]
}
 8007336:	bf00      	nop
 8007338:	3714      	adds	r7, #20
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	ffcfff8f 	.word	0xffcfff8f

08007348 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007348:	b480      	push	{r7}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
 8007354:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007362:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	021a      	lsls	r2, r3, #8
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	431a      	orrs	r2, r3
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	4313      	orrs	r3, r2
 8007370:	697a      	ldr	r2, [r7, #20]
 8007372:	4313      	orrs	r3, r2
 8007374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	609a      	str	r2, [r3, #8]
}
 800737c:	bf00      	nop
 800737e:	371c      	adds	r7, #28
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	f003 031f 	and.w	r3, r3, #31
 800739a:	2201      	movs	r2, #1
 800739c:	fa02 f303 	lsl.w	r3, r2, r3
 80073a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a1a      	ldr	r2, [r3, #32]
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	43db      	mvns	r3, r3
 80073aa:	401a      	ands	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6a1a      	ldr	r2, [r3, #32]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	f003 031f 	and.w	r3, r3, #31
 80073ba:	6879      	ldr	r1, [r7, #4]
 80073bc:	fa01 f303 	lsl.w	r3, r1, r3
 80073c0:	431a      	orrs	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	621a      	str	r2, [r3, #32]
}
 80073c6:	bf00      	nop
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
	...

080073d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d101      	bne.n	80073ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073e8:	2302      	movs	r3, #2
 80073ea:	e06d      	b.n	80074c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2202      	movs	r2, #2
 80073f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a30      	ldr	r2, [pc, #192]	; (80074d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d004      	beq.n	8007420 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a2f      	ldr	r2, [pc, #188]	; (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d108      	bne.n	8007432 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007426:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	4313      	orrs	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007438:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	4313      	orrs	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a20      	ldr	r2, [pc, #128]	; (80074d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d022      	beq.n	800749c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800745e:	d01d      	beq.n	800749c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a1d      	ldr	r2, [pc, #116]	; (80074dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d018      	beq.n	800749c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a1c      	ldr	r2, [pc, #112]	; (80074e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d013      	beq.n	800749c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a1a      	ldr	r2, [pc, #104]	; (80074e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d00e      	beq.n	800749c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a15      	ldr	r2, [pc, #84]	; (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d009      	beq.n	800749c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a16      	ldr	r2, [pc, #88]	; (80074e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d004      	beq.n	800749c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a15      	ldr	r2, [pc, #84]	; (80074ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d10c      	bne.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr
 80074d4:	40010000 	.word	0x40010000
 80074d8:	40010400 	.word	0x40010400
 80074dc:	40000400 	.word	0x40000400
 80074e0:	40000800 	.word	0x40000800
 80074e4:	40000c00 	.word	0x40000c00
 80074e8:	40001800 	.word	0x40001800
 80074ec:	40014000 	.word	0x40014000

080074f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e042      	b.n	8007588 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007508:	2b00      	cmp	r3, #0
 800750a:	d106      	bne.n	800751a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7f9 fbb3 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2224      	movs	r2, #36	; 0x24
 800751e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 0201 	bic.w	r2, r2, #1
 8007530:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fd90 	bl	8008060 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f825 	bl	8007590 <UART_SetConfig>
 8007546:	4603      	mov	r3, r0
 8007548:	2b01      	cmp	r3, #1
 800754a:	d101      	bne.n	8007550 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e01b      	b.n	8007588 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800755e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689a      	ldr	r2, [r3, #8]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800756e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f042 0201 	orr.w	r2, r2, #1
 800757e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fe0f 	bl	80081a4 <UART_CheckIdleState>
 8007586:	4603      	mov	r3, r0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007594:	b092      	sub	sp, #72	; 0x48
 8007596:	af00      	add	r7, sp, #0
 8007598:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	431a      	orrs	r2, r3
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	431a      	orrs	r2, r3
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	69db      	ldr	r3, [r3, #28]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	4bbe      	ldr	r3, [pc, #760]	; (80078b8 <UART_SetConfig+0x328>)
 80075c0:	4013      	ands	r3, r2
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	6812      	ldr	r2, [r2, #0]
 80075c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075c8:	430b      	orrs	r3, r1
 80075ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	68da      	ldr	r2, [r3, #12]
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	430a      	orrs	r2, r1
 80075e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4ab3      	ldr	r2, [pc, #716]	; (80078bc <UART_SetConfig+0x32c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d004      	beq.n	80075fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075f8:	4313      	orrs	r3, r2
 80075fa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689a      	ldr	r2, [r3, #8]
 8007602:	4baf      	ldr	r3, [pc, #700]	; (80078c0 <UART_SetConfig+0x330>)
 8007604:	4013      	ands	r3, r2
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	6812      	ldr	r2, [r2, #0]
 800760a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800760c:	430b      	orrs	r3, r1
 800760e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007616:	f023 010f 	bic.w	r1, r3, #15
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	430a      	orrs	r2, r1
 8007624:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4aa6      	ldr	r2, [pc, #664]	; (80078c4 <UART_SetConfig+0x334>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d177      	bne.n	8007720 <UART_SetConfig+0x190>
 8007630:	4ba5      	ldr	r3, [pc, #660]	; (80078c8 <UART_SetConfig+0x338>)
 8007632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007634:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007638:	2b28      	cmp	r3, #40	; 0x28
 800763a:	d86d      	bhi.n	8007718 <UART_SetConfig+0x188>
 800763c:	a201      	add	r2, pc, #4	; (adr r2, 8007644 <UART_SetConfig+0xb4>)
 800763e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007642:	bf00      	nop
 8007644:	080076e9 	.word	0x080076e9
 8007648:	08007719 	.word	0x08007719
 800764c:	08007719 	.word	0x08007719
 8007650:	08007719 	.word	0x08007719
 8007654:	08007719 	.word	0x08007719
 8007658:	08007719 	.word	0x08007719
 800765c:	08007719 	.word	0x08007719
 8007660:	08007719 	.word	0x08007719
 8007664:	080076f1 	.word	0x080076f1
 8007668:	08007719 	.word	0x08007719
 800766c:	08007719 	.word	0x08007719
 8007670:	08007719 	.word	0x08007719
 8007674:	08007719 	.word	0x08007719
 8007678:	08007719 	.word	0x08007719
 800767c:	08007719 	.word	0x08007719
 8007680:	08007719 	.word	0x08007719
 8007684:	080076f9 	.word	0x080076f9
 8007688:	08007719 	.word	0x08007719
 800768c:	08007719 	.word	0x08007719
 8007690:	08007719 	.word	0x08007719
 8007694:	08007719 	.word	0x08007719
 8007698:	08007719 	.word	0x08007719
 800769c:	08007719 	.word	0x08007719
 80076a0:	08007719 	.word	0x08007719
 80076a4:	08007701 	.word	0x08007701
 80076a8:	08007719 	.word	0x08007719
 80076ac:	08007719 	.word	0x08007719
 80076b0:	08007719 	.word	0x08007719
 80076b4:	08007719 	.word	0x08007719
 80076b8:	08007719 	.word	0x08007719
 80076bc:	08007719 	.word	0x08007719
 80076c0:	08007719 	.word	0x08007719
 80076c4:	08007709 	.word	0x08007709
 80076c8:	08007719 	.word	0x08007719
 80076cc:	08007719 	.word	0x08007719
 80076d0:	08007719 	.word	0x08007719
 80076d4:	08007719 	.word	0x08007719
 80076d8:	08007719 	.word	0x08007719
 80076dc:	08007719 	.word	0x08007719
 80076e0:	08007719 	.word	0x08007719
 80076e4:	08007711 	.word	0x08007711
 80076e8:	2301      	movs	r3, #1
 80076ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ee:	e222      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80076f0:	2304      	movs	r3, #4
 80076f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076f6:	e21e      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80076f8:	2308      	movs	r3, #8
 80076fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076fe:	e21a      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007700:	2310      	movs	r3, #16
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007706:	e216      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007708:	2320      	movs	r3, #32
 800770a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800770e:	e212      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007710:	2340      	movs	r3, #64	; 0x40
 8007712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007716:	e20e      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007718:	2380      	movs	r3, #128	; 0x80
 800771a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800771e:	e20a      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a69      	ldr	r2, [pc, #420]	; (80078cc <UART_SetConfig+0x33c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d130      	bne.n	800778c <UART_SetConfig+0x1fc>
 800772a:	4b67      	ldr	r3, [pc, #412]	; (80078c8 <UART_SetConfig+0x338>)
 800772c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772e:	f003 0307 	and.w	r3, r3, #7
 8007732:	2b05      	cmp	r3, #5
 8007734:	d826      	bhi.n	8007784 <UART_SetConfig+0x1f4>
 8007736:	a201      	add	r2, pc, #4	; (adr r2, 800773c <UART_SetConfig+0x1ac>)
 8007738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773c:	08007755 	.word	0x08007755
 8007740:	0800775d 	.word	0x0800775d
 8007744:	08007765 	.word	0x08007765
 8007748:	0800776d 	.word	0x0800776d
 800774c:	08007775 	.word	0x08007775
 8007750:	0800777d 	.word	0x0800777d
 8007754:	2300      	movs	r3, #0
 8007756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800775a:	e1ec      	b.n	8007b36 <UART_SetConfig+0x5a6>
 800775c:	2304      	movs	r3, #4
 800775e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007762:	e1e8      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007764:	2308      	movs	r3, #8
 8007766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800776a:	e1e4      	b.n	8007b36 <UART_SetConfig+0x5a6>
 800776c:	2310      	movs	r3, #16
 800776e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007772:	e1e0      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007774:	2320      	movs	r3, #32
 8007776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800777a:	e1dc      	b.n	8007b36 <UART_SetConfig+0x5a6>
 800777c:	2340      	movs	r3, #64	; 0x40
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007782:	e1d8      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007784:	2380      	movs	r3, #128	; 0x80
 8007786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800778a:	e1d4      	b.n	8007b36 <UART_SetConfig+0x5a6>
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a4f      	ldr	r2, [pc, #316]	; (80078d0 <UART_SetConfig+0x340>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d130      	bne.n	80077f8 <UART_SetConfig+0x268>
 8007796:	4b4c      	ldr	r3, [pc, #304]	; (80078c8 <UART_SetConfig+0x338>)
 8007798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800779a:	f003 0307 	and.w	r3, r3, #7
 800779e:	2b05      	cmp	r3, #5
 80077a0:	d826      	bhi.n	80077f0 <UART_SetConfig+0x260>
 80077a2:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <UART_SetConfig+0x218>)
 80077a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a8:	080077c1 	.word	0x080077c1
 80077ac:	080077c9 	.word	0x080077c9
 80077b0:	080077d1 	.word	0x080077d1
 80077b4:	080077d9 	.word	0x080077d9
 80077b8:	080077e1 	.word	0x080077e1
 80077bc:	080077e9 	.word	0x080077e9
 80077c0:	2300      	movs	r3, #0
 80077c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077c6:	e1b6      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80077c8:	2304      	movs	r3, #4
 80077ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ce:	e1b2      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80077d0:	2308      	movs	r3, #8
 80077d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077d6:	e1ae      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80077d8:	2310      	movs	r3, #16
 80077da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077de:	e1aa      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80077e0:	2320      	movs	r3, #32
 80077e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077e6:	e1a6      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80077e8:	2340      	movs	r3, #64	; 0x40
 80077ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ee:	e1a2      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80077f0:	2380      	movs	r3, #128	; 0x80
 80077f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077f6:	e19e      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a35      	ldr	r2, [pc, #212]	; (80078d4 <UART_SetConfig+0x344>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d130      	bne.n	8007864 <UART_SetConfig+0x2d4>
 8007802:	4b31      	ldr	r3, [pc, #196]	; (80078c8 <UART_SetConfig+0x338>)
 8007804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007806:	f003 0307 	and.w	r3, r3, #7
 800780a:	2b05      	cmp	r3, #5
 800780c:	d826      	bhi.n	800785c <UART_SetConfig+0x2cc>
 800780e:	a201      	add	r2, pc, #4	; (adr r2, 8007814 <UART_SetConfig+0x284>)
 8007810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007814:	0800782d 	.word	0x0800782d
 8007818:	08007835 	.word	0x08007835
 800781c:	0800783d 	.word	0x0800783d
 8007820:	08007845 	.word	0x08007845
 8007824:	0800784d 	.word	0x0800784d
 8007828:	08007855 	.word	0x08007855
 800782c:	2300      	movs	r3, #0
 800782e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007832:	e180      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007834:	2304      	movs	r3, #4
 8007836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800783a:	e17c      	b.n	8007b36 <UART_SetConfig+0x5a6>
 800783c:	2308      	movs	r3, #8
 800783e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007842:	e178      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007844:	2310      	movs	r3, #16
 8007846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800784a:	e174      	b.n	8007b36 <UART_SetConfig+0x5a6>
 800784c:	2320      	movs	r3, #32
 800784e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007852:	e170      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007854:	2340      	movs	r3, #64	; 0x40
 8007856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800785a:	e16c      	b.n	8007b36 <UART_SetConfig+0x5a6>
 800785c:	2380      	movs	r3, #128	; 0x80
 800785e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007862:	e168      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a1b      	ldr	r2, [pc, #108]	; (80078d8 <UART_SetConfig+0x348>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d142      	bne.n	80078f4 <UART_SetConfig+0x364>
 800786e:	4b16      	ldr	r3, [pc, #88]	; (80078c8 <UART_SetConfig+0x338>)
 8007870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007872:	f003 0307 	and.w	r3, r3, #7
 8007876:	2b05      	cmp	r3, #5
 8007878:	d838      	bhi.n	80078ec <UART_SetConfig+0x35c>
 800787a:	a201      	add	r2, pc, #4	; (adr r2, 8007880 <UART_SetConfig+0x2f0>)
 800787c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007880:	08007899 	.word	0x08007899
 8007884:	080078a1 	.word	0x080078a1
 8007888:	080078a9 	.word	0x080078a9
 800788c:	080078b1 	.word	0x080078b1
 8007890:	080078dd 	.word	0x080078dd
 8007894:	080078e5 	.word	0x080078e5
 8007898:	2300      	movs	r3, #0
 800789a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800789e:	e14a      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80078a0:	2304      	movs	r3, #4
 80078a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078a6:	e146      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80078a8:	2308      	movs	r3, #8
 80078aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ae:	e142      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80078b0:	2310      	movs	r3, #16
 80078b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078b6:	e13e      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80078b8:	cfff69f3 	.word	0xcfff69f3
 80078bc:	58000c00 	.word	0x58000c00
 80078c0:	11fff4ff 	.word	0x11fff4ff
 80078c4:	40011000 	.word	0x40011000
 80078c8:	58024400 	.word	0x58024400
 80078cc:	40004400 	.word	0x40004400
 80078d0:	40004800 	.word	0x40004800
 80078d4:	40004c00 	.word	0x40004c00
 80078d8:	40005000 	.word	0x40005000
 80078dc:	2320      	movs	r3, #32
 80078de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078e2:	e128      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80078e4:	2340      	movs	r3, #64	; 0x40
 80078e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ea:	e124      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80078ec:	2380      	movs	r3, #128	; 0x80
 80078ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078f2:	e120      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4acb      	ldr	r2, [pc, #812]	; (8007c28 <UART_SetConfig+0x698>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d176      	bne.n	80079ec <UART_SetConfig+0x45c>
 80078fe:	4bcb      	ldr	r3, [pc, #812]	; (8007c2c <UART_SetConfig+0x69c>)
 8007900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007902:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007906:	2b28      	cmp	r3, #40	; 0x28
 8007908:	d86c      	bhi.n	80079e4 <UART_SetConfig+0x454>
 800790a:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <UART_SetConfig+0x380>)
 800790c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007910:	080079b5 	.word	0x080079b5
 8007914:	080079e5 	.word	0x080079e5
 8007918:	080079e5 	.word	0x080079e5
 800791c:	080079e5 	.word	0x080079e5
 8007920:	080079e5 	.word	0x080079e5
 8007924:	080079e5 	.word	0x080079e5
 8007928:	080079e5 	.word	0x080079e5
 800792c:	080079e5 	.word	0x080079e5
 8007930:	080079bd 	.word	0x080079bd
 8007934:	080079e5 	.word	0x080079e5
 8007938:	080079e5 	.word	0x080079e5
 800793c:	080079e5 	.word	0x080079e5
 8007940:	080079e5 	.word	0x080079e5
 8007944:	080079e5 	.word	0x080079e5
 8007948:	080079e5 	.word	0x080079e5
 800794c:	080079e5 	.word	0x080079e5
 8007950:	080079c5 	.word	0x080079c5
 8007954:	080079e5 	.word	0x080079e5
 8007958:	080079e5 	.word	0x080079e5
 800795c:	080079e5 	.word	0x080079e5
 8007960:	080079e5 	.word	0x080079e5
 8007964:	080079e5 	.word	0x080079e5
 8007968:	080079e5 	.word	0x080079e5
 800796c:	080079e5 	.word	0x080079e5
 8007970:	080079cd 	.word	0x080079cd
 8007974:	080079e5 	.word	0x080079e5
 8007978:	080079e5 	.word	0x080079e5
 800797c:	080079e5 	.word	0x080079e5
 8007980:	080079e5 	.word	0x080079e5
 8007984:	080079e5 	.word	0x080079e5
 8007988:	080079e5 	.word	0x080079e5
 800798c:	080079e5 	.word	0x080079e5
 8007990:	080079d5 	.word	0x080079d5
 8007994:	080079e5 	.word	0x080079e5
 8007998:	080079e5 	.word	0x080079e5
 800799c:	080079e5 	.word	0x080079e5
 80079a0:	080079e5 	.word	0x080079e5
 80079a4:	080079e5 	.word	0x080079e5
 80079a8:	080079e5 	.word	0x080079e5
 80079ac:	080079e5 	.word	0x080079e5
 80079b0:	080079dd 	.word	0x080079dd
 80079b4:	2301      	movs	r3, #1
 80079b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ba:	e0bc      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80079bc:	2304      	movs	r3, #4
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079c2:	e0b8      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80079c4:	2308      	movs	r3, #8
 80079c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ca:	e0b4      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80079cc:	2310      	movs	r3, #16
 80079ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079d2:	e0b0      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80079d4:	2320      	movs	r3, #32
 80079d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079da:	e0ac      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80079dc:	2340      	movs	r3, #64	; 0x40
 80079de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079e2:	e0a8      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80079e4:	2380      	movs	r3, #128	; 0x80
 80079e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ea:	e0a4      	b.n	8007b36 <UART_SetConfig+0x5a6>
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a8f      	ldr	r2, [pc, #572]	; (8007c30 <UART_SetConfig+0x6a0>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d130      	bne.n	8007a58 <UART_SetConfig+0x4c8>
 80079f6:	4b8d      	ldr	r3, [pc, #564]	; (8007c2c <UART_SetConfig+0x69c>)
 80079f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079fa:	f003 0307 	and.w	r3, r3, #7
 80079fe:	2b05      	cmp	r3, #5
 8007a00:	d826      	bhi.n	8007a50 <UART_SetConfig+0x4c0>
 8007a02:	a201      	add	r2, pc, #4	; (adr r2, 8007a08 <UART_SetConfig+0x478>)
 8007a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a08:	08007a21 	.word	0x08007a21
 8007a0c:	08007a29 	.word	0x08007a29
 8007a10:	08007a31 	.word	0x08007a31
 8007a14:	08007a39 	.word	0x08007a39
 8007a18:	08007a41 	.word	0x08007a41
 8007a1c:	08007a49 	.word	0x08007a49
 8007a20:	2300      	movs	r3, #0
 8007a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a26:	e086      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007a28:	2304      	movs	r3, #4
 8007a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a2e:	e082      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007a30:	2308      	movs	r3, #8
 8007a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a36:	e07e      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007a38:	2310      	movs	r3, #16
 8007a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a3e:	e07a      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007a40:	2320      	movs	r3, #32
 8007a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a46:	e076      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007a48:	2340      	movs	r3, #64	; 0x40
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a4e:	e072      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007a50:	2380      	movs	r3, #128	; 0x80
 8007a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a56:	e06e      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a75      	ldr	r2, [pc, #468]	; (8007c34 <UART_SetConfig+0x6a4>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d130      	bne.n	8007ac4 <UART_SetConfig+0x534>
 8007a62:	4b72      	ldr	r3, [pc, #456]	; (8007c2c <UART_SetConfig+0x69c>)
 8007a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a66:	f003 0307 	and.w	r3, r3, #7
 8007a6a:	2b05      	cmp	r3, #5
 8007a6c:	d826      	bhi.n	8007abc <UART_SetConfig+0x52c>
 8007a6e:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <UART_SetConfig+0x4e4>)
 8007a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a74:	08007a8d 	.word	0x08007a8d
 8007a78:	08007a95 	.word	0x08007a95
 8007a7c:	08007a9d 	.word	0x08007a9d
 8007a80:	08007aa5 	.word	0x08007aa5
 8007a84:	08007aad 	.word	0x08007aad
 8007a88:	08007ab5 	.word	0x08007ab5
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a92:	e050      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007a94:	2304      	movs	r3, #4
 8007a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a9a:	e04c      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007a9c:	2308      	movs	r3, #8
 8007a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aa2:	e048      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007aa4:	2310      	movs	r3, #16
 8007aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aaa:	e044      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007aac:	2320      	movs	r3, #32
 8007aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ab2:	e040      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007ab4:	2340      	movs	r3, #64	; 0x40
 8007ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aba:	e03c      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007abc:	2380      	movs	r3, #128	; 0x80
 8007abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ac2:	e038      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a5b      	ldr	r2, [pc, #364]	; (8007c38 <UART_SetConfig+0x6a8>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d130      	bne.n	8007b30 <UART_SetConfig+0x5a0>
 8007ace:	4b57      	ldr	r3, [pc, #348]	; (8007c2c <UART_SetConfig+0x69c>)
 8007ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad2:	f003 0307 	and.w	r3, r3, #7
 8007ad6:	2b05      	cmp	r3, #5
 8007ad8:	d826      	bhi.n	8007b28 <UART_SetConfig+0x598>
 8007ada:	a201      	add	r2, pc, #4	; (adr r2, 8007ae0 <UART_SetConfig+0x550>)
 8007adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae0:	08007af9 	.word	0x08007af9
 8007ae4:	08007b01 	.word	0x08007b01
 8007ae8:	08007b09 	.word	0x08007b09
 8007aec:	08007b11 	.word	0x08007b11
 8007af0:	08007b19 	.word	0x08007b19
 8007af4:	08007b21 	.word	0x08007b21
 8007af8:	2302      	movs	r3, #2
 8007afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007afe:	e01a      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007b00:	2304      	movs	r3, #4
 8007b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b06:	e016      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007b08:	2308      	movs	r3, #8
 8007b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b0e:	e012      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007b10:	2310      	movs	r3, #16
 8007b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b16:	e00e      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007b18:	2320      	movs	r3, #32
 8007b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b1e:	e00a      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007b20:	2340      	movs	r3, #64	; 0x40
 8007b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b26:	e006      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007b28:	2380      	movs	r3, #128	; 0x80
 8007b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b2e:	e002      	b.n	8007b36 <UART_SetConfig+0x5a6>
 8007b30:	2380      	movs	r3, #128	; 0x80
 8007b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a3f      	ldr	r2, [pc, #252]	; (8007c38 <UART_SetConfig+0x6a8>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	f040 80f8 	bne.w	8007d32 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b42:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007b46:	2b20      	cmp	r3, #32
 8007b48:	dc46      	bgt.n	8007bd8 <UART_SetConfig+0x648>
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	f2c0 8082 	blt.w	8007c54 <UART_SetConfig+0x6c4>
 8007b50:	3b02      	subs	r3, #2
 8007b52:	2b1e      	cmp	r3, #30
 8007b54:	d87e      	bhi.n	8007c54 <UART_SetConfig+0x6c4>
 8007b56:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <UART_SetConfig+0x5cc>)
 8007b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5c:	08007bdf 	.word	0x08007bdf
 8007b60:	08007c55 	.word	0x08007c55
 8007b64:	08007be7 	.word	0x08007be7
 8007b68:	08007c55 	.word	0x08007c55
 8007b6c:	08007c55 	.word	0x08007c55
 8007b70:	08007c55 	.word	0x08007c55
 8007b74:	08007bf7 	.word	0x08007bf7
 8007b78:	08007c55 	.word	0x08007c55
 8007b7c:	08007c55 	.word	0x08007c55
 8007b80:	08007c55 	.word	0x08007c55
 8007b84:	08007c55 	.word	0x08007c55
 8007b88:	08007c55 	.word	0x08007c55
 8007b8c:	08007c55 	.word	0x08007c55
 8007b90:	08007c55 	.word	0x08007c55
 8007b94:	08007c07 	.word	0x08007c07
 8007b98:	08007c55 	.word	0x08007c55
 8007b9c:	08007c55 	.word	0x08007c55
 8007ba0:	08007c55 	.word	0x08007c55
 8007ba4:	08007c55 	.word	0x08007c55
 8007ba8:	08007c55 	.word	0x08007c55
 8007bac:	08007c55 	.word	0x08007c55
 8007bb0:	08007c55 	.word	0x08007c55
 8007bb4:	08007c55 	.word	0x08007c55
 8007bb8:	08007c55 	.word	0x08007c55
 8007bbc:	08007c55 	.word	0x08007c55
 8007bc0:	08007c55 	.word	0x08007c55
 8007bc4:	08007c55 	.word	0x08007c55
 8007bc8:	08007c55 	.word	0x08007c55
 8007bcc:	08007c55 	.word	0x08007c55
 8007bd0:	08007c55 	.word	0x08007c55
 8007bd4:	08007c47 	.word	0x08007c47
 8007bd8:	2b40      	cmp	r3, #64	; 0x40
 8007bda:	d037      	beq.n	8007c4c <UART_SetConfig+0x6bc>
 8007bdc:	e03a      	b.n	8007c54 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007bde:	f7fd ffed 	bl	8005bbc <HAL_RCCEx_GetD3PCLK1Freq>
 8007be2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007be4:	e03c      	b.n	8007c60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fd fffc 	bl	8005be8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bf4:	e034      	b.n	8007c60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bf6:	f107 0318 	add.w	r3, r7, #24
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fe f948 	bl	8005e90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c04:	e02c      	b.n	8007c60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c06:	4b09      	ldr	r3, [pc, #36]	; (8007c2c <UART_SetConfig+0x69c>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0320 	and.w	r3, r3, #32
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d016      	beq.n	8007c40 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c12:	4b06      	ldr	r3, [pc, #24]	; (8007c2c <UART_SetConfig+0x69c>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	08db      	lsrs	r3, r3, #3
 8007c18:	f003 0303 	and.w	r3, r3, #3
 8007c1c:	4a07      	ldr	r2, [pc, #28]	; (8007c3c <UART_SetConfig+0x6ac>)
 8007c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c24:	e01c      	b.n	8007c60 <UART_SetConfig+0x6d0>
 8007c26:	bf00      	nop
 8007c28:	40011400 	.word	0x40011400
 8007c2c:	58024400 	.word	0x58024400
 8007c30:	40007800 	.word	0x40007800
 8007c34:	40007c00 	.word	0x40007c00
 8007c38:	58000c00 	.word	0x58000c00
 8007c3c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007c40:	4b9d      	ldr	r3, [pc, #628]	; (8007eb8 <UART_SetConfig+0x928>)
 8007c42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c44:	e00c      	b.n	8007c60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c46:	4b9d      	ldr	r3, [pc, #628]	; (8007ebc <UART_SetConfig+0x92c>)
 8007c48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c4a:	e009      	b.n	8007c60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c52:	e005      	b.n	8007c60 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007c5e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 81de 	beq.w	8008024 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6c:	4a94      	ldr	r2, [pc, #592]	; (8007ec0 <UART_SetConfig+0x930>)
 8007c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c72:	461a      	mov	r2, r3
 8007c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c76:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c7a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	4613      	mov	r3, r2
 8007c82:	005b      	lsls	r3, r3, #1
 8007c84:	4413      	add	r3, r2
 8007c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d305      	bcc.n	8007c98 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d903      	bls.n	8007ca0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007c9e:	e1c1      	b.n	8008024 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	60bb      	str	r3, [r7, #8]
 8007ca6:	60fa      	str	r2, [r7, #12]
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cac:	4a84      	ldr	r2, [pc, #528]	; (8007ec0 <UART_SetConfig+0x930>)
 8007cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	603b      	str	r3, [r7, #0]
 8007cb8:	607a      	str	r2, [r7, #4]
 8007cba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007cc2:	f7f8 fb09 	bl	80002d8 <__aeabi_uldivmod>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4610      	mov	r0, r2
 8007ccc:	4619      	mov	r1, r3
 8007cce:	f04f 0200 	mov.w	r2, #0
 8007cd2:	f04f 0300 	mov.w	r3, #0
 8007cd6:	020b      	lsls	r3, r1, #8
 8007cd8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007cdc:	0202      	lsls	r2, r0, #8
 8007cde:	6979      	ldr	r1, [r7, #20]
 8007ce0:	6849      	ldr	r1, [r1, #4]
 8007ce2:	0849      	lsrs	r1, r1, #1
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	4605      	mov	r5, r0
 8007cea:	eb12 0804 	adds.w	r8, r2, r4
 8007cee:	eb43 0905 	adc.w	r9, r3, r5
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	469a      	mov	sl, r3
 8007cfa:	4693      	mov	fp, r2
 8007cfc:	4652      	mov	r2, sl
 8007cfe:	465b      	mov	r3, fp
 8007d00:	4640      	mov	r0, r8
 8007d02:	4649      	mov	r1, r9
 8007d04:	f7f8 fae8 	bl	80002d8 <__aeabi_uldivmod>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d16:	d308      	bcc.n	8007d2a <UART_SetConfig+0x79a>
 8007d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d1e:	d204      	bcs.n	8007d2a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d26:	60da      	str	r2, [r3, #12]
 8007d28:	e17c      	b.n	8008024 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007d30:	e178      	b.n	8008024 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	69db      	ldr	r3, [r3, #28]
 8007d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d3a:	f040 80c5 	bne.w	8007ec8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007d3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007d42:	2b20      	cmp	r3, #32
 8007d44:	dc48      	bgt.n	8007dd8 <UART_SetConfig+0x848>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	db7b      	blt.n	8007e42 <UART_SetConfig+0x8b2>
 8007d4a:	2b20      	cmp	r3, #32
 8007d4c:	d879      	bhi.n	8007e42 <UART_SetConfig+0x8b2>
 8007d4e:	a201      	add	r2, pc, #4	; (adr r2, 8007d54 <UART_SetConfig+0x7c4>)
 8007d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d54:	08007ddf 	.word	0x08007ddf
 8007d58:	08007de7 	.word	0x08007de7
 8007d5c:	08007e43 	.word	0x08007e43
 8007d60:	08007e43 	.word	0x08007e43
 8007d64:	08007def 	.word	0x08007def
 8007d68:	08007e43 	.word	0x08007e43
 8007d6c:	08007e43 	.word	0x08007e43
 8007d70:	08007e43 	.word	0x08007e43
 8007d74:	08007dff 	.word	0x08007dff
 8007d78:	08007e43 	.word	0x08007e43
 8007d7c:	08007e43 	.word	0x08007e43
 8007d80:	08007e43 	.word	0x08007e43
 8007d84:	08007e43 	.word	0x08007e43
 8007d88:	08007e43 	.word	0x08007e43
 8007d8c:	08007e43 	.word	0x08007e43
 8007d90:	08007e43 	.word	0x08007e43
 8007d94:	08007e0f 	.word	0x08007e0f
 8007d98:	08007e43 	.word	0x08007e43
 8007d9c:	08007e43 	.word	0x08007e43
 8007da0:	08007e43 	.word	0x08007e43
 8007da4:	08007e43 	.word	0x08007e43
 8007da8:	08007e43 	.word	0x08007e43
 8007dac:	08007e43 	.word	0x08007e43
 8007db0:	08007e43 	.word	0x08007e43
 8007db4:	08007e43 	.word	0x08007e43
 8007db8:	08007e43 	.word	0x08007e43
 8007dbc:	08007e43 	.word	0x08007e43
 8007dc0:	08007e43 	.word	0x08007e43
 8007dc4:	08007e43 	.word	0x08007e43
 8007dc8:	08007e43 	.word	0x08007e43
 8007dcc:	08007e43 	.word	0x08007e43
 8007dd0:	08007e43 	.word	0x08007e43
 8007dd4:	08007e35 	.word	0x08007e35
 8007dd8:	2b40      	cmp	r3, #64	; 0x40
 8007dda:	d02e      	beq.n	8007e3a <UART_SetConfig+0x8aa>
 8007ddc:	e031      	b.n	8007e42 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dde:	f7fc fcb7 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8007de2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007de4:	e033      	b.n	8007e4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007de6:	f7fc fcc9 	bl	800477c <HAL_RCC_GetPCLK2Freq>
 8007dea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007dec:	e02f      	b.n	8007e4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fd fef8 	bl	8005be8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dfc:	e027      	b.n	8007e4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dfe:	f107 0318 	add.w	r3, r7, #24
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe f844 	bl	8005e90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e0c:	e01f      	b.n	8007e4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e0e:	4b2d      	ldr	r3, [pc, #180]	; (8007ec4 <UART_SetConfig+0x934>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0320 	and.w	r3, r3, #32
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d009      	beq.n	8007e2e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e1a:	4b2a      	ldr	r3, [pc, #168]	; (8007ec4 <UART_SetConfig+0x934>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	08db      	lsrs	r3, r3, #3
 8007e20:	f003 0303 	and.w	r3, r3, #3
 8007e24:	4a24      	ldr	r2, [pc, #144]	; (8007eb8 <UART_SetConfig+0x928>)
 8007e26:	fa22 f303 	lsr.w	r3, r2, r3
 8007e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e2c:	e00f      	b.n	8007e4e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007e2e:	4b22      	ldr	r3, [pc, #136]	; (8007eb8 <UART_SetConfig+0x928>)
 8007e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e32:	e00c      	b.n	8007e4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e34:	4b21      	ldr	r3, [pc, #132]	; (8007ebc <UART_SetConfig+0x92c>)
 8007e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e38:	e009      	b.n	8007e4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e40:	e005      	b.n	8007e4e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007e42:	2300      	movs	r3, #0
 8007e44:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007e4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f000 80e7 	beq.w	8008024 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5a:	4a19      	ldr	r2, [pc, #100]	; (8007ec0 <UART_SetConfig+0x930>)
 8007e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e60:	461a      	mov	r2, r3
 8007e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e64:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e68:	005a      	lsls	r2, r3, #1
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	085b      	lsrs	r3, r3, #1
 8007e70:	441a      	add	r2, r3
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e7a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7e:	2b0f      	cmp	r3, #15
 8007e80:	d916      	bls.n	8007eb0 <UART_SetConfig+0x920>
 8007e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e88:	d212      	bcs.n	8007eb0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	f023 030f 	bic.w	r3, r3, #15
 8007e92:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e96:	085b      	lsrs	r3, r3, #1
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	f003 0307 	and.w	r3, r3, #7
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007eac:	60da      	str	r2, [r3, #12]
 8007eae:	e0b9      	b.n	8008024 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007eb6:	e0b5      	b.n	8008024 <UART_SetConfig+0xa94>
 8007eb8:	03d09000 	.word	0x03d09000
 8007ebc:	003d0900 	.word	0x003d0900
 8007ec0:	08008730 	.word	0x08008730
 8007ec4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ec8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007ecc:	2b20      	cmp	r3, #32
 8007ece:	dc49      	bgt.n	8007f64 <UART_SetConfig+0x9d4>
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	db7c      	blt.n	8007fce <UART_SetConfig+0xa3e>
 8007ed4:	2b20      	cmp	r3, #32
 8007ed6:	d87a      	bhi.n	8007fce <UART_SetConfig+0xa3e>
 8007ed8:	a201      	add	r2, pc, #4	; (adr r2, 8007ee0 <UART_SetConfig+0x950>)
 8007eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ede:	bf00      	nop
 8007ee0:	08007f6b 	.word	0x08007f6b
 8007ee4:	08007f73 	.word	0x08007f73
 8007ee8:	08007fcf 	.word	0x08007fcf
 8007eec:	08007fcf 	.word	0x08007fcf
 8007ef0:	08007f7b 	.word	0x08007f7b
 8007ef4:	08007fcf 	.word	0x08007fcf
 8007ef8:	08007fcf 	.word	0x08007fcf
 8007efc:	08007fcf 	.word	0x08007fcf
 8007f00:	08007f8b 	.word	0x08007f8b
 8007f04:	08007fcf 	.word	0x08007fcf
 8007f08:	08007fcf 	.word	0x08007fcf
 8007f0c:	08007fcf 	.word	0x08007fcf
 8007f10:	08007fcf 	.word	0x08007fcf
 8007f14:	08007fcf 	.word	0x08007fcf
 8007f18:	08007fcf 	.word	0x08007fcf
 8007f1c:	08007fcf 	.word	0x08007fcf
 8007f20:	08007f9b 	.word	0x08007f9b
 8007f24:	08007fcf 	.word	0x08007fcf
 8007f28:	08007fcf 	.word	0x08007fcf
 8007f2c:	08007fcf 	.word	0x08007fcf
 8007f30:	08007fcf 	.word	0x08007fcf
 8007f34:	08007fcf 	.word	0x08007fcf
 8007f38:	08007fcf 	.word	0x08007fcf
 8007f3c:	08007fcf 	.word	0x08007fcf
 8007f40:	08007fcf 	.word	0x08007fcf
 8007f44:	08007fcf 	.word	0x08007fcf
 8007f48:	08007fcf 	.word	0x08007fcf
 8007f4c:	08007fcf 	.word	0x08007fcf
 8007f50:	08007fcf 	.word	0x08007fcf
 8007f54:	08007fcf 	.word	0x08007fcf
 8007f58:	08007fcf 	.word	0x08007fcf
 8007f5c:	08007fcf 	.word	0x08007fcf
 8007f60:	08007fc1 	.word	0x08007fc1
 8007f64:	2b40      	cmp	r3, #64	; 0x40
 8007f66:	d02e      	beq.n	8007fc6 <UART_SetConfig+0xa36>
 8007f68:	e031      	b.n	8007fce <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f6a:	f7fc fbf1 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8007f6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f70:	e033      	b.n	8007fda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f72:	f7fc fc03 	bl	800477c <HAL_RCC_GetPCLK2Freq>
 8007f76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f78:	e02f      	b.n	8007fda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fd fe32 	bl	8005be8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f88:	e027      	b.n	8007fda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f8a:	f107 0318 	add.w	r3, r7, #24
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fd ff7e 	bl	8005e90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f98:	e01f      	b.n	8007fda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f9a:	4b2d      	ldr	r3, [pc, #180]	; (8008050 <UART_SetConfig+0xac0>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0320 	and.w	r3, r3, #32
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d009      	beq.n	8007fba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007fa6:	4b2a      	ldr	r3, [pc, #168]	; (8008050 <UART_SetConfig+0xac0>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	08db      	lsrs	r3, r3, #3
 8007fac:	f003 0303 	and.w	r3, r3, #3
 8007fb0:	4a28      	ldr	r2, [pc, #160]	; (8008054 <UART_SetConfig+0xac4>)
 8007fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007fb8:	e00f      	b.n	8007fda <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007fba:	4b26      	ldr	r3, [pc, #152]	; (8008054 <UART_SetConfig+0xac4>)
 8007fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fbe:	e00c      	b.n	8007fda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007fc0:	4b25      	ldr	r3, [pc, #148]	; (8008058 <UART_SetConfig+0xac8>)
 8007fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fc4:	e009      	b.n	8007fda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fcc:	e005      	b.n	8007fda <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007fd8:	bf00      	nop
    }

    if (pclk != 0U)
 8007fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d021      	beq.n	8008024 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe4:	4a1d      	ldr	r2, [pc, #116]	; (800805c <UART_SetConfig+0xacc>)
 8007fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fea:	461a      	mov	r2, r3
 8007fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fee:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	085b      	lsrs	r3, r3, #1
 8007ff8:	441a      	add	r2, r3
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008002:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008006:	2b0f      	cmp	r3, #15
 8008008:	d909      	bls.n	800801e <UART_SetConfig+0xa8e>
 800800a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008010:	d205      	bcs.n	800801e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008014:	b29a      	uxth	r2, r3
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	60da      	str	r2, [r3, #12]
 800801c:	e002      	b.n	8008024 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	2201      	movs	r2, #1
 8008028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	2201      	movs	r2, #1
 8008030:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	2200      	movs	r2, #0
 8008038:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2200      	movs	r2, #0
 800803e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008040:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008044:	4618      	mov	r0, r3
 8008046:	3748      	adds	r7, #72	; 0x48
 8008048:	46bd      	mov	sp, r7
 800804a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800804e:	bf00      	nop
 8008050:	58024400 	.word	0x58024400
 8008054:	03d09000 	.word	0x03d09000
 8008058:	003d0900 	.word	0x003d0900
 800805c:	08008730 	.word	0x08008730

08008060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806c:	f003 0308 	and.w	r3, r3, #8
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00a      	beq.n	800808a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	430a      	orrs	r2, r1
 8008088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00a      	beq.n	80080ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	430a      	orrs	r2, r1
 80080aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b0:	f003 0302 	and.w	r3, r3, #2
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00a      	beq.n	80080ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	430a      	orrs	r2, r1
 80080cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d2:	f003 0304 	and.w	r3, r3, #4
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00a      	beq.n	80080f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	430a      	orrs	r2, r1
 80080ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f4:	f003 0310 	and.w	r3, r3, #16
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00a      	beq.n	8008112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	430a      	orrs	r2, r1
 8008110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008116:	f003 0320 	and.w	r3, r3, #32
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00a      	beq.n	8008134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	430a      	orrs	r2, r1
 8008132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813c:	2b00      	cmp	r3, #0
 800813e:	d01a      	beq.n	8008176 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	430a      	orrs	r2, r1
 8008154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800815a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800815e:	d10a      	bne.n	8008176 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	430a      	orrs	r2, r1
 8008174:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00a      	beq.n	8008198 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	430a      	orrs	r2, r1
 8008196:	605a      	str	r2, [r3, #4]
  }
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b098      	sub	sp, #96	; 0x60
 80081a8:	af02      	add	r7, sp, #8
 80081aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081b4:	f7f8 fec2 	bl	8000f3c <HAL_GetTick>
 80081b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0308 	and.w	r3, r3, #8
 80081c4:	2b08      	cmp	r3, #8
 80081c6:	d12f      	bne.n	8008228 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081d0:	2200      	movs	r2, #0
 80081d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f88e 	bl	80082f8 <UART_WaitOnFlagUntilTimeout>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d022      	beq.n	8008228 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ea:	e853 3f00 	ldrex	r3, [r3]
 80081ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081f6:	653b      	str	r3, [r7, #80]	; 0x50
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	461a      	mov	r2, r3
 80081fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008200:	647b      	str	r3, [r7, #68]	; 0x44
 8008202:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008204:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008208:	e841 2300 	strex	r3, r2, [r1]
 800820c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800820e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1e6      	bne.n	80081e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2220      	movs	r2, #32
 8008218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	e063      	b.n	80082f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0304 	and.w	r3, r3, #4
 8008232:	2b04      	cmp	r3, #4
 8008234:	d149      	bne.n	80082ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008236:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800823e:	2200      	movs	r2, #0
 8008240:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f857 	bl	80082f8 <UART_WaitOnFlagUntilTimeout>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d03c      	beq.n	80082ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008258:	e853 3f00 	ldrex	r3, [r3]
 800825c:	623b      	str	r3, [r7, #32]
   return(result);
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008264:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	461a      	mov	r2, r3
 800826c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800826e:	633b      	str	r3, [r7, #48]	; 0x30
 8008270:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008276:	e841 2300 	strex	r3, r2, [r1]
 800827a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1e6      	bne.n	8008250 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3308      	adds	r3, #8
 8008288:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	e853 3f00 	ldrex	r3, [r3]
 8008290:	60fb      	str	r3, [r7, #12]
   return(result);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f023 0301 	bic.w	r3, r3, #1
 8008298:	64bb      	str	r3, [r7, #72]	; 0x48
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3308      	adds	r3, #8
 80082a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082a2:	61fa      	str	r2, [r7, #28]
 80082a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a6:	69b9      	ldr	r1, [r7, #24]
 80082a8:	69fa      	ldr	r2, [r7, #28]
 80082aa:	e841 2300 	strex	r3, r2, [r1]
 80082ae:	617b      	str	r3, [r7, #20]
   return(result);
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1e5      	bne.n	8008282 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2220      	movs	r2, #32
 80082ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e012      	b.n	80082f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2220      	movs	r2, #32
 80082ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2220      	movs	r2, #32
 80082d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3758      	adds	r7, #88	; 0x58
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	603b      	str	r3, [r7, #0]
 8008304:	4613      	mov	r3, r2
 8008306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008308:	e04f      	b.n	80083aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008310:	d04b      	beq.n	80083aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008312:	f7f8 fe13 	bl	8000f3c <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	69ba      	ldr	r2, [r7, #24]
 800831e:	429a      	cmp	r2, r3
 8008320:	d302      	bcc.n	8008328 <UART_WaitOnFlagUntilTimeout+0x30>
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d101      	bne.n	800832c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008328:	2303      	movs	r3, #3
 800832a:	e04e      	b.n	80083ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0304 	and.w	r3, r3, #4
 8008336:	2b00      	cmp	r3, #0
 8008338:	d037      	beq.n	80083aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	2b80      	cmp	r3, #128	; 0x80
 800833e:	d034      	beq.n	80083aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2b40      	cmp	r3, #64	; 0x40
 8008344:	d031      	beq.n	80083aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	69db      	ldr	r3, [r3, #28]
 800834c:	f003 0308 	and.w	r3, r3, #8
 8008350:	2b08      	cmp	r3, #8
 8008352:	d110      	bne.n	8008376 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2208      	movs	r2, #8
 800835a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f000 f839 	bl	80083d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2208      	movs	r2, #8
 8008366:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e029      	b.n	80083ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	69db      	ldr	r3, [r3, #28]
 800837c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008384:	d111      	bne.n	80083aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800838e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 f81f 	bl	80083d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2220      	movs	r2, #32
 800839a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e00f      	b.n	80083ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	69da      	ldr	r2, [r3, #28]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	4013      	ands	r3, r2
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	bf0c      	ite	eq
 80083ba:	2301      	moveq	r3, #1
 80083bc:	2300      	movne	r3, #0
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	461a      	mov	r2, r3
 80083c2:	79fb      	ldrb	r3, [r7, #7]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d0a0      	beq.n	800830a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b095      	sub	sp, #84	; 0x54
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e4:	e853 3f00 	ldrex	r3, [r3]
 80083e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	461a      	mov	r2, r3
 80083f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083fa:	643b      	str	r3, [r7, #64]	; 0x40
 80083fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008400:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008402:	e841 2300 	strex	r3, r2, [r1]
 8008406:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1e6      	bne.n	80083dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	3308      	adds	r3, #8
 8008414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	e853 3f00 	ldrex	r3, [r3]
 800841c:	61fb      	str	r3, [r7, #28]
   return(result);
 800841e:	69fa      	ldr	r2, [r7, #28]
 8008420:	4b1e      	ldr	r3, [pc, #120]	; (800849c <UART_EndRxTransfer+0xc8>)
 8008422:	4013      	ands	r3, r2
 8008424:	64bb      	str	r3, [r7, #72]	; 0x48
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3308      	adds	r3, #8
 800842c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800842e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008430:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008436:	e841 2300 	strex	r3, r2, [r1]
 800843a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1e5      	bne.n	800840e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008446:	2b01      	cmp	r3, #1
 8008448:	d118      	bne.n	800847c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	e853 3f00 	ldrex	r3, [r3]
 8008456:	60bb      	str	r3, [r7, #8]
   return(result);
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	f023 0310 	bic.w	r3, r3, #16
 800845e:	647b      	str	r3, [r7, #68]	; 0x44
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	461a      	mov	r2, r3
 8008466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008468:	61bb      	str	r3, [r7, #24]
 800846a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846c:	6979      	ldr	r1, [r7, #20]
 800846e:	69ba      	ldr	r2, [r7, #24]
 8008470:	e841 2300 	strex	r3, r2, [r1]
 8008474:	613b      	str	r3, [r7, #16]
   return(result);
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1e6      	bne.n	800844a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2220      	movs	r2, #32
 8008480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008490:	bf00      	nop
 8008492:	3754      	adds	r7, #84	; 0x54
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	effffffe 	.word	0xeffffffe

080084a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d101      	bne.n	80084b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80084b2:	2302      	movs	r3, #2
 80084b4:	e027      	b.n	8008506 <HAL_UARTEx_DisableFifoMode+0x66>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2224      	movs	r2, #36	; 0x24
 80084c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f022 0201 	bic.w	r2, r2, #1
 80084dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80084e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2220      	movs	r2, #32
 80084f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008522:	2b01      	cmp	r3, #1
 8008524:	d101      	bne.n	800852a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008526:	2302      	movs	r3, #2
 8008528:	e02d      	b.n	8008586 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2224      	movs	r2, #36	; 0x24
 8008536:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f022 0201 	bic.w	r2, r2, #1
 8008550:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	683a      	ldr	r2, [r7, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f850 	bl	800860c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2220      	movs	r2, #32
 8008578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b084      	sub	sp, #16
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
 8008596:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d101      	bne.n	80085a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80085a2:	2302      	movs	r3, #2
 80085a4:	e02d      	b.n	8008602 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2224      	movs	r2, #36	; 0x24
 80085b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f022 0201 	bic.w	r2, r2, #1
 80085cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	430a      	orrs	r2, r1
 80085e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f812 	bl	800860c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2220      	movs	r2, #32
 80085f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
	...

0800860c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008618:	2b00      	cmp	r3, #0
 800861a:	d108      	bne.n	800862e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800862c:	e031      	b.n	8008692 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800862e:	2310      	movs	r3, #16
 8008630:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008632:	2310      	movs	r3, #16
 8008634:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	0e5b      	lsrs	r3, r3, #25
 800863e:	b2db      	uxtb	r3, r3
 8008640:	f003 0307 	and.w	r3, r3, #7
 8008644:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	0f5b      	lsrs	r3, r3, #29
 800864e:	b2db      	uxtb	r3, r3
 8008650:	f003 0307 	and.w	r3, r3, #7
 8008654:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008656:	7bbb      	ldrb	r3, [r7, #14]
 8008658:	7b3a      	ldrb	r2, [r7, #12]
 800865a:	4911      	ldr	r1, [pc, #68]	; (80086a0 <UARTEx_SetNbDataToProcess+0x94>)
 800865c:	5c8a      	ldrb	r2, [r1, r2]
 800865e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008662:	7b3a      	ldrb	r2, [r7, #12]
 8008664:	490f      	ldr	r1, [pc, #60]	; (80086a4 <UARTEx_SetNbDataToProcess+0x98>)
 8008666:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008668:	fb93 f3f2 	sdiv	r3, r3, r2
 800866c:	b29a      	uxth	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008674:	7bfb      	ldrb	r3, [r7, #15]
 8008676:	7b7a      	ldrb	r2, [r7, #13]
 8008678:	4909      	ldr	r1, [pc, #36]	; (80086a0 <UARTEx_SetNbDataToProcess+0x94>)
 800867a:	5c8a      	ldrb	r2, [r1, r2]
 800867c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008680:	7b7a      	ldrb	r2, [r7, #13]
 8008682:	4908      	ldr	r1, [pc, #32]	; (80086a4 <UARTEx_SetNbDataToProcess+0x98>)
 8008684:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008686:	fb93 f3f2 	sdiv	r3, r3, r2
 800868a:	b29a      	uxth	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008692:	bf00      	nop
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	08008748 	.word	0x08008748
 80086a4:	08008750 	.word	0x08008750

080086a8 <memset>:
 80086a8:	4402      	add	r2, r0
 80086aa:	4603      	mov	r3, r0
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d100      	bne.n	80086b2 <memset+0xa>
 80086b0:	4770      	bx	lr
 80086b2:	f803 1b01 	strb.w	r1, [r3], #1
 80086b6:	e7f9      	b.n	80086ac <memset+0x4>

080086b8 <__libc_init_array>:
 80086b8:	b570      	push	{r4, r5, r6, lr}
 80086ba:	4d0d      	ldr	r5, [pc, #52]	; (80086f0 <__libc_init_array+0x38>)
 80086bc:	4c0d      	ldr	r4, [pc, #52]	; (80086f4 <__libc_init_array+0x3c>)
 80086be:	1b64      	subs	r4, r4, r5
 80086c0:	10a4      	asrs	r4, r4, #2
 80086c2:	2600      	movs	r6, #0
 80086c4:	42a6      	cmp	r6, r4
 80086c6:	d109      	bne.n	80086dc <__libc_init_array+0x24>
 80086c8:	4d0b      	ldr	r5, [pc, #44]	; (80086f8 <__libc_init_array+0x40>)
 80086ca:	4c0c      	ldr	r4, [pc, #48]	; (80086fc <__libc_init_array+0x44>)
 80086cc:	f000 f818 	bl	8008700 <_init>
 80086d0:	1b64      	subs	r4, r4, r5
 80086d2:	10a4      	asrs	r4, r4, #2
 80086d4:	2600      	movs	r6, #0
 80086d6:	42a6      	cmp	r6, r4
 80086d8:	d105      	bne.n	80086e6 <__libc_init_array+0x2e>
 80086da:	bd70      	pop	{r4, r5, r6, pc}
 80086dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80086e0:	4798      	blx	r3
 80086e2:	3601      	adds	r6, #1
 80086e4:	e7ee      	b.n	80086c4 <__libc_init_array+0xc>
 80086e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ea:	4798      	blx	r3
 80086ec:	3601      	adds	r6, #1
 80086ee:	e7f2      	b.n	80086d6 <__libc_init_array+0x1e>
 80086f0:	08008760 	.word	0x08008760
 80086f4:	08008760 	.word	0x08008760
 80086f8:	08008760 	.word	0x08008760
 80086fc:	08008764 	.word	0x08008764

08008700 <_init>:
 8008700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008702:	bf00      	nop
 8008704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008706:	bc08      	pop	{r3}
 8008708:	469e      	mov	lr, r3
 800870a:	4770      	bx	lr

0800870c <_fini>:
 800870c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870e:	bf00      	nop
 8008710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008712:	bc08      	pop	{r3}
 8008714:	469e      	mov	lr, r3
 8008716:	4770      	bx	lr
