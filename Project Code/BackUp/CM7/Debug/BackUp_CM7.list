
BackUp_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086c8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008960  08008960  00018960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089a0  080089a0  000868b0  2**0
                  CONTENTS
  4 .ARM          00000008  080089a0  080089a0  000189a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089a8  080089a8  000868b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089a8  080089a8  000189a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089ac  080089ac  000189ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000668b0  24000000  080089b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  240668b0  0806f260  000868b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24066a2c  0806f260  00086a2c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000868b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000868de  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016597  00000000  00000000  00086921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028dd  00000000  00000000  0009ceb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  0009f798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dcc  00000000  00000000  000a0930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003a095  00000000  00000000  000a16fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e63  00000000  00000000  000db791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00184080  00000000  00000000  000f45f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ae8  00000000  00000000  00278674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0027d15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240668b0 	.word	0x240668b0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008948 	.word	0x08008948

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240668b4 	.word	0x240668b4
 80002d4:	08008948 	.word	0x08008948

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b3b      	ldr	r3, [pc, #236]	; (80007fc <main+0xfc>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 fabb 	bl	8000ca4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fc07 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f875 	bl	8000820 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000736:	4b31      	ldr	r3, [pc, #196]	; (80007fc <main+0xfc>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a2f      	ldr	r2, [pc, #188]	; (80007fc <main+0xfc>)
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <main+0xfc>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000754:	2000      	movs	r0, #0
 8000756:	f003 f8dd 	bl	8003914 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f003 f8f3 	bl	8003948 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000766:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b24      	ldr	r3, [pc, #144]	; (80007fc <main+0xfc>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x80>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x6a>
if ( timeout < 0 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x8a>
{
Error_Handler();
 8000786:	f000 fa8d 	bl	8000ca4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 f9a7 	bl	8000adc <MX_GPIO_Init>
  MX_DMA_Init();
 800078e:	f000 f985 	bl	8000a9c <MX_DMA_Init>
  MX_TIM3_Init();
 8000792:	f000 f8c3 	bl	800091c <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000796:	f000 f935 	bl	8000a04 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  hdma_tim3_ch1.XferCpltCallback = end_of_scanline;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <main+0x100>)
 800079c:	4a19      	ldr	r2, [pc, #100]	; (8000804 <main+0x104>)
 800079e:	63da      	str	r2, [r3, #60]	; 0x3c

  TIM3->DIER |= 1 << 14;
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <main+0x108>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	4a18      	ldr	r2, [pc, #96]	; (8000808 <main+0x108>)
 80007a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007aa:	60d3      	str	r3, [r2, #12]
  TIM3->DIER |= 1 << 9;
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <main+0x108>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	4a15      	ldr	r2, [pc, #84]	; (8000808 <main+0x108>)
 80007b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007b6:	60d3      	str	r3, [r2, #12]

  HAL_TIM_Base_Start(&htim3);
 80007b8:	4814      	ldr	r0, [pc, #80]	; (800080c <main+0x10c>)
 80007ba:	f005 ff9d 	bl	80066f8 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 80007be:	2100      	movs	r1, #0
 80007c0:	4812      	ldr	r0, [pc, #72]	; (800080c <main+0x10c>)
 80007c2:	f006 f86b 	bl	800689c <HAL_TIM_OC_Start>
  HAL_DMAEx_MultiBufferStart_IT(&hdma_tim3_ch1, (uint32_t)frame, (uint32_t)&GPIOB->ODR, (uint32_t)(frame + 400), 400);
 80007c6:	4912      	ldr	r1, [pc, #72]	; (8000810 <main+0x110>)
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <main+0x114>)
 80007ca:	461a      	mov	r2, r3
 80007cc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	4613      	mov	r3, r2
 80007d4:	4a10      	ldr	r2, [pc, #64]	; (8000818 <main+0x118>)
 80007d6:	480a      	ldr	r0, [pc, #40]	; (8000800 <main+0x100>)
 80007d8:	f002 fa22 	bl	8002c20 <HAL_DMAEx_MultiBufferStart_IT>
  line = line + 2;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <main+0x11c>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	3302      	adds	r3, #2
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <main+0x11c>)
 80007e8:	801a      	strh	r2, [r3, #0]
  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC1);
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <main+0x10c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	68da      	ldr	r2, [r3, #12]
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <main+0x10c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <main+0xfa>
 80007fc:	58024400 	.word	0x58024400
 8000800:	24066918 	.word	0x24066918
 8000804:	08000bb1 	.word	0x08000bb1
 8000808:	40000400 	.word	0x40000400
 800080c:	240668cc 	.word	0x240668cc
 8000810:	24000008 	.word	0x24000008
 8000814:	24000328 	.word	0x24000328
 8000818:	58020414 	.word	0x58020414
 800081c:	24066a24 	.word	0x24066a24

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b09c      	sub	sp, #112	; 0x70
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082a:	224c      	movs	r2, #76	; 0x4c
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f008 f85e 	bl	80088f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2220      	movs	r2, #32
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f008 f858 	bl	80088f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000840:	2004      	movs	r0, #4
 8000842:	f003 f895 	bl	8003970 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b32      	ldr	r3, [pc, #200]	; (8000914 <SystemClock_Config+0xf4>)
 800084c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084e:	4a31      	ldr	r2, [pc, #196]	; (8000914 <SystemClock_Config+0xf4>)
 8000850:	f023 0301 	bic.w	r3, r3, #1
 8000854:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000856:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <SystemClock_Config+0xf4>)
 8000858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <SystemClock_Config+0xf8>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000868:	4a2b      	ldr	r2, [pc, #172]	; (8000918 <SystemClock_Config+0xf8>)
 800086a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b29      	ldr	r3, [pc, #164]	; (8000918 <SystemClock_Config+0xf8>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800087c:	bf00      	nop
 800087e:	4b26      	ldr	r3, [pc, #152]	; (8000918 <SystemClock_Config+0xf8>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800088a:	d1f8      	bne.n	800087e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800088c:	2301      	movs	r3, #1
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000890:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089a:	2302      	movs	r3, #2
 800089c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800089e:	2301      	movs	r3, #1
 80008a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 39;
 80008a2:	2327      	movs	r3, #39	; 0x27
 80008a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008b2:	230c      	movs	r3, #12
 80008b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80008ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c4:	4618      	mov	r0, r3
 80008c6:	f003 f8ad 	bl	8003a24 <HAL_RCC_OscConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008d0:	f000 f9e8 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d4:	233f      	movs	r3, #63	; 0x3f
 80008d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d8:	2303      	movs	r3, #3
 80008da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008e4:	2340      	movs	r3, #64	; 0x40
 80008e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008e8:	2340      	movs	r3, #64	; 0x40
 80008ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008f2:	2340      	movs	r3, #64	; 0x40
 80008f4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2103      	movs	r1, #3
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 fcec 	bl	80042d8 <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000906:	f000 f9cd 	bl	8000ca4 <Error_Handler>
  }
}
 800090a:	bf00      	nop
 800090c:	3770      	adds	r7, #112	; 0x70
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	58000400 	.word	0x58000400
 8000918:	58024800 	.word	0x58024800

0800091c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08e      	sub	sp, #56	; 0x38
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800093c:	463b      	mov	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]
 800094a:	615a      	str	r2, [r3, #20]
 800094c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <MX_TIM3_Init+0xe0>)
 8000950:	4a2b      	ldr	r2, [pc, #172]	; (8000a00 <MX_TIM3_Init+0xe4>)
 8000952:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000954:	4b29      	ldr	r3, [pc, #164]	; (80009fc <MX_TIM3_Init+0xe0>)
 8000956:	2200      	movs	r2, #0
 8000958:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <MX_TIM3_Init+0xe0>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 12;
 8000960:	4b26      	ldr	r3, [pc, #152]	; (80009fc <MX_TIM3_Init+0xe0>)
 8000962:	220c      	movs	r2, #12
 8000964:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000966:	4b25      	ldr	r3, [pc, #148]	; (80009fc <MX_TIM3_Init+0xe0>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_TIM3_Init+0xe0>)
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000972:	4822      	ldr	r0, [pc, #136]	; (80009fc <MX_TIM3_Init+0xe0>)
 8000974:	f005 fe68 	bl	8006648 <HAL_TIM_Base_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800097e:	f000 f991 	bl	8000ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000988:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800098c:	4619      	mov	r1, r3
 800098e:	481b      	ldr	r0, [pc, #108]	; (80009fc <MX_TIM3_Init+0xe0>)
 8000990:	f006 f90c 	bl	8006bac <HAL_TIM_ConfigClockSource>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800099a:	f000 f983 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800099e:	4817      	ldr	r0, [pc, #92]	; (80009fc <MX_TIM3_Init+0xe0>)
 80009a0:	f005 ff1a 	bl	80067d8 <HAL_TIM_OC_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80009aa:	f000 f97b 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	480f      	ldr	r0, [pc, #60]	; (80009fc <MX_TIM3_Init+0xe0>)
 80009be:	f006 fe2d 	bl	800761c <HAL_TIMEx_MasterConfigSynchronization>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80009c8:	f000 f96c 	bl	8000ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80009cc:	2300      	movs	r3, #0
 80009ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009dc:	463b      	mov	r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	4619      	mov	r1, r3
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <MX_TIM3_Init+0xe0>)
 80009e4:	f006 f868 	bl	8006ab8 <HAL_TIM_OC_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80009ee:	f000 f959 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	3738      	adds	r7, #56	; 0x38
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	240668cc 	.word	0x240668cc
 8000a00:	40000400 	.word	0x40000400

08000a04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a0a:	4a23      	ldr	r2, [pc, #140]	; (8000a98 <MX_USART3_UART_Init+0x94>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a4c:	4811      	ldr	r0, [pc, #68]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a4e:	f006 fe73 	bl	8007738 <HAL_UART_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a58:	f000 f924 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	480d      	ldr	r0, [pc, #52]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a60:	f007 fe7b 	bl	800875a <HAL_UARTEx_SetTxFifoThreshold>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a6a:	f000 f91b 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4808      	ldr	r0, [pc, #32]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a72:	f007 feb0 	bl	80087d6 <HAL_UARTEx_SetRxFifoThreshold>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a7c:	f000 f912 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a82:	f007 fe31 	bl	80086e8 <HAL_UARTEx_DisableFifoMode>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a8c:	f000 f90a 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	24066990 	.word	0x24066990
 8000a98:	40004800 	.word	0x40004800

08000a9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <MX_DMA_Init+0x3c>)
 8000aa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aa8:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <MX_DMA_Init+0x3c>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_DMA_Init+0x3c>)
 8000ab4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	200b      	movs	r0, #11
 8000ac6:	f000 fbb4 	bl	8001232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000aca:	200b      	movs	r0, #11
 8000acc:	f000 fbcb 	bl	8001266 <HAL_NVIC_EnableIRQ>

}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	58024400 	.word	0x58024400

08000adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af2:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <MX_GPIO_Init+0xcc>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af8:	4a2b      	ldr	r2, [pc, #172]	; (8000ba8 <MX_GPIO_Init+0xcc>)
 8000afa:	f043 0304 	orr.w	r3, r3, #4
 8000afe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b02:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <MX_GPIO_Init+0xcc>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b10:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <MX_GPIO_Init+0xcc>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b16:	4a24      	ldr	r2, [pc, #144]	; (8000ba8 <MX_GPIO_Init+0xcc>)
 8000b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b20:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <MX_GPIO_Init+0xcc>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <MX_GPIO_Init+0xcc>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b34:	4a1c      	ldr	r2, [pc, #112]	; (8000ba8 <MX_GPIO_Init+0xcc>)
 8000b36:	f043 0302 	orr.w	r3, r3, #2
 8000b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_GPIO_Init+0xcc>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b44:	f003 0302 	and.w	r3, r3, #2
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_GPIO_Init+0xcc>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b52:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <MX_GPIO_Init+0xcc>)
 8000b54:	f043 0308 	orr.w	r3, r3, #8
 8000b58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_GPIO_Init+0xcc>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2103      	movs	r1, #3
 8000b6e:	480f      	ldr	r0, [pc, #60]	; (8000bac <MX_GPIO_Init+0xd0>)
 8000b70:	f002 feb6 	bl	80038e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000b74:	2200      	movs	r2, #0
 8000b76:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8000b7a:	480c      	ldr	r0, [pc, #48]	; (8000bac <MX_GPIO_Init+0xd0>)
 8000b7c:	f002 feb0 	bl	80038e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000b80:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000b84:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <MX_GPIO_Init+0xd0>)
 8000b9a:	f002 fcf1 	bl	8003580 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	58024400 	.word	0x58024400
 8000bac:	58020400 	.word	0x58020400

08000bb0 <end_of_scanline>:

/* USER CODE BEGIN 4 */
void end_of_scanline(){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0

	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000bb4:	4b30      	ldr	r3, [pc, #192]	; (8000c78 <end_of_scanline+0xc8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b30      	ldr	r3, [pc, #192]	; (8000c7c <end_of_scanline+0xcc>)
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d903      	bls.n	8000bc8 <end_of_scanline+0x18>
 8000bc0:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <end_of_scanline+0xd0>)
 8000bc2:	2220      	movs	r2, #32
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	e020      	b.n	8000c0a <end_of_scanline+0x5a>
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <end_of_scanline+0xc8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <end_of_scanline+0xd4>)
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d903      	bls.n	8000bdc <end_of_scanline+0x2c>
 8000bd4:	4a2c      	ldr	r2, [pc, #176]	; (8000c88 <end_of_scanline+0xd8>)
 8000bd6:	2320      	movs	r3, #32
 8000bd8:	60d3      	str	r3, [r2, #12]
 8000bda:	e016      	b.n	8000c0a <end_of_scanline+0x5a>
 8000bdc:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <end_of_scanline+0xc8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <end_of_scanline+0xdc>)
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d903      	bls.n	8000bf0 <end_of_scanline+0x40>
 8000be8:	4a27      	ldr	r2, [pc, #156]	; (8000c88 <end_of_scanline+0xd8>)
 8000bea:	2320      	movs	r3, #32
 8000bec:	6093      	str	r3, [r2, #8]
 8000bee:	e00c      	b.n	8000c0a <end_of_scanline+0x5a>
 8000bf0:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <end_of_scanline+0xc8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <end_of_scanline+0xe0>)
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d903      	bls.n	8000c04 <end_of_scanline+0x54>
 8000bfc:	4a25      	ldr	r2, [pc, #148]	; (8000c94 <end_of_scanline+0xe4>)
 8000bfe:	2320      	movs	r3, #32
 8000c00:	60d3      	str	r3, [r2, #12]
 8000c02:	e002      	b.n	8000c0a <end_of_scanline+0x5a>
 8000c04:	4a23      	ldr	r2, [pc, #140]	; (8000c94 <end_of_scanline+0xe4>)
 8000c06:	2320      	movs	r3, #32
 8000c08:	6093      	str	r3, [r2, #8]

	line++;
 8000c0a:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <end_of_scanline+0xe8>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	3301      	adds	r3, #1
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <end_of_scanline+0xe8>)
 8000c16:	801a      	strh	r2, [r3, #0]

	if(line >= 525){
 8000c18:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <end_of_scanline+0xe8>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000c22:	d902      	bls.n	8000c2a <end_of_scanline+0x7a>
		line = 0;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <end_of_scanline+0xe8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	801a      	strh	r2, [r3, #0]
	}

	if((DMA1_Stream0->CR) & (1<<19)){
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <end_of_scanline+0xec>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d00f      	beq.n	8000c56 <end_of_scanline+0xa6>
		HAL_DMAEx_ChangeMemory(&hdma_tim3_ch1, (uint32_t)(frame + (line * 400)), MEMORY0);
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <end_of_scanline+0xe8>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000c42:	fb02 f303 	mul.w	r3, r2, r3
 8000c46:	4a16      	ldr	r2, [pc, #88]	; (8000ca0 <end_of_scanline+0xf0>)
 8000c48:	4413      	add	r3, r2
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480a      	ldr	r0, [pc, #40]	; (8000c78 <end_of_scanline+0xc8>)
 8000c50:	f002 fb44 	bl	80032dc <HAL_DMAEx_ChangeMemory>
		HAL_DMAEx_ChangeMemory(&hdma_tim3_ch1, (uint32_t)(frame + (line * 400)), MEMORY1);
	}



}
 8000c54:	e00e      	b.n	8000c74 <end_of_scanline+0xc4>
		HAL_DMAEx_ChangeMemory(&hdma_tim3_ch1, (uint32_t)(frame + (line * 400)), MEMORY1);
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <end_of_scanline+0xe8>)
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000c62:	fb02 f303 	mul.w	r3, r2, r3
 8000c66:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <end_of_scanline+0xf0>)
 8000c68:	4413      	add	r3, r2
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4802      	ldr	r0, [pc, #8]	; (8000c78 <end_of_scanline+0xc8>)
 8000c70:	f002 fb34 	bl	80032dc <HAL_DMAEx_ChangeMemory>
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	24066918 	.word	0x24066918
 8000c7c:	400204b8 	.word	0x400204b8
 8000c80:	58025400 	.word	0x58025400
 8000c84:	40020458 	.word	0x40020458
 8000c88:	40020400 	.word	0x40020400
 8000c8c:	400200b8 	.word	0x400200b8
 8000c90:	40020058 	.word	0x40020058
 8000c94:	40020000 	.word	0x40020000
 8000c98:	24066a24 	.word	0x24066a24
 8000c9c:	40020010 	.word	0x40020010
 8000ca0:	24000008 	.word	0x24000008

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	e7fe      	b.n	8000cac <Error_Handler+0x8>
	...

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_MspInit+0x30>)
 8000cb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cbc:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x30>)
 8000cbe:	f043 0302 	orr.w	r3, r3, #2
 8000cc2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x30>)
 8000cc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	58024400 	.word	0x58024400

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a23      	ldr	r2, [pc, #140]	; (8000d80 <HAL_TIM_Base_MspInit+0x9c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d13f      	bne.n	8000d76 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cf6:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <HAL_TIM_Base_MspInit+0xa0>)
 8000cf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cfc:	4a21      	ldr	r2, [pc, #132]	; (8000d84 <HAL_TIM_Base_MspInit+0xa0>)
 8000cfe:	f043 0302 	orr.w	r3, r3, #2
 8000d02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <HAL_TIM_Base_MspInit+0xa0>)
 8000d08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Stream0;
 8000d14:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <HAL_TIM_Base_MspInit+0xa4>)
 8000d16:	4a1d      	ldr	r2, [pc, #116]	; (8000d8c <HAL_TIM_Base_MspInit+0xa8>)
 8000d18:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <HAL_TIM_Base_MspInit+0xa4>)
 8000d1c:	2217      	movs	r2, #23
 8000d1e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <HAL_TIM_Base_MspInit+0xa4>)
 8000d22:	2240      	movs	r2, #64	; 0x40
 8000d24:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <HAL_TIM_Base_MspInit+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <HAL_TIM_Base_MspInit+0xa4>)
 8000d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d32:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <HAL_TIM_Base_MspInit+0xa4>)
 8000d36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d3a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_TIM_Base_MspInit+0xa4>)
 8000d3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d42:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_CIRCULAR;
 8000d44:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <HAL_TIM_Base_MspInit+0xa4>)
 8000d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d4a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_TIM_Base_MspInit+0xa4>)
 8000d4e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d52:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_TIM_Base_MspInit+0xa4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8000d5a:	480b      	ldr	r0, [pc, #44]	; (8000d88 <HAL_TIM_Base_MspInit+0xa4>)
 8000d5c:	f000 fa9e 	bl	800129c <HAL_DMA_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8000d66:	f7ff ff9d 	bl	8000ca4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <HAL_TIM_Base_MspInit+0xa4>)
 8000d6e:	625a      	str	r2, [r3, #36]	; 0x24
 8000d70:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <HAL_TIM_Base_MspInit+0xa4>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40000400 	.word	0x40000400
 8000d84:	58024400 	.word	0x58024400
 8000d88:	24066918 	.word	0x24066918
 8000d8c:	40020010 	.word	0x40020010

08000d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b0ba      	sub	sp, #232	; 0xe8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	22c0      	movs	r2, #192	; 0xc0
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f007 fd9d 	bl	80088f0 <memset>
  if(huart->Instance==USART3)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a2f      	ldr	r2, [pc, #188]	; (8000e78 <HAL_UART_MspInit+0xe8>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d157      	bne.n	8000e70 <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dc0:	f04f 0202 	mov.w	r2, #2
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000dd0:	2312      	movs	r3, #18
 8000dd2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 3;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000de0:	23c0      	movs	r3, #192	; 0xc0
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000de4:	2320      	movs	r3, #32
 8000de6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000de8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f003 fdf9 	bl	80049f0 <HAL_RCCEx_PeriphCLKConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_UART_MspInit+0x78>
    {
      Error_Handler();
 8000e04:	f7ff ff4e 	bl	8000ca4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e08:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <HAL_UART_MspInit+0xec>)
 8000e0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e0e:	4a1b      	ldr	r2, [pc, #108]	; (8000e7c <HAL_UART_MspInit+0xec>)
 8000e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <HAL_UART_MspInit+0xec>)
 8000e1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_UART_MspInit+0xec>)
 8000e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2c:	4a13      	ldr	r2, [pc, #76]	; (8000e7c <HAL_UART_MspInit+0xec>)
 8000e2e:	f043 0308 	orr.w	r3, r3, #8
 8000e32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_UART_MspInit+0xec>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3c:	f003 0308 	and.w	r3, r3, #8
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e5e:	2307      	movs	r3, #7
 8000e60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <HAL_UART_MspInit+0xf0>)
 8000e6c:	f002 fb88 	bl	8003580 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e70:	bf00      	nop
 8000e72:	37e8      	adds	r7, #232	; 0xe8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40004800 	.word	0x40004800
 8000e7c:	58024400 	.word	0x58024400
 8000e80:	58020c00 	.word	0x58020c00

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <NMI_Handler+0x4>

08000e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler+0x4>

08000e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed0:	f000 f8a8 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <DMA1_Stream0_IRQHandler+0x10>)
 8000ede:	f000 fd39 	bl	8001954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	24066918 	.word	0x24066918

08000eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ef0:	f7ff fb70 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ef6:	490d      	ldr	r1, [pc, #52]	; (8000f2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f0c:	4c0a      	ldr	r4, [pc, #40]	; (8000f38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f1a:	f007 fcf1 	bl	8008900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1e:	f7ff fbef 	bl	8000700 <main>
  bx  lr
 8000f22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f24:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f28:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f2c:	240668b0 	.word	0x240668b0
  ldr r2, =_sidata
 8000f30:	080089b0 	.word	0x080089b0
  ldr r2, =_sbss
 8000f34:	240668b0 	.word	0x240668b0
  ldr r4, =_ebss
 8000f38:	24066a2c 	.word	0x24066a2c

08000f3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC3_IRQHandler>
	...

08000f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f46:	2003      	movs	r0, #3
 8000f48:	f000 f968 	bl	800121c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f4c:	f003 fb7a 	bl	8004644 <HAL_RCC_GetSysClockFreq>
 8000f50:	4602      	mov	r2, r0
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_Init+0x68>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	0a1b      	lsrs	r3, r3, #8
 8000f58:	f003 030f 	and.w	r3, r3, #15
 8000f5c:	4913      	ldr	r1, [pc, #76]	; (8000fac <HAL_Init+0x6c>)
 8000f5e:	5ccb      	ldrb	r3, [r1, r3]
 8000f60:	f003 031f 	and.w	r3, r3, #31
 8000f64:	fa22 f303 	lsr.w	r3, r2, r3
 8000f68:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_Init+0x68>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <HAL_Init+0x6c>)
 8000f74:	5cd3      	ldrb	r3, [r2, r3]
 8000f76:	f003 031f 	and.w	r3, r3, #31
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f80:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <HAL_Init+0x70>)
 8000f82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f84:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <HAL_Init+0x74>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f000 f814 	bl	8000fb8 <HAL_InitTick>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e002      	b.n	8000fa0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9a:	f7ff fe89 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	58024400 	.word	0x58024400
 8000fac:	08008960 	.word	0x08008960
 8000fb0:	24000004 	.word	0x24000004
 8000fb4:	24000000 	.word	0x24000000

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_InitTick+0x60>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d101      	bne.n	8000fcc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e021      	b.n	8001010 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <HAL_InitTick+0x64>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_InitTick+0x60>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f94d 	bl	8001282 <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f000 f917 	bl	8001232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_InitTick+0x68>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	240668ac 	.word	0x240668ac
 800101c:	24000000 	.word	0x24000000
 8001020:	240668a8 	.word	0x240668a8

08001024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x20>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x24>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_IncTick+0x24>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	240668ac 	.word	0x240668ac
 8001048:	24066a28 	.word	0x24066a28

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	24066a28 	.word	0x24066a28

08001064 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetREVID+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	0c1b      	lsrs	r3, r3, #16
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	5c001000 	.word	0x5c001000

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <__NVIC_SetPriorityGrouping+0x40>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <__NVIC_SetPriorityGrouping+0x40>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00
 80010c0:	05fa0000 	.word	0x05fa0000

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db0b      	blt.n	800110a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	f003 021f 	and.w	r2, r3, #31
 80010f8:	4907      	ldr	r1, [pc, #28]	; (8001118 <__NVIC_EnableIRQ+0x38>)
 80010fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	2001      	movs	r0, #1
 8001102:	fa00 f202 	lsl.w	r2, r0, r2
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000e100 	.word	0xe000e100

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	; (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	; (800116c <__NVIC_SetPriority+0x50>)
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
         );
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	; 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e8:	d301      	bcc.n	80011ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00f      	b.n	800120e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <SysTick_Config+0x40>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f6:	210f      	movs	r1, #15
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f7ff ff8e 	bl	800111c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <SysTick_Config+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SysTick_Config+0x40>)
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010

0800121c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff29 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001240:	f7ff ff40 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 8001244:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	6978      	ldr	r0, [r7, #20]
 800124c:	f7ff ff90 	bl	8001170 <NVIC_EncodePriority>
 8001250:	4602      	mov	r2, r0
 8001252:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff5f 	bl	800111c <__NVIC_SetPriority>
}
 800125e:	bf00      	nop
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001270:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff33 	bl	80010e0 <__NVIC_EnableIRQ>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffa4 	bl	80011d8 <SysTick_Config>
 8001290:	4603      	mov	r3, r0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80012a4:	f7ff fed2 	bl	800104c <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e316      	b.n	80018e2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a66      	ldr	r2, [pc, #408]	; (8001454 <HAL_DMA_Init+0x1b8>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d04a      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a65      	ldr	r2, [pc, #404]	; (8001458 <HAL_DMA_Init+0x1bc>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d045      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a63      	ldr	r2, [pc, #396]	; (800145c <HAL_DMA_Init+0x1c0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d040      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a62      	ldr	r2, [pc, #392]	; (8001460 <HAL_DMA_Init+0x1c4>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d03b      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a60      	ldr	r2, [pc, #384]	; (8001464 <HAL_DMA_Init+0x1c8>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d036      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a5f      	ldr	r2, [pc, #380]	; (8001468 <HAL_DMA_Init+0x1cc>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d031      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a5d      	ldr	r2, [pc, #372]	; (800146c <HAL_DMA_Init+0x1d0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d02c      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a5c      	ldr	r2, [pc, #368]	; (8001470 <HAL_DMA_Init+0x1d4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d027      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a5a      	ldr	r2, [pc, #360]	; (8001474 <HAL_DMA_Init+0x1d8>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d022      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a59      	ldr	r2, [pc, #356]	; (8001478 <HAL_DMA_Init+0x1dc>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d01d      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a57      	ldr	r2, [pc, #348]	; (800147c <HAL_DMA_Init+0x1e0>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d018      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a56      	ldr	r2, [pc, #344]	; (8001480 <HAL_DMA_Init+0x1e4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d013      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a54      	ldr	r2, [pc, #336]	; (8001484 <HAL_DMA_Init+0x1e8>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d00e      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a53      	ldr	r2, [pc, #332]	; (8001488 <HAL_DMA_Init+0x1ec>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d009      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a51      	ldr	r2, [pc, #324]	; (800148c <HAL_DMA_Init+0x1f0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d004      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a50      	ldr	r2, [pc, #320]	; (8001490 <HAL_DMA_Init+0x1f4>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d101      	bne.n	8001358 <HAL_DMA_Init+0xbc>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <HAL_DMA_Init+0xbe>
 8001358:	2300      	movs	r3, #0
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 813b 	beq.w	80015d6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2202      	movs	r2, #2
 8001364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a37      	ldr	r2, [pc, #220]	; (8001454 <HAL_DMA_Init+0x1b8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d04a      	beq.n	8001410 <HAL_DMA_Init+0x174>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a36      	ldr	r2, [pc, #216]	; (8001458 <HAL_DMA_Init+0x1bc>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d045      	beq.n	8001410 <HAL_DMA_Init+0x174>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a34      	ldr	r2, [pc, #208]	; (800145c <HAL_DMA_Init+0x1c0>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d040      	beq.n	8001410 <HAL_DMA_Init+0x174>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a33      	ldr	r2, [pc, #204]	; (8001460 <HAL_DMA_Init+0x1c4>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d03b      	beq.n	8001410 <HAL_DMA_Init+0x174>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a31      	ldr	r2, [pc, #196]	; (8001464 <HAL_DMA_Init+0x1c8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d036      	beq.n	8001410 <HAL_DMA_Init+0x174>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a30      	ldr	r2, [pc, #192]	; (8001468 <HAL_DMA_Init+0x1cc>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d031      	beq.n	8001410 <HAL_DMA_Init+0x174>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a2e      	ldr	r2, [pc, #184]	; (800146c <HAL_DMA_Init+0x1d0>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d02c      	beq.n	8001410 <HAL_DMA_Init+0x174>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a2d      	ldr	r2, [pc, #180]	; (8001470 <HAL_DMA_Init+0x1d4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d027      	beq.n	8001410 <HAL_DMA_Init+0x174>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a2b      	ldr	r2, [pc, #172]	; (8001474 <HAL_DMA_Init+0x1d8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d022      	beq.n	8001410 <HAL_DMA_Init+0x174>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a2a      	ldr	r2, [pc, #168]	; (8001478 <HAL_DMA_Init+0x1dc>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d01d      	beq.n	8001410 <HAL_DMA_Init+0x174>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a28      	ldr	r2, [pc, #160]	; (800147c <HAL_DMA_Init+0x1e0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d018      	beq.n	8001410 <HAL_DMA_Init+0x174>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a27      	ldr	r2, [pc, #156]	; (8001480 <HAL_DMA_Init+0x1e4>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d013      	beq.n	8001410 <HAL_DMA_Init+0x174>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a25      	ldr	r2, [pc, #148]	; (8001484 <HAL_DMA_Init+0x1e8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00e      	beq.n	8001410 <HAL_DMA_Init+0x174>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a24      	ldr	r2, [pc, #144]	; (8001488 <HAL_DMA_Init+0x1ec>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d009      	beq.n	8001410 <HAL_DMA_Init+0x174>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a22      	ldr	r2, [pc, #136]	; (800148c <HAL_DMA_Init+0x1f0>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d004      	beq.n	8001410 <HAL_DMA_Init+0x174>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a21      	ldr	r2, [pc, #132]	; (8001490 <HAL_DMA_Init+0x1f4>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d108      	bne.n	8001422 <HAL_DMA_Init+0x186>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0201 	bic.w	r2, r2, #1
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	e007      	b.n	8001432 <HAL_DMA_Init+0x196>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0201 	bic.w	r2, r2, #1
 8001430:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001432:	e02f      	b.n	8001494 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001434:	f7ff fe0a 	bl	800104c <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b05      	cmp	r3, #5
 8001440:	d928      	bls.n	8001494 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2220      	movs	r2, #32
 8001446:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2203      	movs	r2, #3
 800144c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e246      	b.n	80018e2 <HAL_DMA_Init+0x646>
 8001454:	40020010 	.word	0x40020010
 8001458:	40020028 	.word	0x40020028
 800145c:	40020040 	.word	0x40020040
 8001460:	40020058 	.word	0x40020058
 8001464:	40020070 	.word	0x40020070
 8001468:	40020088 	.word	0x40020088
 800146c:	400200a0 	.word	0x400200a0
 8001470:	400200b8 	.word	0x400200b8
 8001474:	40020410 	.word	0x40020410
 8001478:	40020428 	.word	0x40020428
 800147c:	40020440 	.word	0x40020440
 8001480:	40020458 	.word	0x40020458
 8001484:	40020470 	.word	0x40020470
 8001488:	40020488 	.word	0x40020488
 800148c:	400204a0 	.word	0x400204a0
 8001490:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1c8      	bne.n	8001434 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	4b83      	ldr	r3, [pc, #524]	; (80016bc <HAL_DMA_Init+0x420>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80014ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	4313      	orrs	r3, r2
 80014de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d107      	bne.n	80014f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	4313      	orrs	r3, r2
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80014f8:	4b71      	ldr	r3, [pc, #452]	; (80016c0 <HAL_DMA_Init+0x424>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b71      	ldr	r3, [pc, #452]	; (80016c4 <HAL_DMA_Init+0x428>)
 80014fe:	4013      	ands	r3, r2
 8001500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001504:	d328      	bcc.n	8001558 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b28      	cmp	r3, #40	; 0x28
 800150c:	d903      	bls.n	8001516 <HAL_DMA_Init+0x27a>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b2e      	cmp	r3, #46	; 0x2e
 8001514:	d917      	bls.n	8001546 <HAL_DMA_Init+0x2aa>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b3e      	cmp	r3, #62	; 0x3e
 800151c:	d903      	bls.n	8001526 <HAL_DMA_Init+0x28a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b42      	cmp	r3, #66	; 0x42
 8001524:	d90f      	bls.n	8001546 <HAL_DMA_Init+0x2aa>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b46      	cmp	r3, #70	; 0x46
 800152c:	d903      	bls.n	8001536 <HAL_DMA_Init+0x29a>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b48      	cmp	r3, #72	; 0x48
 8001534:	d907      	bls.n	8001546 <HAL_DMA_Init+0x2aa>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b4e      	cmp	r3, #78	; 0x4e
 800153c:	d905      	bls.n	800154a <HAL_DMA_Init+0x2ae>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b52      	cmp	r3, #82	; 0x52
 8001544:	d801      	bhi.n	800154a <HAL_DMA_Init+0x2ae>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <HAL_DMA_Init+0x2b0>
 800154a:	2300      	movs	r3, #0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001556:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f023 0307 	bic.w	r3, r3, #7
 800156e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	4313      	orrs	r3, r2
 8001578:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	2b04      	cmp	r3, #4
 8001580:	d117      	bne.n	80015b2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	4313      	orrs	r3, r2
 800158a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00e      	beq.n	80015b2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f001 f9b9 	bl	800290c <DMA_CheckFifoParam>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2240      	movs	r2, #64	; 0x40
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e197      	b.n	80018e2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f001 f8f4 	bl	80027a8 <DMA_CalcBaseAndBitshift>
 80015c0:	4603      	mov	r3, r0
 80015c2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c8:	f003 031f 	and.w	r3, r3, #31
 80015cc:	223f      	movs	r2, #63	; 0x3f
 80015ce:	409a      	lsls	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	e0cd      	b.n	8001772 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a3b      	ldr	r2, [pc, #236]	; (80016c8 <HAL_DMA_Init+0x42c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d022      	beq.n	8001626 <HAL_DMA_Init+0x38a>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a39      	ldr	r2, [pc, #228]	; (80016cc <HAL_DMA_Init+0x430>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d01d      	beq.n	8001626 <HAL_DMA_Init+0x38a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a38      	ldr	r2, [pc, #224]	; (80016d0 <HAL_DMA_Init+0x434>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d018      	beq.n	8001626 <HAL_DMA_Init+0x38a>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a36      	ldr	r2, [pc, #216]	; (80016d4 <HAL_DMA_Init+0x438>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d013      	beq.n	8001626 <HAL_DMA_Init+0x38a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a35      	ldr	r2, [pc, #212]	; (80016d8 <HAL_DMA_Init+0x43c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d00e      	beq.n	8001626 <HAL_DMA_Init+0x38a>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a33      	ldr	r2, [pc, #204]	; (80016dc <HAL_DMA_Init+0x440>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d009      	beq.n	8001626 <HAL_DMA_Init+0x38a>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a32      	ldr	r2, [pc, #200]	; (80016e0 <HAL_DMA_Init+0x444>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d004      	beq.n	8001626 <HAL_DMA_Init+0x38a>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a30      	ldr	r2, [pc, #192]	; (80016e4 <HAL_DMA_Init+0x448>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d101      	bne.n	800162a <HAL_DMA_Init+0x38e>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <HAL_DMA_Init+0x390>
 800162a:	2300      	movs	r3, #0
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 8097 	beq.w	8001760 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a24      	ldr	r2, [pc, #144]	; (80016c8 <HAL_DMA_Init+0x42c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d021      	beq.n	8001680 <HAL_DMA_Init+0x3e4>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a22      	ldr	r2, [pc, #136]	; (80016cc <HAL_DMA_Init+0x430>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d01c      	beq.n	8001680 <HAL_DMA_Init+0x3e4>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a21      	ldr	r2, [pc, #132]	; (80016d0 <HAL_DMA_Init+0x434>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d017      	beq.n	8001680 <HAL_DMA_Init+0x3e4>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <HAL_DMA_Init+0x438>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d012      	beq.n	8001680 <HAL_DMA_Init+0x3e4>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a1e      	ldr	r2, [pc, #120]	; (80016d8 <HAL_DMA_Init+0x43c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d00d      	beq.n	8001680 <HAL_DMA_Init+0x3e4>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a1c      	ldr	r2, [pc, #112]	; (80016dc <HAL_DMA_Init+0x440>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d008      	beq.n	8001680 <HAL_DMA_Init+0x3e4>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <HAL_DMA_Init+0x444>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d003      	beq.n	8001680 <HAL_DMA_Init+0x3e4>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <HAL_DMA_Init+0x448>)
 800167e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2202      	movs	r2, #2
 8001684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <HAL_DMA_Init+0x44c>)
 800169c:	4013      	ands	r3, r2
 800169e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b40      	cmp	r3, #64	; 0x40
 80016a6:	d021      	beq.n	80016ec <HAL_DMA_Init+0x450>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b80      	cmp	r3, #128	; 0x80
 80016ae:	d102      	bne.n	80016b6 <HAL_DMA_Init+0x41a>
 80016b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016b4:	e01b      	b.n	80016ee <HAL_DMA_Init+0x452>
 80016b6:	2300      	movs	r3, #0
 80016b8:	e019      	b.n	80016ee <HAL_DMA_Init+0x452>
 80016ba:	bf00      	nop
 80016bc:	fe10803f 	.word	0xfe10803f
 80016c0:	5c001000 	.word	0x5c001000
 80016c4:	ffff0000 	.word	0xffff0000
 80016c8:	58025408 	.word	0x58025408
 80016cc:	5802541c 	.word	0x5802541c
 80016d0:	58025430 	.word	0x58025430
 80016d4:	58025444 	.word	0x58025444
 80016d8:	58025458 	.word	0x58025458
 80016dc:	5802546c 	.word	0x5802546c
 80016e0:	58025480 	.word	0x58025480
 80016e4:	58025494 	.word	0x58025494
 80016e8:	fffe000f 	.word	0xfffe000f
 80016ec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68d2      	ldr	r2, [r2, #12]
 80016f2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80016fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001704:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800170c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001714:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800171c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	4313      	orrs	r3, r2
 8001722:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b6e      	ldr	r3, [pc, #440]	; (80018ec <HAL_DMA_Init+0x650>)
 8001734:	4413      	add	r3, r2
 8001736:	4a6e      	ldr	r2, [pc, #440]	; (80018f0 <HAL_DMA_Init+0x654>)
 8001738:	fba2 2303 	umull	r2, r3, r2, r3
 800173c:	091b      	lsrs	r3, r3, #4
 800173e:	009a      	lsls	r2, r3, #2
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f001 f82f 	bl	80027a8 <DMA_CalcBaseAndBitshift>
 800174a:	4603      	mov	r3, r0
 800174c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001752:	f003 031f 	and.w	r3, r3, #31
 8001756:	2201      	movs	r2, #1
 8001758:	409a      	lsls	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	e008      	b.n	8001772 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2240      	movs	r2, #64	; 0x40
 8001764:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2203      	movs	r2, #3
 800176a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e0b7      	b.n	80018e2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a5f      	ldr	r2, [pc, #380]	; (80018f4 <HAL_DMA_Init+0x658>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d072      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a5d      	ldr	r2, [pc, #372]	; (80018f8 <HAL_DMA_Init+0x65c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d06d      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a5c      	ldr	r2, [pc, #368]	; (80018fc <HAL_DMA_Init+0x660>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d068      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a5a      	ldr	r2, [pc, #360]	; (8001900 <HAL_DMA_Init+0x664>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d063      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a59      	ldr	r2, [pc, #356]	; (8001904 <HAL_DMA_Init+0x668>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d05e      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a57      	ldr	r2, [pc, #348]	; (8001908 <HAL_DMA_Init+0x66c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d059      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a56      	ldr	r2, [pc, #344]	; (800190c <HAL_DMA_Init+0x670>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d054      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a54      	ldr	r2, [pc, #336]	; (8001910 <HAL_DMA_Init+0x674>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d04f      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a53      	ldr	r2, [pc, #332]	; (8001914 <HAL_DMA_Init+0x678>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d04a      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a51      	ldr	r2, [pc, #324]	; (8001918 <HAL_DMA_Init+0x67c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d045      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a50      	ldr	r2, [pc, #320]	; (800191c <HAL_DMA_Init+0x680>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d040      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a4e      	ldr	r2, [pc, #312]	; (8001920 <HAL_DMA_Init+0x684>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d03b      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a4d      	ldr	r2, [pc, #308]	; (8001924 <HAL_DMA_Init+0x688>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d036      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a4b      	ldr	r2, [pc, #300]	; (8001928 <HAL_DMA_Init+0x68c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d031      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a4a      	ldr	r2, [pc, #296]	; (800192c <HAL_DMA_Init+0x690>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d02c      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a48      	ldr	r2, [pc, #288]	; (8001930 <HAL_DMA_Init+0x694>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d027      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a47      	ldr	r2, [pc, #284]	; (8001934 <HAL_DMA_Init+0x698>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d022      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a45      	ldr	r2, [pc, #276]	; (8001938 <HAL_DMA_Init+0x69c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d01d      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a44      	ldr	r2, [pc, #272]	; (800193c <HAL_DMA_Init+0x6a0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d018      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a42      	ldr	r2, [pc, #264]	; (8001940 <HAL_DMA_Init+0x6a4>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d013      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a41      	ldr	r2, [pc, #260]	; (8001944 <HAL_DMA_Init+0x6a8>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d00e      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a3f      	ldr	r2, [pc, #252]	; (8001948 <HAL_DMA_Init+0x6ac>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d009      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a3e      	ldr	r2, [pc, #248]	; (800194c <HAL_DMA_Init+0x6b0>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d004      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a3c      	ldr	r2, [pc, #240]	; (8001950 <HAL_DMA_Init+0x6b4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d101      	bne.n	8001866 <HAL_DMA_Init+0x5ca>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <HAL_DMA_Init+0x5cc>
 8001866:	2300      	movs	r3, #0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d032      	beq.n	80018d2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f001 f8c9 	bl	8002a04 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b80      	cmp	r3, #128	; 0x80
 8001878:	d102      	bne.n	8001880 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001894:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d010      	beq.n	80018c0 <HAL_DMA_Init+0x624>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d80c      	bhi.n	80018c0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f001 f946 	bl	8002b38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	e008      	b.n	80018d2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	a7fdabf8 	.word	0xa7fdabf8
 80018f0:	cccccccd 	.word	0xcccccccd
 80018f4:	40020010 	.word	0x40020010
 80018f8:	40020028 	.word	0x40020028
 80018fc:	40020040 	.word	0x40020040
 8001900:	40020058 	.word	0x40020058
 8001904:	40020070 	.word	0x40020070
 8001908:	40020088 	.word	0x40020088
 800190c:	400200a0 	.word	0x400200a0
 8001910:	400200b8 	.word	0x400200b8
 8001914:	40020410 	.word	0x40020410
 8001918:	40020428 	.word	0x40020428
 800191c:	40020440 	.word	0x40020440
 8001920:	40020458 	.word	0x40020458
 8001924:	40020470 	.word	0x40020470
 8001928:	40020488 	.word	0x40020488
 800192c:	400204a0 	.word	0x400204a0
 8001930:	400204b8 	.word	0x400204b8
 8001934:	58025408 	.word	0x58025408
 8001938:	5802541c 	.word	0x5802541c
 800193c:	58025430 	.word	0x58025430
 8001940:	58025444 	.word	0x58025444
 8001944:	58025458 	.word	0x58025458
 8001948:	5802546c 	.word	0x5802546c
 800194c:	58025480 	.word	0x58025480
 8001950:	58025494 	.word	0x58025494

08001954 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001960:	4b67      	ldr	r3, [pc, #412]	; (8001b00 <HAL_DMA_IRQHandler+0x1ac>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a67      	ldr	r2, [pc, #412]	; (8001b04 <HAL_DMA_IRQHandler+0x1b0>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0a9b      	lsrs	r3, r3, #10
 800196c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001972:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001978:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a5f      	ldr	r2, [pc, #380]	; (8001b08 <HAL_DMA_IRQHandler+0x1b4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d04a      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xd2>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a5d      	ldr	r2, [pc, #372]	; (8001b0c <HAL_DMA_IRQHandler+0x1b8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d045      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xd2>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a5c      	ldr	r2, [pc, #368]	; (8001b10 <HAL_DMA_IRQHandler+0x1bc>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d040      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xd2>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a5a      	ldr	r2, [pc, #360]	; (8001b14 <HAL_DMA_IRQHandler+0x1c0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d03b      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xd2>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a59      	ldr	r2, [pc, #356]	; (8001b18 <HAL_DMA_IRQHandler+0x1c4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d036      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xd2>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a57      	ldr	r2, [pc, #348]	; (8001b1c <HAL_DMA_IRQHandler+0x1c8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d031      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xd2>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a56      	ldr	r2, [pc, #344]	; (8001b20 <HAL_DMA_IRQHandler+0x1cc>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d02c      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xd2>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a54      	ldr	r2, [pc, #336]	; (8001b24 <HAL_DMA_IRQHandler+0x1d0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d027      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xd2>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a53      	ldr	r2, [pc, #332]	; (8001b28 <HAL_DMA_IRQHandler+0x1d4>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d022      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xd2>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a51      	ldr	r2, [pc, #324]	; (8001b2c <HAL_DMA_IRQHandler+0x1d8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d01d      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xd2>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a50      	ldr	r2, [pc, #320]	; (8001b30 <HAL_DMA_IRQHandler+0x1dc>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d018      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xd2>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a4e      	ldr	r2, [pc, #312]	; (8001b34 <HAL_DMA_IRQHandler+0x1e0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d013      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xd2>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a4d      	ldr	r2, [pc, #308]	; (8001b38 <HAL_DMA_IRQHandler+0x1e4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d00e      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xd2>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a4b      	ldr	r2, [pc, #300]	; (8001b3c <HAL_DMA_IRQHandler+0x1e8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d009      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xd2>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a4a      	ldr	r2, [pc, #296]	; (8001b40 <HAL_DMA_IRQHandler+0x1ec>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d004      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xd2>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a48      	ldr	r2, [pc, #288]	; (8001b44 <HAL_DMA_IRQHandler+0x1f0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d101      	bne.n	8001a2a <HAL_DMA_IRQHandler+0xd6>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <HAL_DMA_IRQHandler+0xd8>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 842b 	beq.w	8002288 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	409a      	lsls	r2, r3
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 80a2 	beq.w	8001b8c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a2e      	ldr	r2, [pc, #184]	; (8001b08 <HAL_DMA_IRQHandler+0x1b4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d04a      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x194>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a2d      	ldr	r2, [pc, #180]	; (8001b0c <HAL_DMA_IRQHandler+0x1b8>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d045      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x194>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a2b      	ldr	r2, [pc, #172]	; (8001b10 <HAL_DMA_IRQHandler+0x1bc>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d040      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x194>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a2a      	ldr	r2, [pc, #168]	; (8001b14 <HAL_DMA_IRQHandler+0x1c0>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d03b      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x194>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a28      	ldr	r2, [pc, #160]	; (8001b18 <HAL_DMA_IRQHandler+0x1c4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d036      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x194>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a27      	ldr	r2, [pc, #156]	; (8001b1c <HAL_DMA_IRQHandler+0x1c8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d031      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x194>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a25      	ldr	r2, [pc, #148]	; (8001b20 <HAL_DMA_IRQHandler+0x1cc>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d02c      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x194>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a24      	ldr	r2, [pc, #144]	; (8001b24 <HAL_DMA_IRQHandler+0x1d0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d027      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x194>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a22      	ldr	r2, [pc, #136]	; (8001b28 <HAL_DMA_IRQHandler+0x1d4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d022      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x194>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a21      	ldr	r2, [pc, #132]	; (8001b2c <HAL_DMA_IRQHandler+0x1d8>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d01d      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x194>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <HAL_DMA_IRQHandler+0x1dc>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d018      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x194>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a1e      	ldr	r2, [pc, #120]	; (8001b34 <HAL_DMA_IRQHandler+0x1e0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d013      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x194>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1c      	ldr	r2, [pc, #112]	; (8001b38 <HAL_DMA_IRQHandler+0x1e4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d00e      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x194>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1b      	ldr	r2, [pc, #108]	; (8001b3c <HAL_DMA_IRQHandler+0x1e8>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d009      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x194>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a19      	ldr	r2, [pc, #100]	; (8001b40 <HAL_DMA_IRQHandler+0x1ec>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d004      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x194>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a18      	ldr	r2, [pc, #96]	; (8001b44 <HAL_DMA_IRQHandler+0x1f0>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d12f      	bne.n	8001b48 <HAL_DMA_IRQHandler+0x1f4>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	bf14      	ite	ne
 8001af6:	2301      	movne	r3, #1
 8001af8:	2300      	moveq	r3, #0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	e02e      	b.n	8001b5c <HAL_DMA_IRQHandler+0x208>
 8001afe:	bf00      	nop
 8001b00:	24000000 	.word	0x24000000
 8001b04:	1b4e81b5 	.word	0x1b4e81b5
 8001b08:	40020010 	.word	0x40020010
 8001b0c:	40020028 	.word	0x40020028
 8001b10:	40020040 	.word	0x40020040
 8001b14:	40020058 	.word	0x40020058
 8001b18:	40020070 	.word	0x40020070
 8001b1c:	40020088 	.word	0x40020088
 8001b20:	400200a0 	.word	0x400200a0
 8001b24:	400200b8 	.word	0x400200b8
 8001b28:	40020410 	.word	0x40020410
 8001b2c:	40020428 	.word	0x40020428
 8001b30:	40020440 	.word	0x40020440
 8001b34:	40020458 	.word	0x40020458
 8001b38:	40020470 	.word	0x40020470
 8001b3c:	40020488 	.word	0x40020488
 8001b40:	400204a0 	.word	0x400204a0
 8001b44:	400204b8 	.word	0x400204b8
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	bf14      	ite	ne
 8001b56:	2301      	movne	r3, #1
 8001b58:	2300      	moveq	r3, #0
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d015      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0204 	bic.w	r2, r2, #4
 8001b6e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	2208      	movs	r2, #8
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b84:	f043 0201 	orr.w	r2, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d06e      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a69      	ldr	r2, [pc, #420]	; (8001d4c <HAL_DMA_IRQHandler+0x3f8>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d04a      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x2ee>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a67      	ldr	r2, [pc, #412]	; (8001d50 <HAL_DMA_IRQHandler+0x3fc>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d045      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x2ee>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a66      	ldr	r2, [pc, #408]	; (8001d54 <HAL_DMA_IRQHandler+0x400>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d040      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x2ee>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a64      	ldr	r2, [pc, #400]	; (8001d58 <HAL_DMA_IRQHandler+0x404>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d03b      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x2ee>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a63      	ldr	r2, [pc, #396]	; (8001d5c <HAL_DMA_IRQHandler+0x408>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d036      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x2ee>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a61      	ldr	r2, [pc, #388]	; (8001d60 <HAL_DMA_IRQHandler+0x40c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d031      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x2ee>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a60      	ldr	r2, [pc, #384]	; (8001d64 <HAL_DMA_IRQHandler+0x410>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d02c      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x2ee>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a5e      	ldr	r2, [pc, #376]	; (8001d68 <HAL_DMA_IRQHandler+0x414>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d027      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x2ee>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a5d      	ldr	r2, [pc, #372]	; (8001d6c <HAL_DMA_IRQHandler+0x418>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d022      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x2ee>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a5b      	ldr	r2, [pc, #364]	; (8001d70 <HAL_DMA_IRQHandler+0x41c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01d      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x2ee>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a5a      	ldr	r2, [pc, #360]	; (8001d74 <HAL_DMA_IRQHandler+0x420>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d018      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x2ee>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a58      	ldr	r2, [pc, #352]	; (8001d78 <HAL_DMA_IRQHandler+0x424>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d013      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x2ee>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a57      	ldr	r2, [pc, #348]	; (8001d7c <HAL_DMA_IRQHandler+0x428>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d00e      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x2ee>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a55      	ldr	r2, [pc, #340]	; (8001d80 <HAL_DMA_IRQHandler+0x42c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d009      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x2ee>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a54      	ldr	r2, [pc, #336]	; (8001d84 <HAL_DMA_IRQHandler+0x430>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d004      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x2ee>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a52      	ldr	r2, [pc, #328]	; (8001d88 <HAL_DMA_IRQHandler+0x434>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d10a      	bne.n	8001c58 <HAL_DMA_IRQHandler+0x304>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	bf14      	ite	ne
 8001c50:	2301      	movne	r3, #1
 8001c52:	2300      	moveq	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	e003      	b.n	8001c60 <HAL_DMA_IRQHandler+0x30c>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00d      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c78:	f043 0202 	orr.w	r2, r3, #2
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	2204      	movs	r2, #4
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 808f 	beq.w	8001db4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a2c      	ldr	r2, [pc, #176]	; (8001d4c <HAL_DMA_IRQHandler+0x3f8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d04a      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x3e2>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a2a      	ldr	r2, [pc, #168]	; (8001d50 <HAL_DMA_IRQHandler+0x3fc>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d045      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x3e2>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a29      	ldr	r2, [pc, #164]	; (8001d54 <HAL_DMA_IRQHandler+0x400>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d040      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x3e2>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a27      	ldr	r2, [pc, #156]	; (8001d58 <HAL_DMA_IRQHandler+0x404>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d03b      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x3e2>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a26      	ldr	r2, [pc, #152]	; (8001d5c <HAL_DMA_IRQHandler+0x408>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d036      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x3e2>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a24      	ldr	r2, [pc, #144]	; (8001d60 <HAL_DMA_IRQHandler+0x40c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d031      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x3e2>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a23      	ldr	r2, [pc, #140]	; (8001d64 <HAL_DMA_IRQHandler+0x410>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d02c      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x3e2>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a21      	ldr	r2, [pc, #132]	; (8001d68 <HAL_DMA_IRQHandler+0x414>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d027      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x3e2>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a20      	ldr	r2, [pc, #128]	; (8001d6c <HAL_DMA_IRQHandler+0x418>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d022      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x3e2>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1e      	ldr	r2, [pc, #120]	; (8001d70 <HAL_DMA_IRQHandler+0x41c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d01d      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x3e2>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1d      	ldr	r2, [pc, #116]	; (8001d74 <HAL_DMA_IRQHandler+0x420>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d018      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x3e2>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1b      	ldr	r2, [pc, #108]	; (8001d78 <HAL_DMA_IRQHandler+0x424>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d013      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x3e2>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a1a      	ldr	r2, [pc, #104]	; (8001d7c <HAL_DMA_IRQHandler+0x428>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d00e      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x3e2>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a18      	ldr	r2, [pc, #96]	; (8001d80 <HAL_DMA_IRQHandler+0x42c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d009      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x3e2>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a17      	ldr	r2, [pc, #92]	; (8001d84 <HAL_DMA_IRQHandler+0x430>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d004      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x3e2>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a15      	ldr	r2, [pc, #84]	; (8001d88 <HAL_DMA_IRQHandler+0x434>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d12a      	bne.n	8001d8c <HAL_DMA_IRQHandler+0x438>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	bf14      	ite	ne
 8001d44:	2301      	movne	r3, #1
 8001d46:	2300      	moveq	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	e023      	b.n	8001d94 <HAL_DMA_IRQHandler+0x440>
 8001d4c:	40020010 	.word	0x40020010
 8001d50:	40020028 	.word	0x40020028
 8001d54:	40020040 	.word	0x40020040
 8001d58:	40020058 	.word	0x40020058
 8001d5c:	40020070 	.word	0x40020070
 8001d60:	40020088 	.word	0x40020088
 8001d64:	400200a0 	.word	0x400200a0
 8001d68:	400200b8 	.word	0x400200b8
 8001d6c:	40020410 	.word	0x40020410
 8001d70:	40020428 	.word	0x40020428
 8001d74:	40020440 	.word	0x40020440
 8001d78:	40020458 	.word	0x40020458
 8001d7c:	40020470 	.word	0x40020470
 8001d80:	40020488 	.word	0x40020488
 8001d84:	400204a0 	.word	0x400204a0
 8001d88:	400204b8 	.word	0x400204b8
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2300      	movs	r3, #0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00d      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	2204      	movs	r2, #4
 8001da2:	409a      	lsls	r2, r3
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dac:	f043 0204 	orr.w	r2, r3, #4
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	2210      	movs	r2, #16
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80a6 	beq.w	8001f16 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a85      	ldr	r2, [pc, #532]	; (8001fe4 <HAL_DMA_IRQHandler+0x690>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d04a      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x516>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a83      	ldr	r2, [pc, #524]	; (8001fe8 <HAL_DMA_IRQHandler+0x694>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d045      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x516>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a82      	ldr	r2, [pc, #520]	; (8001fec <HAL_DMA_IRQHandler+0x698>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d040      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x516>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a80      	ldr	r2, [pc, #512]	; (8001ff0 <HAL_DMA_IRQHandler+0x69c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d03b      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x516>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a7f      	ldr	r2, [pc, #508]	; (8001ff4 <HAL_DMA_IRQHandler+0x6a0>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d036      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x516>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a7d      	ldr	r2, [pc, #500]	; (8001ff8 <HAL_DMA_IRQHandler+0x6a4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d031      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x516>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a7c      	ldr	r2, [pc, #496]	; (8001ffc <HAL_DMA_IRQHandler+0x6a8>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d02c      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x516>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a7a      	ldr	r2, [pc, #488]	; (8002000 <HAL_DMA_IRQHandler+0x6ac>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d027      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x516>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a79      	ldr	r2, [pc, #484]	; (8002004 <HAL_DMA_IRQHandler+0x6b0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d022      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x516>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a77      	ldr	r2, [pc, #476]	; (8002008 <HAL_DMA_IRQHandler+0x6b4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d01d      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x516>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a76      	ldr	r2, [pc, #472]	; (800200c <HAL_DMA_IRQHandler+0x6b8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d018      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x516>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a74      	ldr	r2, [pc, #464]	; (8002010 <HAL_DMA_IRQHandler+0x6bc>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x516>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a73      	ldr	r2, [pc, #460]	; (8002014 <HAL_DMA_IRQHandler+0x6c0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d00e      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x516>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a71      	ldr	r2, [pc, #452]	; (8002018 <HAL_DMA_IRQHandler+0x6c4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d009      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x516>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a70      	ldr	r2, [pc, #448]	; (800201c <HAL_DMA_IRQHandler+0x6c8>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d004      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x516>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a6e      	ldr	r2, [pc, #440]	; (8002020 <HAL_DMA_IRQHandler+0x6cc>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d10a      	bne.n	8001e80 <HAL_DMA_IRQHandler+0x52c>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf14      	ite	ne
 8001e78:	2301      	movne	r3, #1
 8001e7a:	2300      	moveq	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	e009      	b.n	8001e94 <HAL_DMA_IRQHandler+0x540>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	bf14      	ite	ne
 8001e8e:	2301      	movne	r3, #1
 8001e90:	2300      	moveq	r3, #0
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d03e      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9c:	f003 031f 	and.w	r3, r3, #31
 8001ea0:	2210      	movs	r2, #16
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d018      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d108      	bne.n	8001ed6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d024      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
 8001ed4:	e01f      	b.n	8001f16 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d01b      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	4798      	blx	r3
 8001ee6:	e016      	b.n	8001f16 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d107      	bne.n	8001f06 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0208 	bic.w	r2, r2, #8
 8001f04:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1a:	f003 031f 	and.w	r3, r3, #31
 8001f1e:	2220      	movs	r2, #32
 8001f20:	409a      	lsls	r2, r3
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 8110 	beq.w	800214c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a2c      	ldr	r2, [pc, #176]	; (8001fe4 <HAL_DMA_IRQHandler+0x690>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d04a      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x678>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a2b      	ldr	r2, [pc, #172]	; (8001fe8 <HAL_DMA_IRQHandler+0x694>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d045      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x678>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a29      	ldr	r2, [pc, #164]	; (8001fec <HAL_DMA_IRQHandler+0x698>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d040      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x678>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a28      	ldr	r2, [pc, #160]	; (8001ff0 <HAL_DMA_IRQHandler+0x69c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d03b      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x678>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a26      	ldr	r2, [pc, #152]	; (8001ff4 <HAL_DMA_IRQHandler+0x6a0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d036      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x678>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a25      	ldr	r2, [pc, #148]	; (8001ff8 <HAL_DMA_IRQHandler+0x6a4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d031      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x678>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a23      	ldr	r2, [pc, #140]	; (8001ffc <HAL_DMA_IRQHandler+0x6a8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d02c      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x678>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a22      	ldr	r2, [pc, #136]	; (8002000 <HAL_DMA_IRQHandler+0x6ac>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d027      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x678>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a20      	ldr	r2, [pc, #128]	; (8002004 <HAL_DMA_IRQHandler+0x6b0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d022      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x678>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a1f      	ldr	r2, [pc, #124]	; (8002008 <HAL_DMA_IRQHandler+0x6b4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d01d      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x678>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a1d      	ldr	r2, [pc, #116]	; (800200c <HAL_DMA_IRQHandler+0x6b8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d018      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x678>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <HAL_DMA_IRQHandler+0x6bc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d013      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x678>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a1a      	ldr	r2, [pc, #104]	; (8002014 <HAL_DMA_IRQHandler+0x6c0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00e      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x678>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a19      	ldr	r2, [pc, #100]	; (8002018 <HAL_DMA_IRQHandler+0x6c4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d009      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x678>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a17      	ldr	r2, [pc, #92]	; (800201c <HAL_DMA_IRQHandler+0x6c8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d004      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x678>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a16      	ldr	r2, [pc, #88]	; (8002020 <HAL_DMA_IRQHandler+0x6cc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d12b      	bne.n	8002024 <HAL_DMA_IRQHandler+0x6d0>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	bf14      	ite	ne
 8001fda:	2301      	movne	r3, #1
 8001fdc:	2300      	moveq	r3, #0
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	e02a      	b.n	8002038 <HAL_DMA_IRQHandler+0x6e4>
 8001fe2:	bf00      	nop
 8001fe4:	40020010 	.word	0x40020010
 8001fe8:	40020028 	.word	0x40020028
 8001fec:	40020040 	.word	0x40020040
 8001ff0:	40020058 	.word	0x40020058
 8001ff4:	40020070 	.word	0x40020070
 8001ff8:	40020088 	.word	0x40020088
 8001ffc:	400200a0 	.word	0x400200a0
 8002000:	400200b8 	.word	0x400200b8
 8002004:	40020410 	.word	0x40020410
 8002008:	40020428 	.word	0x40020428
 800200c:	40020440 	.word	0x40020440
 8002010:	40020458 	.word	0x40020458
 8002014:	40020470 	.word	0x40020470
 8002018:	40020488 	.word	0x40020488
 800201c:	400204a0 	.word	0x400204a0
 8002020:	400204b8 	.word	0x400204b8
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	bf14      	ite	ne
 8002032:	2301      	movne	r3, #1
 8002034:	2300      	moveq	r3, #0
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 8087 	beq.w	800214c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	2220      	movs	r2, #32
 8002048:	409a      	lsls	r2, r3
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b04      	cmp	r3, #4
 8002058:	d139      	bne.n	80020ce <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0216 	bic.w	r2, r2, #22
 8002068:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002078:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d103      	bne.n	800208a <HAL_DMA_IRQHandler+0x736>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002086:	2b00      	cmp	r3, #0
 8002088:	d007      	beq.n	800209a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0208 	bic.w	r2, r2, #8
 8002098:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	223f      	movs	r2, #63	; 0x3f
 80020a4:	409a      	lsls	r2, r3
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 834a 	beq.w	8002758 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4798      	blx	r3
          }
          return;
 80020cc:	e344      	b.n	8002758 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d018      	beq.n	800210e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d108      	bne.n	80020fc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d02c      	beq.n	800214c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	4798      	blx	r3
 80020fa:	e027      	b.n	800214c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002100:	2b00      	cmp	r3, #0
 8002102:	d023      	beq.n	800214c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4798      	blx	r3
 800210c:	e01e      	b.n	800214c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10f      	bne.n	800213c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0210 	bic.w	r2, r2, #16
 800212a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 8306 	beq.w	8002762 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8088 	beq.w	8002274 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2204      	movs	r2, #4
 8002168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a7a      	ldr	r2, [pc, #488]	; (800235c <HAL_DMA_IRQHandler+0xa08>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d04a      	beq.n	800220c <HAL_DMA_IRQHandler+0x8b8>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a79      	ldr	r2, [pc, #484]	; (8002360 <HAL_DMA_IRQHandler+0xa0c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d045      	beq.n	800220c <HAL_DMA_IRQHandler+0x8b8>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a77      	ldr	r2, [pc, #476]	; (8002364 <HAL_DMA_IRQHandler+0xa10>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d040      	beq.n	800220c <HAL_DMA_IRQHandler+0x8b8>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a76      	ldr	r2, [pc, #472]	; (8002368 <HAL_DMA_IRQHandler+0xa14>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d03b      	beq.n	800220c <HAL_DMA_IRQHandler+0x8b8>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a74      	ldr	r2, [pc, #464]	; (800236c <HAL_DMA_IRQHandler+0xa18>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d036      	beq.n	800220c <HAL_DMA_IRQHandler+0x8b8>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a73      	ldr	r2, [pc, #460]	; (8002370 <HAL_DMA_IRQHandler+0xa1c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d031      	beq.n	800220c <HAL_DMA_IRQHandler+0x8b8>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a71      	ldr	r2, [pc, #452]	; (8002374 <HAL_DMA_IRQHandler+0xa20>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d02c      	beq.n	800220c <HAL_DMA_IRQHandler+0x8b8>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a70      	ldr	r2, [pc, #448]	; (8002378 <HAL_DMA_IRQHandler+0xa24>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d027      	beq.n	800220c <HAL_DMA_IRQHandler+0x8b8>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a6e      	ldr	r2, [pc, #440]	; (800237c <HAL_DMA_IRQHandler+0xa28>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d022      	beq.n	800220c <HAL_DMA_IRQHandler+0x8b8>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a6d      	ldr	r2, [pc, #436]	; (8002380 <HAL_DMA_IRQHandler+0xa2c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d01d      	beq.n	800220c <HAL_DMA_IRQHandler+0x8b8>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a6b      	ldr	r2, [pc, #428]	; (8002384 <HAL_DMA_IRQHandler+0xa30>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d018      	beq.n	800220c <HAL_DMA_IRQHandler+0x8b8>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a6a      	ldr	r2, [pc, #424]	; (8002388 <HAL_DMA_IRQHandler+0xa34>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d013      	beq.n	800220c <HAL_DMA_IRQHandler+0x8b8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a68      	ldr	r2, [pc, #416]	; (800238c <HAL_DMA_IRQHandler+0xa38>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00e      	beq.n	800220c <HAL_DMA_IRQHandler+0x8b8>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a67      	ldr	r2, [pc, #412]	; (8002390 <HAL_DMA_IRQHandler+0xa3c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d009      	beq.n	800220c <HAL_DMA_IRQHandler+0x8b8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a65      	ldr	r2, [pc, #404]	; (8002394 <HAL_DMA_IRQHandler+0xa40>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d004      	beq.n	800220c <HAL_DMA_IRQHandler+0x8b8>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a64      	ldr	r2, [pc, #400]	; (8002398 <HAL_DMA_IRQHandler+0xa44>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d108      	bne.n	800221e <HAL_DMA_IRQHandler+0x8ca>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e007      	b.n	800222e <HAL_DMA_IRQHandler+0x8da>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0201 	bic.w	r2, r2, #1
 800222c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3301      	adds	r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002236:	429a      	cmp	r2, r3
 8002238:	d307      	bcc.n	800224a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f2      	bne.n	800222e <HAL_DMA_IRQHandler+0x8da>
 8002248:	e000      	b.n	800224c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800224a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d004      	beq.n	8002264 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2203      	movs	r2, #3
 800225e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002262:	e003      	b.n	800226c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8272 	beq.w	8002762 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
 8002286:	e26c      	b.n	8002762 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a43      	ldr	r2, [pc, #268]	; (800239c <HAL_DMA_IRQHandler+0xa48>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d022      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x984>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a42      	ldr	r2, [pc, #264]	; (80023a0 <HAL_DMA_IRQHandler+0xa4c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d01d      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x984>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a40      	ldr	r2, [pc, #256]	; (80023a4 <HAL_DMA_IRQHandler+0xa50>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d018      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x984>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a3f      	ldr	r2, [pc, #252]	; (80023a8 <HAL_DMA_IRQHandler+0xa54>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d013      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x984>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a3d      	ldr	r2, [pc, #244]	; (80023ac <HAL_DMA_IRQHandler+0xa58>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00e      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x984>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a3c      	ldr	r2, [pc, #240]	; (80023b0 <HAL_DMA_IRQHandler+0xa5c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d009      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x984>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a3a      	ldr	r2, [pc, #232]	; (80023b4 <HAL_DMA_IRQHandler+0xa60>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d004      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x984>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a39      	ldr	r2, [pc, #228]	; (80023b8 <HAL_DMA_IRQHandler+0xa64>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d101      	bne.n	80022dc <HAL_DMA_IRQHandler+0x988>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <HAL_DMA_IRQHandler+0x98a>
 80022dc:	2300      	movs	r3, #0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 823f 	beq.w	8002762 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	2204      	movs	r2, #4
 80022f6:	409a      	lsls	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 80cd 	beq.w	800249c <HAL_DMA_IRQHandler+0xb48>
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80c7 	beq.w	800249c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	2204      	movs	r2, #4
 8002318:	409a      	lsls	r2, r3
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d049      	beq.n	80023bc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d109      	bne.n	8002346 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 8210 	beq.w	800275c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002344:	e20a      	b.n	800275c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 8206 	beq.w	800275c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002358:	e200      	b.n	800275c <HAL_DMA_IRQHandler+0xe08>
 800235a:	bf00      	nop
 800235c:	40020010 	.word	0x40020010
 8002360:	40020028 	.word	0x40020028
 8002364:	40020040 	.word	0x40020040
 8002368:	40020058 	.word	0x40020058
 800236c:	40020070 	.word	0x40020070
 8002370:	40020088 	.word	0x40020088
 8002374:	400200a0 	.word	0x400200a0
 8002378:	400200b8 	.word	0x400200b8
 800237c:	40020410 	.word	0x40020410
 8002380:	40020428 	.word	0x40020428
 8002384:	40020440 	.word	0x40020440
 8002388:	40020458 	.word	0x40020458
 800238c:	40020470 	.word	0x40020470
 8002390:	40020488 	.word	0x40020488
 8002394:	400204a0 	.word	0x400204a0
 8002398:	400204b8 	.word	0x400204b8
 800239c:	58025408 	.word	0x58025408
 80023a0:	5802541c 	.word	0x5802541c
 80023a4:	58025430 	.word	0x58025430
 80023a8:	58025444 	.word	0x58025444
 80023ac:	58025458 	.word	0x58025458
 80023b0:	5802546c 	.word	0x5802546c
 80023b4:	58025480 	.word	0x58025480
 80023b8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d160      	bne.n	8002488 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a7f      	ldr	r2, [pc, #508]	; (80025c8 <HAL_DMA_IRQHandler+0xc74>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d04a      	beq.n	8002466 <HAL_DMA_IRQHandler+0xb12>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a7d      	ldr	r2, [pc, #500]	; (80025cc <HAL_DMA_IRQHandler+0xc78>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d045      	beq.n	8002466 <HAL_DMA_IRQHandler+0xb12>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a7c      	ldr	r2, [pc, #496]	; (80025d0 <HAL_DMA_IRQHandler+0xc7c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d040      	beq.n	8002466 <HAL_DMA_IRQHandler+0xb12>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a7a      	ldr	r2, [pc, #488]	; (80025d4 <HAL_DMA_IRQHandler+0xc80>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d03b      	beq.n	8002466 <HAL_DMA_IRQHandler+0xb12>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a79      	ldr	r2, [pc, #484]	; (80025d8 <HAL_DMA_IRQHandler+0xc84>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d036      	beq.n	8002466 <HAL_DMA_IRQHandler+0xb12>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a77      	ldr	r2, [pc, #476]	; (80025dc <HAL_DMA_IRQHandler+0xc88>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d031      	beq.n	8002466 <HAL_DMA_IRQHandler+0xb12>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a76      	ldr	r2, [pc, #472]	; (80025e0 <HAL_DMA_IRQHandler+0xc8c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d02c      	beq.n	8002466 <HAL_DMA_IRQHandler+0xb12>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a74      	ldr	r2, [pc, #464]	; (80025e4 <HAL_DMA_IRQHandler+0xc90>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d027      	beq.n	8002466 <HAL_DMA_IRQHandler+0xb12>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a73      	ldr	r2, [pc, #460]	; (80025e8 <HAL_DMA_IRQHandler+0xc94>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d022      	beq.n	8002466 <HAL_DMA_IRQHandler+0xb12>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a71      	ldr	r2, [pc, #452]	; (80025ec <HAL_DMA_IRQHandler+0xc98>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d01d      	beq.n	8002466 <HAL_DMA_IRQHandler+0xb12>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a70      	ldr	r2, [pc, #448]	; (80025f0 <HAL_DMA_IRQHandler+0xc9c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d018      	beq.n	8002466 <HAL_DMA_IRQHandler+0xb12>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a6e      	ldr	r2, [pc, #440]	; (80025f4 <HAL_DMA_IRQHandler+0xca0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d013      	beq.n	8002466 <HAL_DMA_IRQHandler+0xb12>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a6d      	ldr	r2, [pc, #436]	; (80025f8 <HAL_DMA_IRQHandler+0xca4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d00e      	beq.n	8002466 <HAL_DMA_IRQHandler+0xb12>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a6b      	ldr	r2, [pc, #428]	; (80025fc <HAL_DMA_IRQHandler+0xca8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d009      	beq.n	8002466 <HAL_DMA_IRQHandler+0xb12>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a6a      	ldr	r2, [pc, #424]	; (8002600 <HAL_DMA_IRQHandler+0xcac>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d004      	beq.n	8002466 <HAL_DMA_IRQHandler+0xb12>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a68      	ldr	r2, [pc, #416]	; (8002604 <HAL_DMA_IRQHandler+0xcb0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d108      	bne.n	8002478 <HAL_DMA_IRQHandler+0xb24>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0208 	bic.w	r2, r2, #8
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	e007      	b.n	8002488 <HAL_DMA_IRQHandler+0xb34>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0204 	bic.w	r2, r2, #4
 8002486:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 8165 	beq.w	800275c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800249a:	e15f      	b.n	800275c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	2202      	movs	r2, #2
 80024a6:	409a      	lsls	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 80c5 	beq.w	800263c <HAL_DMA_IRQHandler+0xce8>
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80bf 	beq.w	800263c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c2:	f003 031f 	and.w	r3, r3, #31
 80024c6:	2202      	movs	r2, #2
 80024c8:	409a      	lsls	r2, r3
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d018      	beq.n	800250a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 813a 	beq.w	8002760 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80024f4:	e134      	b.n	8002760 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 8130 	beq.w	8002760 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002508:	e12a      	b.n	8002760 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	f003 0320 	and.w	r3, r3, #32
 8002510:	2b00      	cmp	r3, #0
 8002512:	f040 8089 	bne.w	8002628 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a2b      	ldr	r2, [pc, #172]	; (80025c8 <HAL_DMA_IRQHandler+0xc74>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d04a      	beq.n	80025b6 <HAL_DMA_IRQHandler+0xc62>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a29      	ldr	r2, [pc, #164]	; (80025cc <HAL_DMA_IRQHandler+0xc78>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d045      	beq.n	80025b6 <HAL_DMA_IRQHandler+0xc62>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a28      	ldr	r2, [pc, #160]	; (80025d0 <HAL_DMA_IRQHandler+0xc7c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d040      	beq.n	80025b6 <HAL_DMA_IRQHandler+0xc62>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a26      	ldr	r2, [pc, #152]	; (80025d4 <HAL_DMA_IRQHandler+0xc80>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d03b      	beq.n	80025b6 <HAL_DMA_IRQHandler+0xc62>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a25      	ldr	r2, [pc, #148]	; (80025d8 <HAL_DMA_IRQHandler+0xc84>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d036      	beq.n	80025b6 <HAL_DMA_IRQHandler+0xc62>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a23      	ldr	r2, [pc, #140]	; (80025dc <HAL_DMA_IRQHandler+0xc88>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d031      	beq.n	80025b6 <HAL_DMA_IRQHandler+0xc62>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a22      	ldr	r2, [pc, #136]	; (80025e0 <HAL_DMA_IRQHandler+0xc8c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d02c      	beq.n	80025b6 <HAL_DMA_IRQHandler+0xc62>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a20      	ldr	r2, [pc, #128]	; (80025e4 <HAL_DMA_IRQHandler+0xc90>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d027      	beq.n	80025b6 <HAL_DMA_IRQHandler+0xc62>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1f      	ldr	r2, [pc, #124]	; (80025e8 <HAL_DMA_IRQHandler+0xc94>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d022      	beq.n	80025b6 <HAL_DMA_IRQHandler+0xc62>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a1d      	ldr	r2, [pc, #116]	; (80025ec <HAL_DMA_IRQHandler+0xc98>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d01d      	beq.n	80025b6 <HAL_DMA_IRQHandler+0xc62>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a1c      	ldr	r2, [pc, #112]	; (80025f0 <HAL_DMA_IRQHandler+0xc9c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d018      	beq.n	80025b6 <HAL_DMA_IRQHandler+0xc62>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1a      	ldr	r2, [pc, #104]	; (80025f4 <HAL_DMA_IRQHandler+0xca0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d013      	beq.n	80025b6 <HAL_DMA_IRQHandler+0xc62>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a19      	ldr	r2, [pc, #100]	; (80025f8 <HAL_DMA_IRQHandler+0xca4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d00e      	beq.n	80025b6 <HAL_DMA_IRQHandler+0xc62>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a17      	ldr	r2, [pc, #92]	; (80025fc <HAL_DMA_IRQHandler+0xca8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d009      	beq.n	80025b6 <HAL_DMA_IRQHandler+0xc62>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a16      	ldr	r2, [pc, #88]	; (8002600 <HAL_DMA_IRQHandler+0xcac>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d004      	beq.n	80025b6 <HAL_DMA_IRQHandler+0xc62>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a14      	ldr	r2, [pc, #80]	; (8002604 <HAL_DMA_IRQHandler+0xcb0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d128      	bne.n	8002608 <HAL_DMA_IRQHandler+0xcb4>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0214 	bic.w	r2, r2, #20
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	e027      	b.n	8002618 <HAL_DMA_IRQHandler+0xcc4>
 80025c8:	40020010 	.word	0x40020010
 80025cc:	40020028 	.word	0x40020028
 80025d0:	40020040 	.word	0x40020040
 80025d4:	40020058 	.word	0x40020058
 80025d8:	40020070 	.word	0x40020070
 80025dc:	40020088 	.word	0x40020088
 80025e0:	400200a0 	.word	0x400200a0
 80025e4:	400200b8 	.word	0x400200b8
 80025e8:	40020410 	.word	0x40020410
 80025ec:	40020428 	.word	0x40020428
 80025f0:	40020440 	.word	0x40020440
 80025f4:	40020458 	.word	0x40020458
 80025f8:	40020470 	.word	0x40020470
 80025fc:	40020488 	.word	0x40020488
 8002600:	400204a0 	.word	0x400204a0
 8002604:	400204b8 	.word	0x400204b8
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 020a 	bic.w	r2, r2, #10
 8002616:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 8097 	beq.w	8002760 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800263a:	e091      	b.n	8002760 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	2208      	movs	r2, #8
 8002646:	409a      	lsls	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 8088 	beq.w	8002762 <HAL_DMA_IRQHandler+0xe0e>
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 8082 	beq.w	8002762 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a41      	ldr	r2, [pc, #260]	; (8002768 <HAL_DMA_IRQHandler+0xe14>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d04a      	beq.n	80026fe <HAL_DMA_IRQHandler+0xdaa>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a3f      	ldr	r2, [pc, #252]	; (800276c <HAL_DMA_IRQHandler+0xe18>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d045      	beq.n	80026fe <HAL_DMA_IRQHandler+0xdaa>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a3e      	ldr	r2, [pc, #248]	; (8002770 <HAL_DMA_IRQHandler+0xe1c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d040      	beq.n	80026fe <HAL_DMA_IRQHandler+0xdaa>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a3c      	ldr	r2, [pc, #240]	; (8002774 <HAL_DMA_IRQHandler+0xe20>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d03b      	beq.n	80026fe <HAL_DMA_IRQHandler+0xdaa>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a3b      	ldr	r2, [pc, #236]	; (8002778 <HAL_DMA_IRQHandler+0xe24>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d036      	beq.n	80026fe <HAL_DMA_IRQHandler+0xdaa>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a39      	ldr	r2, [pc, #228]	; (800277c <HAL_DMA_IRQHandler+0xe28>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d031      	beq.n	80026fe <HAL_DMA_IRQHandler+0xdaa>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a38      	ldr	r2, [pc, #224]	; (8002780 <HAL_DMA_IRQHandler+0xe2c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d02c      	beq.n	80026fe <HAL_DMA_IRQHandler+0xdaa>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a36      	ldr	r2, [pc, #216]	; (8002784 <HAL_DMA_IRQHandler+0xe30>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d027      	beq.n	80026fe <HAL_DMA_IRQHandler+0xdaa>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a35      	ldr	r2, [pc, #212]	; (8002788 <HAL_DMA_IRQHandler+0xe34>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d022      	beq.n	80026fe <HAL_DMA_IRQHandler+0xdaa>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a33      	ldr	r2, [pc, #204]	; (800278c <HAL_DMA_IRQHandler+0xe38>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d01d      	beq.n	80026fe <HAL_DMA_IRQHandler+0xdaa>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a32      	ldr	r2, [pc, #200]	; (8002790 <HAL_DMA_IRQHandler+0xe3c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d018      	beq.n	80026fe <HAL_DMA_IRQHandler+0xdaa>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a30      	ldr	r2, [pc, #192]	; (8002794 <HAL_DMA_IRQHandler+0xe40>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d013      	beq.n	80026fe <HAL_DMA_IRQHandler+0xdaa>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a2f      	ldr	r2, [pc, #188]	; (8002798 <HAL_DMA_IRQHandler+0xe44>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00e      	beq.n	80026fe <HAL_DMA_IRQHandler+0xdaa>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a2d      	ldr	r2, [pc, #180]	; (800279c <HAL_DMA_IRQHandler+0xe48>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d009      	beq.n	80026fe <HAL_DMA_IRQHandler+0xdaa>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a2c      	ldr	r2, [pc, #176]	; (80027a0 <HAL_DMA_IRQHandler+0xe4c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d004      	beq.n	80026fe <HAL_DMA_IRQHandler+0xdaa>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a2a      	ldr	r2, [pc, #168]	; (80027a4 <HAL_DMA_IRQHandler+0xe50>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d108      	bne.n	8002710 <HAL_DMA_IRQHandler+0xdbc>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 021c 	bic.w	r2, r2, #28
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	e007      	b.n	8002720 <HAL_DMA_IRQHandler+0xdcc>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 020e 	bic.w	r2, r2, #14
 800271e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	2201      	movs	r2, #1
 800272a:	409a      	lsls	r2, r3
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	4798      	blx	r3
 8002756:	e004      	b.n	8002762 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002758:	bf00      	nop
 800275a:	e002      	b.n	8002762 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800275c:	bf00      	nop
 800275e:	e000      	b.n	8002762 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002760:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002762:	3728      	adds	r7, #40	; 0x28
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40020010 	.word	0x40020010
 800276c:	40020028 	.word	0x40020028
 8002770:	40020040 	.word	0x40020040
 8002774:	40020058 	.word	0x40020058
 8002778:	40020070 	.word	0x40020070
 800277c:	40020088 	.word	0x40020088
 8002780:	400200a0 	.word	0x400200a0
 8002784:	400200b8 	.word	0x400200b8
 8002788:	40020410 	.word	0x40020410
 800278c:	40020428 	.word	0x40020428
 8002790:	40020440 	.word	0x40020440
 8002794:	40020458 	.word	0x40020458
 8002798:	40020470 	.word	0x40020470
 800279c:	40020488 	.word	0x40020488
 80027a0:	400204a0 	.word	0x400204a0
 80027a4:	400204b8 	.word	0x400204b8

080027a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a42      	ldr	r2, [pc, #264]	; (80028c0 <DMA_CalcBaseAndBitshift+0x118>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d04a      	beq.n	8002850 <DMA_CalcBaseAndBitshift+0xa8>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a41      	ldr	r2, [pc, #260]	; (80028c4 <DMA_CalcBaseAndBitshift+0x11c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d045      	beq.n	8002850 <DMA_CalcBaseAndBitshift+0xa8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a3f      	ldr	r2, [pc, #252]	; (80028c8 <DMA_CalcBaseAndBitshift+0x120>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d040      	beq.n	8002850 <DMA_CalcBaseAndBitshift+0xa8>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a3e      	ldr	r2, [pc, #248]	; (80028cc <DMA_CalcBaseAndBitshift+0x124>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d03b      	beq.n	8002850 <DMA_CalcBaseAndBitshift+0xa8>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a3c      	ldr	r2, [pc, #240]	; (80028d0 <DMA_CalcBaseAndBitshift+0x128>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d036      	beq.n	8002850 <DMA_CalcBaseAndBitshift+0xa8>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a3b      	ldr	r2, [pc, #236]	; (80028d4 <DMA_CalcBaseAndBitshift+0x12c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d031      	beq.n	8002850 <DMA_CalcBaseAndBitshift+0xa8>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a39      	ldr	r2, [pc, #228]	; (80028d8 <DMA_CalcBaseAndBitshift+0x130>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d02c      	beq.n	8002850 <DMA_CalcBaseAndBitshift+0xa8>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a38      	ldr	r2, [pc, #224]	; (80028dc <DMA_CalcBaseAndBitshift+0x134>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d027      	beq.n	8002850 <DMA_CalcBaseAndBitshift+0xa8>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a36      	ldr	r2, [pc, #216]	; (80028e0 <DMA_CalcBaseAndBitshift+0x138>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d022      	beq.n	8002850 <DMA_CalcBaseAndBitshift+0xa8>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a35      	ldr	r2, [pc, #212]	; (80028e4 <DMA_CalcBaseAndBitshift+0x13c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d01d      	beq.n	8002850 <DMA_CalcBaseAndBitshift+0xa8>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a33      	ldr	r2, [pc, #204]	; (80028e8 <DMA_CalcBaseAndBitshift+0x140>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d018      	beq.n	8002850 <DMA_CalcBaseAndBitshift+0xa8>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a32      	ldr	r2, [pc, #200]	; (80028ec <DMA_CalcBaseAndBitshift+0x144>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d013      	beq.n	8002850 <DMA_CalcBaseAndBitshift+0xa8>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a30      	ldr	r2, [pc, #192]	; (80028f0 <DMA_CalcBaseAndBitshift+0x148>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00e      	beq.n	8002850 <DMA_CalcBaseAndBitshift+0xa8>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a2f      	ldr	r2, [pc, #188]	; (80028f4 <DMA_CalcBaseAndBitshift+0x14c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d009      	beq.n	8002850 <DMA_CalcBaseAndBitshift+0xa8>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a2d      	ldr	r2, [pc, #180]	; (80028f8 <DMA_CalcBaseAndBitshift+0x150>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d004      	beq.n	8002850 <DMA_CalcBaseAndBitshift+0xa8>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a2c      	ldr	r2, [pc, #176]	; (80028fc <DMA_CalcBaseAndBitshift+0x154>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d101      	bne.n	8002854 <DMA_CalcBaseAndBitshift+0xac>
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <DMA_CalcBaseAndBitshift+0xae>
 8002854:	2300      	movs	r3, #0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d024      	beq.n	80028a4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	3b10      	subs	r3, #16
 8002862:	4a27      	ldr	r2, [pc, #156]	; (8002900 <DMA_CalcBaseAndBitshift+0x158>)
 8002864:	fba2 2303 	umull	r2, r3, r2, r3
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	4a24      	ldr	r2, [pc, #144]	; (8002904 <DMA_CalcBaseAndBitshift+0x15c>)
 8002874:	5cd3      	ldrb	r3, [r2, r3]
 8002876:	461a      	mov	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b03      	cmp	r3, #3
 8002880:	d908      	bls.n	8002894 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	4b1f      	ldr	r3, [pc, #124]	; (8002908 <DMA_CalcBaseAndBitshift+0x160>)
 800288a:	4013      	ands	r3, r2
 800288c:	1d1a      	adds	r2, r3, #4
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	659a      	str	r2, [r3, #88]	; 0x58
 8002892:	e00d      	b.n	80028b0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <DMA_CalcBaseAndBitshift+0x160>)
 800289c:	4013      	ands	r3, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6593      	str	r3, [r2, #88]	; 0x58
 80028a2:	e005      	b.n	80028b0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	40020010 	.word	0x40020010
 80028c4:	40020028 	.word	0x40020028
 80028c8:	40020040 	.word	0x40020040
 80028cc:	40020058 	.word	0x40020058
 80028d0:	40020070 	.word	0x40020070
 80028d4:	40020088 	.word	0x40020088
 80028d8:	400200a0 	.word	0x400200a0
 80028dc:	400200b8 	.word	0x400200b8
 80028e0:	40020410 	.word	0x40020410
 80028e4:	40020428 	.word	0x40020428
 80028e8:	40020440 	.word	0x40020440
 80028ec:	40020458 	.word	0x40020458
 80028f0:	40020470 	.word	0x40020470
 80028f4:	40020488 	.word	0x40020488
 80028f8:	400204a0 	.word	0x400204a0
 80028fc:	400204b8 	.word	0x400204b8
 8002900:	aaaaaaab 	.word	0xaaaaaaab
 8002904:	08008970 	.word	0x08008970
 8002908:	fffffc00 	.word	0xfffffc00

0800290c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d120      	bne.n	8002962 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	2b03      	cmp	r3, #3
 8002926:	d858      	bhi.n	80029da <DMA_CheckFifoParam+0xce>
 8002928:	a201      	add	r2, pc, #4	; (adr r2, 8002930 <DMA_CheckFifoParam+0x24>)
 800292a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292e:	bf00      	nop
 8002930:	08002941 	.word	0x08002941
 8002934:	08002953 	.word	0x08002953
 8002938:	08002941 	.word	0x08002941
 800293c:	080029db 	.word	0x080029db
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d048      	beq.n	80029de <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002950:	e045      	b.n	80029de <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800295a:	d142      	bne.n	80029e2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002960:	e03f      	b.n	80029e2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800296a:	d123      	bne.n	80029b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	2b03      	cmp	r3, #3
 8002972:	d838      	bhi.n	80029e6 <DMA_CheckFifoParam+0xda>
 8002974:	a201      	add	r2, pc, #4	; (adr r2, 800297c <DMA_CheckFifoParam+0x70>)
 8002976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297a:	bf00      	nop
 800297c:	0800298d 	.word	0x0800298d
 8002980:	08002993 	.word	0x08002993
 8002984:	0800298d 	.word	0x0800298d
 8002988:	080029a5 	.word	0x080029a5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
        break;
 8002990:	e030      	b.n	80029f4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d025      	beq.n	80029ea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80029a2:	e022      	b.n	80029ea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029ac:	d11f      	bne.n	80029ee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80029b2:	e01c      	b.n	80029ee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d902      	bls.n	80029c2 <DMA_CheckFifoParam+0xb6>
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d003      	beq.n	80029c8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80029c0:	e018      	b.n	80029f4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
        break;
 80029c6:	e015      	b.n	80029f4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00e      	beq.n	80029f2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
    break;
 80029d8:	e00b      	b.n	80029f2 <DMA_CheckFifoParam+0xe6>
        break;
 80029da:	bf00      	nop
 80029dc:	e00a      	b.n	80029f4 <DMA_CheckFifoParam+0xe8>
        break;
 80029de:	bf00      	nop
 80029e0:	e008      	b.n	80029f4 <DMA_CheckFifoParam+0xe8>
        break;
 80029e2:	bf00      	nop
 80029e4:	e006      	b.n	80029f4 <DMA_CheckFifoParam+0xe8>
        break;
 80029e6:	bf00      	nop
 80029e8:	e004      	b.n	80029f4 <DMA_CheckFifoParam+0xe8>
        break;
 80029ea:	bf00      	nop
 80029ec:	e002      	b.n	80029f4 <DMA_CheckFifoParam+0xe8>
        break;
 80029ee:	bf00      	nop
 80029f0:	e000      	b.n	80029f4 <DMA_CheckFifoParam+0xe8>
    break;
 80029f2:	bf00      	nop
    }
  }

  return status;
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop

08002a04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a38      	ldr	r2, [pc, #224]	; (8002af8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d022      	beq.n	8002a62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a36      	ldr	r2, [pc, #216]	; (8002afc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d01d      	beq.n	8002a62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a35      	ldr	r2, [pc, #212]	; (8002b00 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d018      	beq.n	8002a62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a33      	ldr	r2, [pc, #204]	; (8002b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d013      	beq.n	8002a62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a32      	ldr	r2, [pc, #200]	; (8002b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d00e      	beq.n	8002a62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a30      	ldr	r2, [pc, #192]	; (8002b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d009      	beq.n	8002a62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a2f      	ldr	r2, [pc, #188]	; (8002b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d004      	beq.n	8002a62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a2d      	ldr	r2, [pc, #180]	; (8002b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d101      	bne.n	8002a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002a66:	2300      	movs	r3, #0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01a      	beq.n	8002aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	3b08      	subs	r3, #8
 8002a74:	4a28      	ldr	r2, [pc, #160]	; (8002b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	091b      	lsrs	r3, r3, #4
 8002a7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4b26      	ldr	r3, [pc, #152]	; (8002b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	461a      	mov	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a24      	ldr	r2, [pc, #144]	; (8002b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002a90:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	2201      	movs	r2, #1
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002aa0:	e024      	b.n	8002aec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	3b10      	subs	r3, #16
 8002aaa:	4a1e      	ldr	r2, [pc, #120]	; (8002b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002aac:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4a1c      	ldr	r2, [pc, #112]	; (8002b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d806      	bhi.n	8002aca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4a1b      	ldr	r2, [pc, #108]	; (8002b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d902      	bls.n	8002aca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	3308      	adds	r3, #8
 8002ac8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a16      	ldr	r2, [pc, #88]	; (8002b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002adc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	58025408 	.word	0x58025408
 8002afc:	5802541c 	.word	0x5802541c
 8002b00:	58025430 	.word	0x58025430
 8002b04:	58025444 	.word	0x58025444
 8002b08:	58025458 	.word	0x58025458
 8002b0c:	5802546c 	.word	0x5802546c
 8002b10:	58025480 	.word	0x58025480
 8002b14:	58025494 	.word	0x58025494
 8002b18:	cccccccd 	.word	0xcccccccd
 8002b1c:	16009600 	.word	0x16009600
 8002b20:	58025880 	.word	0x58025880
 8002b24:	aaaaaaab 	.word	0xaaaaaaab
 8002b28:	400204b8 	.word	0x400204b8
 8002b2c:	4002040f 	.word	0x4002040f
 8002b30:	10008200 	.word	0x10008200
 8002b34:	40020880 	.word	0x40020880

08002b38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d04a      	beq.n	8002be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d847      	bhi.n	8002be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a25      	ldr	r2, [pc, #148]	; (8002bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d022      	beq.n	8002ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a24      	ldr	r2, [pc, #144]	; (8002bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d01d      	beq.n	8002ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a22      	ldr	r2, [pc, #136]	; (8002bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d018      	beq.n	8002ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a21      	ldr	r2, [pc, #132]	; (8002bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d013      	beq.n	8002ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1f      	ldr	r2, [pc, #124]	; (8002c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00e      	beq.n	8002ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1e      	ldr	r2, [pc, #120]	; (8002c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d009      	beq.n	8002ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1c      	ldr	r2, [pc, #112]	; (8002c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d004      	beq.n	8002ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a1b      	ldr	r2, [pc, #108]	; (8002c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d101      	bne.n	8002ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a15      	ldr	r2, [pc, #84]	; (8002c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002bc0:	671a      	str	r2, [r3, #112]	; 0x70
 8002bc2:	e009      	b.n	8002bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	461a      	mov	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a11      	ldr	r2, [pc, #68]	; (8002c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002bd6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	2201      	movs	r2, #1
 8002bde:	409a      	lsls	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	58025408 	.word	0x58025408
 8002bf4:	5802541c 	.word	0x5802541c
 8002bf8:	58025430 	.word	0x58025430
 8002bfc:	58025444 	.word	0x58025444
 8002c00:	58025458 	.word	0x58025458
 8002c04:	5802546c 	.word	0x5802546c
 8002c08:	58025480 	.word	0x58025480
 8002c0c:	58025494 	.word	0x58025494
 8002c10:	1600963f 	.word	0x1600963f
 8002c14:	58025940 	.word	0x58025940
 8002c18:	1000823f 	.word	0x1000823f
 8002c1c:	40020940 	.word	0x40020940

08002c20 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b80      	cmp	r3, #128	; 0x80
 8002c38:	d105      	bne.n	8002c46 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e315      	b.n	8003272 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e30e      	b.n	8003272 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	f040 82fd 	bne.w	8003264 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a82      	ldr	r2, [pc, #520]	; (8002e88 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d04a      	beq.n	8002d18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a81      	ldr	r2, [pc, #516]	; (8002e8c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d045      	beq.n	8002d18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a7f      	ldr	r2, [pc, #508]	; (8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d040      	beq.n	8002d18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a7e      	ldr	r2, [pc, #504]	; (8002e94 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d03b      	beq.n	8002d18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a7c      	ldr	r2, [pc, #496]	; (8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d036      	beq.n	8002d18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a7b      	ldr	r2, [pc, #492]	; (8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d031      	beq.n	8002d18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a79      	ldr	r2, [pc, #484]	; (8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d02c      	beq.n	8002d18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a78      	ldr	r2, [pc, #480]	; (8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d027      	beq.n	8002d18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a76      	ldr	r2, [pc, #472]	; (8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d022      	beq.n	8002d18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a75      	ldr	r2, [pc, #468]	; (8002eac <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d01d      	beq.n	8002d18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a73      	ldr	r2, [pc, #460]	; (8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d018      	beq.n	8002d18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a72      	ldr	r2, [pc, #456]	; (8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d013      	beq.n	8002d18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a70      	ldr	r2, [pc, #448]	; (8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00e      	beq.n	8002d18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a6f      	ldr	r2, [pc, #444]	; (8002ebc <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d009      	beq.n	8002d18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a6d      	ldr	r2, [pc, #436]	; (8002ec0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d004      	beq.n	8002d18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a6c      	ldr	r2, [pc, #432]	; (8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d101      	bne.n	8002d1c <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d018      	beq.n	8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d30:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	3308      	adds	r3, #8
 8002d40:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d46:	f003 031f 	and.w	r3, r3, #31
 8002d4a:	223f      	movs	r2, #63	; 0x3f
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e018      	b.n	8002d86 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6819      	ldr	r1, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	f248 0320 	movw	r3, #32800	; 0x8020
 8002d62:	430b      	orrs	r3, r1
 8002d64:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d72:	3304      	adds	r3, #4
 8002d74:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7a:	f003 031f 	and.w	r3, r3, #31
 8002d7e:	2201      	movs	r2, #1
 8002d80:	409a      	lsls	r2, r3
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	68b9      	ldr	r1, [r7, #8]
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fb41 	bl	8003414 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a3c      	ldr	r2, [pc, #240]	; (8002e88 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d072      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a3a      	ldr	r2, [pc, #232]	; (8002e8c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d06d      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a39      	ldr	r2, [pc, #228]	; (8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d068      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a37      	ldr	r2, [pc, #220]	; (8002e94 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d063      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a36      	ldr	r2, [pc, #216]	; (8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d05e      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a34      	ldr	r2, [pc, #208]	; (8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d059      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a33      	ldr	r2, [pc, #204]	; (8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d054      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a31      	ldr	r2, [pc, #196]	; (8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d04f      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a30      	ldr	r2, [pc, #192]	; (8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d04a      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a2e      	ldr	r2, [pc, #184]	; (8002eac <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d045      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a2d      	ldr	r2, [pc, #180]	; (8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d040      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2b      	ldr	r2, [pc, #172]	; (8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d03b      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2a      	ldr	r2, [pc, #168]	; (8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d036      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a28      	ldr	r2, [pc, #160]	; (8002ebc <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d031      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a27      	ldr	r2, [pc, #156]	; (8002ec0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d02c      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a25      	ldr	r2, [pc, #148]	; (8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d027      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a24      	ldr	r2, [pc, #144]	; (8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d022      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a22      	ldr	r2, [pc, #136]	; (8002ecc <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01d      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a21      	ldr	r2, [pc, #132]	; (8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d018      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a1f      	ldr	r2, [pc, #124]	; (8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a1e      	ldr	r2, [pc, #120]	; (8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d00e      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a1c      	ldr	r2, [pc, #112]	; (8002edc <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d009      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1b      	ldr	r2, [pc, #108]	; (8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d004      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a19      	ldr	r2, [pc, #100]	; (8002ee4 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d132      	bne.n	8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e031      	b.n	8002eea <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8002e86:	bf00      	nop
 8002e88:	40020010 	.word	0x40020010
 8002e8c:	40020028 	.word	0x40020028
 8002e90:	40020040 	.word	0x40020040
 8002e94:	40020058 	.word	0x40020058
 8002e98:	40020070 	.word	0x40020070
 8002e9c:	40020088 	.word	0x40020088
 8002ea0:	400200a0 	.word	0x400200a0
 8002ea4:	400200b8 	.word	0x400200b8
 8002ea8:	40020410 	.word	0x40020410
 8002eac:	40020428 	.word	0x40020428
 8002eb0:	40020440 	.word	0x40020440
 8002eb4:	40020458 	.word	0x40020458
 8002eb8:	40020470 	.word	0x40020470
 8002ebc:	40020488 	.word	0x40020488
 8002ec0:	400204a0 	.word	0x400204a0
 8002ec4:	400204b8 	.word	0x400204b8
 8002ec8:	58025408 	.word	0x58025408
 8002ecc:	5802541c 	.word	0x5802541c
 8002ed0:	58025430 	.word	0x58025430
 8002ed4:	58025444 	.word	0x58025444
 8002ed8:	58025458 	.word	0x58025458
 8002edc:	5802546c 	.word	0x5802546c
 8002ee0:	58025480 	.word	0x58025480
 8002ee4:	58025494 	.word	0x58025494
 8002ee8:	2300      	movs	r3, #0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00d      	beq.n	8002f0a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ef6:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d004      	beq.n	8002f0a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f08:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a3b      	ldr	r2, [pc, #236]	; (8002ffc <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d04a      	beq.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a39      	ldr	r2, [pc, #228]	; (8003000 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d045      	beq.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a38      	ldr	r2, [pc, #224]	; (8003004 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d040      	beq.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a36      	ldr	r2, [pc, #216]	; (8003008 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d03b      	beq.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a35      	ldr	r2, [pc, #212]	; (800300c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d036      	beq.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a33      	ldr	r2, [pc, #204]	; (8003010 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d031      	beq.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a32      	ldr	r2, [pc, #200]	; (8003014 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d02c      	beq.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a30      	ldr	r2, [pc, #192]	; (8003018 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d027      	beq.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a2f      	ldr	r2, [pc, #188]	; (800301c <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d022      	beq.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a2d      	ldr	r2, [pc, #180]	; (8003020 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d01d      	beq.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a2c      	ldr	r2, [pc, #176]	; (8003024 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d018      	beq.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a2a      	ldr	r2, [pc, #168]	; (8003028 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d013      	beq.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a29      	ldr	r2, [pc, #164]	; (800302c <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d00e      	beq.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a27      	ldr	r2, [pc, #156]	; (8003030 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d009      	beq.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a26      	ldr	r2, [pc, #152]	; (8003034 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d004      	beq.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a24      	ldr	r2, [pc, #144]	; (8003038 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d101      	bne.n	8002fae <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d043      	beq.n	800303c <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 021e 	bic.w	r2, r3, #30
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0216 	orr.w	r2, r2, #22
 8002fc6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fd6:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d103      	bne.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d043      	beq.n	8003070 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0208 	orr.w	r2, r2, #8
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	e03a      	b.n	8003070 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8002ffa:	bf00      	nop
 8002ffc:	40020010 	.word	0x40020010
 8003000:	40020028 	.word	0x40020028
 8003004:	40020040 	.word	0x40020040
 8003008:	40020058 	.word	0x40020058
 800300c:	40020070 	.word	0x40020070
 8003010:	40020088 	.word	0x40020088
 8003014:	400200a0 	.word	0x400200a0
 8003018:	400200b8 	.word	0x400200b8
 800301c:	40020410 	.word	0x40020410
 8003020:	40020428 	.word	0x40020428
 8003024:	40020440 	.word	0x40020440
 8003028:	40020458 	.word	0x40020458
 800302c:	40020470 	.word	0x40020470
 8003030:	40020488 	.word	0x40020488
 8003034:	400204a0 	.word	0x400204a0
 8003038:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 020e 	bic.w	r2, r3, #14
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 020a 	orr.w	r2, r2, #10
 800304e:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	2b00      	cmp	r3, #0
 8003056:	d103      	bne.n	8003060 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305c:	2b00      	cmp	r3, #0
 800305e:	d007      	beq.n	8003070 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0204 	orr.w	r2, r2, #4
 800306e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a81      	ldr	r2, [pc, #516]	; (800327c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d072      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a80      	ldr	r2, [pc, #512]	; (8003280 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d06d      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a7e      	ldr	r2, [pc, #504]	; (8003284 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d068      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a7d      	ldr	r2, [pc, #500]	; (8003288 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d063      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a7b      	ldr	r2, [pc, #492]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d05e      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a7a      	ldr	r2, [pc, #488]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d059      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a78      	ldr	r2, [pc, #480]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d054      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a77      	ldr	r2, [pc, #476]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d04f      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a75      	ldr	r2, [pc, #468]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d04a      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a74      	ldr	r2, [pc, #464]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d045      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a72      	ldr	r2, [pc, #456]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d040      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a71      	ldr	r2, [pc, #452]	; (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d03b      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a6f      	ldr	r2, [pc, #444]	; (80032ac <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d036      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a6e      	ldr	r2, [pc, #440]	; (80032b0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d031      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a6c      	ldr	r2, [pc, #432]	; (80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d02c      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a6b      	ldr	r2, [pc, #428]	; (80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d027      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a69      	ldr	r2, [pc, #420]	; (80032bc <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d022      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a68      	ldr	r2, [pc, #416]	; (80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d01d      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a66      	ldr	r2, [pc, #408]	; (80032c4 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d018      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a65      	ldr	r2, [pc, #404]	; (80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d013      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a63      	ldr	r2, [pc, #396]	; (80032cc <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d00e      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a62      	ldr	r2, [pc, #392]	; (80032d0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d009      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a60      	ldr	r2, [pc, #384]	; (80032d4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d004      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a5f      	ldr	r2, [pc, #380]	; (80032d8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d101      	bne.n	8003164 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8003164:	2300      	movs	r3, #0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01a      	beq.n	80031a0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d007      	beq.n	8003188 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003186:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800319a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800319e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a35      	ldr	r2, [pc, #212]	; (800327c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d04a      	beq.n	8003240 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a34      	ldr	r2, [pc, #208]	; (8003280 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d045      	beq.n	8003240 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a32      	ldr	r2, [pc, #200]	; (8003284 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d040      	beq.n	8003240 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a31      	ldr	r2, [pc, #196]	; (8003288 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d03b      	beq.n	8003240 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a2f      	ldr	r2, [pc, #188]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d036      	beq.n	8003240 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a2e      	ldr	r2, [pc, #184]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d031      	beq.n	8003240 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a2c      	ldr	r2, [pc, #176]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d02c      	beq.n	8003240 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a2b      	ldr	r2, [pc, #172]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d027      	beq.n	8003240 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a29      	ldr	r2, [pc, #164]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d022      	beq.n	8003240 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a28      	ldr	r2, [pc, #160]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d01d      	beq.n	8003240 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a26      	ldr	r2, [pc, #152]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d018      	beq.n	8003240 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a25      	ldr	r2, [pc, #148]	; (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d013      	beq.n	8003240 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a23      	ldr	r2, [pc, #140]	; (80032ac <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00e      	beq.n	8003240 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a22      	ldr	r2, [pc, #136]	; (80032b0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d009      	beq.n	8003240 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a20      	ldr	r2, [pc, #128]	; (80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d004      	beq.n	8003240 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1f      	ldr	r2, [pc, #124]	; (80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d108      	bne.n	8003252 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	e00e      	b.n	8003270 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0201 	orr.w	r2, r2, #1
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	e005      	b.n	8003270 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800326a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003270:	7dfb      	ldrb	r3, [r7, #23]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40020010 	.word	0x40020010
 8003280:	40020028 	.word	0x40020028
 8003284:	40020040 	.word	0x40020040
 8003288:	40020058 	.word	0x40020058
 800328c:	40020070 	.word	0x40020070
 8003290:	40020088 	.word	0x40020088
 8003294:	400200a0 	.word	0x400200a0
 8003298:	400200b8 	.word	0x400200b8
 800329c:	40020410 	.word	0x40020410
 80032a0:	40020428 	.word	0x40020428
 80032a4:	40020440 	.word	0x40020440
 80032a8:	40020458 	.word	0x40020458
 80032ac:	40020470 	.word	0x40020470
 80032b0:	40020488 	.word	0x40020488
 80032b4:	400204a0 	.word	0x400204a0
 80032b8:	400204b8 	.word	0x400204b8
 80032bc:	58025408 	.word	0x58025408
 80032c0:	5802541c 	.word	0x5802541c
 80032c4:	58025430 	.word	0x58025430
 80032c8:	58025444 	.word	0x58025444
 80032cc:	58025458 	.word	0x58025458
 80032d0:	5802546c 	.word	0x5802546c
 80032d4:	58025480 	.word	0x58025480
 80032d8:	58025494 	.word	0x58025494

080032dc <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	4613      	mov	r3, r2
 80032e8:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a39      	ldr	r2, [pc, #228]	; (80033d4 <HAL_DMAEx_ChangeMemory+0xf8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d04a      	beq.n	800338a <HAL_DMAEx_ChangeMemory+0xae>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a37      	ldr	r2, [pc, #220]	; (80033d8 <HAL_DMAEx_ChangeMemory+0xfc>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d045      	beq.n	800338a <HAL_DMAEx_ChangeMemory+0xae>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a36      	ldr	r2, [pc, #216]	; (80033dc <HAL_DMAEx_ChangeMemory+0x100>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d040      	beq.n	800338a <HAL_DMAEx_ChangeMemory+0xae>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a34      	ldr	r2, [pc, #208]	; (80033e0 <HAL_DMAEx_ChangeMemory+0x104>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d03b      	beq.n	800338a <HAL_DMAEx_ChangeMemory+0xae>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a33      	ldr	r2, [pc, #204]	; (80033e4 <HAL_DMAEx_ChangeMemory+0x108>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d036      	beq.n	800338a <HAL_DMAEx_ChangeMemory+0xae>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a31      	ldr	r2, [pc, #196]	; (80033e8 <HAL_DMAEx_ChangeMemory+0x10c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d031      	beq.n	800338a <HAL_DMAEx_ChangeMemory+0xae>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a30      	ldr	r2, [pc, #192]	; (80033ec <HAL_DMAEx_ChangeMemory+0x110>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d02c      	beq.n	800338a <HAL_DMAEx_ChangeMemory+0xae>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a2e      	ldr	r2, [pc, #184]	; (80033f0 <HAL_DMAEx_ChangeMemory+0x114>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d027      	beq.n	800338a <HAL_DMAEx_ChangeMemory+0xae>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a2d      	ldr	r2, [pc, #180]	; (80033f4 <HAL_DMAEx_ChangeMemory+0x118>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d022      	beq.n	800338a <HAL_DMAEx_ChangeMemory+0xae>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a2b      	ldr	r2, [pc, #172]	; (80033f8 <HAL_DMAEx_ChangeMemory+0x11c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d01d      	beq.n	800338a <HAL_DMAEx_ChangeMemory+0xae>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a2a      	ldr	r2, [pc, #168]	; (80033fc <HAL_DMAEx_ChangeMemory+0x120>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d018      	beq.n	800338a <HAL_DMAEx_ChangeMemory+0xae>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a28      	ldr	r2, [pc, #160]	; (8003400 <HAL_DMAEx_ChangeMemory+0x124>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d013      	beq.n	800338a <HAL_DMAEx_ChangeMemory+0xae>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a27      	ldr	r2, [pc, #156]	; (8003404 <HAL_DMAEx_ChangeMemory+0x128>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00e      	beq.n	800338a <HAL_DMAEx_ChangeMemory+0xae>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a25      	ldr	r2, [pc, #148]	; (8003408 <HAL_DMAEx_ChangeMemory+0x12c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d009      	beq.n	800338a <HAL_DMAEx_ChangeMemory+0xae>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a24      	ldr	r2, [pc, #144]	; (800340c <HAL_DMAEx_ChangeMemory+0x130>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d004      	beq.n	800338a <HAL_DMAEx_ChangeMemory+0xae>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a22      	ldr	r2, [pc, #136]	; (8003410 <HAL_DMAEx_ChangeMemory+0x134>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d101      	bne.n	800338e <HAL_DMAEx_ChangeMemory+0xb2>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <HAL_DMAEx_ChangeMemory+0xb4>
 800338e:	2300      	movs	r3, #0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00c      	beq.n	80033ae <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d104      	bne.n	80033a4 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	e010      	b.n	80033c6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	611a      	str	r2, [r3, #16]
 80033ac:	e00b      	b.n	80033c6 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d104      	bne.n	80033be <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	60da      	str	r2, [r3, #12]
 80033bc:	e003      	b.n	80033c6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	40020010 	.word	0x40020010
 80033d8:	40020028 	.word	0x40020028
 80033dc:	40020040 	.word	0x40020040
 80033e0:	40020058 	.word	0x40020058
 80033e4:	40020070 	.word	0x40020070
 80033e8:	40020088 	.word	0x40020088
 80033ec:	400200a0 	.word	0x400200a0
 80033f0:	400200b8 	.word	0x400200b8
 80033f4:	40020410 	.word	0x40020410
 80033f8:	40020428 	.word	0x40020428
 80033fc:	40020440 	.word	0x40020440
 8003400:	40020458 	.word	0x40020458
 8003404:	40020470 	.word	0x40020470
 8003408:	40020488 	.word	0x40020488
 800340c:	400204a0 	.word	0x400204a0
 8003410:	400204b8 	.word	0x400204b8

08003414 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a46      	ldr	r2, [pc, #280]	; (8003540 <DMA_MultiBufferSetConfig+0x12c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d04a      	beq.n	80034c2 <DMA_MultiBufferSetConfig+0xae>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a44      	ldr	r2, [pc, #272]	; (8003544 <DMA_MultiBufferSetConfig+0x130>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d045      	beq.n	80034c2 <DMA_MultiBufferSetConfig+0xae>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a43      	ldr	r2, [pc, #268]	; (8003548 <DMA_MultiBufferSetConfig+0x134>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d040      	beq.n	80034c2 <DMA_MultiBufferSetConfig+0xae>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a41      	ldr	r2, [pc, #260]	; (800354c <DMA_MultiBufferSetConfig+0x138>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d03b      	beq.n	80034c2 <DMA_MultiBufferSetConfig+0xae>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a40      	ldr	r2, [pc, #256]	; (8003550 <DMA_MultiBufferSetConfig+0x13c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d036      	beq.n	80034c2 <DMA_MultiBufferSetConfig+0xae>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a3e      	ldr	r2, [pc, #248]	; (8003554 <DMA_MultiBufferSetConfig+0x140>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d031      	beq.n	80034c2 <DMA_MultiBufferSetConfig+0xae>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a3d      	ldr	r2, [pc, #244]	; (8003558 <DMA_MultiBufferSetConfig+0x144>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d02c      	beq.n	80034c2 <DMA_MultiBufferSetConfig+0xae>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a3b      	ldr	r2, [pc, #236]	; (800355c <DMA_MultiBufferSetConfig+0x148>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d027      	beq.n	80034c2 <DMA_MultiBufferSetConfig+0xae>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a3a      	ldr	r2, [pc, #232]	; (8003560 <DMA_MultiBufferSetConfig+0x14c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d022      	beq.n	80034c2 <DMA_MultiBufferSetConfig+0xae>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a38      	ldr	r2, [pc, #224]	; (8003564 <DMA_MultiBufferSetConfig+0x150>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01d      	beq.n	80034c2 <DMA_MultiBufferSetConfig+0xae>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a37      	ldr	r2, [pc, #220]	; (8003568 <DMA_MultiBufferSetConfig+0x154>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d018      	beq.n	80034c2 <DMA_MultiBufferSetConfig+0xae>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a35      	ldr	r2, [pc, #212]	; (800356c <DMA_MultiBufferSetConfig+0x158>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d013      	beq.n	80034c2 <DMA_MultiBufferSetConfig+0xae>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a34      	ldr	r2, [pc, #208]	; (8003570 <DMA_MultiBufferSetConfig+0x15c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d00e      	beq.n	80034c2 <DMA_MultiBufferSetConfig+0xae>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a32      	ldr	r2, [pc, #200]	; (8003574 <DMA_MultiBufferSetConfig+0x160>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d009      	beq.n	80034c2 <DMA_MultiBufferSetConfig+0xae>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a31      	ldr	r2, [pc, #196]	; (8003578 <DMA_MultiBufferSetConfig+0x164>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d004      	beq.n	80034c2 <DMA_MultiBufferSetConfig+0xae>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a2f      	ldr	r2, [pc, #188]	; (800357c <DMA_MultiBufferSetConfig+0x168>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d101      	bne.n	80034c6 <DMA_MultiBufferSetConfig+0xb2>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <DMA_MultiBufferSetConfig+0xb4>
 80034c6:	2300      	movs	r3, #0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d019      	beq.n	8003500 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b40      	cmp	r3, #64	; 0x40
 80034da:	d108      	bne.n	80034ee <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 80034ec:	e021      	b.n	8003532 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	60da      	str	r2, [r3, #12]
}
 80034fe:	e018      	b.n	8003532 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	2b40      	cmp	r3, #64	; 0x40
 800350e:	d108      	bne.n	8003522 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	60da      	str	r2, [r3, #12]
}
 8003520:	e007      	b.n	8003532 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	60da      	str	r2, [r3, #12]
}
 8003532:	bf00      	nop
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40020010 	.word	0x40020010
 8003544:	40020028 	.word	0x40020028
 8003548:	40020040 	.word	0x40020040
 800354c:	40020058 	.word	0x40020058
 8003550:	40020070 	.word	0x40020070
 8003554:	40020088 	.word	0x40020088
 8003558:	400200a0 	.word	0x400200a0
 800355c:	400200b8 	.word	0x400200b8
 8003560:	40020410 	.word	0x40020410
 8003564:	40020428 	.word	0x40020428
 8003568:	40020440 	.word	0x40020440
 800356c:	40020458 	.word	0x40020458
 8003570:	40020470 	.word	0x40020470
 8003574:	40020488 	.word	0x40020488
 8003578:	400204a0 	.word	0x400204a0
 800357c:	400204b8 	.word	0x400204b8

08003580 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003580:	b480      	push	{r7}
 8003582:	b089      	sub	sp, #36	; 0x24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800358e:	4b89      	ldr	r3, [pc, #548]	; (80037b4 <HAL_GPIO_Init+0x234>)
 8003590:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003592:	e194      	b.n	80038be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	2101      	movs	r1, #1
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	fa01 f303 	lsl.w	r3, r1, r3
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8186 	beq.w	80038b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d005      	beq.n	80035c4 <HAL_GPIO_Init+0x44>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d130      	bne.n	8003626 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	2203      	movs	r2, #3
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035fa:	2201      	movs	r2, #1
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43db      	mvns	r3, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4013      	ands	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	f003 0201 	and.w	r2, r3, #1
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4313      	orrs	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b03      	cmp	r3, #3
 8003630:	d017      	beq.n	8003662 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	2203      	movs	r2, #3
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d123      	bne.n	80036b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	08da      	lsrs	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3208      	adds	r2, #8
 8003676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	220f      	movs	r2, #15
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4013      	ands	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	691a      	ldr	r2, [r3, #16]
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	08da      	lsrs	r2, r3, #3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3208      	adds	r2, #8
 80036b0:	69b9      	ldr	r1, [r7, #24]
 80036b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	2203      	movs	r2, #3
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43db      	mvns	r3, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4013      	ands	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f003 0203 	and.w	r2, r3, #3
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80e0 	beq.w	80038b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036f8:	4b2f      	ldr	r3, [pc, #188]	; (80037b8 <HAL_GPIO_Init+0x238>)
 80036fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036fe:	4a2e      	ldr	r2, [pc, #184]	; (80037b8 <HAL_GPIO_Init+0x238>)
 8003700:	f043 0302 	orr.w	r3, r3, #2
 8003704:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003708:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <HAL_GPIO_Init+0x238>)
 800370a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003716:	4a29      	ldr	r2, [pc, #164]	; (80037bc <HAL_GPIO_Init+0x23c>)
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	089b      	lsrs	r3, r3, #2
 800371c:	3302      	adds	r3, #2
 800371e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	220f      	movs	r2, #15
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43db      	mvns	r3, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4013      	ands	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a20      	ldr	r2, [pc, #128]	; (80037c0 <HAL_GPIO_Init+0x240>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d052      	beq.n	80037e8 <HAL_GPIO_Init+0x268>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a1f      	ldr	r2, [pc, #124]	; (80037c4 <HAL_GPIO_Init+0x244>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d031      	beq.n	80037ae <HAL_GPIO_Init+0x22e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a1e      	ldr	r2, [pc, #120]	; (80037c8 <HAL_GPIO_Init+0x248>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d02b      	beq.n	80037aa <HAL_GPIO_Init+0x22a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a1d      	ldr	r2, [pc, #116]	; (80037cc <HAL_GPIO_Init+0x24c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d025      	beq.n	80037a6 <HAL_GPIO_Init+0x226>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a1c      	ldr	r2, [pc, #112]	; (80037d0 <HAL_GPIO_Init+0x250>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d01f      	beq.n	80037a2 <HAL_GPIO_Init+0x222>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a1b      	ldr	r2, [pc, #108]	; (80037d4 <HAL_GPIO_Init+0x254>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d019      	beq.n	800379e <HAL_GPIO_Init+0x21e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a1a      	ldr	r2, [pc, #104]	; (80037d8 <HAL_GPIO_Init+0x258>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d013      	beq.n	800379a <HAL_GPIO_Init+0x21a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a19      	ldr	r2, [pc, #100]	; (80037dc <HAL_GPIO_Init+0x25c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00d      	beq.n	8003796 <HAL_GPIO_Init+0x216>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a18      	ldr	r2, [pc, #96]	; (80037e0 <HAL_GPIO_Init+0x260>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d007      	beq.n	8003792 <HAL_GPIO_Init+0x212>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a17      	ldr	r2, [pc, #92]	; (80037e4 <HAL_GPIO_Init+0x264>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d101      	bne.n	800378e <HAL_GPIO_Init+0x20e>
 800378a:	2309      	movs	r3, #9
 800378c:	e02d      	b.n	80037ea <HAL_GPIO_Init+0x26a>
 800378e:	230a      	movs	r3, #10
 8003790:	e02b      	b.n	80037ea <HAL_GPIO_Init+0x26a>
 8003792:	2308      	movs	r3, #8
 8003794:	e029      	b.n	80037ea <HAL_GPIO_Init+0x26a>
 8003796:	2307      	movs	r3, #7
 8003798:	e027      	b.n	80037ea <HAL_GPIO_Init+0x26a>
 800379a:	2306      	movs	r3, #6
 800379c:	e025      	b.n	80037ea <HAL_GPIO_Init+0x26a>
 800379e:	2305      	movs	r3, #5
 80037a0:	e023      	b.n	80037ea <HAL_GPIO_Init+0x26a>
 80037a2:	2304      	movs	r3, #4
 80037a4:	e021      	b.n	80037ea <HAL_GPIO_Init+0x26a>
 80037a6:	2303      	movs	r3, #3
 80037a8:	e01f      	b.n	80037ea <HAL_GPIO_Init+0x26a>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e01d      	b.n	80037ea <HAL_GPIO_Init+0x26a>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e01b      	b.n	80037ea <HAL_GPIO_Init+0x26a>
 80037b2:	bf00      	nop
 80037b4:	58000080 	.word	0x58000080
 80037b8:	58024400 	.word	0x58024400
 80037bc:	58000400 	.word	0x58000400
 80037c0:	58020000 	.word	0x58020000
 80037c4:	58020400 	.word	0x58020400
 80037c8:	58020800 	.word	0x58020800
 80037cc:	58020c00 	.word	0x58020c00
 80037d0:	58021000 	.word	0x58021000
 80037d4:	58021400 	.word	0x58021400
 80037d8:	58021800 	.word	0x58021800
 80037dc:	58021c00 	.word	0x58021c00
 80037e0:	58022000 	.word	0x58022000
 80037e4:	58022400 	.word	0x58022400
 80037e8:	2300      	movs	r3, #0
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	f002 0203 	and.w	r2, r2, #3
 80037f0:	0092      	lsls	r2, r2, #2
 80037f2:	4093      	lsls	r3, r2
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037fa:	4938      	ldr	r1, [pc, #224]	; (80038dc <HAL_GPIO_Init+0x35c>)
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	089b      	lsrs	r3, r3, #2
 8003800:	3302      	adds	r3, #2
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800382e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800385c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	43db      	mvns	r3, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	3301      	adds	r3, #1
 80038bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f47f ae63 	bne.w	8003594 <HAL_GPIO_Init+0x14>
  }
}
 80038ce:	bf00      	nop
 80038d0:	bf00      	nop
 80038d2:	3724      	adds	r7, #36	; 0x24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	58000400 	.word	0x58000400

080038e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	807b      	strh	r3, [r7, #2]
 80038ec:	4613      	mov	r3, r2
 80038ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038f0:	787b      	ldrb	r3, [r7, #1]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038f6:	887a      	ldrh	r2, [r7, #2]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80038fc:	e003      	b.n	8003906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80038fe:	887b      	ldrh	r3, [r7, #2]
 8003900:	041a      	lsls	r2, r3, #16
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	619a      	str	r2, [r3, #24]
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800391c:	4a08      	ldr	r2, [pc, #32]	; (8003940 <HAL_HSEM_FastTake+0x2c>)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3320      	adds	r3, #32
 8003922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003926:	4a07      	ldr	r2, [pc, #28]	; (8003944 <HAL_HSEM_FastTake+0x30>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	e000      	b.n	8003932 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	58026400 	.word	0x58026400
 8003944:	80000300 	.word	0x80000300

08003948 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003952:	4906      	ldr	r1, [pc, #24]	; (800396c <HAL_HSEM_Release+0x24>)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	58026400 	.word	0x58026400

08003970 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003978:	4b29      	ldr	r3, [pc, #164]	; (8003a20 <HAL_PWREx_ConfigSupply+0xb0>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	2b06      	cmp	r3, #6
 8003982:	d00a      	beq.n	800399a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003984:	4b26      	ldr	r3, [pc, #152]	; (8003a20 <HAL_PWREx_ConfigSupply+0xb0>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	429a      	cmp	r2, r3
 8003990:	d001      	beq.n	8003996 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e040      	b.n	8003a18 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	e03e      	b.n	8003a18 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800399a:	4b21      	ldr	r3, [pc, #132]	; (8003a20 <HAL_PWREx_ConfigSupply+0xb0>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80039a2:	491f      	ldr	r1, [pc, #124]	; (8003a20 <HAL_PWREx_ConfigSupply+0xb0>)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80039aa:	f7fd fb4f 	bl	800104c <HAL_GetTick>
 80039ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039b0:	e009      	b.n	80039c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039b2:	f7fd fb4b 	bl	800104c <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039c0:	d901      	bls.n	80039c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e028      	b.n	8003a18 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039c6:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <HAL_PWREx_ConfigSupply+0xb0>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d2:	d1ee      	bne.n	80039b2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b1e      	cmp	r3, #30
 80039d8:	d008      	beq.n	80039ec <HAL_PWREx_ConfigSupply+0x7c>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b2e      	cmp	r3, #46	; 0x2e
 80039de:	d005      	beq.n	80039ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b1d      	cmp	r3, #29
 80039e4:	d002      	beq.n	80039ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b2d      	cmp	r3, #45	; 0x2d
 80039ea:	d114      	bne.n	8003a16 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80039ec:	f7fd fb2e 	bl	800104c <HAL_GetTick>
 80039f0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80039f2:	e009      	b.n	8003a08 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039f4:	f7fd fb2a 	bl	800104c <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a02:	d901      	bls.n	8003a08 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e007      	b.n	8003a18 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a14:	d1ee      	bne.n	80039f4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	58024800 	.word	0x58024800

08003a24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08c      	sub	sp, #48	; 0x30
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	f000 bc48 	b.w	80042c8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8088 	beq.w	8003b56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a46:	4b99      	ldr	r3, [pc, #612]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a50:	4b96      	ldr	r3, [pc, #600]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	2b10      	cmp	r3, #16
 8003a5a:	d007      	beq.n	8003a6c <HAL_RCC_OscConfig+0x48>
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	2b18      	cmp	r3, #24
 8003a60:	d111      	bne.n	8003a86 <HAL_RCC_OscConfig+0x62>
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d10c      	bne.n	8003a86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6c:	4b8f      	ldr	r3, [pc, #572]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d06d      	beq.n	8003b54 <HAL_RCC_OscConfig+0x130>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d169      	bne.n	8003b54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	f000 bc21 	b.w	80042c8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8e:	d106      	bne.n	8003a9e <HAL_RCC_OscConfig+0x7a>
 8003a90:	4b86      	ldr	r3, [pc, #536]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a85      	ldr	r2, [pc, #532]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	e02e      	b.n	8003afc <HAL_RCC_OscConfig+0xd8>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x9c>
 8003aa6:	4b81      	ldr	r3, [pc, #516]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a80      	ldr	r2, [pc, #512]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	4b7e      	ldr	r3, [pc, #504]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a7d      	ldr	r2, [pc, #500]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003ab8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e01d      	b.n	8003afc <HAL_RCC_OscConfig+0xd8>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_RCC_OscConfig+0xc0>
 8003aca:	4b78      	ldr	r3, [pc, #480]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a77      	ldr	r2, [pc, #476]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	4b75      	ldr	r3, [pc, #468]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a74      	ldr	r2, [pc, #464]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	e00b      	b.n	8003afc <HAL_RCC_OscConfig+0xd8>
 8003ae4:	4b71      	ldr	r3, [pc, #452]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a70      	ldr	r2, [pc, #448]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	4b6e      	ldr	r3, [pc, #440]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a6d      	ldr	r2, [pc, #436]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d013      	beq.n	8003b2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fd faa2 	bl	800104c <HAL_GetTick>
 8003b08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b0c:	f7fd fa9e 	bl	800104c <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	; 0x64
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e3d4      	b.n	80042c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b1e:	4b63      	ldr	r3, [pc, #396]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0xe8>
 8003b2a:	e014      	b.n	8003b56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fd fa8e 	bl	800104c <HAL_GetTick>
 8003b30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b34:	f7fd fa8a 	bl	800104c <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	; 0x64
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e3c0      	b.n	80042c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b46:	4b59      	ldr	r3, [pc, #356]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x110>
 8003b52:	e000      	b.n	8003b56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 80ca 	beq.w	8003cf8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b64:	4b51      	ldr	r3, [pc, #324]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b6e:	4b4f      	ldr	r3, [pc, #316]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b72:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d007      	beq.n	8003b8a <HAL_RCC_OscConfig+0x166>
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	2b18      	cmp	r3, #24
 8003b7e:	d156      	bne.n	8003c2e <HAL_RCC_OscConfig+0x20a>
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d151      	bne.n	8003c2e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b8a:	4b48      	ldr	r3, [pc, #288]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d005      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x17e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e392      	b.n	80042c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ba2:	4b42      	ldr	r3, [pc, #264]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 0219 	bic.w	r2, r3, #25
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	493f      	ldr	r1, [pc, #252]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb4:	f7fd fa4a 	bl	800104c <HAL_GetTick>
 8003bb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bbc:	f7fd fa46 	bl	800104c <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e37c      	b.n	80042c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bce:	4b37      	ldr	r3, [pc, #220]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bda:	f7fd fa43 	bl	8001064 <HAL_GetREVID>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d817      	bhi.n	8003c18 <HAL_RCC_OscConfig+0x1f4>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	2b40      	cmp	r3, #64	; 0x40
 8003bee:	d108      	bne.n	8003c02 <HAL_RCC_OscConfig+0x1de>
 8003bf0:	4b2e      	ldr	r3, [pc, #184]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003bf8:	4a2c      	ldr	r2, [pc, #176]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bfe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c00:	e07a      	b.n	8003cf8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c02:	4b2a      	ldr	r3, [pc, #168]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	031b      	lsls	r3, r3, #12
 8003c10:	4926      	ldr	r1, [pc, #152]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c16:	e06f      	b.n	8003cf8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c18:	4b24      	ldr	r3, [pc, #144]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	061b      	lsls	r3, r3, #24
 8003c26:	4921      	ldr	r1, [pc, #132]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c2c:	e064      	b.n	8003cf8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d047      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c36:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f023 0219 	bic.w	r2, r3, #25
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	491a      	ldr	r1, [pc, #104]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fd fa00 	bl	800104c <HAL_GetTick>
 8003c4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c50:	f7fd f9fc 	bl	800104c <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e332      	b.n	80042c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c62:	4b12      	ldr	r3, [pc, #72]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6e:	f7fd f9f9 	bl	8001064 <HAL_GetREVID>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d819      	bhi.n	8003cb0 <HAL_RCC_OscConfig+0x28c>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	2b40      	cmp	r3, #64	; 0x40
 8003c82:	d108      	bne.n	8003c96 <HAL_RCC_OscConfig+0x272>
 8003c84:	4b09      	ldr	r3, [pc, #36]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003c8c:	4a07      	ldr	r2, [pc, #28]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c92:	6053      	str	r3, [r2, #4]
 8003c94:	e030      	b.n	8003cf8 <HAL_RCC_OscConfig+0x2d4>
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	031b      	lsls	r3, r3, #12
 8003ca4:	4901      	ldr	r1, [pc, #4]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	604b      	str	r3, [r1, #4]
 8003caa:	e025      	b.n	8003cf8 <HAL_RCC_OscConfig+0x2d4>
 8003cac:	58024400 	.word	0x58024400
 8003cb0:	4b9a      	ldr	r3, [pc, #616]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	061b      	lsls	r3, r3, #24
 8003cbe:	4997      	ldr	r1, [pc, #604]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]
 8003cc4:	e018      	b.n	8003cf8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cc6:	4b95      	ldr	r3, [pc, #596]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a94      	ldr	r2, [pc, #592]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003ccc:	f023 0301 	bic.w	r3, r3, #1
 8003cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd2:	f7fd f9bb 	bl	800104c <HAL_GetTick>
 8003cd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cda:	f7fd f9b7 	bl	800104c <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e2ed      	b.n	80042c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cec:	4b8b      	ldr	r3, [pc, #556]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f0      	bne.n	8003cda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0310 	and.w	r3, r3, #16
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80a9 	beq.w	8003e58 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d06:	4b85      	ldr	r3, [pc, #532]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d0e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d10:	4b82      	ldr	r3, [pc, #520]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d007      	beq.n	8003d2c <HAL_RCC_OscConfig+0x308>
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	2b18      	cmp	r3, #24
 8003d20:	d13a      	bne.n	8003d98 <HAL_RCC_OscConfig+0x374>
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d135      	bne.n	8003d98 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d2c:	4b7b      	ldr	r3, [pc, #492]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d005      	beq.n	8003d44 <HAL_RCC_OscConfig+0x320>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	2b80      	cmp	r3, #128	; 0x80
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e2c1      	b.n	80042c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d44:	f7fd f98e 	bl	8001064 <HAL_GetREVID>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d817      	bhi.n	8003d82 <HAL_RCC_OscConfig+0x35e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d108      	bne.n	8003d6c <HAL_RCC_OscConfig+0x348>
 8003d5a:	4b70      	ldr	r3, [pc, #448]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d62:	4a6e      	ldr	r2, [pc, #440]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003d64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d68:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d6a:	e075      	b.n	8003e58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d6c:	4b6b      	ldr	r3, [pc, #428]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	069b      	lsls	r3, r3, #26
 8003d7a:	4968      	ldr	r1, [pc, #416]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d80:	e06a      	b.n	8003e58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d82:	4b66      	ldr	r3, [pc, #408]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	061b      	lsls	r3, r3, #24
 8003d90:	4962      	ldr	r1, [pc, #392]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d96:	e05f      	b.n	8003e58 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d042      	beq.n	8003e26 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003da0:	4b5e      	ldr	r3, [pc, #376]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a5d      	ldr	r2, [pc, #372]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fd f94e 	bl	800104c <HAL_GetTick>
 8003db0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003db4:	f7fd f94a 	bl	800104c <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e280      	b.n	80042c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dc6:	4b55      	ldr	r3, [pc, #340]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dd2:	f7fd f947 	bl	8001064 <HAL_GetREVID>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d817      	bhi.n	8003e10 <HAL_RCC_OscConfig+0x3ec>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d108      	bne.n	8003dfa <HAL_RCC_OscConfig+0x3d6>
 8003de8:	4b4c      	ldr	r3, [pc, #304]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003df0:	4a4a      	ldr	r2, [pc, #296]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003df2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003df6:	6053      	str	r3, [r2, #4]
 8003df8:	e02e      	b.n	8003e58 <HAL_RCC_OscConfig+0x434>
 8003dfa:	4b48      	ldr	r3, [pc, #288]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	069b      	lsls	r3, r3, #26
 8003e08:	4944      	ldr	r1, [pc, #272]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	604b      	str	r3, [r1, #4]
 8003e0e:	e023      	b.n	8003e58 <HAL_RCC_OscConfig+0x434>
 8003e10:	4b42      	ldr	r3, [pc, #264]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	061b      	lsls	r3, r3, #24
 8003e1e:	493f      	ldr	r1, [pc, #252]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60cb      	str	r3, [r1, #12]
 8003e24:	e018      	b.n	8003e58 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e26:	4b3d      	ldr	r3, [pc, #244]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a3c      	ldr	r2, [pc, #240]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e32:	f7fd f90b 	bl	800104c <HAL_GetTick>
 8003e36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e3a:	f7fd f907 	bl	800104c <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e23d      	b.n	80042c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e4c:	4b33      	ldr	r3, [pc, #204]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1f0      	bne.n	8003e3a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d036      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d019      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e6c:	4b2b      	ldr	r3, [pc, #172]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e70:	4a2a      	ldr	r2, [pc, #168]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e78:	f7fd f8e8 	bl	800104c <HAL_GetTick>
 8003e7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e80:	f7fd f8e4 	bl	800104c <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e21a      	b.n	80042c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e92:	4b22      	ldr	r3, [pc, #136]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0x45c>
 8003e9e:	e018      	b.n	8003ed2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ea0:	4b1e      	ldr	r3, [pc, #120]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea4:	4a1d      	ldr	r2, [pc, #116]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eac:	f7fd f8ce 	bl	800104c <HAL_GetTick>
 8003eb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eb4:	f7fd f8ca 	bl	800104c <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e200      	b.n	80042c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ec6:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d039      	beq.n	8003f52 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01c      	beq.n	8003f20 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a0c      	ldr	r2, [pc, #48]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003eec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ef0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ef2:	f7fd f8ab 	bl	800104c <HAL_GetTick>
 8003ef6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003efa:	f7fd f8a7 	bl	800104c <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e1dd      	b.n	80042c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f0c:	4b03      	ldr	r3, [pc, #12]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0x4d6>
 8003f18:	e01b      	b.n	8003f52 <HAL_RCC_OscConfig+0x52e>
 8003f1a:	bf00      	nop
 8003f1c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f20:	4b9b      	ldr	r3, [pc, #620]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a9a      	ldr	r2, [pc, #616]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003f26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f2c:	f7fd f88e 	bl	800104c <HAL_GetTick>
 8003f30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f34:	f7fd f88a 	bl	800104c <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e1c0      	b.n	80042c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f46:	4b92      	ldr	r3, [pc, #584]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 8081 	beq.w	8004062 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f60:	4b8c      	ldr	r3, [pc, #560]	; (8004194 <HAL_RCC_OscConfig+0x770>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a8b      	ldr	r2, [pc, #556]	; (8004194 <HAL_RCC_OscConfig+0x770>)
 8003f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f6c:	f7fd f86e 	bl	800104c <HAL_GetTick>
 8003f70:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f74:	f7fd f86a 	bl	800104c <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b64      	cmp	r3, #100	; 0x64
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e1a0      	b.n	80042c8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f86:	4b83      	ldr	r3, [pc, #524]	; (8004194 <HAL_RCC_OscConfig+0x770>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0f0      	beq.n	8003f74 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d106      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x584>
 8003f9a:	4b7d      	ldr	r3, [pc, #500]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	4a7c      	ldr	r2, [pc, #496]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa6:	e02d      	b.n	8004004 <HAL_RCC_OscConfig+0x5e0>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10c      	bne.n	8003fca <HAL_RCC_OscConfig+0x5a6>
 8003fb0:	4b77      	ldr	r3, [pc, #476]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	4a76      	ldr	r2, [pc, #472]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003fb6:	f023 0301 	bic.w	r3, r3, #1
 8003fba:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbc:	4b74      	ldr	r3, [pc, #464]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc0:	4a73      	ldr	r2, [pc, #460]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003fc2:	f023 0304 	bic.w	r3, r3, #4
 8003fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc8:	e01c      	b.n	8004004 <HAL_RCC_OscConfig+0x5e0>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b05      	cmp	r3, #5
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCC_OscConfig+0x5c8>
 8003fd2:	4b6f      	ldr	r3, [pc, #444]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd6:	4a6e      	ldr	r2, [pc, #440]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003fd8:	f043 0304 	orr.w	r3, r3, #4
 8003fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fde:	4b6c      	ldr	r3, [pc, #432]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe2:	4a6b      	ldr	r2, [pc, #428]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fea:	e00b      	b.n	8004004 <HAL_RCC_OscConfig+0x5e0>
 8003fec:	4b68      	ldr	r3, [pc, #416]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	4a67      	ldr	r2, [pc, #412]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003ff2:	f023 0301 	bic.w	r3, r3, #1
 8003ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff8:	4b65      	ldr	r3, [pc, #404]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffc:	4a64      	ldr	r2, [pc, #400]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003ffe:	f023 0304 	bic.w	r3, r3, #4
 8004002:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d015      	beq.n	8004038 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400c:	f7fd f81e 	bl	800104c <HAL_GetTick>
 8004010:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004012:	e00a      	b.n	800402a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004014:	f7fd f81a 	bl	800104c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e14e      	b.n	80042c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800402a:	4b59      	ldr	r3, [pc, #356]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0ee      	beq.n	8004014 <HAL_RCC_OscConfig+0x5f0>
 8004036:	e014      	b.n	8004062 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004038:	f7fd f808 	bl	800104c <HAL_GetTick>
 800403c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800403e:	e00a      	b.n	8004056 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004040:	f7fd f804 	bl	800104c <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	; 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e138      	b.n	80042c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004056:	4b4e      	ldr	r3, [pc, #312]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1ee      	bne.n	8004040 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 812d 	beq.w	80042c6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800406c:	4b48      	ldr	r3, [pc, #288]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004074:	2b18      	cmp	r3, #24
 8004076:	f000 80bd 	beq.w	80041f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	2b02      	cmp	r3, #2
 8004080:	f040 809e 	bne.w	80041c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004084:	4b42      	ldr	r3, [pc, #264]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a41      	ldr	r2, [pc, #260]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 800408a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800408e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7fc ffdc 	bl	800104c <HAL_GetTick>
 8004094:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004098:	f7fc ffd8 	bl	800104c <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e10e      	b.n	80042c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040aa:	4b39      	ldr	r3, [pc, #228]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040b6:	4b36      	ldr	r3, [pc, #216]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 80040b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ba:	4b37      	ldr	r3, [pc, #220]	; (8004198 <HAL_RCC_OscConfig+0x774>)
 80040bc:	4013      	ands	r3, r2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80040c6:	0112      	lsls	r2, r2, #4
 80040c8:	430a      	orrs	r2, r1
 80040ca:	4931      	ldr	r1, [pc, #196]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	628b      	str	r3, [r1, #40]	; 0x28
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	3b01      	subs	r3, #1
 80040d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040de:	3b01      	subs	r3, #1
 80040e0:	025b      	lsls	r3, r3, #9
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	3b01      	subs	r3, #1
 80040ec:	041b      	lsls	r3, r3, #16
 80040ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f8:	3b01      	subs	r3, #1
 80040fa:	061b      	lsls	r3, r3, #24
 80040fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004100:	4923      	ldr	r1, [pc, #140]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004102:	4313      	orrs	r3, r2
 8004104:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004106:	4b22      	ldr	r3, [pc, #136]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	4a21      	ldr	r2, [pc, #132]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004112:	4b1f      	ldr	r3, [pc, #124]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004116:	4b21      	ldr	r3, [pc, #132]	; (800419c <HAL_RCC_OscConfig+0x778>)
 8004118:	4013      	ands	r3, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800411e:	00d2      	lsls	r2, r2, #3
 8004120:	491b      	ldr	r1, [pc, #108]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004122:	4313      	orrs	r3, r2
 8004124:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004126:	4b1a      	ldr	r3, [pc, #104]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412a:	f023 020c 	bic.w	r2, r3, #12
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	4917      	ldr	r1, [pc, #92]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004134:	4313      	orrs	r3, r2
 8004136:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004138:	4b15      	ldr	r3, [pc, #84]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	f023 0202 	bic.w	r2, r3, #2
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004144:	4912      	ldr	r1, [pc, #72]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004146:	4313      	orrs	r3, r2
 8004148:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800414a:	4b11      	ldr	r3, [pc, #68]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	4a10      	ldr	r2, [pc, #64]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004154:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004156:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	4a0d      	ldr	r2, [pc, #52]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 800415c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004160:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004162:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	4a0a      	ldr	r2, [pc, #40]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800416c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800416e:	4b08      	ldr	r3, [pc, #32]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004172:	4a07      	ldr	r2, [pc, #28]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a04      	ldr	r2, [pc, #16]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004180:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004186:	f7fc ff61 	bl	800104c <HAL_GetTick>
 800418a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800418c:	e011      	b.n	80041b2 <HAL_RCC_OscConfig+0x78e>
 800418e:	bf00      	nop
 8004190:	58024400 	.word	0x58024400
 8004194:	58024800 	.word	0x58024800
 8004198:	fffffc0c 	.word	0xfffffc0c
 800419c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a0:	f7fc ff54 	bl	800104c <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e08a      	b.n	80042c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041b2:	4b47      	ldr	r3, [pc, #284]	; (80042d0 <HAL_RCC_OscConfig+0x8ac>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0f0      	beq.n	80041a0 <HAL_RCC_OscConfig+0x77c>
 80041be:	e082      	b.n	80042c6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c0:	4b43      	ldr	r3, [pc, #268]	; (80042d0 <HAL_RCC_OscConfig+0x8ac>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a42      	ldr	r2, [pc, #264]	; (80042d0 <HAL_RCC_OscConfig+0x8ac>)
 80041c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7fc ff3e 	bl	800104c <HAL_GetTick>
 80041d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d4:	f7fc ff3a 	bl	800104c <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e070      	b.n	80042c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041e6:	4b3a      	ldr	r3, [pc, #232]	; (80042d0 <HAL_RCC_OscConfig+0x8ac>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x7b0>
 80041f2:	e068      	b.n	80042c6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80041f4:	4b36      	ldr	r3, [pc, #216]	; (80042d0 <HAL_RCC_OscConfig+0x8ac>)
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80041fa:	4b35      	ldr	r3, [pc, #212]	; (80042d0 <HAL_RCC_OscConfig+0x8ac>)
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	2b01      	cmp	r3, #1
 8004206:	d031      	beq.n	800426c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f003 0203 	and.w	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004212:	429a      	cmp	r2, r3
 8004214:	d12a      	bne.n	800426c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004222:	429a      	cmp	r2, r3
 8004224:	d122      	bne.n	800426c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004232:	429a      	cmp	r2, r3
 8004234:	d11a      	bne.n	800426c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	0a5b      	lsrs	r3, r3, #9
 800423a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004242:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004244:	429a      	cmp	r2, r3
 8004246:	d111      	bne.n	800426c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	0c1b      	lsrs	r3, r3, #16
 800424c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004256:	429a      	cmp	r2, r3
 8004258:	d108      	bne.n	800426c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	0e1b      	lsrs	r3, r3, #24
 800425e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004266:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e02b      	b.n	80042c8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004270:	4b17      	ldr	r3, [pc, #92]	; (80042d0 <HAL_RCC_OscConfig+0x8ac>)
 8004272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004274:	08db      	lsrs	r3, r3, #3
 8004276:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800427a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	429a      	cmp	r2, r3
 8004284:	d01f      	beq.n	80042c6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004286:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <HAL_RCC_OscConfig+0x8ac>)
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	4a11      	ldr	r2, [pc, #68]	; (80042d0 <HAL_RCC_OscConfig+0x8ac>)
 800428c:	f023 0301 	bic.w	r3, r3, #1
 8004290:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004292:	f7fc fedb 	bl	800104c <HAL_GetTick>
 8004296:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004298:	bf00      	nop
 800429a:	f7fc fed7 	bl	800104c <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d0f9      	beq.n	800429a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042a6:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <HAL_RCC_OscConfig+0x8ac>)
 80042a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042aa:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <HAL_RCC_OscConfig+0x8b0>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80042b2:	00d2      	lsls	r2, r2, #3
 80042b4:	4906      	ldr	r1, [pc, #24]	; (80042d0 <HAL_RCC_OscConfig+0x8ac>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80042ba:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <HAL_RCC_OscConfig+0x8ac>)
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	4a04      	ldr	r2, [pc, #16]	; (80042d0 <HAL_RCC_OscConfig+0x8ac>)
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3730      	adds	r7, #48	; 0x30
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	58024400 	.word	0x58024400
 80042d4:	ffff0007 	.word	0xffff0007

080042d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e19c      	b.n	8004626 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042ec:	4b8a      	ldr	r3, [pc, #552]	; (8004518 <HAL_RCC_ClockConfig+0x240>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d910      	bls.n	800431c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fa:	4b87      	ldr	r3, [pc, #540]	; (8004518 <HAL_RCC_ClockConfig+0x240>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f023 020f 	bic.w	r2, r3, #15
 8004302:	4985      	ldr	r1, [pc, #532]	; (8004518 <HAL_RCC_ClockConfig+0x240>)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	4313      	orrs	r3, r2
 8004308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800430a:	4b83      	ldr	r3, [pc, #524]	; (8004518 <HAL_RCC_ClockConfig+0x240>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d001      	beq.n	800431c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e184      	b.n	8004626 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d010      	beq.n	800434a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	4b7b      	ldr	r3, [pc, #492]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004334:	429a      	cmp	r2, r3
 8004336:	d908      	bls.n	800434a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004338:	4b78      	ldr	r3, [pc, #480]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	4975      	ldr	r1, [pc, #468]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 8004346:	4313      	orrs	r3, r2
 8004348:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d010      	beq.n	8004378 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	4b70      	ldr	r3, [pc, #448]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004362:	429a      	cmp	r2, r3
 8004364:	d908      	bls.n	8004378 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004366:	4b6d      	ldr	r3, [pc, #436]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	496a      	ldr	r1, [pc, #424]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 8004374:	4313      	orrs	r3, r2
 8004376:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	d010      	beq.n	80043a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699a      	ldr	r2, [r3, #24]
 8004388:	4b64      	ldr	r3, [pc, #400]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004390:	429a      	cmp	r2, r3
 8004392:	d908      	bls.n	80043a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004394:	4b61      	ldr	r3, [pc, #388]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	495e      	ldr	r1, [pc, #376]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d010      	beq.n	80043d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69da      	ldr	r2, [r3, #28]
 80043b6:	4b59      	ldr	r3, [pc, #356]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043be:	429a      	cmp	r2, r3
 80043c0:	d908      	bls.n	80043d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80043c2:	4b56      	ldr	r3, [pc, #344]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	4953      	ldr	r1, [pc, #332]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d010      	beq.n	8004402 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	4b4d      	ldr	r3, [pc, #308]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d908      	bls.n	8004402 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043f0:	4b4a      	ldr	r3, [pc, #296]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	f023 020f 	bic.w	r2, r3, #15
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4947      	ldr	r1, [pc, #284]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d055      	beq.n	80044ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800440e:	4b43      	ldr	r3, [pc, #268]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	4940      	ldr	r1, [pc, #256]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 800441c:	4313      	orrs	r3, r2
 800441e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b02      	cmp	r3, #2
 8004426:	d107      	bne.n	8004438 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004428:	4b3c      	ldr	r3, [pc, #240]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d121      	bne.n	8004478 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e0f6      	b.n	8004626 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b03      	cmp	r3, #3
 800443e:	d107      	bne.n	8004450 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004440:	4b36      	ldr	r3, [pc, #216]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d115      	bne.n	8004478 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0ea      	b.n	8004626 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d107      	bne.n	8004468 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004458:	4b30      	ldr	r3, [pc, #192]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004460:	2b00      	cmp	r3, #0
 8004462:	d109      	bne.n	8004478 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0de      	b.n	8004626 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004468:	4b2c      	ldr	r3, [pc, #176]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e0d6      	b.n	8004626 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004478:	4b28      	ldr	r3, [pc, #160]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f023 0207 	bic.w	r2, r3, #7
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	4925      	ldr	r1, [pc, #148]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 8004486:	4313      	orrs	r3, r2
 8004488:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800448a:	f7fc fddf 	bl	800104c <HAL_GetTick>
 800448e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004490:	e00a      	b.n	80044a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004492:	f7fc fddb 	bl	800104c <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e0be      	b.n	8004626 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a8:	4b1c      	ldr	r3, [pc, #112]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d1eb      	bne.n	8004492 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d010      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	4b14      	ldr	r3, [pc, #80]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d208      	bcs.n	80044e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d6:	4b11      	ldr	r3, [pc, #68]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	f023 020f 	bic.w	r2, r3, #15
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	490e      	ldr	r1, [pc, #56]	; (800451c <HAL_RCC_ClockConfig+0x244>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <HAL_RCC_ClockConfig+0x240>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d214      	bcs.n	8004520 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f6:	4b08      	ldr	r3, [pc, #32]	; (8004518 <HAL_RCC_ClockConfig+0x240>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f023 020f 	bic.w	r2, r3, #15
 80044fe:	4906      	ldr	r1, [pc, #24]	; (8004518 <HAL_RCC_ClockConfig+0x240>)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	4313      	orrs	r3, r2
 8004504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b04      	ldr	r3, [pc, #16]	; (8004518 <HAL_RCC_ClockConfig+0x240>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d005      	beq.n	8004520 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e086      	b.n	8004626 <HAL_RCC_ClockConfig+0x34e>
 8004518:	52002000 	.word	0x52002000
 800451c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	d010      	beq.n	800454e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	4b3f      	ldr	r3, [pc, #252]	; (8004630 <HAL_RCC_ClockConfig+0x358>)
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004538:	429a      	cmp	r2, r3
 800453a:	d208      	bcs.n	800454e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800453c:	4b3c      	ldr	r3, [pc, #240]	; (8004630 <HAL_RCC_ClockConfig+0x358>)
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	4939      	ldr	r1, [pc, #228]	; (8004630 <HAL_RCC_ClockConfig+0x358>)
 800454a:	4313      	orrs	r3, r2
 800454c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d010      	beq.n	800457c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695a      	ldr	r2, [r3, #20]
 800455e:	4b34      	ldr	r3, [pc, #208]	; (8004630 <HAL_RCC_ClockConfig+0x358>)
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004566:	429a      	cmp	r2, r3
 8004568:	d208      	bcs.n	800457c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800456a:	4b31      	ldr	r3, [pc, #196]	; (8004630 <HAL_RCC_ClockConfig+0x358>)
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	492e      	ldr	r1, [pc, #184]	; (8004630 <HAL_RCC_ClockConfig+0x358>)
 8004578:	4313      	orrs	r3, r2
 800457a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b00      	cmp	r3, #0
 8004586:	d010      	beq.n	80045aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699a      	ldr	r2, [r3, #24]
 800458c:	4b28      	ldr	r3, [pc, #160]	; (8004630 <HAL_RCC_ClockConfig+0x358>)
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004594:	429a      	cmp	r2, r3
 8004596:	d208      	bcs.n	80045aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004598:	4b25      	ldr	r3, [pc, #148]	; (8004630 <HAL_RCC_ClockConfig+0x358>)
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	4922      	ldr	r1, [pc, #136]	; (8004630 <HAL_RCC_ClockConfig+0x358>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d010      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69da      	ldr	r2, [r3, #28]
 80045ba:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <HAL_RCC_ClockConfig+0x358>)
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d208      	bcs.n	80045d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80045c6:	4b1a      	ldr	r3, [pc, #104]	; (8004630 <HAL_RCC_ClockConfig+0x358>)
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	4917      	ldr	r1, [pc, #92]	; (8004630 <HAL_RCC_ClockConfig+0x358>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80045d8:	f000 f834 	bl	8004644 <HAL_RCC_GetSysClockFreq>
 80045dc:	4602      	mov	r2, r0
 80045de:	4b14      	ldr	r3, [pc, #80]	; (8004630 <HAL_RCC_ClockConfig+0x358>)
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	0a1b      	lsrs	r3, r3, #8
 80045e4:	f003 030f 	and.w	r3, r3, #15
 80045e8:	4912      	ldr	r1, [pc, #72]	; (8004634 <HAL_RCC_ClockConfig+0x35c>)
 80045ea:	5ccb      	ldrb	r3, [r1, r3]
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	fa22 f303 	lsr.w	r3, r2, r3
 80045f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045f6:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <HAL_RCC_ClockConfig+0x358>)
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	4a0d      	ldr	r2, [pc, #52]	; (8004634 <HAL_RCC_ClockConfig+0x35c>)
 8004600:	5cd3      	ldrb	r3, [r2, r3]
 8004602:	f003 031f 	and.w	r3, r3, #31
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	fa22 f303 	lsr.w	r3, r2, r3
 800460c:	4a0a      	ldr	r2, [pc, #40]	; (8004638 <HAL_RCC_ClockConfig+0x360>)
 800460e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004610:	4a0a      	ldr	r2, [pc, #40]	; (800463c <HAL_RCC_ClockConfig+0x364>)
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004616:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <HAL_RCC_ClockConfig+0x368>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f7fc fccc 	bl	8000fb8 <HAL_InitTick>
 8004620:	4603      	mov	r3, r0
 8004622:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004624:	7bfb      	ldrb	r3, [r7, #15]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	58024400 	.word	0x58024400
 8004634:	08008960 	.word	0x08008960
 8004638:	24000004 	.word	0x24000004
 800463c:	24000000 	.word	0x24000000
 8004640:	240668a8 	.word	0x240668a8

08004644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004644:	b480      	push	{r7}
 8004646:	b089      	sub	sp, #36	; 0x24
 8004648:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800464a:	4bb3      	ldr	r3, [pc, #716]	; (8004918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004652:	2b18      	cmp	r3, #24
 8004654:	f200 8155 	bhi.w	8004902 <HAL_RCC_GetSysClockFreq+0x2be>
 8004658:	a201      	add	r2, pc, #4	; (adr r2, 8004660 <HAL_RCC_GetSysClockFreq+0x1c>)
 800465a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465e:	bf00      	nop
 8004660:	080046c5 	.word	0x080046c5
 8004664:	08004903 	.word	0x08004903
 8004668:	08004903 	.word	0x08004903
 800466c:	08004903 	.word	0x08004903
 8004670:	08004903 	.word	0x08004903
 8004674:	08004903 	.word	0x08004903
 8004678:	08004903 	.word	0x08004903
 800467c:	08004903 	.word	0x08004903
 8004680:	080046eb 	.word	0x080046eb
 8004684:	08004903 	.word	0x08004903
 8004688:	08004903 	.word	0x08004903
 800468c:	08004903 	.word	0x08004903
 8004690:	08004903 	.word	0x08004903
 8004694:	08004903 	.word	0x08004903
 8004698:	08004903 	.word	0x08004903
 800469c:	08004903 	.word	0x08004903
 80046a0:	080046f1 	.word	0x080046f1
 80046a4:	08004903 	.word	0x08004903
 80046a8:	08004903 	.word	0x08004903
 80046ac:	08004903 	.word	0x08004903
 80046b0:	08004903 	.word	0x08004903
 80046b4:	08004903 	.word	0x08004903
 80046b8:	08004903 	.word	0x08004903
 80046bc:	08004903 	.word	0x08004903
 80046c0:	080046f7 	.word	0x080046f7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046c4:	4b94      	ldr	r3, [pc, #592]	; (8004918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d009      	beq.n	80046e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046d0:	4b91      	ldr	r3, [pc, #580]	; (8004918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	08db      	lsrs	r3, r3, #3
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	4a90      	ldr	r2, [pc, #576]	; (800491c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046dc:	fa22 f303 	lsr.w	r3, r2, r3
 80046e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80046e2:	e111      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80046e4:	4b8d      	ldr	r3, [pc, #564]	; (800491c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046e6:	61bb      	str	r3, [r7, #24]
      break;
 80046e8:	e10e      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80046ea:	4b8d      	ldr	r3, [pc, #564]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046ec:	61bb      	str	r3, [r7, #24]
      break;
 80046ee:	e10b      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80046f0:	4b8c      	ldr	r3, [pc, #560]	; (8004924 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80046f2:	61bb      	str	r3, [r7, #24]
      break;
 80046f4:	e108      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046f6:	4b88      	ldr	r3, [pc, #544]	; (8004918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004700:	4b85      	ldr	r3, [pc, #532]	; (8004918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004704:	091b      	lsrs	r3, r3, #4
 8004706:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800470a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800470c:	4b82      	ldr	r3, [pc, #520]	; (8004918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004716:	4b80      	ldr	r3, [pc, #512]	; (8004918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471a:	08db      	lsrs	r3, r3, #3
 800471c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	fb02 f303 	mul.w	r3, r2, r3
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 80e1 	beq.w	80048fc <HAL_RCC_GetSysClockFreq+0x2b8>
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2b02      	cmp	r3, #2
 800473e:	f000 8083 	beq.w	8004848 <HAL_RCC_GetSysClockFreq+0x204>
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2b02      	cmp	r3, #2
 8004746:	f200 80a1 	bhi.w	800488c <HAL_RCC_GetSysClockFreq+0x248>
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <HAL_RCC_GetSysClockFreq+0x114>
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d056      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004756:	e099      	b.n	800488c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004758:	4b6f      	ldr	r3, [pc, #444]	; (8004918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b00      	cmp	r3, #0
 8004762:	d02d      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004764:	4b6c      	ldr	r3, [pc, #432]	; (8004918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	08db      	lsrs	r3, r3, #3
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	4a6b      	ldr	r2, [pc, #428]	; (800491c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004770:	fa22 f303 	lsr.w	r3, r2, r3
 8004774:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	ee07 3a90 	vmov	s15, r3
 800477c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800478e:	4b62      	ldr	r3, [pc, #392]	; (8004918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800479e:	ed97 6a02 	vldr	s12, [r7, #8]
 80047a2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004928 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80047be:	e087      	b.n	80048d0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ca:	eddf 6a58 	vldr	s13, [pc, #352]	; 800492c <HAL_RCC_GetSysClockFreq+0x2e8>
 80047ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047d2:	4b51      	ldr	r3, [pc, #324]	; (8004918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80047e6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004928 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004802:	e065      	b.n	80048d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004930 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004816:	4b40      	ldr	r3, [pc, #256]	; (8004918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004826:	ed97 6a02 	vldr	s12, [r7, #8]
 800482a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004928 <HAL_RCC_GetSysClockFreq+0x2e4>
 800482e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800483a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800483e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004842:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004846:	e043      	b.n	80048d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	ee07 3a90 	vmov	s15, r3
 800484e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004852:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004934 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485a:	4b2f      	ldr	r3, [pc, #188]	; (8004918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486a:	ed97 6a02 	vldr	s12, [r7, #8]
 800486e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004928 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800487e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004886:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800488a:	e021      	b.n	80048d0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	ee07 3a90 	vmov	s15, r3
 8004892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004896:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004930 <HAL_RCC_GetSysClockFreq+0x2ec>
 800489a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800489e:	4b1e      	ldr	r3, [pc, #120]	; (8004918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80048b2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004928 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80048ce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80048d0:	4b11      	ldr	r3, [pc, #68]	; (8004918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	0a5b      	lsrs	r3, r3, #9
 80048d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048da:	3301      	adds	r3, #1
 80048dc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	ee07 3a90 	vmov	s15, r3
 80048e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80048ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048f4:	ee17 3a90 	vmov	r3, s15
 80048f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80048fa:	e005      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	61bb      	str	r3, [r7, #24]
      break;
 8004900:	e002      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004902:	4b07      	ldr	r3, [pc, #28]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004904:	61bb      	str	r3, [r7, #24]
      break;
 8004906:	bf00      	nop
  }

  return sysclockfreq;
 8004908:	69bb      	ldr	r3, [r7, #24]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3724      	adds	r7, #36	; 0x24
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	58024400 	.word	0x58024400
 800491c:	03d09000 	.word	0x03d09000
 8004920:	003d0900 	.word	0x003d0900
 8004924:	007a1200 	.word	0x007a1200
 8004928:	46000000 	.word	0x46000000
 800492c:	4c742400 	.word	0x4c742400
 8004930:	4a742400 	.word	0x4a742400
 8004934:	4af42400 	.word	0x4af42400

08004938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800493e:	f7ff fe81 	bl	8004644 <HAL_RCC_GetSysClockFreq>
 8004942:	4602      	mov	r2, r0
 8004944:	4b10      	ldr	r3, [pc, #64]	; (8004988 <HAL_RCC_GetHCLKFreq+0x50>)
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	0a1b      	lsrs	r3, r3, #8
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	490f      	ldr	r1, [pc, #60]	; (800498c <HAL_RCC_GetHCLKFreq+0x54>)
 8004950:	5ccb      	ldrb	r3, [r1, r3]
 8004952:	f003 031f 	and.w	r3, r3, #31
 8004956:	fa22 f303 	lsr.w	r3, r2, r3
 800495a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <HAL_RCC_GetHCLKFreq+0x50>)
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	4a09      	ldr	r2, [pc, #36]	; (800498c <HAL_RCC_GetHCLKFreq+0x54>)
 8004966:	5cd3      	ldrb	r3, [r2, r3]
 8004968:	f003 031f 	and.w	r3, r3, #31
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	fa22 f303 	lsr.w	r3, r2, r3
 8004972:	4a07      	ldr	r2, [pc, #28]	; (8004990 <HAL_RCC_GetHCLKFreq+0x58>)
 8004974:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004976:	4a07      	ldr	r2, [pc, #28]	; (8004994 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800497c:	4b04      	ldr	r3, [pc, #16]	; (8004990 <HAL_RCC_GetHCLKFreq+0x58>)
 800497e:	681b      	ldr	r3, [r3, #0]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	58024400 	.word	0x58024400
 800498c:	08008960 	.word	0x08008960
 8004990:	24000004 	.word	0x24000004
 8004994:	24000000 	.word	0x24000000

08004998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800499c:	f7ff ffcc 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 80049a0:	4602      	mov	r2, r0
 80049a2:	4b06      	ldr	r3, [pc, #24]	; (80049bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	091b      	lsrs	r3, r3, #4
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	4904      	ldr	r1, [pc, #16]	; (80049c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049ae:	5ccb      	ldrb	r3, [r1, r3]
 80049b0:	f003 031f 	and.w	r3, r3, #31
 80049b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	58024400 	.word	0x58024400
 80049c0:	08008960 	.word	0x08008960

080049c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80049c8:	f7ff ffb6 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 80049cc:	4602      	mov	r2, r0
 80049ce:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	0a1b      	lsrs	r3, r3, #8
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	4904      	ldr	r1, [pc, #16]	; (80049ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80049da:	5ccb      	ldrb	r3, [r1, r3]
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	58024400 	.word	0x58024400
 80049ec:	08008960 	.word	0x08008960

080049f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049f4:	b0ca      	sub	sp, #296	; 0x128
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049fc:	2300      	movs	r3, #0
 80049fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a02:	2300      	movs	r3, #0
 8004a04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004a14:	2500      	movs	r5, #0
 8004a16:	ea54 0305 	orrs.w	r3, r4, r5
 8004a1a:	d049      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a26:	d02f      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004a28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a2c:	d828      	bhi.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a32:	d01a      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a38:	d822      	bhi.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a42:	d007      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a44:	e01c      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a46:	4bb8      	ldr	r3, [pc, #736]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	4ab7      	ldr	r2, [pc, #732]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a52:	e01a      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a58:	3308      	adds	r3, #8
 8004a5a:	2102      	movs	r1, #2
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f001 fc8f 	bl	8006380 <RCCEx_PLL2_Config>
 8004a62:	4603      	mov	r3, r0
 8004a64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a68:	e00f      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a6e:	3328      	adds	r3, #40	; 0x28
 8004a70:	2102      	movs	r1, #2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f001 fd36 	bl	80064e4 <RCCEx_PLL3_Config>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a7e:	e004      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a86:	e000      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10a      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004a92:	4ba5      	ldr	r3, [pc, #660]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a96:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aa0:	4aa1      	ldr	r2, [pc, #644]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	6513      	str	r3, [r2, #80]	; 0x50
 8004aa6:	e003      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004abc:	f04f 0900 	mov.w	r9, #0
 8004ac0:	ea58 0309 	orrs.w	r3, r8, r9
 8004ac4:	d047      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d82a      	bhi.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004ad0:	a201      	add	r2, pc, #4	; (adr r2, 8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad6:	bf00      	nop
 8004ad8:	08004aed 	.word	0x08004aed
 8004adc:	08004afb 	.word	0x08004afb
 8004ae0:	08004b11 	.word	0x08004b11
 8004ae4:	08004b2f 	.word	0x08004b2f
 8004ae8:	08004b2f 	.word	0x08004b2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aec:	4b8e      	ldr	r3, [pc, #568]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	4a8d      	ldr	r2, [pc, #564]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004af6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004af8:	e01a      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004afe:	3308      	adds	r3, #8
 8004b00:	2100      	movs	r1, #0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f001 fc3c 	bl	8006380 <RCCEx_PLL2_Config>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b0e:	e00f      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b14:	3328      	adds	r3, #40	; 0x28
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f001 fce3 	bl	80064e4 <RCCEx_PLL3_Config>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b24:	e004      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b2c:	e000      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10a      	bne.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b38:	4b7b      	ldr	r3, [pc, #492]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3c:	f023 0107 	bic.w	r1, r3, #7
 8004b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b46:	4a78      	ldr	r2, [pc, #480]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	6513      	str	r3, [r2, #80]	; 0x50
 8004b4c:	e003      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004b62:	f04f 0b00 	mov.w	fp, #0
 8004b66:	ea5a 030b 	orrs.w	r3, sl, fp
 8004b6a:	d04c      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b76:	d030      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7c:	d829      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004b7e:	2bc0      	cmp	r3, #192	; 0xc0
 8004b80:	d02d      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004b82:	2bc0      	cmp	r3, #192	; 0xc0
 8004b84:	d825      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004b86:	2b80      	cmp	r3, #128	; 0x80
 8004b88:	d018      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004b8a:	2b80      	cmp	r3, #128	; 0x80
 8004b8c:	d821      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004b92:	2b40      	cmp	r3, #64	; 0x40
 8004b94:	d007      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004b96:	e01c      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b98:	4b63      	ldr	r3, [pc, #396]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	4a62      	ldr	r2, [pc, #392]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ba2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004ba4:	e01c      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004baa:	3308      	adds	r3, #8
 8004bac:	2100      	movs	r1, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f001 fbe6 	bl	8006380 <RCCEx_PLL2_Config>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004bba:	e011      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc0:	3328      	adds	r3, #40	; 0x28
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f001 fc8d 	bl	80064e4 <RCCEx_PLL3_Config>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004bd0:	e006      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bd8:	e002      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004bda:	bf00      	nop
 8004bdc:	e000      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004bde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10a      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004be8:	4b4f      	ldr	r3, [pc, #316]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bec:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf6:	4a4c      	ldr	r2, [pc, #304]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	6513      	str	r3, [r2, #80]	; 0x50
 8004bfc:	e003      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004c12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004c16:	2300      	movs	r3, #0
 8004c18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004c1c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004c20:	460b      	mov	r3, r1
 8004c22:	4313      	orrs	r3, r2
 8004c24:	d053      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c32:	d035      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004c34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c38:	d82e      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c3e:	d031      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004c40:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c44:	d828      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c4a:	d01a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004c4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c50:	d822      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004c56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c5a:	d007      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004c5c:	e01c      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c5e:	4b32      	ldr	r3, [pc, #200]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	4a31      	ldr	r2, [pc, #196]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c6a:	e01c      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c70:	3308      	adds	r3, #8
 8004c72:	2100      	movs	r1, #0
 8004c74:	4618      	mov	r0, r3
 8004c76:	f001 fb83 	bl	8006380 <RCCEx_PLL2_Config>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004c80:	e011      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c86:	3328      	adds	r3, #40	; 0x28
 8004c88:	2100      	movs	r1, #0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f001 fc2a 	bl	80064e4 <RCCEx_PLL3_Config>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c96:	e006      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c9e:	e002      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004ca0:	bf00      	nop
 8004ca2:	e000      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10b      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004cae:	4b1e      	ldr	r3, [pc, #120]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cbe:	4a1a      	ldr	r2, [pc, #104]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8004cc4:	e003      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004cda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ce4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4313      	orrs	r3, r2
 8004cec:	d056      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cf2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004cf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cfa:	d038      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004cfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d00:	d831      	bhi.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d06:	d034      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004d08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d0c:	d82b      	bhi.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d12:	d01d      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004d14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d18:	d825      	bhi.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d006      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004d1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d22:	d00a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d24:	e01f      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d26:	bf00      	nop
 8004d28:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d2c:	4ba2      	ldr	r3, [pc, #648]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	4aa1      	ldr	r2, [pc, #644]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d38:	e01c      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d3e:	3308      	adds	r3, #8
 8004d40:	2100      	movs	r1, #0
 8004d42:	4618      	mov	r0, r3
 8004d44:	f001 fb1c 	bl	8006380 <RCCEx_PLL2_Config>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004d4e:	e011      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d54:	3328      	adds	r3, #40	; 0x28
 8004d56:	2100      	movs	r1, #0
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f001 fbc3 	bl	80064e4 <RCCEx_PLL3_Config>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d64:	e006      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d6c:	e002      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004d6e:	bf00      	nop
 8004d70:	e000      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10b      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004d7c:	4b8e      	ldr	r3, [pc, #568]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d80:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d8c:	4a8a      	ldr	r2, [pc, #552]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d8e:	430b      	orrs	r3, r1
 8004d90:	6593      	str	r3, [r2, #88]	; 0x58
 8004d92:	e003      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004da8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004dac:	2300      	movs	r3, #0
 8004dae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004db2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004db6:	460b      	mov	r3, r1
 8004db8:	4313      	orrs	r3, r2
 8004dba:	d03a      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc2:	2b30      	cmp	r3, #48	; 0x30
 8004dc4:	d01f      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004dc6:	2b30      	cmp	r3, #48	; 0x30
 8004dc8:	d819      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	d00c      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004dce:	2b20      	cmp	r3, #32
 8004dd0:	d815      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d019      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004dd6:	2b10      	cmp	r3, #16
 8004dd8:	d111      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dda:	4b77      	ldr	r3, [pc, #476]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dde:	4a76      	ldr	r2, [pc, #472]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004de4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004de6:	e011      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dec:	3308      	adds	r3, #8
 8004dee:	2102      	movs	r1, #2
 8004df0:	4618      	mov	r0, r3
 8004df2:	f001 fac5 	bl	8006380 <RCCEx_PLL2_Config>
 8004df6:	4603      	mov	r3, r0
 8004df8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004dfc:	e006      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e04:	e002      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004e06:	bf00      	nop
 8004e08:	e000      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004e0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004e14:	4b68      	ldr	r3, [pc, #416]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e18:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e22:	4a65      	ldr	r2, [pc, #404]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e24:	430b      	orrs	r3, r1
 8004e26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e28:	e003      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004e3e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004e42:	2300      	movs	r3, #0
 8004e44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e48:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	d051      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e5c:	d035      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004e5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e62:	d82e      	bhi.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004e64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e68:	d031      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004e6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e6e:	d828      	bhi.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e74:	d01a      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e7a:	d822      	bhi.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e84:	d007      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004e86:	e01c      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e88:	4b4b      	ldr	r3, [pc, #300]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	4a4a      	ldr	r2, [pc, #296]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e94:	e01c      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f001 fa6e 	bl	8006380 <RCCEx_PLL2_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004eaa:	e011      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb0:	3328      	adds	r3, #40	; 0x28
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f001 fb15 	bl	80064e4 <RCCEx_PLL3_Config>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ec0:	e006      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ec8:	e002      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004eca:	bf00      	nop
 8004ecc:	e000      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10a      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004ed8:	4b37      	ldr	r3, [pc, #220]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004edc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee6:	4a34      	ldr	r2, [pc, #208]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	6513      	str	r3, [r2, #80]	; 0x50
 8004eec:	e003      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ef2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004f02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f06:	2300      	movs	r3, #0
 8004f08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004f10:	460b      	mov	r3, r1
 8004f12:	4313      	orrs	r3, r2
 8004f14:	d056      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f20:	d033      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004f22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f26:	d82c      	bhi.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f2c:	d02f      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004f2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f32:	d826      	bhi.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f38:	d02b      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004f3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f3e:	d820      	bhi.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f44:	d012      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004f46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f4a:	d81a      	bhi.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d022      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f54:	d115      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f001 fa0e 	bl	8006380 <RCCEx_PLL2_Config>
 8004f64:	4603      	mov	r3, r0
 8004f66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004f6a:	e015      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f70:	3328      	adds	r3, #40	; 0x28
 8004f72:	2101      	movs	r1, #1
 8004f74:	4618      	mov	r0, r3
 8004f76:	f001 fab5 	bl	80064e4 <RCCEx_PLL3_Config>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004f80:	e00a      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f88:	e006      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004f8a:	bf00      	nop
 8004f8c:	e004      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004f8e:	bf00      	nop
 8004f90:	e002      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004f92:	bf00      	nop
 8004f94:	e000      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004f96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10d      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004fa0:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fae:	4a02      	ldr	r2, [pc, #8]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fb0:	430b      	orrs	r3, r1
 8004fb2:	6513      	str	r3, [r2, #80]	; 0x50
 8004fb4:	e006      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004fb6:	bf00      	nop
 8004fb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fda:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	d055      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ff0:	d033      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ff6:	d82c      	bhi.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffc:	d02f      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005002:	d826      	bhi.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005004:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005008:	d02b      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800500a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800500e:	d820      	bhi.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005014:	d012      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800501a:	d81a      	bhi.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800501c:	2b00      	cmp	r3, #0
 800501e:	d022      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005020:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005024:	d115      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800502a:	3308      	adds	r3, #8
 800502c:	2101      	movs	r1, #1
 800502e:	4618      	mov	r0, r3
 8005030:	f001 f9a6 	bl	8006380 <RCCEx_PLL2_Config>
 8005034:	4603      	mov	r3, r0
 8005036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800503a:	e015      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800503c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005040:	3328      	adds	r3, #40	; 0x28
 8005042:	2101      	movs	r1, #1
 8005044:	4618      	mov	r0, r3
 8005046:	f001 fa4d 	bl	80064e4 <RCCEx_PLL3_Config>
 800504a:	4603      	mov	r3, r0
 800504c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005050:	e00a      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005058:	e006      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800505a:	bf00      	nop
 800505c:	e004      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800505e:	bf00      	nop
 8005060:	e002      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005062:	bf00      	nop
 8005064:	e000      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005066:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005068:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10b      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005070:	4ba3      	ldr	r3, [pc, #652]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005074:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800507c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005080:	4a9f      	ldr	r2, [pc, #636]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005082:	430b      	orrs	r3, r1
 8005084:	6593      	str	r3, [r2, #88]	; 0x58
 8005086:	e003      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005088:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800508c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800509c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80050a0:	2300      	movs	r3, #0
 80050a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80050a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80050aa:	460b      	mov	r3, r1
 80050ac:	4313      	orrs	r3, r2
 80050ae:	d037      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80050b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ba:	d00e      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80050bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050c0:	d816      	bhi.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d018      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80050c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050ca:	d111      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050cc:	4b8c      	ldr	r3, [pc, #560]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	4a8b      	ldr	r2, [pc, #556]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80050d8:	e00f      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050de:	3308      	adds	r3, #8
 80050e0:	2101      	movs	r1, #1
 80050e2:	4618      	mov	r0, r3
 80050e4:	f001 f94c 	bl	8006380 <RCCEx_PLL2_Config>
 80050e8:	4603      	mov	r3, r0
 80050ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80050ee:	e004      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050f6:	e000      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80050f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10a      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005102:	4b7f      	ldr	r3, [pc, #508]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005106:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800510a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800510e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005110:	4a7b      	ldr	r2, [pc, #492]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005112:	430b      	orrs	r3, r1
 8005114:	6513      	str	r3, [r2, #80]	; 0x50
 8005116:	e003      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005118:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800511c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005128:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800512c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005130:	2300      	movs	r3, #0
 8005132:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005136:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800513a:	460b      	mov	r3, r1
 800513c:	4313      	orrs	r3, r2
 800513e:	d039      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005146:	2b03      	cmp	r3, #3
 8005148:	d81c      	bhi.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800514a:	a201      	add	r2, pc, #4	; (adr r2, 8005150 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800514c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005150:	0800518d 	.word	0x0800518d
 8005154:	08005161 	.word	0x08005161
 8005158:	0800516f 	.word	0x0800516f
 800515c:	0800518d 	.word	0x0800518d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005160:	4b67      	ldr	r3, [pc, #412]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	4a66      	ldr	r2, [pc, #408]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800516a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800516c:	e00f      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800516e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005172:	3308      	adds	r3, #8
 8005174:	2102      	movs	r1, #2
 8005176:	4618      	mov	r0, r3
 8005178:	f001 f902 	bl	8006380 <RCCEx_PLL2_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005182:	e004      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800518a:	e000      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800518c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800518e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10a      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005196:	4b5a      	ldr	r3, [pc, #360]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519a:	f023 0103 	bic.w	r1, r3, #3
 800519e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a4:	4a56      	ldr	r2, [pc, #344]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051a6:	430b      	orrs	r3, r1
 80051a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051aa:	e003      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051bc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80051c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051c4:	2300      	movs	r3, #0
 80051c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051ca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80051ce:	460b      	mov	r3, r1
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f000 809f 	beq.w	8005314 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051d6:	4b4b      	ldr	r3, [pc, #300]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a4a      	ldr	r2, [pc, #296]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80051dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051e2:	f7fb ff33 	bl	800104c <HAL_GetTick>
 80051e6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051ea:	e00b      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ec:	f7fb ff2e 	bl	800104c <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b64      	cmp	r3, #100	; 0x64
 80051fa:	d903      	bls.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005202:	e005      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005204:	4b3f      	ldr	r3, [pc, #252]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0ed      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005210:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005214:	2b00      	cmp	r3, #0
 8005216:	d179      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005218:	4b39      	ldr	r3, [pc, #228]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800521a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005220:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005224:	4053      	eors	r3, r2
 8005226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800522a:	2b00      	cmp	r3, #0
 800522c:	d015      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800522e:	4b34      	ldr	r3, [pc, #208]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005236:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800523a:	4b31      	ldr	r3, [pc, #196]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800523c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523e:	4a30      	ldr	r2, [pc, #192]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005244:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005246:	4b2e      	ldr	r3, [pc, #184]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524a:	4a2d      	ldr	r2, [pc, #180]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800524c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005250:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005252:	4a2b      	ldr	r2, [pc, #172]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005254:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005258:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800525a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800525e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005266:	d118      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005268:	f7fb fef0 	bl	800104c <HAL_GetTick>
 800526c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005270:	e00d      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005272:	f7fb feeb 	bl	800104c <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800527c:	1ad2      	subs	r2, r2, r3
 800527e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005282:	429a      	cmp	r2, r3
 8005284:	d903      	bls.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800528c:	e005      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800528e:	4b1c      	ldr	r3, [pc, #112]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0eb      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800529a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d129      	bne.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80052aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052b2:	d10e      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80052b4:	4b12      	ldr	r3, [pc, #72]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80052bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80052c4:	091a      	lsrs	r2, r3, #4
 80052c6:	4b10      	ldr	r3, [pc, #64]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80052c8:	4013      	ands	r3, r2
 80052ca:	4a0d      	ldr	r2, [pc, #52]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052cc:	430b      	orrs	r3, r1
 80052ce:	6113      	str	r3, [r2, #16]
 80052d0:	e005      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80052d2:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	4a0a      	ldr	r2, [pc, #40]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80052dc:	6113      	str	r3, [r2, #16]
 80052de:	4b08      	ldr	r3, [pc, #32]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052e0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80052e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80052ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ee:	4a04      	ldr	r2, [pc, #16]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052f0:	430b      	orrs	r3, r1
 80052f2:	6713      	str	r3, [r2, #112]	; 0x70
 80052f4:	e00e      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80052fe:	e009      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005300:	58024400 	.word	0x58024400
 8005304:	58024800 	.word	0x58024800
 8005308:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005310:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	f002 0301 	and.w	r3, r2, #1
 8005320:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005324:	2300      	movs	r3, #0
 8005326:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800532a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800532e:	460b      	mov	r3, r1
 8005330:	4313      	orrs	r3, r2
 8005332:	f000 8089 	beq.w	8005448 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800533a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800533c:	2b28      	cmp	r3, #40	; 0x28
 800533e:	d86b      	bhi.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005340:	a201      	add	r2, pc, #4	; (adr r2, 8005348 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005346:	bf00      	nop
 8005348:	08005421 	.word	0x08005421
 800534c:	08005419 	.word	0x08005419
 8005350:	08005419 	.word	0x08005419
 8005354:	08005419 	.word	0x08005419
 8005358:	08005419 	.word	0x08005419
 800535c:	08005419 	.word	0x08005419
 8005360:	08005419 	.word	0x08005419
 8005364:	08005419 	.word	0x08005419
 8005368:	080053ed 	.word	0x080053ed
 800536c:	08005419 	.word	0x08005419
 8005370:	08005419 	.word	0x08005419
 8005374:	08005419 	.word	0x08005419
 8005378:	08005419 	.word	0x08005419
 800537c:	08005419 	.word	0x08005419
 8005380:	08005419 	.word	0x08005419
 8005384:	08005419 	.word	0x08005419
 8005388:	08005403 	.word	0x08005403
 800538c:	08005419 	.word	0x08005419
 8005390:	08005419 	.word	0x08005419
 8005394:	08005419 	.word	0x08005419
 8005398:	08005419 	.word	0x08005419
 800539c:	08005419 	.word	0x08005419
 80053a0:	08005419 	.word	0x08005419
 80053a4:	08005419 	.word	0x08005419
 80053a8:	08005421 	.word	0x08005421
 80053ac:	08005419 	.word	0x08005419
 80053b0:	08005419 	.word	0x08005419
 80053b4:	08005419 	.word	0x08005419
 80053b8:	08005419 	.word	0x08005419
 80053bc:	08005419 	.word	0x08005419
 80053c0:	08005419 	.word	0x08005419
 80053c4:	08005419 	.word	0x08005419
 80053c8:	08005421 	.word	0x08005421
 80053cc:	08005419 	.word	0x08005419
 80053d0:	08005419 	.word	0x08005419
 80053d4:	08005419 	.word	0x08005419
 80053d8:	08005419 	.word	0x08005419
 80053dc:	08005419 	.word	0x08005419
 80053e0:	08005419 	.word	0x08005419
 80053e4:	08005419 	.word	0x08005419
 80053e8:	08005421 	.word	0x08005421
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053f0:	3308      	adds	r3, #8
 80053f2:	2101      	movs	r1, #1
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 ffc3 	bl	8006380 <RCCEx_PLL2_Config>
 80053fa:	4603      	mov	r3, r0
 80053fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005400:	e00f      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005406:	3328      	adds	r3, #40	; 0x28
 8005408:	2101      	movs	r1, #1
 800540a:	4618      	mov	r0, r3
 800540c:	f001 f86a 	bl	80064e4 <RCCEx_PLL3_Config>
 8005410:	4603      	mov	r3, r0
 8005412:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005416:	e004      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800541e:	e000      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10a      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800542a:	4bbf      	ldr	r3, [pc, #764]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800542c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005436:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005438:	4abb      	ldr	r2, [pc, #748]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800543a:	430b      	orrs	r3, r1
 800543c:	6553      	str	r3, [r2, #84]	; 0x54
 800543e:	e003      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005444:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	f002 0302 	and.w	r3, r2, #2
 8005454:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005458:	2300      	movs	r3, #0
 800545a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800545e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005462:	460b      	mov	r3, r1
 8005464:	4313      	orrs	r3, r2
 8005466:	d041      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800546c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800546e:	2b05      	cmp	r3, #5
 8005470:	d824      	bhi.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005472:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005478:	080054c5 	.word	0x080054c5
 800547c:	08005491 	.word	0x08005491
 8005480:	080054a7 	.word	0x080054a7
 8005484:	080054c5 	.word	0x080054c5
 8005488:	080054c5 	.word	0x080054c5
 800548c:	080054c5 	.word	0x080054c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005494:	3308      	adds	r3, #8
 8005496:	2101      	movs	r1, #1
 8005498:	4618      	mov	r0, r3
 800549a:	f000 ff71 	bl	8006380 <RCCEx_PLL2_Config>
 800549e:	4603      	mov	r3, r0
 80054a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80054a4:	e00f      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054aa:	3328      	adds	r3, #40	; 0x28
 80054ac:	2101      	movs	r1, #1
 80054ae:	4618      	mov	r0, r3
 80054b0:	f001 f818 	bl	80064e4 <RCCEx_PLL3_Config>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80054ba:	e004      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054c2:	e000      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80054c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80054ce:	4b96      	ldr	r3, [pc, #600]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d2:	f023 0107 	bic.w	r1, r3, #7
 80054d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054dc:	4a92      	ldr	r2, [pc, #584]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054de:	430b      	orrs	r3, r1
 80054e0:	6553      	str	r3, [r2, #84]	; 0x54
 80054e2:	e003      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	f002 0304 	and.w	r3, r2, #4
 80054f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054fc:	2300      	movs	r3, #0
 80054fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005502:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005506:	460b      	mov	r3, r1
 8005508:	4313      	orrs	r3, r2
 800550a:	d044      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800550c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005514:	2b05      	cmp	r3, #5
 8005516:	d825      	bhi.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005518:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551e:	bf00      	nop
 8005520:	0800556d 	.word	0x0800556d
 8005524:	08005539 	.word	0x08005539
 8005528:	0800554f 	.word	0x0800554f
 800552c:	0800556d 	.word	0x0800556d
 8005530:	0800556d 	.word	0x0800556d
 8005534:	0800556d 	.word	0x0800556d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800553c:	3308      	adds	r3, #8
 800553e:	2101      	movs	r1, #1
 8005540:	4618      	mov	r0, r3
 8005542:	f000 ff1d 	bl	8006380 <RCCEx_PLL2_Config>
 8005546:	4603      	mov	r3, r0
 8005548:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800554c:	e00f      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800554e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005552:	3328      	adds	r3, #40	; 0x28
 8005554:	2101      	movs	r1, #1
 8005556:	4618      	mov	r0, r3
 8005558:	f000 ffc4 	bl	80064e4 <RCCEx_PLL3_Config>
 800555c:	4603      	mov	r3, r0
 800555e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005562:	e004      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800556a:	e000      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800556c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800556e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10b      	bne.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005576:	4b6c      	ldr	r3, [pc, #432]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800557a:	f023 0107 	bic.w	r1, r3, #7
 800557e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005586:	4a68      	ldr	r2, [pc, #416]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005588:	430b      	orrs	r3, r1
 800558a:	6593      	str	r3, [r2, #88]	; 0x58
 800558c:	e003      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005592:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	f002 0320 	and.w	r3, r2, #32
 80055a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055a6:	2300      	movs	r3, #0
 80055a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80055b0:	460b      	mov	r3, r1
 80055b2:	4313      	orrs	r3, r2
 80055b4:	d055      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80055b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055c2:	d033      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80055c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055c8:	d82c      	bhi.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80055ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ce:	d02f      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80055d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d4:	d826      	bhi.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80055d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055da:	d02b      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80055dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055e0:	d820      	bhi.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80055e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055e6:	d012      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80055e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ec:	d81a      	bhi.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d022      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80055f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055f6:	d115      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055fc:	3308      	adds	r3, #8
 80055fe:	2100      	movs	r1, #0
 8005600:	4618      	mov	r0, r3
 8005602:	f000 febd 	bl	8006380 <RCCEx_PLL2_Config>
 8005606:	4603      	mov	r3, r0
 8005608:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800560c:	e015      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800560e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005612:	3328      	adds	r3, #40	; 0x28
 8005614:	2102      	movs	r1, #2
 8005616:	4618      	mov	r0, r3
 8005618:	f000 ff64 	bl	80064e4 <RCCEx_PLL3_Config>
 800561c:	4603      	mov	r3, r0
 800561e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005622:	e00a      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800562a:	e006      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800562c:	bf00      	nop
 800562e:	e004      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005630:	bf00      	nop
 8005632:	e002      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005634:	bf00      	nop
 8005636:	e000      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800563a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10b      	bne.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005642:	4b39      	ldr	r3, [pc, #228]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005646:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800564a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800564e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005652:	4a35      	ldr	r2, [pc, #212]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005654:	430b      	orrs	r3, r1
 8005656:	6553      	str	r3, [r2, #84]	; 0x54
 8005658:	e003      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800565e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800566e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005672:	2300      	movs	r3, #0
 8005674:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005678:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800567c:	460b      	mov	r3, r1
 800567e:	4313      	orrs	r3, r2
 8005680:	d058      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005686:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800568a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800568e:	d033      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005690:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005694:	d82c      	bhi.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569a:	d02f      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800569c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a0:	d826      	bhi.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056a6:	d02b      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80056a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056ac:	d820      	bhi.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b2:	d012      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80056b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b8:	d81a      	bhi.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d022      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80056be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c2:	d115      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c8:	3308      	adds	r3, #8
 80056ca:	2100      	movs	r1, #0
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 fe57 	bl	8006380 <RCCEx_PLL2_Config>
 80056d2:	4603      	mov	r3, r0
 80056d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80056d8:	e015      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056de:	3328      	adds	r3, #40	; 0x28
 80056e0:	2102      	movs	r1, #2
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 fefe 	bl	80064e4 <RCCEx_PLL3_Config>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80056ee:	e00a      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056f6:	e006      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80056f8:	bf00      	nop
 80056fa:	e004      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80056fc:	bf00      	nop
 80056fe:	e002      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005700:	bf00      	nop
 8005702:	e000      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10e      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800570e:	4b06      	ldr	r3, [pc, #24]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005712:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800571a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800571e:	4a02      	ldr	r2, [pc, #8]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005720:	430b      	orrs	r3, r1
 8005722:	6593      	str	r3, [r2, #88]	; 0x58
 8005724:	e006      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005726:	bf00      	nop
 8005728:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005730:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005740:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005744:	2300      	movs	r3, #0
 8005746:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800574a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800574e:	460b      	mov	r3, r1
 8005750:	4313      	orrs	r3, r2
 8005752:	d055      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005758:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800575c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005760:	d033      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005762:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005766:	d82c      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800576c:	d02f      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800576e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005772:	d826      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005774:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005778:	d02b      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800577a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800577e:	d820      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005784:	d012      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005786:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800578a:	d81a      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800578c:	2b00      	cmp	r3, #0
 800578e:	d022      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005794:	d115      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800579a:	3308      	adds	r3, #8
 800579c:	2100      	movs	r1, #0
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fdee 	bl	8006380 <RCCEx_PLL2_Config>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80057aa:	e015      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b0:	3328      	adds	r3, #40	; 0x28
 80057b2:	2102      	movs	r1, #2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fe95 	bl	80064e4 <RCCEx_PLL3_Config>
 80057ba:	4603      	mov	r3, r0
 80057bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80057c0:	e00a      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057c8:	e006      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80057ca:	bf00      	nop
 80057cc:	e004      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80057ce:	bf00      	nop
 80057d0:	e002      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80057d2:	bf00      	nop
 80057d4:	e000      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80057d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10b      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80057e0:	4ba1      	ldr	r3, [pc, #644]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80057e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057f0:	4a9d      	ldr	r2, [pc, #628]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057f2:	430b      	orrs	r3, r1
 80057f4:	6593      	str	r3, [r2, #88]	; 0x58
 80057f6:	e003      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	f002 0308 	and.w	r3, r2, #8
 800580c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005810:	2300      	movs	r3, #0
 8005812:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005816:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800581a:	460b      	mov	r3, r1
 800581c:	4313      	orrs	r3, r2
 800581e:	d01e      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582c:	d10c      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800582e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005832:	3328      	adds	r3, #40	; 0x28
 8005834:	2102      	movs	r1, #2
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fe54 	bl	80064e4 <RCCEx_PLL3_Config>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005848:	4b87      	ldr	r3, [pc, #540]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800584a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005858:	4a83      	ldr	r2, [pc, #524]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800585a:	430b      	orrs	r3, r1
 800585c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800585e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005866:	f002 0310 	and.w	r3, r2, #16
 800586a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800586e:	2300      	movs	r3, #0
 8005870:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005874:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005878:	460b      	mov	r3, r1
 800587a:	4313      	orrs	r3, r2
 800587c:	d01e      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800587e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005882:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800588a:	d10c      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800588c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005890:	3328      	adds	r3, #40	; 0x28
 8005892:	2102      	movs	r1, #2
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fe25 	bl	80064e4 <RCCEx_PLL3_Config>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058a6:	4b70      	ldr	r3, [pc, #448]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058b6:	4a6c      	ldr	r2, [pc, #432]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058b8:	430b      	orrs	r3, r1
 80058ba:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80058c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058cc:	2300      	movs	r3, #0
 80058ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058d2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80058d6:	460b      	mov	r3, r1
 80058d8:	4313      	orrs	r3, r2
 80058da:	d03e      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80058dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80058e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058e8:	d022      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80058ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058ee:	d81b      	bhi.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80058f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f8:	d00b      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80058fa:	e015      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005900:	3308      	adds	r3, #8
 8005902:	2100      	movs	r1, #0
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fd3b 	bl	8006380 <RCCEx_PLL2_Config>
 800590a:	4603      	mov	r3, r0
 800590c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005910:	e00f      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005916:	3328      	adds	r3, #40	; 0x28
 8005918:	2102      	movs	r1, #2
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fde2 	bl	80064e4 <RCCEx_PLL3_Config>
 8005920:	4603      	mov	r3, r0
 8005922:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005926:	e004      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800592e:	e000      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005932:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10b      	bne.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800593a:	4b4b      	ldr	r3, [pc, #300]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800593c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005946:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800594a:	4a47      	ldr	r2, [pc, #284]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800594c:	430b      	orrs	r3, r1
 800594e:	6593      	str	r3, [r2, #88]	; 0x58
 8005950:	e003      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005956:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800595a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800595e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005962:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005966:	67bb      	str	r3, [r7, #120]	; 0x78
 8005968:	2300      	movs	r3, #0
 800596a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800596c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005970:	460b      	mov	r3, r1
 8005972:	4313      	orrs	r3, r2
 8005974:	d03b      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800597a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005982:	d01f      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005984:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005988:	d818      	bhi.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800598a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800598e:	d003      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005990:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005994:	d007      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005996:	e011      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005998:	4b33      	ldr	r3, [pc, #204]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	4a32      	ldr	r2, [pc, #200]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800599e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80059a4:	e00f      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059aa:	3328      	adds	r3, #40	; 0x28
 80059ac:	2101      	movs	r1, #1
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fd98 	bl	80064e4 <RCCEx_PLL3_Config>
 80059b4:	4603      	mov	r3, r0
 80059b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80059ba:	e004      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059c2:	e000      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80059c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10b      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059ce:	4b26      	ldr	r3, [pc, #152]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80059d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059de:	4a22      	ldr	r2, [pc, #136]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059e0:	430b      	orrs	r3, r1
 80059e2:	6553      	str	r3, [r2, #84]	; 0x54
 80059e4:	e003      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80059ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80059fa:	673b      	str	r3, [r7, #112]	; 0x70
 80059fc:	2300      	movs	r3, #0
 80059fe:	677b      	str	r3, [r7, #116]	; 0x74
 8005a00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005a04:	460b      	mov	r3, r1
 8005a06:	4313      	orrs	r3, r2
 8005a08:	d034      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a18:	d007      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005a1a:	e011      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a1c:	4b12      	ldr	r3, [pc, #72]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	4a11      	ldr	r2, [pc, #68]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005a28:	e00e      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a2e:	3308      	adds	r3, #8
 8005a30:	2102      	movs	r1, #2
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fca4 	bl	8006380 <RCCEx_PLL2_Config>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005a3e:	e003      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10d      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005a50:	4b05      	ldr	r3, [pc, #20]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a5e:	4a02      	ldr	r2, [pc, #8]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a60:	430b      	orrs	r3, r1
 8005a62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a64:	e006      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005a66:	bf00      	nop
 8005a68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005a80:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a82:	2300      	movs	r3, #0
 8005a84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a86:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	d00c      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a94:	3328      	adds	r3, #40	; 0x28
 8005a96:	2102      	movs	r1, #2
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 fd23 	bl	80064e4 <RCCEx_PLL3_Config>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005ab6:	663b      	str	r3, [r7, #96]	; 0x60
 8005ab8:	2300      	movs	r3, #0
 8005aba:	667b      	str	r3, [r7, #100]	; 0x64
 8005abc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	d038      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ad2:	d018      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005ad4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ad8:	d811      	bhi.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ade:	d014      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ae4:	d80b      	bhi.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d011      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aee:	d106      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005af0:	4bc3      	ldr	r3, [pc, #780]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	4ac2      	ldr	r2, [pc, #776]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005afa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005afc:	e008      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b04:	e004      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b06:	bf00      	nop
 8005b08:	e002      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b0a:	bf00      	nop
 8005b0c:	e000      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10b      	bne.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b18:	4bb9      	ldr	r3, [pc, #740]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b28:	4ab5      	ldr	r2, [pc, #724]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b2a:	430b      	orrs	r3, r1
 8005b2c:	6553      	str	r3, [r2, #84]	; 0x54
 8005b2e:	e003      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b40:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005b44:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b46:	2300      	movs	r3, #0
 8005b48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4313      	orrs	r3, r2
 8005b52:	d009      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b54:	4baa      	ldr	r3, [pc, #680]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b62:	4aa7      	ldr	r2, [pc, #668]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b64:	430b      	orrs	r3, r1
 8005b66:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b70:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005b74:	653b      	str	r3, [r7, #80]	; 0x50
 8005b76:	2300      	movs	r3, #0
 8005b78:	657b      	str	r3, [r7, #84]	; 0x54
 8005b7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4313      	orrs	r3, r2
 8005b82:	d00a      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005b84:	4b9e      	ldr	r3, [pc, #632]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005b94:	4a9a      	ldr	r2, [pc, #616]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b96:	430b      	orrs	r3, r1
 8005b98:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ba8:	2300      	movs	r3, #0
 8005baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	d009      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bb6:	4b92      	ldr	r3, [pc, #584]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bba:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bc4:	4a8e      	ldr	r2, [pc, #568]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bc6:	430b      	orrs	r3, r1
 8005bc8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005bd6:	643b      	str	r3, [r7, #64]	; 0x40
 8005bd8:	2300      	movs	r3, #0
 8005bda:	647b      	str	r3, [r7, #68]	; 0x44
 8005bdc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005be0:	460b      	mov	r3, r1
 8005be2:	4313      	orrs	r3, r2
 8005be4:	d00e      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005be6:	4b86      	ldr	r3, [pc, #536]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	4a85      	ldr	r2, [pc, #532]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bf0:	6113      	str	r3, [r2, #16]
 8005bf2:	4b83      	ldr	r3, [pc, #524]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bf4:	6919      	ldr	r1, [r3, #16]
 8005bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bfa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005bfe:	4a80      	ldr	r2, [pc, #512]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c00:	430b      	orrs	r3, r1
 8005c02:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005c10:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c12:	2300      	movs	r3, #0
 8005c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c16:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	d009      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005c20:	4b77      	ldr	r3, [pc, #476]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c24:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2e:	4a74      	ldr	r2, [pc, #464]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c30:	430b      	orrs	r3, r1
 8005c32:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005c40:	633b      	str	r3, [r7, #48]	; 0x30
 8005c42:	2300      	movs	r3, #0
 8005c44:	637b      	str	r3, [r7, #52]	; 0x34
 8005c46:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	d00a      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c50:	4b6b      	ldr	r3, [pc, #428]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c54:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c60:	4a67      	ldr	r2, [pc, #412]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c62:	430b      	orrs	r3, r1
 8005c64:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6e:	2100      	movs	r1, #0
 8005c70:	62b9      	str	r1, [r7, #40]	; 0x28
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c78:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	d011      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c86:	3308      	adds	r3, #8
 8005c88:	2100      	movs	r1, #0
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fb78 	bl	8006380 <RCCEx_PLL2_Config>
 8005c90:	4603      	mov	r3, r0
 8005c92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005c96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ca2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cae:	2100      	movs	r1, #0
 8005cb0:	6239      	str	r1, [r7, #32]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8005cb8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	d011      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	2101      	movs	r1, #1
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fb58 	bl	8006380 <RCCEx_PLL2_Config>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ce2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cee:	2100      	movs	r1, #0
 8005cf0:	61b9      	str	r1, [r7, #24]
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	d011      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d06:	3308      	adds	r3, #8
 8005d08:	2102      	movs	r1, #2
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 fb38 	bl	8006380 <RCCEx_PLL2_Config>
 8005d10:	4603      	mov	r3, r0
 8005d12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005d16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2e:	2100      	movs	r1, #0
 8005d30:	6139      	str	r1, [r7, #16]
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	d011      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d46:	3328      	adds	r3, #40	; 0x28
 8005d48:	2100      	movs	r1, #0
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fbca 	bl	80064e4 <RCCEx_PLL3_Config>
 8005d50:	4603      	mov	r3, r0
 8005d52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005d56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6e:	2100      	movs	r1, #0
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	f003 0310 	and.w	r3, r3, #16
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	d011      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d86:	3328      	adds	r3, #40	; 0x28
 8005d88:	2101      	movs	r1, #1
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fbaa 	bl	80064e4 <RCCEx_PLL3_Config>
 8005d90:	4603      	mov	r3, r0
 8005d92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005d96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005da2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	2100      	movs	r1, #0
 8005db0:	6039      	str	r1, [r7, #0]
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	607b      	str	r3, [r7, #4]
 8005db8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	d011      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dc6:	3328      	adds	r3, #40	; 0x28
 8005dc8:	2102      	movs	r1, #2
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fb8a 	bl	80064e4 <RCCEx_PLL3_Config>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005de2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005de6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	e000      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e00:	58024400 	.word	0x58024400

08005e04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005e08:	f7fe fd96 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	091b      	lsrs	r3, r3, #4
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	4904      	ldr	r1, [pc, #16]	; (8005e2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005e1a:	5ccb      	ldrb	r3, [r1, r3]
 8005e1c:	f003 031f 	and.w	r3, r3, #31
 8005e20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	58024400 	.word	0x58024400
 8005e2c:	08008960 	.word	0x08008960

08005e30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b089      	sub	sp, #36	; 0x24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e38:	4ba1      	ldr	r3, [pc, #644]	; (80060c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3c:	f003 0303 	and.w	r3, r3, #3
 8005e40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005e42:	4b9f      	ldr	r3, [pc, #636]	; (80060c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e46:	0b1b      	lsrs	r3, r3, #12
 8005e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005e4e:	4b9c      	ldr	r3, [pc, #624]	; (80060c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e52:	091b      	lsrs	r3, r3, #4
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005e5a:	4b99      	ldr	r3, [pc, #612]	; (80060c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5e:	08db      	lsrs	r3, r3, #3
 8005e60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	fb02 f303 	mul.w	r3, r2, r3
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 8111 	beq.w	80060a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	f000 8083 	beq.w	8005f8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	f200 80a1 	bhi.w	8005fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d056      	beq.n	8005f48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005e9a:	e099      	b.n	8005fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e9c:	4b88      	ldr	r3, [pc, #544]	; (80060c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d02d      	beq.n	8005f04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ea8:	4b85      	ldr	r3, [pc, #532]	; (80060c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	08db      	lsrs	r3, r3, #3
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	4a84      	ldr	r2, [pc, #528]	; (80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	ee07 3a90 	vmov	s15, r3
 8005ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	ee07 3a90 	vmov	s15, r3
 8005eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ed2:	4b7b      	ldr	r3, [pc, #492]	; (80060c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eda:	ee07 3a90 	vmov	s15, r3
 8005ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ee6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005efe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f02:	e087      	b.n	8006014 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	ee07 3a90 	vmov	s15, r3
 8005f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f0e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f16:	4b6a      	ldr	r3, [pc, #424]	; (80060c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f2a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f46:	e065      	b.n	8006014 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	ee07 3a90 	vmov	s15, r3
 8005f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f52:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80060d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f5a:	4b59      	ldr	r3, [pc, #356]	; (80060c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f62:	ee07 3a90 	vmov	s15, r3
 8005f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f6e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f8a:	e043      	b.n	8006014 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f96:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f9e:	4b48      	ldr	r3, [pc, #288]	; (80060c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa6:	ee07 3a90 	vmov	s15, r3
 8005faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fb2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fce:	e021      	b.n	8006014 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fda:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80060d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe2:	4b37      	ldr	r3, [pc, #220]	; (80060c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ff6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800600a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800600e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006012:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006014:	4b2a      	ldr	r3, [pc, #168]	; (80060c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006018:	0a5b      	lsrs	r3, r3, #9
 800601a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006026:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800602a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800602e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800603a:	ee17 2a90 	vmov	r2, s15
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006042:	4b1f      	ldr	r3, [pc, #124]	; (80060c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006046:	0c1b      	lsrs	r3, r3, #16
 8006048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800604c:	ee07 3a90 	vmov	s15, r3
 8006050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006054:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006058:	ee37 7a87 	vadd.f32	s14, s15, s14
 800605c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006068:	ee17 2a90 	vmov	r2, s15
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006070:	4b13      	ldr	r3, [pc, #76]	; (80060c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006074:	0e1b      	lsrs	r3, r3, #24
 8006076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800607a:	ee07 3a90 	vmov	s15, r3
 800607e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006082:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006086:	ee37 7a87 	vadd.f32	s14, s15, s14
 800608a:	edd7 6a07 	vldr	s13, [r7, #28]
 800608e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006096:	ee17 2a90 	vmov	r2, s15
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800609e:	e008      	b.n	80060b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	609a      	str	r2, [r3, #8]
}
 80060b2:	bf00      	nop
 80060b4:	3724      	adds	r7, #36	; 0x24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	58024400 	.word	0x58024400
 80060c4:	03d09000 	.word	0x03d09000
 80060c8:	46000000 	.word	0x46000000
 80060cc:	4c742400 	.word	0x4c742400
 80060d0:	4a742400 	.word	0x4a742400
 80060d4:	4af42400 	.word	0x4af42400

080060d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80060d8:	b480      	push	{r7}
 80060da:	b089      	sub	sp, #36	; 0x24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060e0:	4ba1      	ldr	r3, [pc, #644]	; (8006368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e4:	f003 0303 	and.w	r3, r3, #3
 80060e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80060ea:	4b9f      	ldr	r3, [pc, #636]	; (8006368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	0d1b      	lsrs	r3, r3, #20
 80060f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80060f6:	4b9c      	ldr	r3, [pc, #624]	; (8006368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fa:	0a1b      	lsrs	r3, r3, #8
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006102:	4b99      	ldr	r3, [pc, #612]	; (8006368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006106:	08db      	lsrs	r3, r3, #3
 8006108:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	fb02 f303 	mul.w	r3, r2, r3
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800611a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 8111 	beq.w	8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	2b02      	cmp	r3, #2
 800612a:	f000 8083 	beq.w	8006234 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	2b02      	cmp	r3, #2
 8006132:	f200 80a1 	bhi.w	8006278 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d056      	beq.n	80061f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006142:	e099      	b.n	8006278 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006144:	4b88      	ldr	r3, [pc, #544]	; (8006368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0320 	and.w	r3, r3, #32
 800614c:	2b00      	cmp	r3, #0
 800614e:	d02d      	beq.n	80061ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006150:	4b85      	ldr	r3, [pc, #532]	; (8006368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	08db      	lsrs	r3, r3, #3
 8006156:	f003 0303 	and.w	r3, r3, #3
 800615a:	4a84      	ldr	r2, [pc, #528]	; (800636c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800615c:	fa22 f303 	lsr.w	r3, r2, r3
 8006160:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	ee07 3a90 	vmov	s15, r3
 8006168:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	ee07 3a90 	vmov	s15, r3
 8006172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800617a:	4b7b      	ldr	r3, [pc, #492]	; (8006368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006182:	ee07 3a90 	vmov	s15, r3
 8006186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800618a:	ed97 6a03 	vldr	s12, [r7, #12]
 800618e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800619a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800619e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80061aa:	e087      	b.n	80062bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	ee07 3a90 	vmov	s15, r3
 80061b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006374 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80061ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061be:	4b6a      	ldr	r3, [pc, #424]	; (8006368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c6:	ee07 3a90 	vmov	s15, r3
 80061ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80061d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061ee:	e065      	b.n	80062bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	ee07 3a90 	vmov	s15, r3
 80061f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006378 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80061fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006202:	4b59      	ldr	r3, [pc, #356]	; (8006368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800620a:	ee07 3a90 	vmov	s15, r3
 800620e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006212:	ed97 6a03 	vldr	s12, [r7, #12]
 8006216:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800621a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800621e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800622a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800622e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006232:	e043      	b.n	80062bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	ee07 3a90 	vmov	s15, r3
 800623a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800637c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006246:	4b48      	ldr	r3, [pc, #288]	; (8006368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800624e:	ee07 3a90 	vmov	s15, r3
 8006252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006256:	ed97 6a03 	vldr	s12, [r7, #12]
 800625a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800625e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800626a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800626e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006276:	e021      	b.n	80062bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	ee07 3a90 	vmov	s15, r3
 800627e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006282:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006378 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800628a:	4b37      	ldr	r3, [pc, #220]	; (8006368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006292:	ee07 3a90 	vmov	s15, r3
 8006296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800629a:	ed97 6a03 	vldr	s12, [r7, #12]
 800629e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80062bc:	4b2a      	ldr	r3, [pc, #168]	; (8006368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c0:	0a5b      	lsrs	r3, r3, #9
 80062c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062c6:	ee07 3a90 	vmov	s15, r3
 80062ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80062da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062e2:	ee17 2a90 	vmov	r2, s15
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80062ea:	4b1f      	ldr	r3, [pc, #124]	; (8006368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	0c1b      	lsrs	r3, r3, #16
 80062f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062f4:	ee07 3a90 	vmov	s15, r3
 80062f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006300:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006304:	edd7 6a07 	vldr	s13, [r7, #28]
 8006308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800630c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006310:	ee17 2a90 	vmov	r2, s15
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006318:	4b13      	ldr	r3, [pc, #76]	; (8006368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800631a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631c:	0e1b      	lsrs	r3, r3, #24
 800631e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006322:	ee07 3a90 	vmov	s15, r3
 8006326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800632a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800632e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006332:	edd7 6a07 	vldr	s13, [r7, #28]
 8006336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800633a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800633e:	ee17 2a90 	vmov	r2, s15
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006346:	e008      	b.n	800635a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	609a      	str	r2, [r3, #8]
}
 800635a:	bf00      	nop
 800635c:	3724      	adds	r7, #36	; 0x24
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	58024400 	.word	0x58024400
 800636c:	03d09000 	.word	0x03d09000
 8006370:	46000000 	.word	0x46000000
 8006374:	4c742400 	.word	0x4c742400
 8006378:	4a742400 	.word	0x4a742400
 800637c:	4af42400 	.word	0x4af42400

08006380 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800638e:	4b53      	ldr	r3, [pc, #332]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 8006390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006392:	f003 0303 	and.w	r3, r3, #3
 8006396:	2b03      	cmp	r3, #3
 8006398:	d101      	bne.n	800639e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e099      	b.n	80064d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800639e:	4b4f      	ldr	r3, [pc, #316]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a4e      	ldr	r2, [pc, #312]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 80063a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063aa:	f7fa fe4f 	bl	800104c <HAL_GetTick>
 80063ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063b0:	e008      	b.n	80063c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80063b2:	f7fa fe4b 	bl	800104c <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d901      	bls.n	80063c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e086      	b.n	80064d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063c4:	4b45      	ldr	r3, [pc, #276]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1f0      	bne.n	80063b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80063d0:	4b42      	ldr	r3, [pc, #264]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 80063d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	031b      	lsls	r3, r3, #12
 80063de:	493f      	ldr	r1, [pc, #252]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	628b      	str	r3, [r1, #40]	; 0x28
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	3b01      	subs	r3, #1
 80063ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	025b      	lsls	r3, r3, #9
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	431a      	orrs	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	3b01      	subs	r3, #1
 8006400:	041b      	lsls	r3, r3, #16
 8006402:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006406:	431a      	orrs	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	3b01      	subs	r3, #1
 800640e:	061b      	lsls	r3, r3, #24
 8006410:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006414:	4931      	ldr	r1, [pc, #196]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 8006416:	4313      	orrs	r3, r2
 8006418:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800641a:	4b30      	ldr	r3, [pc, #192]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 800641c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	492d      	ldr	r1, [pc, #180]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 8006428:	4313      	orrs	r3, r2
 800642a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800642c:	4b2b      	ldr	r3, [pc, #172]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	f023 0220 	bic.w	r2, r3, #32
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	4928      	ldr	r1, [pc, #160]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 800643a:	4313      	orrs	r3, r2
 800643c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800643e:	4b27      	ldr	r3, [pc, #156]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 8006440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006442:	4a26      	ldr	r2, [pc, #152]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 8006444:	f023 0310 	bic.w	r3, r3, #16
 8006448:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800644a:	4b24      	ldr	r3, [pc, #144]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 800644c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800644e:	4b24      	ldr	r3, [pc, #144]	; (80064e0 <RCCEx_PLL2_Config+0x160>)
 8006450:	4013      	ands	r3, r2
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	69d2      	ldr	r2, [r2, #28]
 8006456:	00d2      	lsls	r2, r2, #3
 8006458:	4920      	ldr	r1, [pc, #128]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 800645a:	4313      	orrs	r3, r2
 800645c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800645e:	4b1f      	ldr	r3, [pc, #124]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	4a1e      	ldr	r2, [pc, #120]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 8006464:	f043 0310 	orr.w	r3, r3, #16
 8006468:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d106      	bne.n	800647e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006470:	4b1a      	ldr	r3, [pc, #104]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 8006472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006474:	4a19      	ldr	r2, [pc, #100]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 8006476:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800647a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800647c:	e00f      	b.n	800649e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d106      	bne.n	8006492 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006484:	4b15      	ldr	r3, [pc, #84]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	4a14      	ldr	r2, [pc, #80]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 800648a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800648e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006490:	e005      	b.n	800649e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006492:	4b12      	ldr	r3, [pc, #72]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 8006494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006496:	4a11      	ldr	r2, [pc, #68]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 8006498:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800649c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800649e:	4b0f      	ldr	r3, [pc, #60]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a0e      	ldr	r2, [pc, #56]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 80064a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064aa:	f7fa fdcf 	bl	800104c <HAL_GetTick>
 80064ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80064b0:	e008      	b.n	80064c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80064b2:	f7fa fdcb 	bl	800104c <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d901      	bls.n	80064c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e006      	b.n	80064d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80064c4:	4b05      	ldr	r3, [pc, #20]	; (80064dc <RCCEx_PLL2_Config+0x15c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d0f0      	beq.n	80064b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	58024400 	.word	0x58024400
 80064e0:	ffff0007 	.word	0xffff0007

080064e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064f2:	4b53      	ldr	r3, [pc, #332]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 80064f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d101      	bne.n	8006502 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e099      	b.n	8006636 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006502:	4b4f      	ldr	r3, [pc, #316]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a4e      	ldr	r2, [pc, #312]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 8006508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800650c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800650e:	f7fa fd9d 	bl	800104c <HAL_GetTick>
 8006512:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006514:	e008      	b.n	8006528 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006516:	f7fa fd99 	bl	800104c <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	2b02      	cmp	r3, #2
 8006522:	d901      	bls.n	8006528 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e086      	b.n	8006636 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006528:	4b45      	ldr	r3, [pc, #276]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1f0      	bne.n	8006516 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006534:	4b42      	ldr	r3, [pc, #264]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 8006536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006538:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	051b      	lsls	r3, r3, #20
 8006542:	493f      	ldr	r1, [pc, #252]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 8006544:	4313      	orrs	r3, r2
 8006546:	628b      	str	r3, [r1, #40]	; 0x28
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	3b01      	subs	r3, #1
 800654e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	3b01      	subs	r3, #1
 8006558:	025b      	lsls	r3, r3, #9
 800655a:	b29b      	uxth	r3, r3
 800655c:	431a      	orrs	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	3b01      	subs	r3, #1
 8006564:	041b      	lsls	r3, r3, #16
 8006566:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800656a:	431a      	orrs	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	3b01      	subs	r3, #1
 8006572:	061b      	lsls	r3, r3, #24
 8006574:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006578:	4931      	ldr	r1, [pc, #196]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 800657a:	4313      	orrs	r3, r2
 800657c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800657e:	4b30      	ldr	r3, [pc, #192]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 8006580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006582:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	492d      	ldr	r1, [pc, #180]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 800658c:	4313      	orrs	r3, r2
 800658e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006590:	4b2b      	ldr	r3, [pc, #172]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 8006592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006594:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	4928      	ldr	r1, [pc, #160]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80065a2:	4b27      	ldr	r3, [pc, #156]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 80065a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a6:	4a26      	ldr	r2, [pc, #152]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 80065a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80065ae:	4b24      	ldr	r3, [pc, #144]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 80065b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065b2:	4b24      	ldr	r3, [pc, #144]	; (8006644 <RCCEx_PLL3_Config+0x160>)
 80065b4:	4013      	ands	r3, r2
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	69d2      	ldr	r2, [r2, #28]
 80065ba:	00d2      	lsls	r2, r2, #3
 80065bc:	4920      	ldr	r1, [pc, #128]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80065c2:	4b1f      	ldr	r3, [pc, #124]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 80065c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c6:	4a1e      	ldr	r2, [pc, #120]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 80065c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d106      	bne.n	80065e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80065d4:	4b1a      	ldr	r3, [pc, #104]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	4a19      	ldr	r2, [pc, #100]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 80065da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065e0:	e00f      	b.n	8006602 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d106      	bne.n	80065f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80065e8:	4b15      	ldr	r3, [pc, #84]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 80065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ec:	4a14      	ldr	r2, [pc, #80]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 80065ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065f4:	e005      	b.n	8006602 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80065f6:	4b12      	ldr	r3, [pc, #72]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 80065f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fa:	4a11      	ldr	r2, [pc, #68]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 80065fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006600:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006602:	4b0f      	ldr	r3, [pc, #60]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a0e      	ldr	r2, [pc, #56]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 8006608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800660c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800660e:	f7fa fd1d 	bl	800104c <HAL_GetTick>
 8006612:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006614:	e008      	b.n	8006628 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006616:	f7fa fd19 	bl	800104c <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d901      	bls.n	8006628 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e006      	b.n	8006636 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006628:	4b05      	ldr	r3, [pc, #20]	; (8006640 <RCCEx_PLL3_Config+0x15c>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0f0      	beq.n	8006616 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006634:	7bfb      	ldrb	r3, [r7, #15]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	58024400 	.word	0x58024400
 8006644:	ffff0007 	.word	0xffff0007

08006648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e049      	b.n	80066ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d106      	bne.n	8006674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7fa fb38 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	3304      	adds	r3, #4
 8006684:	4619      	mov	r1, r3
 8006686:	4610      	mov	r0, r2
 8006688:	f000 fb88 	bl	8006d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
	...

080066f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b01      	cmp	r3, #1
 800670a:	d001      	beq.n	8006710 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e04c      	b.n	80067aa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a26      	ldr	r2, [pc, #152]	; (80067b8 <HAL_TIM_Base_Start+0xc0>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d022      	beq.n	8006768 <HAL_TIM_Base_Start+0x70>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800672a:	d01d      	beq.n	8006768 <HAL_TIM_Base_Start+0x70>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a22      	ldr	r2, [pc, #136]	; (80067bc <HAL_TIM_Base_Start+0xc4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d018      	beq.n	8006768 <HAL_TIM_Base_Start+0x70>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a21      	ldr	r2, [pc, #132]	; (80067c0 <HAL_TIM_Base_Start+0xc8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d013      	beq.n	8006768 <HAL_TIM_Base_Start+0x70>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a1f      	ldr	r2, [pc, #124]	; (80067c4 <HAL_TIM_Base_Start+0xcc>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d00e      	beq.n	8006768 <HAL_TIM_Base_Start+0x70>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a1e      	ldr	r2, [pc, #120]	; (80067c8 <HAL_TIM_Base_Start+0xd0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d009      	beq.n	8006768 <HAL_TIM_Base_Start+0x70>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a1c      	ldr	r2, [pc, #112]	; (80067cc <HAL_TIM_Base_Start+0xd4>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d004      	beq.n	8006768 <HAL_TIM_Base_Start+0x70>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a1b      	ldr	r2, [pc, #108]	; (80067d0 <HAL_TIM_Base_Start+0xd8>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d115      	bne.n	8006794 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689a      	ldr	r2, [r3, #8]
 800676e:	4b19      	ldr	r3, [pc, #100]	; (80067d4 <HAL_TIM_Base_Start+0xdc>)
 8006770:	4013      	ands	r3, r2
 8006772:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2b06      	cmp	r3, #6
 8006778:	d015      	beq.n	80067a6 <HAL_TIM_Base_Start+0xae>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006780:	d011      	beq.n	80067a6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f042 0201 	orr.w	r2, r2, #1
 8006790:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006792:	e008      	b.n	80067a6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0201 	orr.w	r2, r2, #1
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	e000      	b.n	80067a8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	40010000 	.word	0x40010000
 80067bc:	40000400 	.word	0x40000400
 80067c0:	40000800 	.word	0x40000800
 80067c4:	40000c00 	.word	0x40000c00
 80067c8:	40010400 	.word	0x40010400
 80067cc:	40001800 	.word	0x40001800
 80067d0:	40014000 	.word	0x40014000
 80067d4:	00010007 	.word	0x00010007

080067d8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e049      	b.n	800687e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d106      	bne.n	8006804 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f841 	bl	8006886 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3304      	adds	r3, #4
 8006814:	4619      	mov	r1, r3
 8006816:	4610      	mov	r0, r2
 8006818:	f000 fac0 	bl	8006d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006886:	b480      	push	{r7}
 8006888:	b083      	sub	sp, #12
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800688e:	bf00      	nop
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
	...

0800689c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d109      	bne.n	80068c0 <HAL_TIM_OC_Start+0x24>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	bf14      	ite	ne
 80068b8:	2301      	movne	r3, #1
 80068ba:	2300      	moveq	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	e03c      	b.n	800693a <HAL_TIM_OC_Start+0x9e>
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d109      	bne.n	80068da <HAL_TIM_OC_Start+0x3e>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	bf14      	ite	ne
 80068d2:	2301      	movne	r3, #1
 80068d4:	2300      	moveq	r3, #0
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	e02f      	b.n	800693a <HAL_TIM_OC_Start+0x9e>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d109      	bne.n	80068f4 <HAL_TIM_OC_Start+0x58>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	bf14      	ite	ne
 80068ec:	2301      	movne	r3, #1
 80068ee:	2300      	moveq	r3, #0
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	e022      	b.n	800693a <HAL_TIM_OC_Start+0x9e>
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b0c      	cmp	r3, #12
 80068f8:	d109      	bne.n	800690e <HAL_TIM_OC_Start+0x72>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b01      	cmp	r3, #1
 8006904:	bf14      	ite	ne
 8006906:	2301      	movne	r3, #1
 8006908:	2300      	moveq	r3, #0
 800690a:	b2db      	uxtb	r3, r3
 800690c:	e015      	b.n	800693a <HAL_TIM_OC_Start+0x9e>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b10      	cmp	r3, #16
 8006912:	d109      	bne.n	8006928 <HAL_TIM_OC_Start+0x8c>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b01      	cmp	r3, #1
 800691e:	bf14      	ite	ne
 8006920:	2301      	movne	r3, #1
 8006922:	2300      	moveq	r3, #0
 8006924:	b2db      	uxtb	r3, r3
 8006926:	e008      	b.n	800693a <HAL_TIM_OC_Start+0x9e>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b01      	cmp	r3, #1
 8006932:	bf14      	ite	ne
 8006934:	2301      	movne	r3, #1
 8006936:	2300      	moveq	r3, #0
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e0a1      	b.n	8006a86 <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d104      	bne.n	8006952 <HAL_TIM_OC_Start+0xb6>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006950:	e023      	b.n	800699a <HAL_TIM_OC_Start+0xfe>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b04      	cmp	r3, #4
 8006956:	d104      	bne.n	8006962 <HAL_TIM_OC_Start+0xc6>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006960:	e01b      	b.n	800699a <HAL_TIM_OC_Start+0xfe>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	2b08      	cmp	r3, #8
 8006966:	d104      	bne.n	8006972 <HAL_TIM_OC_Start+0xd6>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006970:	e013      	b.n	800699a <HAL_TIM_OC_Start+0xfe>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b0c      	cmp	r3, #12
 8006976:	d104      	bne.n	8006982 <HAL_TIM_OC_Start+0xe6>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006980:	e00b      	b.n	800699a <HAL_TIM_OC_Start+0xfe>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b10      	cmp	r3, #16
 8006986:	d104      	bne.n	8006992 <HAL_TIM_OC_Start+0xf6>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006990:	e003      	b.n	800699a <HAL_TIM_OC_Start+0xfe>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2202      	movs	r2, #2
 8006996:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2201      	movs	r2, #1
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fe14 	bl	80075d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a38      	ldr	r2, [pc, #224]	; (8006a90 <HAL_TIM_OC_Start+0x1f4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d013      	beq.n	80069da <HAL_TIM_OC_Start+0x13e>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a37      	ldr	r2, [pc, #220]	; (8006a94 <HAL_TIM_OC_Start+0x1f8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00e      	beq.n	80069da <HAL_TIM_OC_Start+0x13e>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a35      	ldr	r2, [pc, #212]	; (8006a98 <HAL_TIM_OC_Start+0x1fc>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d009      	beq.n	80069da <HAL_TIM_OC_Start+0x13e>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a34      	ldr	r2, [pc, #208]	; (8006a9c <HAL_TIM_OC_Start+0x200>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d004      	beq.n	80069da <HAL_TIM_OC_Start+0x13e>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a32      	ldr	r2, [pc, #200]	; (8006aa0 <HAL_TIM_OC_Start+0x204>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d101      	bne.n	80069de <HAL_TIM_OC_Start+0x142>
 80069da:	2301      	movs	r3, #1
 80069dc:	e000      	b.n	80069e0 <HAL_TIM_OC_Start+0x144>
 80069de:	2300      	movs	r3, #0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d007      	beq.n	80069f4 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a25      	ldr	r2, [pc, #148]	; (8006a90 <HAL_TIM_OC_Start+0x1f4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d022      	beq.n	8006a44 <HAL_TIM_OC_Start+0x1a8>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a06:	d01d      	beq.n	8006a44 <HAL_TIM_OC_Start+0x1a8>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a25      	ldr	r2, [pc, #148]	; (8006aa4 <HAL_TIM_OC_Start+0x208>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d018      	beq.n	8006a44 <HAL_TIM_OC_Start+0x1a8>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a24      	ldr	r2, [pc, #144]	; (8006aa8 <HAL_TIM_OC_Start+0x20c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d013      	beq.n	8006a44 <HAL_TIM_OC_Start+0x1a8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a22      	ldr	r2, [pc, #136]	; (8006aac <HAL_TIM_OC_Start+0x210>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00e      	beq.n	8006a44 <HAL_TIM_OC_Start+0x1a8>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a1a      	ldr	r2, [pc, #104]	; (8006a94 <HAL_TIM_OC_Start+0x1f8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d009      	beq.n	8006a44 <HAL_TIM_OC_Start+0x1a8>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a1e      	ldr	r2, [pc, #120]	; (8006ab0 <HAL_TIM_OC_Start+0x214>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d004      	beq.n	8006a44 <HAL_TIM_OC_Start+0x1a8>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a16      	ldr	r2, [pc, #88]	; (8006a98 <HAL_TIM_OC_Start+0x1fc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d115      	bne.n	8006a70 <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689a      	ldr	r2, [r3, #8]
 8006a4a:	4b1a      	ldr	r3, [pc, #104]	; (8006ab4 <HAL_TIM_OC_Start+0x218>)
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2b06      	cmp	r3, #6
 8006a54:	d015      	beq.n	8006a82 <HAL_TIM_OC_Start+0x1e6>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a5c:	d011      	beq.n	8006a82 <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f042 0201 	orr.w	r2, r2, #1
 8006a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a6e:	e008      	b.n	8006a82 <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0201 	orr.w	r2, r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	e000      	b.n	8006a84 <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	40010000 	.word	0x40010000
 8006a94:	40010400 	.word	0x40010400
 8006a98:	40014000 	.word	0x40014000
 8006a9c:	40014400 	.word	0x40014400
 8006aa0:	40014800 	.word	0x40014800
 8006aa4:	40000400 	.word	0x40000400
 8006aa8:	40000800 	.word	0x40000800
 8006aac:	40000c00 	.word	0x40000c00
 8006ab0:	40001800 	.word	0x40001800
 8006ab4:	00010007 	.word	0x00010007

08006ab8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d101      	bne.n	8006ad6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006ad2:	2302      	movs	r3, #2
 8006ad4:	e066      	b.n	8006ba4 <HAL_TIM_OC_ConfigChannel+0xec>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b14      	cmp	r3, #20
 8006ae2:	d857      	bhi.n	8006b94 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006ae4:	a201      	add	r2, pc, #4	; (adr r2, 8006aec <HAL_TIM_OC_ConfigChannel+0x34>)
 8006ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aea:	bf00      	nop
 8006aec:	08006b41 	.word	0x08006b41
 8006af0:	08006b95 	.word	0x08006b95
 8006af4:	08006b95 	.word	0x08006b95
 8006af8:	08006b95 	.word	0x08006b95
 8006afc:	08006b4f 	.word	0x08006b4f
 8006b00:	08006b95 	.word	0x08006b95
 8006b04:	08006b95 	.word	0x08006b95
 8006b08:	08006b95 	.word	0x08006b95
 8006b0c:	08006b5d 	.word	0x08006b5d
 8006b10:	08006b95 	.word	0x08006b95
 8006b14:	08006b95 	.word	0x08006b95
 8006b18:	08006b95 	.word	0x08006b95
 8006b1c:	08006b6b 	.word	0x08006b6b
 8006b20:	08006b95 	.word	0x08006b95
 8006b24:	08006b95 	.word	0x08006b95
 8006b28:	08006b95 	.word	0x08006b95
 8006b2c:	08006b79 	.word	0x08006b79
 8006b30:	08006b95 	.word	0x08006b95
 8006b34:	08006b95 	.word	0x08006b95
 8006b38:	08006b95 	.word	0x08006b95
 8006b3c:	08006b87 	.word	0x08006b87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 f9ce 	bl	8006ee8 <TIM_OC1_SetConfig>
      break;
 8006b4c:	e025      	b.n	8006b9a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68b9      	ldr	r1, [r7, #8]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 fa57 	bl	8007008 <TIM_OC2_SetConfig>
      break;
 8006b5a:	e01e      	b.n	8006b9a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68b9      	ldr	r1, [r7, #8]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fada 	bl	800711c <TIM_OC3_SetConfig>
      break;
 8006b68:	e017      	b.n	8006b9a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68b9      	ldr	r1, [r7, #8]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 fb5b 	bl	800722c <TIM_OC4_SetConfig>
      break;
 8006b76:	e010      	b.n	8006b9a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68b9      	ldr	r1, [r7, #8]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 fbbe 	bl	8007300 <TIM_OC5_SetConfig>
      break;
 8006b84:	e009      	b.n	8006b9a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68b9      	ldr	r1, [r7, #8]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 fc1b 	bl	80073c8 <TIM_OC6_SetConfig>
      break;
 8006b92:	e002      	b.n	8006b9a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	75fb      	strb	r3, [r7, #23]
      break;
 8006b98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d101      	bne.n	8006bc8 <HAL_TIM_ConfigClockSource+0x1c>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	e0dc      	b.n	8006d82 <HAL_TIM_ConfigClockSource+0x1d6>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	4b6a      	ldr	r3, [pc, #424]	; (8006d8c <HAL_TIM_ConfigClockSource+0x1e0>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a64      	ldr	r2, [pc, #400]	; (8006d90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	f000 80a9 	beq.w	8006d56 <HAL_TIM_ConfigClockSource+0x1aa>
 8006c04:	4a62      	ldr	r2, [pc, #392]	; (8006d90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	f200 80ae 	bhi.w	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c0c:	4a61      	ldr	r2, [pc, #388]	; (8006d94 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	f000 80a1 	beq.w	8006d56 <HAL_TIM_ConfigClockSource+0x1aa>
 8006c14:	4a5f      	ldr	r2, [pc, #380]	; (8006d94 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	f200 80a6 	bhi.w	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c1c:	4a5e      	ldr	r2, [pc, #376]	; (8006d98 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	f000 8099 	beq.w	8006d56 <HAL_TIM_ConfigClockSource+0x1aa>
 8006c24:	4a5c      	ldr	r2, [pc, #368]	; (8006d98 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	f200 809e 	bhi.w	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c2c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006c30:	f000 8091 	beq.w	8006d56 <HAL_TIM_ConfigClockSource+0x1aa>
 8006c34:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006c38:	f200 8096 	bhi.w	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c40:	f000 8089 	beq.w	8006d56 <HAL_TIM_ConfigClockSource+0x1aa>
 8006c44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c48:	f200 808e 	bhi.w	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c50:	d03e      	beq.n	8006cd0 <HAL_TIM_ConfigClockSource+0x124>
 8006c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c56:	f200 8087 	bhi.w	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c5e:	f000 8086 	beq.w	8006d6e <HAL_TIM_ConfigClockSource+0x1c2>
 8006c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c66:	d87f      	bhi.n	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c68:	2b70      	cmp	r3, #112	; 0x70
 8006c6a:	d01a      	beq.n	8006ca2 <HAL_TIM_ConfigClockSource+0xf6>
 8006c6c:	2b70      	cmp	r3, #112	; 0x70
 8006c6e:	d87b      	bhi.n	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c70:	2b60      	cmp	r3, #96	; 0x60
 8006c72:	d050      	beq.n	8006d16 <HAL_TIM_ConfigClockSource+0x16a>
 8006c74:	2b60      	cmp	r3, #96	; 0x60
 8006c76:	d877      	bhi.n	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c78:	2b50      	cmp	r3, #80	; 0x50
 8006c7a:	d03c      	beq.n	8006cf6 <HAL_TIM_ConfigClockSource+0x14a>
 8006c7c:	2b50      	cmp	r3, #80	; 0x50
 8006c7e:	d873      	bhi.n	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c80:	2b40      	cmp	r3, #64	; 0x40
 8006c82:	d058      	beq.n	8006d36 <HAL_TIM_ConfigClockSource+0x18a>
 8006c84:	2b40      	cmp	r3, #64	; 0x40
 8006c86:	d86f      	bhi.n	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c88:	2b30      	cmp	r3, #48	; 0x30
 8006c8a:	d064      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x1aa>
 8006c8c:	2b30      	cmp	r3, #48	; 0x30
 8006c8e:	d86b      	bhi.n	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c90:	2b20      	cmp	r3, #32
 8006c92:	d060      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x1aa>
 8006c94:	2b20      	cmp	r3, #32
 8006c96:	d867      	bhi.n	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d05c      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x1aa>
 8006c9c:	2b10      	cmp	r3, #16
 8006c9e:	d05a      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x1aa>
 8006ca0:	e062      	b.n	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cb2:	f000 fc6d 	bl	8007590 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006cc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	609a      	str	r2, [r3, #8]
      break;
 8006cce:	e04f      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ce0:	f000 fc56 	bl	8007590 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689a      	ldr	r2, [r3, #8]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cf2:	609a      	str	r2, [r3, #8]
      break;
 8006cf4:	e03c      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d02:	461a      	mov	r2, r3
 8006d04:	f000 fbc6 	bl	8007494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2150      	movs	r1, #80	; 0x50
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fc20 	bl	8007554 <TIM_ITRx_SetConfig>
      break;
 8006d14:	e02c      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d22:	461a      	mov	r2, r3
 8006d24:	f000 fbe5 	bl	80074f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2160      	movs	r1, #96	; 0x60
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 fc10 	bl	8007554 <TIM_ITRx_SetConfig>
      break;
 8006d34:	e01c      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d42:	461a      	mov	r2, r3
 8006d44:	f000 fba6 	bl	8007494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2140      	movs	r1, #64	; 0x40
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fc00 	bl	8007554 <TIM_ITRx_SetConfig>
      break;
 8006d54:	e00c      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4610      	mov	r0, r2
 8006d62:	f000 fbf7 	bl	8007554 <TIM_ITRx_SetConfig>
      break;
 8006d66:	e003      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d6c:	e000      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006d6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	ffceff88 	.word	0xffceff88
 8006d90:	00100040 	.word	0x00100040
 8006d94:	00100030 	.word	0x00100030
 8006d98:	00100020 	.word	0x00100020

08006d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a46      	ldr	r2, [pc, #280]	; (8006ec8 <TIM_Base_SetConfig+0x12c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d013      	beq.n	8006ddc <TIM_Base_SetConfig+0x40>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dba:	d00f      	beq.n	8006ddc <TIM_Base_SetConfig+0x40>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a43      	ldr	r2, [pc, #268]	; (8006ecc <TIM_Base_SetConfig+0x130>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d00b      	beq.n	8006ddc <TIM_Base_SetConfig+0x40>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a42      	ldr	r2, [pc, #264]	; (8006ed0 <TIM_Base_SetConfig+0x134>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d007      	beq.n	8006ddc <TIM_Base_SetConfig+0x40>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a41      	ldr	r2, [pc, #260]	; (8006ed4 <TIM_Base_SetConfig+0x138>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d003      	beq.n	8006ddc <TIM_Base_SetConfig+0x40>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a40      	ldr	r2, [pc, #256]	; (8006ed8 <TIM_Base_SetConfig+0x13c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d108      	bne.n	8006dee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a35      	ldr	r2, [pc, #212]	; (8006ec8 <TIM_Base_SetConfig+0x12c>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d01f      	beq.n	8006e36 <TIM_Base_SetConfig+0x9a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dfc:	d01b      	beq.n	8006e36 <TIM_Base_SetConfig+0x9a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a32      	ldr	r2, [pc, #200]	; (8006ecc <TIM_Base_SetConfig+0x130>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d017      	beq.n	8006e36 <TIM_Base_SetConfig+0x9a>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a31      	ldr	r2, [pc, #196]	; (8006ed0 <TIM_Base_SetConfig+0x134>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d013      	beq.n	8006e36 <TIM_Base_SetConfig+0x9a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a30      	ldr	r2, [pc, #192]	; (8006ed4 <TIM_Base_SetConfig+0x138>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d00f      	beq.n	8006e36 <TIM_Base_SetConfig+0x9a>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a2f      	ldr	r2, [pc, #188]	; (8006ed8 <TIM_Base_SetConfig+0x13c>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d00b      	beq.n	8006e36 <TIM_Base_SetConfig+0x9a>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a2e      	ldr	r2, [pc, #184]	; (8006edc <TIM_Base_SetConfig+0x140>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d007      	beq.n	8006e36 <TIM_Base_SetConfig+0x9a>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a2d      	ldr	r2, [pc, #180]	; (8006ee0 <TIM_Base_SetConfig+0x144>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d003      	beq.n	8006e36 <TIM_Base_SetConfig+0x9a>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a2c      	ldr	r2, [pc, #176]	; (8006ee4 <TIM_Base_SetConfig+0x148>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d108      	bne.n	8006e48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	689a      	ldr	r2, [r3, #8]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a16      	ldr	r2, [pc, #88]	; (8006ec8 <TIM_Base_SetConfig+0x12c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d00f      	beq.n	8006e94 <TIM_Base_SetConfig+0xf8>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a18      	ldr	r2, [pc, #96]	; (8006ed8 <TIM_Base_SetConfig+0x13c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d00b      	beq.n	8006e94 <TIM_Base_SetConfig+0xf8>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a17      	ldr	r2, [pc, #92]	; (8006edc <TIM_Base_SetConfig+0x140>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d007      	beq.n	8006e94 <TIM_Base_SetConfig+0xf8>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a16      	ldr	r2, [pc, #88]	; (8006ee0 <TIM_Base_SetConfig+0x144>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d003      	beq.n	8006e94 <TIM_Base_SetConfig+0xf8>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a15      	ldr	r2, [pc, #84]	; (8006ee4 <TIM_Base_SetConfig+0x148>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d103      	bne.n	8006e9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	691a      	ldr	r2, [r3, #16]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d105      	bne.n	8006eba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	f023 0201 	bic.w	r2, r3, #1
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	611a      	str	r2, [r3, #16]
  }
}
 8006eba:	bf00      	nop
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	40010000 	.word	0x40010000
 8006ecc:	40000400 	.word	0x40000400
 8006ed0:	40000800 	.word	0x40000800
 8006ed4:	40000c00 	.word	0x40000c00
 8006ed8:	40010400 	.word	0x40010400
 8006edc:	40014000 	.word	0x40014000
 8006ee0:	40014400 	.word	0x40014400
 8006ee4:	40014800 	.word	0x40014800

08006ee8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	f023 0201 	bic.w	r2, r3, #1
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	4b37      	ldr	r3, [pc, #220]	; (8006ff0 <TIM_OC1_SetConfig+0x108>)
 8006f14:	4013      	ands	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 0303 	bic.w	r3, r3, #3
 8006f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f023 0302 	bic.w	r3, r3, #2
 8006f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a2d      	ldr	r2, [pc, #180]	; (8006ff4 <TIM_OC1_SetConfig+0x10c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d00f      	beq.n	8006f64 <TIM_OC1_SetConfig+0x7c>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a2c      	ldr	r2, [pc, #176]	; (8006ff8 <TIM_OC1_SetConfig+0x110>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d00b      	beq.n	8006f64 <TIM_OC1_SetConfig+0x7c>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a2b      	ldr	r2, [pc, #172]	; (8006ffc <TIM_OC1_SetConfig+0x114>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d007      	beq.n	8006f64 <TIM_OC1_SetConfig+0x7c>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a2a      	ldr	r2, [pc, #168]	; (8007000 <TIM_OC1_SetConfig+0x118>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d003      	beq.n	8006f64 <TIM_OC1_SetConfig+0x7c>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a29      	ldr	r2, [pc, #164]	; (8007004 <TIM_OC1_SetConfig+0x11c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d10c      	bne.n	8006f7e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f023 0308 	bic.w	r3, r3, #8
 8006f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f023 0304 	bic.w	r3, r3, #4
 8006f7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a1c      	ldr	r2, [pc, #112]	; (8006ff4 <TIM_OC1_SetConfig+0x10c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d00f      	beq.n	8006fa6 <TIM_OC1_SetConfig+0xbe>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a1b      	ldr	r2, [pc, #108]	; (8006ff8 <TIM_OC1_SetConfig+0x110>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d00b      	beq.n	8006fa6 <TIM_OC1_SetConfig+0xbe>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a1a      	ldr	r2, [pc, #104]	; (8006ffc <TIM_OC1_SetConfig+0x114>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d007      	beq.n	8006fa6 <TIM_OC1_SetConfig+0xbe>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a19      	ldr	r2, [pc, #100]	; (8007000 <TIM_OC1_SetConfig+0x118>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d003      	beq.n	8006fa6 <TIM_OC1_SetConfig+0xbe>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a18      	ldr	r2, [pc, #96]	; (8007004 <TIM_OC1_SetConfig+0x11c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d111      	bne.n	8006fca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	621a      	str	r2, [r3, #32]
}
 8006fe4:	bf00      	nop
 8006fe6:	371c      	adds	r7, #28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	fffeff8f 	.word	0xfffeff8f
 8006ff4:	40010000 	.word	0x40010000
 8006ff8:	40010400 	.word	0x40010400
 8006ffc:	40014000 	.word	0x40014000
 8007000:	40014400 	.word	0x40014400
 8007004:	40014800 	.word	0x40014800

08007008 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	f023 0210 	bic.w	r2, r3, #16
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	4b34      	ldr	r3, [pc, #208]	; (8007104 <TIM_OC2_SetConfig+0xfc>)
 8007034:	4013      	ands	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800703e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	021b      	lsls	r3, r3, #8
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	4313      	orrs	r3, r2
 800704a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f023 0320 	bic.w	r3, r3, #32
 8007052:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	011b      	lsls	r3, r3, #4
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	4313      	orrs	r3, r2
 800705e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a29      	ldr	r2, [pc, #164]	; (8007108 <TIM_OC2_SetConfig+0x100>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d003      	beq.n	8007070 <TIM_OC2_SetConfig+0x68>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a28      	ldr	r2, [pc, #160]	; (800710c <TIM_OC2_SetConfig+0x104>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d10d      	bne.n	800708c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	011b      	lsls	r3, r3, #4
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	4313      	orrs	r3, r2
 8007082:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800708a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a1e      	ldr	r2, [pc, #120]	; (8007108 <TIM_OC2_SetConfig+0x100>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d00f      	beq.n	80070b4 <TIM_OC2_SetConfig+0xac>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a1d      	ldr	r2, [pc, #116]	; (800710c <TIM_OC2_SetConfig+0x104>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d00b      	beq.n	80070b4 <TIM_OC2_SetConfig+0xac>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a1c      	ldr	r2, [pc, #112]	; (8007110 <TIM_OC2_SetConfig+0x108>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d007      	beq.n	80070b4 <TIM_OC2_SetConfig+0xac>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a1b      	ldr	r2, [pc, #108]	; (8007114 <TIM_OC2_SetConfig+0x10c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d003      	beq.n	80070b4 <TIM_OC2_SetConfig+0xac>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a1a      	ldr	r2, [pc, #104]	; (8007118 <TIM_OC2_SetConfig+0x110>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d113      	bne.n	80070dc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	621a      	str	r2, [r3, #32]
}
 80070f6:	bf00      	nop
 80070f8:	371c      	adds	r7, #28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	feff8fff 	.word	0xfeff8fff
 8007108:	40010000 	.word	0x40010000
 800710c:	40010400 	.word	0x40010400
 8007110:	40014000 	.word	0x40014000
 8007114:	40014400 	.word	0x40014400
 8007118:	40014800 	.word	0x40014800

0800711c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	4b33      	ldr	r3, [pc, #204]	; (8007214 <TIM_OC3_SetConfig+0xf8>)
 8007148:	4013      	ands	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f023 0303 	bic.w	r3, r3, #3
 8007152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	021b      	lsls	r3, r3, #8
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a28      	ldr	r2, [pc, #160]	; (8007218 <TIM_OC3_SetConfig+0xfc>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d003      	beq.n	8007182 <TIM_OC3_SetConfig+0x66>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a27      	ldr	r2, [pc, #156]	; (800721c <TIM_OC3_SetConfig+0x100>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d10d      	bne.n	800719e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007188:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	021b      	lsls	r3, r3, #8
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	4313      	orrs	r3, r2
 8007194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800719c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a1d      	ldr	r2, [pc, #116]	; (8007218 <TIM_OC3_SetConfig+0xfc>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d00f      	beq.n	80071c6 <TIM_OC3_SetConfig+0xaa>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a1c      	ldr	r2, [pc, #112]	; (800721c <TIM_OC3_SetConfig+0x100>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d00b      	beq.n	80071c6 <TIM_OC3_SetConfig+0xaa>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a1b      	ldr	r2, [pc, #108]	; (8007220 <TIM_OC3_SetConfig+0x104>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d007      	beq.n	80071c6 <TIM_OC3_SetConfig+0xaa>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a1a      	ldr	r2, [pc, #104]	; (8007224 <TIM_OC3_SetConfig+0x108>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d003      	beq.n	80071c6 <TIM_OC3_SetConfig+0xaa>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a19      	ldr	r2, [pc, #100]	; (8007228 <TIM_OC3_SetConfig+0x10c>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d113      	bne.n	80071ee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	4313      	orrs	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	621a      	str	r2, [r3, #32]
}
 8007208:	bf00      	nop
 800720a:	371c      	adds	r7, #28
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	fffeff8f 	.word	0xfffeff8f
 8007218:	40010000 	.word	0x40010000
 800721c:	40010400 	.word	0x40010400
 8007220:	40014000 	.word	0x40014000
 8007224:	40014400 	.word	0x40014400
 8007228:	40014800 	.word	0x40014800

0800722c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800722c:	b480      	push	{r7}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	4b24      	ldr	r3, [pc, #144]	; (80072e8 <TIM_OC4_SetConfig+0xbc>)
 8007258:	4013      	ands	r3, r2
 800725a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	021b      	lsls	r3, r3, #8
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	031b      	lsls	r3, r3, #12
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	4313      	orrs	r3, r2
 8007282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a19      	ldr	r2, [pc, #100]	; (80072ec <TIM_OC4_SetConfig+0xc0>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00f      	beq.n	80072ac <TIM_OC4_SetConfig+0x80>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a18      	ldr	r2, [pc, #96]	; (80072f0 <TIM_OC4_SetConfig+0xc4>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d00b      	beq.n	80072ac <TIM_OC4_SetConfig+0x80>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a17      	ldr	r2, [pc, #92]	; (80072f4 <TIM_OC4_SetConfig+0xc8>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d007      	beq.n	80072ac <TIM_OC4_SetConfig+0x80>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a16      	ldr	r2, [pc, #88]	; (80072f8 <TIM_OC4_SetConfig+0xcc>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d003      	beq.n	80072ac <TIM_OC4_SetConfig+0x80>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a15      	ldr	r2, [pc, #84]	; (80072fc <TIM_OC4_SetConfig+0xd0>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d109      	bne.n	80072c0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	019b      	lsls	r3, r3, #6
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	4313      	orrs	r3, r2
 80072be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	621a      	str	r2, [r3, #32]
}
 80072da:	bf00      	nop
 80072dc:	371c      	adds	r7, #28
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	feff8fff 	.word	0xfeff8fff
 80072ec:	40010000 	.word	0x40010000
 80072f0:	40010400 	.word	0x40010400
 80072f4:	40014000 	.word	0x40014000
 80072f8:	40014400 	.word	0x40014400
 80072fc:	40014800 	.word	0x40014800

08007300 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007300:	b480      	push	{r7}
 8007302:	b087      	sub	sp, #28
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	4b21      	ldr	r3, [pc, #132]	; (80073b0 <TIM_OC5_SetConfig+0xb0>)
 800732c:	4013      	ands	r3, r2
 800732e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	4313      	orrs	r3, r2
 8007338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007340:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	041b      	lsls	r3, r3, #16
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	4313      	orrs	r3, r2
 800734c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a18      	ldr	r2, [pc, #96]	; (80073b4 <TIM_OC5_SetConfig+0xb4>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d00f      	beq.n	8007376 <TIM_OC5_SetConfig+0x76>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a17      	ldr	r2, [pc, #92]	; (80073b8 <TIM_OC5_SetConfig+0xb8>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d00b      	beq.n	8007376 <TIM_OC5_SetConfig+0x76>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a16      	ldr	r2, [pc, #88]	; (80073bc <TIM_OC5_SetConfig+0xbc>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d007      	beq.n	8007376 <TIM_OC5_SetConfig+0x76>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a15      	ldr	r2, [pc, #84]	; (80073c0 <TIM_OC5_SetConfig+0xc0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d003      	beq.n	8007376 <TIM_OC5_SetConfig+0x76>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a14      	ldr	r2, [pc, #80]	; (80073c4 <TIM_OC5_SetConfig+0xc4>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d109      	bne.n	800738a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800737c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	021b      	lsls	r3, r3, #8
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	4313      	orrs	r3, r2
 8007388:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	621a      	str	r2, [r3, #32]
}
 80073a4:	bf00      	nop
 80073a6:	371c      	adds	r7, #28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	fffeff8f 	.word	0xfffeff8f
 80073b4:	40010000 	.word	0x40010000
 80073b8:	40010400 	.word	0x40010400
 80073bc:	40014000 	.word	0x40014000
 80073c0:	40014400 	.word	0x40014400
 80073c4:	40014800 	.word	0x40014800

080073c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	4b22      	ldr	r3, [pc, #136]	; (800747c <TIM_OC6_SetConfig+0xb4>)
 80073f4:	4013      	ands	r3, r2
 80073f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	021b      	lsls	r3, r3, #8
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	4313      	orrs	r3, r2
 8007402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800740a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	051b      	lsls	r3, r3, #20
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	4313      	orrs	r3, r2
 8007416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a19      	ldr	r2, [pc, #100]	; (8007480 <TIM_OC6_SetConfig+0xb8>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d00f      	beq.n	8007440 <TIM_OC6_SetConfig+0x78>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a18      	ldr	r2, [pc, #96]	; (8007484 <TIM_OC6_SetConfig+0xbc>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d00b      	beq.n	8007440 <TIM_OC6_SetConfig+0x78>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a17      	ldr	r2, [pc, #92]	; (8007488 <TIM_OC6_SetConfig+0xc0>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d007      	beq.n	8007440 <TIM_OC6_SetConfig+0x78>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a16      	ldr	r2, [pc, #88]	; (800748c <TIM_OC6_SetConfig+0xc4>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d003      	beq.n	8007440 <TIM_OC6_SetConfig+0x78>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a15      	ldr	r2, [pc, #84]	; (8007490 <TIM_OC6_SetConfig+0xc8>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d109      	bne.n	8007454 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007446:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	029b      	lsls	r3, r3, #10
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	4313      	orrs	r3, r2
 8007452:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	621a      	str	r2, [r3, #32]
}
 800746e:	bf00      	nop
 8007470:	371c      	adds	r7, #28
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	feff8fff 	.word	0xfeff8fff
 8007480:	40010000 	.word	0x40010000
 8007484:	40010400 	.word	0x40010400
 8007488:	40014000 	.word	0x40014000
 800748c:	40014400 	.word	0x40014400
 8007490:	40014800 	.word	0x40014800

08007494 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6a1b      	ldr	r3, [r3, #32]
 80074a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	f023 0201 	bic.w	r2, r3, #1
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	011b      	lsls	r3, r3, #4
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f023 030a 	bic.w	r3, r3, #10
 80074d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	621a      	str	r2, [r3, #32]
}
 80074e6:	bf00      	nop
 80074e8:	371c      	adds	r7, #28
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b087      	sub	sp, #28
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	60f8      	str	r0, [r7, #12]
 80074fa:	60b9      	str	r1, [r7, #8]
 80074fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6a1b      	ldr	r3, [r3, #32]
 8007508:	f023 0210 	bic.w	r2, r3, #16
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800751c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	031b      	lsls	r3, r3, #12
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	4313      	orrs	r3, r2
 8007526:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800752e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	011b      	lsls	r3, r3, #4
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	4313      	orrs	r3, r2
 8007538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	621a      	str	r2, [r3, #32]
}
 8007546:	bf00      	nop
 8007548:	371c      	adds	r7, #28
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
	...

08007554 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	4b09      	ldr	r3, [pc, #36]	; (800758c <TIM_ITRx_SetConfig+0x38>)
 8007568:	4013      	ands	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4313      	orrs	r3, r2
 8007572:	f043 0307 	orr.w	r3, r3, #7
 8007576:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	609a      	str	r2, [r3, #8]
}
 800757e:	bf00      	nop
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	ffcfff8f 	.word	0xffcfff8f

08007590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007590:	b480      	push	{r7}
 8007592:	b087      	sub	sp, #28
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
 800759c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	021a      	lsls	r2, r3, #8
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	431a      	orrs	r2, r3
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	609a      	str	r2, [r3, #8]
}
 80075c4:	bf00      	nop
 80075c6:	371c      	adds	r7, #28
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f003 031f 	and.w	r3, r3, #31
 80075e2:	2201      	movs	r2, #1
 80075e4:	fa02 f303 	lsl.w	r3, r2, r3
 80075e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6a1a      	ldr	r2, [r3, #32]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	43db      	mvns	r3, r3
 80075f2:	401a      	ands	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6a1a      	ldr	r2, [r3, #32]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	f003 031f 	and.w	r3, r3, #31
 8007602:	6879      	ldr	r1, [r7, #4]
 8007604:	fa01 f303 	lsl.w	r3, r1, r3
 8007608:	431a      	orrs	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	621a      	str	r2, [r3, #32]
}
 800760e:	bf00      	nop
 8007610:	371c      	adds	r7, #28
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
	...

0800761c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800762c:	2b01      	cmp	r3, #1
 800762e:	d101      	bne.n	8007634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007630:	2302      	movs	r3, #2
 8007632:	e06d      	b.n	8007710 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2202      	movs	r2, #2
 8007640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a30      	ldr	r2, [pc, #192]	; (800771c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d004      	beq.n	8007668 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a2f      	ldr	r2, [pc, #188]	; (8007720 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d108      	bne.n	800767a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800766e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007680:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a20      	ldr	r2, [pc, #128]	; (800771c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d022      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a6:	d01d      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a1d      	ldr	r2, [pc, #116]	; (8007724 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d018      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a1c      	ldr	r2, [pc, #112]	; (8007728 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d013      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a1a      	ldr	r2, [pc, #104]	; (800772c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d00e      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a15      	ldr	r2, [pc, #84]	; (8007720 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d009      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a16      	ldr	r2, [pc, #88]	; (8007730 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d004      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a15      	ldr	r2, [pc, #84]	; (8007734 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d10c      	bne.n	80076fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	40010000 	.word	0x40010000
 8007720:	40010400 	.word	0x40010400
 8007724:	40000400 	.word	0x40000400
 8007728:	40000800 	.word	0x40000800
 800772c:	40000c00 	.word	0x40000c00
 8007730:	40001800 	.word	0x40001800
 8007734:	40014000 	.word	0x40014000

08007738 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d101      	bne.n	800774a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e042      	b.n	80077d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007750:	2b00      	cmp	r3, #0
 8007752:	d106      	bne.n	8007762 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7f9 fb17 	bl	8000d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2224      	movs	r2, #36	; 0x24
 8007766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f022 0201 	bic.w	r2, r2, #1
 8007778:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777e:	2b00      	cmp	r3, #0
 8007780:	d002      	beq.n	8007788 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fd90 	bl	80082a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f825 	bl	80077d8 <UART_SetConfig>
 800778e:	4603      	mov	r3, r0
 8007790:	2b01      	cmp	r3, #1
 8007792:	d101      	bne.n	8007798 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e01b      	b.n	80077d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689a      	ldr	r2, [r3, #8]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f042 0201 	orr.w	r2, r2, #1
 80077c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fe0f 	bl	80083ec <UART_CheckIdleState>
 80077ce:	4603      	mov	r3, r0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077dc:	b092      	sub	sp, #72	; 0x48
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	689a      	ldr	r2, [r3, #8]
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	431a      	orrs	r2, r3
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	431a      	orrs	r2, r3
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	69db      	ldr	r3, [r3, #28]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	4bbe      	ldr	r3, [pc, #760]	; (8007b00 <UART_SetConfig+0x328>)
 8007808:	4013      	ands	r3, r2
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	6812      	ldr	r2, [r2, #0]
 800780e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007810:	430b      	orrs	r3, r1
 8007812:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	68da      	ldr	r2, [r3, #12]
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	430a      	orrs	r2, r1
 8007828:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4ab3      	ldr	r2, [pc, #716]	; (8007b04 <UART_SetConfig+0x32c>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d004      	beq.n	8007844 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007840:	4313      	orrs	r3, r2
 8007842:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689a      	ldr	r2, [r3, #8]
 800784a:	4baf      	ldr	r3, [pc, #700]	; (8007b08 <UART_SetConfig+0x330>)
 800784c:	4013      	ands	r3, r2
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	6812      	ldr	r2, [r2, #0]
 8007852:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007854:	430b      	orrs	r3, r1
 8007856:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785e:	f023 010f 	bic.w	r1, r3, #15
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	430a      	orrs	r2, r1
 800786c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4aa6      	ldr	r2, [pc, #664]	; (8007b0c <UART_SetConfig+0x334>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d177      	bne.n	8007968 <UART_SetConfig+0x190>
 8007878:	4ba5      	ldr	r3, [pc, #660]	; (8007b10 <UART_SetConfig+0x338>)
 800787a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800787c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007880:	2b28      	cmp	r3, #40	; 0x28
 8007882:	d86d      	bhi.n	8007960 <UART_SetConfig+0x188>
 8007884:	a201      	add	r2, pc, #4	; (adr r2, 800788c <UART_SetConfig+0xb4>)
 8007886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788a:	bf00      	nop
 800788c:	08007931 	.word	0x08007931
 8007890:	08007961 	.word	0x08007961
 8007894:	08007961 	.word	0x08007961
 8007898:	08007961 	.word	0x08007961
 800789c:	08007961 	.word	0x08007961
 80078a0:	08007961 	.word	0x08007961
 80078a4:	08007961 	.word	0x08007961
 80078a8:	08007961 	.word	0x08007961
 80078ac:	08007939 	.word	0x08007939
 80078b0:	08007961 	.word	0x08007961
 80078b4:	08007961 	.word	0x08007961
 80078b8:	08007961 	.word	0x08007961
 80078bc:	08007961 	.word	0x08007961
 80078c0:	08007961 	.word	0x08007961
 80078c4:	08007961 	.word	0x08007961
 80078c8:	08007961 	.word	0x08007961
 80078cc:	08007941 	.word	0x08007941
 80078d0:	08007961 	.word	0x08007961
 80078d4:	08007961 	.word	0x08007961
 80078d8:	08007961 	.word	0x08007961
 80078dc:	08007961 	.word	0x08007961
 80078e0:	08007961 	.word	0x08007961
 80078e4:	08007961 	.word	0x08007961
 80078e8:	08007961 	.word	0x08007961
 80078ec:	08007949 	.word	0x08007949
 80078f0:	08007961 	.word	0x08007961
 80078f4:	08007961 	.word	0x08007961
 80078f8:	08007961 	.word	0x08007961
 80078fc:	08007961 	.word	0x08007961
 8007900:	08007961 	.word	0x08007961
 8007904:	08007961 	.word	0x08007961
 8007908:	08007961 	.word	0x08007961
 800790c:	08007951 	.word	0x08007951
 8007910:	08007961 	.word	0x08007961
 8007914:	08007961 	.word	0x08007961
 8007918:	08007961 	.word	0x08007961
 800791c:	08007961 	.word	0x08007961
 8007920:	08007961 	.word	0x08007961
 8007924:	08007961 	.word	0x08007961
 8007928:	08007961 	.word	0x08007961
 800792c:	08007959 	.word	0x08007959
 8007930:	2301      	movs	r3, #1
 8007932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007936:	e222      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007938:	2304      	movs	r3, #4
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800793e:	e21e      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007940:	2308      	movs	r3, #8
 8007942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007946:	e21a      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007948:	2310      	movs	r3, #16
 800794a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800794e:	e216      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007950:	2320      	movs	r3, #32
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007956:	e212      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007958:	2340      	movs	r3, #64	; 0x40
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800795e:	e20e      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007960:	2380      	movs	r3, #128	; 0x80
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007966:	e20a      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a69      	ldr	r2, [pc, #420]	; (8007b14 <UART_SetConfig+0x33c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d130      	bne.n	80079d4 <UART_SetConfig+0x1fc>
 8007972:	4b67      	ldr	r3, [pc, #412]	; (8007b10 <UART_SetConfig+0x338>)
 8007974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007976:	f003 0307 	and.w	r3, r3, #7
 800797a:	2b05      	cmp	r3, #5
 800797c:	d826      	bhi.n	80079cc <UART_SetConfig+0x1f4>
 800797e:	a201      	add	r2, pc, #4	; (adr r2, 8007984 <UART_SetConfig+0x1ac>)
 8007980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007984:	0800799d 	.word	0x0800799d
 8007988:	080079a5 	.word	0x080079a5
 800798c:	080079ad 	.word	0x080079ad
 8007990:	080079b5 	.word	0x080079b5
 8007994:	080079bd 	.word	0x080079bd
 8007998:	080079c5 	.word	0x080079c5
 800799c:	2300      	movs	r3, #0
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079a2:	e1ec      	b.n	8007d7e <UART_SetConfig+0x5a6>
 80079a4:	2304      	movs	r3, #4
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079aa:	e1e8      	b.n	8007d7e <UART_SetConfig+0x5a6>
 80079ac:	2308      	movs	r3, #8
 80079ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079b2:	e1e4      	b.n	8007d7e <UART_SetConfig+0x5a6>
 80079b4:	2310      	movs	r3, #16
 80079b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ba:	e1e0      	b.n	8007d7e <UART_SetConfig+0x5a6>
 80079bc:	2320      	movs	r3, #32
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079c2:	e1dc      	b.n	8007d7e <UART_SetConfig+0x5a6>
 80079c4:	2340      	movs	r3, #64	; 0x40
 80079c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ca:	e1d8      	b.n	8007d7e <UART_SetConfig+0x5a6>
 80079cc:	2380      	movs	r3, #128	; 0x80
 80079ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079d2:	e1d4      	b.n	8007d7e <UART_SetConfig+0x5a6>
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a4f      	ldr	r2, [pc, #316]	; (8007b18 <UART_SetConfig+0x340>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d130      	bne.n	8007a40 <UART_SetConfig+0x268>
 80079de:	4b4c      	ldr	r3, [pc, #304]	; (8007b10 <UART_SetConfig+0x338>)
 80079e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e2:	f003 0307 	and.w	r3, r3, #7
 80079e6:	2b05      	cmp	r3, #5
 80079e8:	d826      	bhi.n	8007a38 <UART_SetConfig+0x260>
 80079ea:	a201      	add	r2, pc, #4	; (adr r2, 80079f0 <UART_SetConfig+0x218>)
 80079ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f0:	08007a09 	.word	0x08007a09
 80079f4:	08007a11 	.word	0x08007a11
 80079f8:	08007a19 	.word	0x08007a19
 80079fc:	08007a21 	.word	0x08007a21
 8007a00:	08007a29 	.word	0x08007a29
 8007a04:	08007a31 	.word	0x08007a31
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a0e:	e1b6      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a10:	2304      	movs	r3, #4
 8007a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a16:	e1b2      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a18:	2308      	movs	r3, #8
 8007a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a1e:	e1ae      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a20:	2310      	movs	r3, #16
 8007a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a26:	e1aa      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a28:	2320      	movs	r3, #32
 8007a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a2e:	e1a6      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a30:	2340      	movs	r3, #64	; 0x40
 8007a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a36:	e1a2      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a38:	2380      	movs	r3, #128	; 0x80
 8007a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a3e:	e19e      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a35      	ldr	r2, [pc, #212]	; (8007b1c <UART_SetConfig+0x344>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d130      	bne.n	8007aac <UART_SetConfig+0x2d4>
 8007a4a:	4b31      	ldr	r3, [pc, #196]	; (8007b10 <UART_SetConfig+0x338>)
 8007a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4e:	f003 0307 	and.w	r3, r3, #7
 8007a52:	2b05      	cmp	r3, #5
 8007a54:	d826      	bhi.n	8007aa4 <UART_SetConfig+0x2cc>
 8007a56:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <UART_SetConfig+0x284>)
 8007a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5c:	08007a75 	.word	0x08007a75
 8007a60:	08007a7d 	.word	0x08007a7d
 8007a64:	08007a85 	.word	0x08007a85
 8007a68:	08007a8d 	.word	0x08007a8d
 8007a6c:	08007a95 	.word	0x08007a95
 8007a70:	08007a9d 	.word	0x08007a9d
 8007a74:	2300      	movs	r3, #0
 8007a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a7a:	e180      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a7c:	2304      	movs	r3, #4
 8007a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a82:	e17c      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a84:	2308      	movs	r3, #8
 8007a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a8a:	e178      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a8c:	2310      	movs	r3, #16
 8007a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a92:	e174      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a94:	2320      	movs	r3, #32
 8007a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a9a:	e170      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a9c:	2340      	movs	r3, #64	; 0x40
 8007a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aa2:	e16c      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007aa4:	2380      	movs	r3, #128	; 0x80
 8007aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aaa:	e168      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a1b      	ldr	r2, [pc, #108]	; (8007b20 <UART_SetConfig+0x348>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d142      	bne.n	8007b3c <UART_SetConfig+0x364>
 8007ab6:	4b16      	ldr	r3, [pc, #88]	; (8007b10 <UART_SetConfig+0x338>)
 8007ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aba:	f003 0307 	and.w	r3, r3, #7
 8007abe:	2b05      	cmp	r3, #5
 8007ac0:	d838      	bhi.n	8007b34 <UART_SetConfig+0x35c>
 8007ac2:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <UART_SetConfig+0x2f0>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007ae1 	.word	0x08007ae1
 8007acc:	08007ae9 	.word	0x08007ae9
 8007ad0:	08007af1 	.word	0x08007af1
 8007ad4:	08007af9 	.word	0x08007af9
 8007ad8:	08007b25 	.word	0x08007b25
 8007adc:	08007b2d 	.word	0x08007b2d
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ae6:	e14a      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007ae8:	2304      	movs	r3, #4
 8007aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aee:	e146      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007af0:	2308      	movs	r3, #8
 8007af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007af6:	e142      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007af8:	2310      	movs	r3, #16
 8007afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007afe:	e13e      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007b00:	cfff69f3 	.word	0xcfff69f3
 8007b04:	58000c00 	.word	0x58000c00
 8007b08:	11fff4ff 	.word	0x11fff4ff
 8007b0c:	40011000 	.word	0x40011000
 8007b10:	58024400 	.word	0x58024400
 8007b14:	40004400 	.word	0x40004400
 8007b18:	40004800 	.word	0x40004800
 8007b1c:	40004c00 	.word	0x40004c00
 8007b20:	40005000 	.word	0x40005000
 8007b24:	2320      	movs	r3, #32
 8007b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b2a:	e128      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007b2c:	2340      	movs	r3, #64	; 0x40
 8007b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b32:	e124      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007b34:	2380      	movs	r3, #128	; 0x80
 8007b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b3a:	e120      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4acb      	ldr	r2, [pc, #812]	; (8007e70 <UART_SetConfig+0x698>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d176      	bne.n	8007c34 <UART_SetConfig+0x45c>
 8007b46:	4bcb      	ldr	r3, [pc, #812]	; (8007e74 <UART_SetConfig+0x69c>)
 8007b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b4e:	2b28      	cmp	r3, #40	; 0x28
 8007b50:	d86c      	bhi.n	8007c2c <UART_SetConfig+0x454>
 8007b52:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <UART_SetConfig+0x380>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007bfd 	.word	0x08007bfd
 8007b5c:	08007c2d 	.word	0x08007c2d
 8007b60:	08007c2d 	.word	0x08007c2d
 8007b64:	08007c2d 	.word	0x08007c2d
 8007b68:	08007c2d 	.word	0x08007c2d
 8007b6c:	08007c2d 	.word	0x08007c2d
 8007b70:	08007c2d 	.word	0x08007c2d
 8007b74:	08007c2d 	.word	0x08007c2d
 8007b78:	08007c05 	.word	0x08007c05
 8007b7c:	08007c2d 	.word	0x08007c2d
 8007b80:	08007c2d 	.word	0x08007c2d
 8007b84:	08007c2d 	.word	0x08007c2d
 8007b88:	08007c2d 	.word	0x08007c2d
 8007b8c:	08007c2d 	.word	0x08007c2d
 8007b90:	08007c2d 	.word	0x08007c2d
 8007b94:	08007c2d 	.word	0x08007c2d
 8007b98:	08007c0d 	.word	0x08007c0d
 8007b9c:	08007c2d 	.word	0x08007c2d
 8007ba0:	08007c2d 	.word	0x08007c2d
 8007ba4:	08007c2d 	.word	0x08007c2d
 8007ba8:	08007c2d 	.word	0x08007c2d
 8007bac:	08007c2d 	.word	0x08007c2d
 8007bb0:	08007c2d 	.word	0x08007c2d
 8007bb4:	08007c2d 	.word	0x08007c2d
 8007bb8:	08007c15 	.word	0x08007c15
 8007bbc:	08007c2d 	.word	0x08007c2d
 8007bc0:	08007c2d 	.word	0x08007c2d
 8007bc4:	08007c2d 	.word	0x08007c2d
 8007bc8:	08007c2d 	.word	0x08007c2d
 8007bcc:	08007c2d 	.word	0x08007c2d
 8007bd0:	08007c2d 	.word	0x08007c2d
 8007bd4:	08007c2d 	.word	0x08007c2d
 8007bd8:	08007c1d 	.word	0x08007c1d
 8007bdc:	08007c2d 	.word	0x08007c2d
 8007be0:	08007c2d 	.word	0x08007c2d
 8007be4:	08007c2d 	.word	0x08007c2d
 8007be8:	08007c2d 	.word	0x08007c2d
 8007bec:	08007c2d 	.word	0x08007c2d
 8007bf0:	08007c2d 	.word	0x08007c2d
 8007bf4:	08007c2d 	.word	0x08007c2d
 8007bf8:	08007c25 	.word	0x08007c25
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c02:	e0bc      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c04:	2304      	movs	r3, #4
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c0a:	e0b8      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c0c:	2308      	movs	r3, #8
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c12:	e0b4      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c14:	2310      	movs	r3, #16
 8007c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c1a:	e0b0      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c1c:	2320      	movs	r3, #32
 8007c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c22:	e0ac      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c24:	2340      	movs	r3, #64	; 0x40
 8007c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c2a:	e0a8      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c2c:	2380      	movs	r3, #128	; 0x80
 8007c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c32:	e0a4      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a8f      	ldr	r2, [pc, #572]	; (8007e78 <UART_SetConfig+0x6a0>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d130      	bne.n	8007ca0 <UART_SetConfig+0x4c8>
 8007c3e:	4b8d      	ldr	r3, [pc, #564]	; (8007e74 <UART_SetConfig+0x69c>)
 8007c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c42:	f003 0307 	and.w	r3, r3, #7
 8007c46:	2b05      	cmp	r3, #5
 8007c48:	d826      	bhi.n	8007c98 <UART_SetConfig+0x4c0>
 8007c4a:	a201      	add	r2, pc, #4	; (adr r2, 8007c50 <UART_SetConfig+0x478>)
 8007c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c50:	08007c69 	.word	0x08007c69
 8007c54:	08007c71 	.word	0x08007c71
 8007c58:	08007c79 	.word	0x08007c79
 8007c5c:	08007c81 	.word	0x08007c81
 8007c60:	08007c89 	.word	0x08007c89
 8007c64:	08007c91 	.word	0x08007c91
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c6e:	e086      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c70:	2304      	movs	r3, #4
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c76:	e082      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c78:	2308      	movs	r3, #8
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c7e:	e07e      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c80:	2310      	movs	r3, #16
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c86:	e07a      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c88:	2320      	movs	r3, #32
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c8e:	e076      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c90:	2340      	movs	r3, #64	; 0x40
 8007c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c96:	e072      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c98:	2380      	movs	r3, #128	; 0x80
 8007c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c9e:	e06e      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a75      	ldr	r2, [pc, #468]	; (8007e7c <UART_SetConfig+0x6a4>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d130      	bne.n	8007d0c <UART_SetConfig+0x534>
 8007caa:	4b72      	ldr	r3, [pc, #456]	; (8007e74 <UART_SetConfig+0x69c>)
 8007cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cae:	f003 0307 	and.w	r3, r3, #7
 8007cb2:	2b05      	cmp	r3, #5
 8007cb4:	d826      	bhi.n	8007d04 <UART_SetConfig+0x52c>
 8007cb6:	a201      	add	r2, pc, #4	; (adr r2, 8007cbc <UART_SetConfig+0x4e4>)
 8007cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbc:	08007cd5 	.word	0x08007cd5
 8007cc0:	08007cdd 	.word	0x08007cdd
 8007cc4:	08007ce5 	.word	0x08007ce5
 8007cc8:	08007ced 	.word	0x08007ced
 8007ccc:	08007cf5 	.word	0x08007cf5
 8007cd0:	08007cfd 	.word	0x08007cfd
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cda:	e050      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007cdc:	2304      	movs	r3, #4
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ce2:	e04c      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007ce4:	2308      	movs	r3, #8
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cea:	e048      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007cec:	2310      	movs	r3, #16
 8007cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cf2:	e044      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007cf4:	2320      	movs	r3, #32
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cfa:	e040      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007cfc:	2340      	movs	r3, #64	; 0x40
 8007cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d02:	e03c      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007d04:	2380      	movs	r3, #128	; 0x80
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d0a:	e038      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a5b      	ldr	r2, [pc, #364]	; (8007e80 <UART_SetConfig+0x6a8>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d130      	bne.n	8007d78 <UART_SetConfig+0x5a0>
 8007d16:	4b57      	ldr	r3, [pc, #348]	; (8007e74 <UART_SetConfig+0x69c>)
 8007d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1a:	f003 0307 	and.w	r3, r3, #7
 8007d1e:	2b05      	cmp	r3, #5
 8007d20:	d826      	bhi.n	8007d70 <UART_SetConfig+0x598>
 8007d22:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <UART_SetConfig+0x550>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007d41 	.word	0x08007d41
 8007d2c:	08007d49 	.word	0x08007d49
 8007d30:	08007d51 	.word	0x08007d51
 8007d34:	08007d59 	.word	0x08007d59
 8007d38:	08007d61 	.word	0x08007d61
 8007d3c:	08007d69 	.word	0x08007d69
 8007d40:	2302      	movs	r3, #2
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d46:	e01a      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007d48:	2304      	movs	r3, #4
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d4e:	e016      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007d50:	2308      	movs	r3, #8
 8007d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d56:	e012      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007d58:	2310      	movs	r3, #16
 8007d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d5e:	e00e      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007d60:	2320      	movs	r3, #32
 8007d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d66:	e00a      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007d68:	2340      	movs	r3, #64	; 0x40
 8007d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d6e:	e006      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007d70:	2380      	movs	r3, #128	; 0x80
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d76:	e002      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007d78:	2380      	movs	r3, #128	; 0x80
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a3f      	ldr	r2, [pc, #252]	; (8007e80 <UART_SetConfig+0x6a8>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	f040 80f8 	bne.w	8007f7a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007d8e:	2b20      	cmp	r3, #32
 8007d90:	dc46      	bgt.n	8007e20 <UART_SetConfig+0x648>
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	f2c0 8082 	blt.w	8007e9c <UART_SetConfig+0x6c4>
 8007d98:	3b02      	subs	r3, #2
 8007d9a:	2b1e      	cmp	r3, #30
 8007d9c:	d87e      	bhi.n	8007e9c <UART_SetConfig+0x6c4>
 8007d9e:	a201      	add	r2, pc, #4	; (adr r2, 8007da4 <UART_SetConfig+0x5cc>)
 8007da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da4:	08007e27 	.word	0x08007e27
 8007da8:	08007e9d 	.word	0x08007e9d
 8007dac:	08007e2f 	.word	0x08007e2f
 8007db0:	08007e9d 	.word	0x08007e9d
 8007db4:	08007e9d 	.word	0x08007e9d
 8007db8:	08007e9d 	.word	0x08007e9d
 8007dbc:	08007e3f 	.word	0x08007e3f
 8007dc0:	08007e9d 	.word	0x08007e9d
 8007dc4:	08007e9d 	.word	0x08007e9d
 8007dc8:	08007e9d 	.word	0x08007e9d
 8007dcc:	08007e9d 	.word	0x08007e9d
 8007dd0:	08007e9d 	.word	0x08007e9d
 8007dd4:	08007e9d 	.word	0x08007e9d
 8007dd8:	08007e9d 	.word	0x08007e9d
 8007ddc:	08007e4f 	.word	0x08007e4f
 8007de0:	08007e9d 	.word	0x08007e9d
 8007de4:	08007e9d 	.word	0x08007e9d
 8007de8:	08007e9d 	.word	0x08007e9d
 8007dec:	08007e9d 	.word	0x08007e9d
 8007df0:	08007e9d 	.word	0x08007e9d
 8007df4:	08007e9d 	.word	0x08007e9d
 8007df8:	08007e9d 	.word	0x08007e9d
 8007dfc:	08007e9d 	.word	0x08007e9d
 8007e00:	08007e9d 	.word	0x08007e9d
 8007e04:	08007e9d 	.word	0x08007e9d
 8007e08:	08007e9d 	.word	0x08007e9d
 8007e0c:	08007e9d 	.word	0x08007e9d
 8007e10:	08007e9d 	.word	0x08007e9d
 8007e14:	08007e9d 	.word	0x08007e9d
 8007e18:	08007e9d 	.word	0x08007e9d
 8007e1c:	08007e8f 	.word	0x08007e8f
 8007e20:	2b40      	cmp	r3, #64	; 0x40
 8007e22:	d037      	beq.n	8007e94 <UART_SetConfig+0x6bc>
 8007e24:	e03a      	b.n	8007e9c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007e26:	f7fd ffed 	bl	8005e04 <HAL_RCCEx_GetD3PCLK1Freq>
 8007e2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e2c:	e03c      	b.n	8007ea8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fd fffc 	bl	8005e30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e3c:	e034      	b.n	8007ea8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e3e:	f107 0318 	add.w	r3, r7, #24
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fe f948 	bl	80060d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e4c:	e02c      	b.n	8007ea8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e4e:	4b09      	ldr	r3, [pc, #36]	; (8007e74 <UART_SetConfig+0x69c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0320 	and.w	r3, r3, #32
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d016      	beq.n	8007e88 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e5a:	4b06      	ldr	r3, [pc, #24]	; (8007e74 <UART_SetConfig+0x69c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	08db      	lsrs	r3, r3, #3
 8007e60:	f003 0303 	and.w	r3, r3, #3
 8007e64:	4a07      	ldr	r2, [pc, #28]	; (8007e84 <UART_SetConfig+0x6ac>)
 8007e66:	fa22 f303 	lsr.w	r3, r2, r3
 8007e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e6c:	e01c      	b.n	8007ea8 <UART_SetConfig+0x6d0>
 8007e6e:	bf00      	nop
 8007e70:	40011400 	.word	0x40011400
 8007e74:	58024400 	.word	0x58024400
 8007e78:	40007800 	.word	0x40007800
 8007e7c:	40007c00 	.word	0x40007c00
 8007e80:	58000c00 	.word	0x58000c00
 8007e84:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007e88:	4b9d      	ldr	r3, [pc, #628]	; (8008100 <UART_SetConfig+0x928>)
 8007e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e8c:	e00c      	b.n	8007ea8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e8e:	4b9d      	ldr	r3, [pc, #628]	; (8008104 <UART_SetConfig+0x92c>)
 8007e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e92:	e009      	b.n	8007ea8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e9a:	e005      	b.n	8007ea8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007ea6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f000 81de 	beq.w	800826c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb4:	4a94      	ldr	r2, [pc, #592]	; (8008108 <UART_SetConfig+0x930>)
 8007eb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ebe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ec2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	005b      	lsls	r3, r3, #1
 8007ecc:	4413      	add	r3, r2
 8007ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d305      	bcc.n	8007ee0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d903      	bls.n	8007ee8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007ee6:	e1c1      	b.n	800826c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eea:	2200      	movs	r2, #0
 8007eec:	60bb      	str	r3, [r7, #8]
 8007eee:	60fa      	str	r2, [r7, #12]
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef4:	4a84      	ldr	r2, [pc, #528]	; (8008108 <UART_SetConfig+0x930>)
 8007ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	2200      	movs	r2, #0
 8007efe:	603b      	str	r3, [r7, #0]
 8007f00:	607a      	str	r2, [r7, #4]
 8007f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f0a:	f7f8 f9e5 	bl	80002d8 <__aeabi_uldivmod>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	4610      	mov	r0, r2
 8007f14:	4619      	mov	r1, r3
 8007f16:	f04f 0200 	mov.w	r2, #0
 8007f1a:	f04f 0300 	mov.w	r3, #0
 8007f1e:	020b      	lsls	r3, r1, #8
 8007f20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f24:	0202      	lsls	r2, r0, #8
 8007f26:	6979      	ldr	r1, [r7, #20]
 8007f28:	6849      	ldr	r1, [r1, #4]
 8007f2a:	0849      	lsrs	r1, r1, #1
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	460c      	mov	r4, r1
 8007f30:	4605      	mov	r5, r0
 8007f32:	eb12 0804 	adds.w	r8, r2, r4
 8007f36:	eb43 0905 	adc.w	r9, r3, r5
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	469a      	mov	sl, r3
 8007f42:	4693      	mov	fp, r2
 8007f44:	4652      	mov	r2, sl
 8007f46:	465b      	mov	r3, fp
 8007f48:	4640      	mov	r0, r8
 8007f4a:	4649      	mov	r1, r9
 8007f4c:	f7f8 f9c4 	bl	80002d8 <__aeabi_uldivmod>
 8007f50:	4602      	mov	r2, r0
 8007f52:	460b      	mov	r3, r1
 8007f54:	4613      	mov	r3, r2
 8007f56:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f5e:	d308      	bcc.n	8007f72 <UART_SetConfig+0x79a>
 8007f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f66:	d204      	bcs.n	8007f72 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f6e:	60da      	str	r2, [r3, #12]
 8007f70:	e17c      	b.n	800826c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007f78:	e178      	b.n	800826c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	69db      	ldr	r3, [r3, #28]
 8007f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f82:	f040 80c5 	bne.w	8008110 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007f86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f8a:	2b20      	cmp	r3, #32
 8007f8c:	dc48      	bgt.n	8008020 <UART_SetConfig+0x848>
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	db7b      	blt.n	800808a <UART_SetConfig+0x8b2>
 8007f92:	2b20      	cmp	r3, #32
 8007f94:	d879      	bhi.n	800808a <UART_SetConfig+0x8b2>
 8007f96:	a201      	add	r2, pc, #4	; (adr r2, 8007f9c <UART_SetConfig+0x7c4>)
 8007f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9c:	08008027 	.word	0x08008027
 8007fa0:	0800802f 	.word	0x0800802f
 8007fa4:	0800808b 	.word	0x0800808b
 8007fa8:	0800808b 	.word	0x0800808b
 8007fac:	08008037 	.word	0x08008037
 8007fb0:	0800808b 	.word	0x0800808b
 8007fb4:	0800808b 	.word	0x0800808b
 8007fb8:	0800808b 	.word	0x0800808b
 8007fbc:	08008047 	.word	0x08008047
 8007fc0:	0800808b 	.word	0x0800808b
 8007fc4:	0800808b 	.word	0x0800808b
 8007fc8:	0800808b 	.word	0x0800808b
 8007fcc:	0800808b 	.word	0x0800808b
 8007fd0:	0800808b 	.word	0x0800808b
 8007fd4:	0800808b 	.word	0x0800808b
 8007fd8:	0800808b 	.word	0x0800808b
 8007fdc:	08008057 	.word	0x08008057
 8007fe0:	0800808b 	.word	0x0800808b
 8007fe4:	0800808b 	.word	0x0800808b
 8007fe8:	0800808b 	.word	0x0800808b
 8007fec:	0800808b 	.word	0x0800808b
 8007ff0:	0800808b 	.word	0x0800808b
 8007ff4:	0800808b 	.word	0x0800808b
 8007ff8:	0800808b 	.word	0x0800808b
 8007ffc:	0800808b 	.word	0x0800808b
 8008000:	0800808b 	.word	0x0800808b
 8008004:	0800808b 	.word	0x0800808b
 8008008:	0800808b 	.word	0x0800808b
 800800c:	0800808b 	.word	0x0800808b
 8008010:	0800808b 	.word	0x0800808b
 8008014:	0800808b 	.word	0x0800808b
 8008018:	0800808b 	.word	0x0800808b
 800801c:	0800807d 	.word	0x0800807d
 8008020:	2b40      	cmp	r3, #64	; 0x40
 8008022:	d02e      	beq.n	8008082 <UART_SetConfig+0x8aa>
 8008024:	e031      	b.n	800808a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008026:	f7fc fcb7 	bl	8004998 <HAL_RCC_GetPCLK1Freq>
 800802a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800802c:	e033      	b.n	8008096 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800802e:	f7fc fcc9 	bl	80049c4 <HAL_RCC_GetPCLK2Freq>
 8008032:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008034:	e02f      	b.n	8008096 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800803a:	4618      	mov	r0, r3
 800803c:	f7fd fef8 	bl	8005e30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008044:	e027      	b.n	8008096 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008046:	f107 0318 	add.w	r3, r7, #24
 800804a:	4618      	mov	r0, r3
 800804c:	f7fe f844 	bl	80060d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008054:	e01f      	b.n	8008096 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008056:	4b2d      	ldr	r3, [pc, #180]	; (800810c <UART_SetConfig+0x934>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0320 	and.w	r3, r3, #32
 800805e:	2b00      	cmp	r3, #0
 8008060:	d009      	beq.n	8008076 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008062:	4b2a      	ldr	r3, [pc, #168]	; (800810c <UART_SetConfig+0x934>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	08db      	lsrs	r3, r3, #3
 8008068:	f003 0303 	and.w	r3, r3, #3
 800806c:	4a24      	ldr	r2, [pc, #144]	; (8008100 <UART_SetConfig+0x928>)
 800806e:	fa22 f303 	lsr.w	r3, r2, r3
 8008072:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008074:	e00f      	b.n	8008096 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008076:	4b22      	ldr	r3, [pc, #136]	; (8008100 <UART_SetConfig+0x928>)
 8008078:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800807a:	e00c      	b.n	8008096 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800807c:	4b21      	ldr	r3, [pc, #132]	; (8008104 <UART_SetConfig+0x92c>)
 800807e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008080:	e009      	b.n	8008096 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008088:	e005      	b.n	8008096 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800808a:	2300      	movs	r3, #0
 800808c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008094:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 80e7 	beq.w	800826c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	4a19      	ldr	r2, [pc, #100]	; (8008108 <UART_SetConfig+0x930>)
 80080a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080a8:	461a      	mov	r2, r3
 80080aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80080b0:	005a      	lsls	r2, r3, #1
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	085b      	lsrs	r3, r3, #1
 80080b8:	441a      	add	r2, r3
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c6:	2b0f      	cmp	r3, #15
 80080c8:	d916      	bls.n	80080f8 <UART_SetConfig+0x920>
 80080ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080d0:	d212      	bcs.n	80080f8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	f023 030f 	bic.w	r3, r3, #15
 80080da:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080de:	085b      	lsrs	r3, r3, #1
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	f003 0307 	and.w	r3, r3, #7
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80080ea:	4313      	orrs	r3, r2
 80080ec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80080f4:	60da      	str	r2, [r3, #12]
 80080f6:	e0b9      	b.n	800826c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80080fe:	e0b5      	b.n	800826c <UART_SetConfig+0xa94>
 8008100:	03d09000 	.word	0x03d09000
 8008104:	003d0900 	.word	0x003d0900
 8008108:	08008978 	.word	0x08008978
 800810c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008110:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008114:	2b20      	cmp	r3, #32
 8008116:	dc49      	bgt.n	80081ac <UART_SetConfig+0x9d4>
 8008118:	2b00      	cmp	r3, #0
 800811a:	db7c      	blt.n	8008216 <UART_SetConfig+0xa3e>
 800811c:	2b20      	cmp	r3, #32
 800811e:	d87a      	bhi.n	8008216 <UART_SetConfig+0xa3e>
 8008120:	a201      	add	r2, pc, #4	; (adr r2, 8008128 <UART_SetConfig+0x950>)
 8008122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008126:	bf00      	nop
 8008128:	080081b3 	.word	0x080081b3
 800812c:	080081bb 	.word	0x080081bb
 8008130:	08008217 	.word	0x08008217
 8008134:	08008217 	.word	0x08008217
 8008138:	080081c3 	.word	0x080081c3
 800813c:	08008217 	.word	0x08008217
 8008140:	08008217 	.word	0x08008217
 8008144:	08008217 	.word	0x08008217
 8008148:	080081d3 	.word	0x080081d3
 800814c:	08008217 	.word	0x08008217
 8008150:	08008217 	.word	0x08008217
 8008154:	08008217 	.word	0x08008217
 8008158:	08008217 	.word	0x08008217
 800815c:	08008217 	.word	0x08008217
 8008160:	08008217 	.word	0x08008217
 8008164:	08008217 	.word	0x08008217
 8008168:	080081e3 	.word	0x080081e3
 800816c:	08008217 	.word	0x08008217
 8008170:	08008217 	.word	0x08008217
 8008174:	08008217 	.word	0x08008217
 8008178:	08008217 	.word	0x08008217
 800817c:	08008217 	.word	0x08008217
 8008180:	08008217 	.word	0x08008217
 8008184:	08008217 	.word	0x08008217
 8008188:	08008217 	.word	0x08008217
 800818c:	08008217 	.word	0x08008217
 8008190:	08008217 	.word	0x08008217
 8008194:	08008217 	.word	0x08008217
 8008198:	08008217 	.word	0x08008217
 800819c:	08008217 	.word	0x08008217
 80081a0:	08008217 	.word	0x08008217
 80081a4:	08008217 	.word	0x08008217
 80081a8:	08008209 	.word	0x08008209
 80081ac:	2b40      	cmp	r3, #64	; 0x40
 80081ae:	d02e      	beq.n	800820e <UART_SetConfig+0xa36>
 80081b0:	e031      	b.n	8008216 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081b2:	f7fc fbf1 	bl	8004998 <HAL_RCC_GetPCLK1Freq>
 80081b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80081b8:	e033      	b.n	8008222 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081ba:	f7fc fc03 	bl	80049c4 <HAL_RCC_GetPCLK2Freq>
 80081be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80081c0:	e02f      	b.n	8008222 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fd fe32 	bl	8005e30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80081cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081d0:	e027      	b.n	8008222 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081d2:	f107 0318 	add.w	r3, r7, #24
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fd ff7e 	bl	80060d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081e0:	e01f      	b.n	8008222 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081e2:	4b2d      	ldr	r3, [pc, #180]	; (8008298 <UART_SetConfig+0xac0>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d009      	beq.n	8008202 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081ee:	4b2a      	ldr	r3, [pc, #168]	; (8008298 <UART_SetConfig+0xac0>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	08db      	lsrs	r3, r3, #3
 80081f4:	f003 0303 	and.w	r3, r3, #3
 80081f8:	4a28      	ldr	r2, [pc, #160]	; (800829c <UART_SetConfig+0xac4>)
 80081fa:	fa22 f303 	lsr.w	r3, r2, r3
 80081fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008200:	e00f      	b.n	8008222 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008202:	4b26      	ldr	r3, [pc, #152]	; (800829c <UART_SetConfig+0xac4>)
 8008204:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008206:	e00c      	b.n	8008222 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008208:	4b25      	ldr	r3, [pc, #148]	; (80082a0 <UART_SetConfig+0xac8>)
 800820a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800820c:	e009      	b.n	8008222 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800820e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008214:	e005      	b.n	8008222 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008216:	2300      	movs	r3, #0
 8008218:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008220:	bf00      	nop
    }

    if (pclk != 0U)
 8008222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008224:	2b00      	cmp	r3, #0
 8008226:	d021      	beq.n	800826c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822c:	4a1d      	ldr	r2, [pc, #116]	; (80082a4 <UART_SetConfig+0xacc>)
 800822e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008232:	461a      	mov	r2, r3
 8008234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008236:	fbb3 f2f2 	udiv	r2, r3, r2
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	085b      	lsrs	r3, r3, #1
 8008240:	441a      	add	r2, r3
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	fbb2 f3f3 	udiv	r3, r2, r3
 800824a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800824c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824e:	2b0f      	cmp	r3, #15
 8008250:	d909      	bls.n	8008266 <UART_SetConfig+0xa8e>
 8008252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008258:	d205      	bcs.n	8008266 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800825a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825c:	b29a      	uxth	r2, r3
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	60da      	str	r2, [r3, #12]
 8008264:	e002      	b.n	800826c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	2201      	movs	r2, #1
 8008270:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	2201      	movs	r2, #1
 8008278:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	2200      	movs	r2, #0
 8008280:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2200      	movs	r2, #0
 8008286:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008288:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800828c:	4618      	mov	r0, r3
 800828e:	3748      	adds	r7, #72	; 0x48
 8008290:	46bd      	mov	sp, r7
 8008292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008296:	bf00      	nop
 8008298:	58024400 	.word	0x58024400
 800829c:	03d09000 	.word	0x03d09000
 80082a0:	003d0900 	.word	0x003d0900
 80082a4:	08008978 	.word	0x08008978

080082a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b4:	f003 0308 	and.w	r3, r3, #8
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00a      	beq.n	80082d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	430a      	orrs	r2, r1
 80082d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f8:	f003 0302 	and.w	r3, r3, #2
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00a      	beq.n	8008316 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	430a      	orrs	r2, r1
 8008314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831a:	f003 0304 	and.w	r3, r3, #4
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00a      	beq.n	8008338 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	430a      	orrs	r2, r1
 8008336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833c:	f003 0310 	and.w	r3, r3, #16
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00a      	beq.n	800835a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	430a      	orrs	r2, r1
 8008358:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835e:	f003 0320 	and.w	r3, r3, #32
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00a      	beq.n	800837c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	430a      	orrs	r2, r1
 800837a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008384:	2b00      	cmp	r3, #0
 8008386:	d01a      	beq.n	80083be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	430a      	orrs	r2, r1
 800839c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083a6:	d10a      	bne.n	80083be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00a      	beq.n	80083e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	605a      	str	r2, [r3, #4]
  }
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b098      	sub	sp, #96	; 0x60
 80083f0:	af02      	add	r7, sp, #8
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083fc:	f7f8 fe26 	bl	800104c <HAL_GetTick>
 8008400:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0308 	and.w	r3, r3, #8
 800840c:	2b08      	cmp	r3, #8
 800840e:	d12f      	bne.n	8008470 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008410:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008418:	2200      	movs	r2, #0
 800841a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f88e 	bl	8008540 <UART_WaitOnFlagUntilTimeout>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d022      	beq.n	8008470 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008432:	e853 3f00 	ldrex	r3, [r3]
 8008436:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800843a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800843e:	653b      	str	r3, [r7, #80]	; 0x50
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	461a      	mov	r2, r3
 8008446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008448:	647b      	str	r3, [r7, #68]	; 0x44
 800844a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800844e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008450:	e841 2300 	strex	r3, r2, [r1]
 8008454:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1e6      	bne.n	800842a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2220      	movs	r2, #32
 8008460:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	e063      	b.n	8008538 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0304 	and.w	r3, r3, #4
 800847a:	2b04      	cmp	r3, #4
 800847c:	d149      	bne.n	8008512 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800847e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008486:	2200      	movs	r2, #0
 8008488:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f857 	bl	8008540 <UART_WaitOnFlagUntilTimeout>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d03c      	beq.n	8008512 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	623b      	str	r3, [r7, #32]
   return(result);
 80084a6:	6a3b      	ldr	r3, [r7, #32]
 80084a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084b6:	633b      	str	r3, [r7, #48]	; 0x30
 80084b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1e6      	bne.n	8008498 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3308      	adds	r3, #8
 80084d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	e853 3f00 	ldrex	r3, [r3]
 80084d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f023 0301 	bic.w	r3, r3, #1
 80084e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3308      	adds	r3, #8
 80084e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084ea:	61fa      	str	r2, [r7, #28]
 80084ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ee:	69b9      	ldr	r1, [r7, #24]
 80084f0:	69fa      	ldr	r2, [r7, #28]
 80084f2:	e841 2300 	strex	r3, r2, [r1]
 80084f6:	617b      	str	r3, [r7, #20]
   return(result);
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1e5      	bne.n	80084ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2220      	movs	r2, #32
 8008502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e012      	b.n	8008538 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2220      	movs	r2, #32
 8008516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2220      	movs	r2, #32
 800851e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3758      	adds	r7, #88	; 0x58
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	603b      	str	r3, [r7, #0]
 800854c:	4613      	mov	r3, r2
 800854e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008550:	e04f      	b.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008558:	d04b      	beq.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800855a:	f7f8 fd77 	bl	800104c <HAL_GetTick>
 800855e:	4602      	mov	r2, r0
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	429a      	cmp	r2, r3
 8008568:	d302      	bcc.n	8008570 <UART_WaitOnFlagUntilTimeout+0x30>
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e04e      	b.n	8008612 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0304 	and.w	r3, r3, #4
 800857e:	2b00      	cmp	r3, #0
 8008580:	d037      	beq.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	2b80      	cmp	r3, #128	; 0x80
 8008586:	d034      	beq.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2b40      	cmp	r3, #64	; 0x40
 800858c:	d031      	beq.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	69db      	ldr	r3, [r3, #28]
 8008594:	f003 0308 	and.w	r3, r3, #8
 8008598:	2b08      	cmp	r3, #8
 800859a:	d110      	bne.n	80085be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2208      	movs	r2, #8
 80085a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f000 f839 	bl	800861c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2208      	movs	r2, #8
 80085ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e029      	b.n	8008612 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085cc:	d111      	bne.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f000 f81f 	bl	800861c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2220      	movs	r2, #32
 80085e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e00f      	b.n	8008612 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	69da      	ldr	r2, [r3, #28]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	4013      	ands	r3, r2
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	429a      	cmp	r2, r3
 8008600:	bf0c      	ite	eq
 8008602:	2301      	moveq	r3, #1
 8008604:	2300      	movne	r3, #0
 8008606:	b2db      	uxtb	r3, r3
 8008608:	461a      	mov	r2, r3
 800860a:	79fb      	ldrb	r3, [r7, #7]
 800860c:	429a      	cmp	r2, r3
 800860e:	d0a0      	beq.n	8008552 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800861c:	b480      	push	{r7}
 800861e:	b095      	sub	sp, #84	; 0x54
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800862c:	e853 3f00 	ldrex	r3, [r3]
 8008630:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008634:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008638:	64fb      	str	r3, [r7, #76]	; 0x4c
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008642:	643b      	str	r3, [r7, #64]	; 0x40
 8008644:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008646:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008648:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800864a:	e841 2300 	strex	r3, r2, [r1]
 800864e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1e6      	bne.n	8008624 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3308      	adds	r3, #8
 800865c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	e853 3f00 	ldrex	r3, [r3]
 8008664:	61fb      	str	r3, [r7, #28]
   return(result);
 8008666:	69fa      	ldr	r2, [r7, #28]
 8008668:	4b1e      	ldr	r3, [pc, #120]	; (80086e4 <UART_EndRxTransfer+0xc8>)
 800866a:	4013      	ands	r3, r2
 800866c:	64bb      	str	r3, [r7, #72]	; 0x48
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3308      	adds	r3, #8
 8008674:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008676:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008678:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800867c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800867e:	e841 2300 	strex	r3, r2, [r1]
 8008682:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1e5      	bne.n	8008656 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800868e:	2b01      	cmp	r3, #1
 8008690:	d118      	bne.n	80086c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	e853 3f00 	ldrex	r3, [r3]
 800869e:	60bb      	str	r3, [r7, #8]
   return(result);
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	f023 0310 	bic.w	r3, r3, #16
 80086a6:	647b      	str	r3, [r7, #68]	; 0x44
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	461a      	mov	r2, r3
 80086ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086b0:	61bb      	str	r3, [r7, #24]
 80086b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b4:	6979      	ldr	r1, [r7, #20]
 80086b6:	69ba      	ldr	r2, [r7, #24]
 80086b8:	e841 2300 	strex	r3, r2, [r1]
 80086bc:	613b      	str	r3, [r7, #16]
   return(result);
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e6      	bne.n	8008692 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2220      	movs	r2, #32
 80086c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80086d8:	bf00      	nop
 80086da:	3754      	adds	r7, #84	; 0x54
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	effffffe 	.word	0xeffffffe

080086e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d101      	bne.n	80086fe <HAL_UARTEx_DisableFifoMode+0x16>
 80086fa:	2302      	movs	r3, #2
 80086fc:	e027      	b.n	800874e <HAL_UARTEx_DisableFifoMode+0x66>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2224      	movs	r2, #36	; 0x24
 800870a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f022 0201 	bic.w	r2, r2, #1
 8008724:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800872c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2220      	movs	r2, #32
 8008740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800876a:	2b01      	cmp	r3, #1
 800876c:	d101      	bne.n	8008772 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800876e:	2302      	movs	r3, #2
 8008770:	e02d      	b.n	80087ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2224      	movs	r2, #36	; 0x24
 800877e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f022 0201 	bic.w	r2, r2, #1
 8008798:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	683a      	ldr	r2, [r7, #0]
 80087aa:	430a      	orrs	r2, r1
 80087ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f850 	bl	8008854 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2220      	movs	r2, #32
 80087c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d101      	bne.n	80087ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80087ea:	2302      	movs	r3, #2
 80087ec:	e02d      	b.n	800884a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2224      	movs	r2, #36	; 0x24
 80087fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f022 0201 	bic.w	r2, r2, #1
 8008814:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	683a      	ldr	r2, [r7, #0]
 8008826:	430a      	orrs	r2, r1
 8008828:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f812 	bl	8008854 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2220      	movs	r2, #32
 800883c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
	...

08008854 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008860:	2b00      	cmp	r3, #0
 8008862:	d108      	bne.n	8008876 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008874:	e031      	b.n	80088da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008876:	2310      	movs	r3, #16
 8008878:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800887a:	2310      	movs	r3, #16
 800887c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	0e5b      	lsrs	r3, r3, #25
 8008886:	b2db      	uxtb	r3, r3
 8008888:	f003 0307 	and.w	r3, r3, #7
 800888c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	0f5b      	lsrs	r3, r3, #29
 8008896:	b2db      	uxtb	r3, r3
 8008898:	f003 0307 	and.w	r3, r3, #7
 800889c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800889e:	7bbb      	ldrb	r3, [r7, #14]
 80088a0:	7b3a      	ldrb	r2, [r7, #12]
 80088a2:	4911      	ldr	r1, [pc, #68]	; (80088e8 <UARTEx_SetNbDataToProcess+0x94>)
 80088a4:	5c8a      	ldrb	r2, [r1, r2]
 80088a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80088aa:	7b3a      	ldrb	r2, [r7, #12]
 80088ac:	490f      	ldr	r1, [pc, #60]	; (80088ec <UARTEx_SetNbDataToProcess+0x98>)
 80088ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	7b7a      	ldrb	r2, [r7, #13]
 80088c0:	4909      	ldr	r1, [pc, #36]	; (80088e8 <UARTEx_SetNbDataToProcess+0x94>)
 80088c2:	5c8a      	ldrb	r2, [r1, r2]
 80088c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80088c8:	7b7a      	ldrb	r2, [r7, #13]
 80088ca:	4908      	ldr	r1, [pc, #32]	; (80088ec <UARTEx_SetNbDataToProcess+0x98>)
 80088cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80088da:	bf00      	nop
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	08008990 	.word	0x08008990
 80088ec:	08008998 	.word	0x08008998

080088f0 <memset>:
 80088f0:	4402      	add	r2, r0
 80088f2:	4603      	mov	r3, r0
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d100      	bne.n	80088fa <memset+0xa>
 80088f8:	4770      	bx	lr
 80088fa:	f803 1b01 	strb.w	r1, [r3], #1
 80088fe:	e7f9      	b.n	80088f4 <memset+0x4>

08008900 <__libc_init_array>:
 8008900:	b570      	push	{r4, r5, r6, lr}
 8008902:	4d0d      	ldr	r5, [pc, #52]	; (8008938 <__libc_init_array+0x38>)
 8008904:	4c0d      	ldr	r4, [pc, #52]	; (800893c <__libc_init_array+0x3c>)
 8008906:	1b64      	subs	r4, r4, r5
 8008908:	10a4      	asrs	r4, r4, #2
 800890a:	2600      	movs	r6, #0
 800890c:	42a6      	cmp	r6, r4
 800890e:	d109      	bne.n	8008924 <__libc_init_array+0x24>
 8008910:	4d0b      	ldr	r5, [pc, #44]	; (8008940 <__libc_init_array+0x40>)
 8008912:	4c0c      	ldr	r4, [pc, #48]	; (8008944 <__libc_init_array+0x44>)
 8008914:	f000 f818 	bl	8008948 <_init>
 8008918:	1b64      	subs	r4, r4, r5
 800891a:	10a4      	asrs	r4, r4, #2
 800891c:	2600      	movs	r6, #0
 800891e:	42a6      	cmp	r6, r4
 8008920:	d105      	bne.n	800892e <__libc_init_array+0x2e>
 8008922:	bd70      	pop	{r4, r5, r6, pc}
 8008924:	f855 3b04 	ldr.w	r3, [r5], #4
 8008928:	4798      	blx	r3
 800892a:	3601      	adds	r6, #1
 800892c:	e7ee      	b.n	800890c <__libc_init_array+0xc>
 800892e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008932:	4798      	blx	r3
 8008934:	3601      	adds	r6, #1
 8008936:	e7f2      	b.n	800891e <__libc_init_array+0x1e>
 8008938:	080089a8 	.word	0x080089a8
 800893c:	080089a8 	.word	0x080089a8
 8008940:	080089a8 	.word	0x080089a8
 8008944:	080089ac 	.word	0x080089ac

08008948 <_init>:
 8008948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894a:	bf00      	nop
 800894c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894e:	bc08      	pop	{r3}
 8008950:	469e      	mov	lr, r3
 8008952:	4770      	bx	lr

08008954 <_fini>:
 8008954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008956:	bf00      	nop
 8008958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895a:	bc08      	pop	{r3}
 800895c:	469e      	mov	lr, r3
 800895e:	4770      	bx	lr
