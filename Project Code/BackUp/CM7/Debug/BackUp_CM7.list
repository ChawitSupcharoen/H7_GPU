
BackUp_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084f0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008788  08008788  00018788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087c8  080087c8  000868b0  2**0
                  CONTENTS
  4 .ARM          00000008  080087c8  080087c8  000187c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087d0  080087d0  000868b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087d0  080087d0  000187d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087d4  080087d4  000187d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000668b0  24000000  080087d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  240668b0  0806f088  000868b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24066a2c  0806f088  00086a2c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000868b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000868de  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015c0b  00000000  00000000  00086921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002708  00000000  00000000  0009c52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  0009ec38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d81  00000000  00000000  0009fd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039ded  00000000  00000000  000a0af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017b94  00000000  00000000  000da8de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00183d9d  00000000  00000000  000f2472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004974  00000000  00000000  00276210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0027ab84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240668b0 	.word	0x240668b0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008770 	.word	0x08008770

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240668b4 	.word	0x240668b4
 80002d4:	08008770 	.word	0x08008770

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <main+0xe8>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 fa6b 	bl	8000c04 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fbb5 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f867 	bl	8000804 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000736:	4b2c      	ldr	r3, [pc, #176]	; (80007e8 <main+0xe8>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a2a      	ldr	r2, [pc, #168]	; (80007e8 <main+0xe8>)
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <main+0xe8>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000754:	2000      	movs	r0, #0
 8000756:	f002 fff1 	bl	800373c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f003 f807 	bl	8003770 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000766:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <main+0xe8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x80>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x6a>
if ( timeout < 0 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x8a>
{
Error_Handler();
 8000786:	f000 fa3d 	bl	8000c04 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 f999 	bl	8000ac0 <MX_GPIO_Init>
  MX_DMA_Init();
 800078e:	f000 f977 	bl	8000a80 <MX_DMA_Init>
  MX_TIM3_Init();
 8000792:	f000 f8b5 	bl	8000900 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000796:	f000 f927 	bl	80009e8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  hdma_tim3_ch1.XferCpltCallback = end_of_scanline;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <main+0xec>)
 800079c:	4a14      	ldr	r2, [pc, #80]	; (80007f0 <main+0xf0>)
 800079e:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3->DIER |= 1 << 14;
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <main+0xf4>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <main+0xf4>)
 80007a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007aa:	60d3      	str	r3, [r2, #12]
  TIM3->DIER |= 1 << 9;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <main+0xf4>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	4a10      	ldr	r2, [pc, #64]	; (80007f4 <main+0xf4>)
 80007b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007b6:	60d3      	str	r3, [r2, #12]
  HAL_TIM_Base_Start(&htim3);
 80007b8:	480f      	ldr	r0, [pc, #60]	; (80007f8 <main+0xf8>)
 80007ba:	f005 feb1 	bl	8006520 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 80007be:	2100      	movs	r1, #0
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <main+0xf8>)
 80007c2:	f005 ff7f 	bl	80066c4 <HAL_TIM_OC_Start>
  HAL_DMA_Start_IT(&hdma_tim3_ch1, (uint32_t)frame, (uint32_t)&GPIOB->ODR, 400);
 80007c6:	490d      	ldr	r1, [pc, #52]	; (80007fc <main+0xfc>)
 80007c8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80007cc:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <main+0x100>)
 80007ce:	4807      	ldr	r0, [pc, #28]	; (80007ec <main+0xec>)
 80007d0:	f001 f86e 	bl	80018b0 <HAL_DMA_Start_IT>
  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC1);
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <main+0xf8>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	68da      	ldr	r2, [r3, #12]
 80007da:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <main+0xf8>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007e2:	60da      	str	r2, [r3, #12]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <main+0xe4>
 80007e6:	bf00      	nop
 80007e8:	58024400 	.word	0x58024400
 80007ec:	24066918 	.word	0x24066918
 80007f0:	08000b95 	.word	0x08000b95
 80007f4:	40000400 	.word	0x40000400
 80007f8:	240668cc 	.word	0x240668cc
 80007fc:	24000008 	.word	0x24000008
 8000800:	58020414 	.word	0x58020414

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b09c      	sub	sp, #112	; 0x70
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080e:	224c      	movs	r2, #76	; 0x4c
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f007 ff80 	bl	8008718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2220      	movs	r2, #32
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f007 ff7a 	bl	8008718 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000824:	2004      	movs	r0, #4
 8000826:	f002 ffb7 	bl	8003798 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b32      	ldr	r3, [pc, #200]	; (80008f8 <SystemClock_Config+0xf4>)
 8000830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000832:	4a31      	ldr	r2, [pc, #196]	; (80008f8 <SystemClock_Config+0xf4>)
 8000834:	f023 0301 	bic.w	r3, r3, #1
 8000838:	62d3      	str	r3, [r2, #44]	; 0x2c
 800083a:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <SystemClock_Config+0xf4>)
 800083c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <SystemClock_Config+0xf8>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800084c:	4a2b      	ldr	r2, [pc, #172]	; (80008fc <SystemClock_Config+0xf8>)
 800084e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b29      	ldr	r3, [pc, #164]	; (80008fc <SystemClock_Config+0xf8>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000860:	bf00      	nop
 8000862:	4b26      	ldr	r3, [pc, #152]	; (80008fc <SystemClock_Config+0xf8>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800086a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800086e:	d1f8      	bne.n	8000862 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000870:	2301      	movs	r3, #1
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000874:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087a:	2302      	movs	r3, #2
 800087c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087e:	2302      	movs	r3, #2
 8000880:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000882:	2301      	movs	r3, #1
 8000884:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 39;
 8000886:	2327      	movs	r3, #39	; 0x27
 8000888:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800088a:	2302      	movs	r3, #2
 800088c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800088e:	2302      	movs	r3, #2
 8000890:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000892:	2302      	movs	r3, #2
 8000894:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000896:	230c      	movs	r3, #12
 8000898:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800089a:	2300      	movs	r3, #0
 800089c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800089e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a8:	4618      	mov	r0, r3
 80008aa:	f002 ffcf 	bl	800384c <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008b4:	f000 f9a6 	bl	8000c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	233f      	movs	r3, #63	; 0x3f
 80008ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2303      	movs	r3, #3
 80008be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008c8:	2340      	movs	r3, #64	; 0x40
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008cc:	2340      	movs	r3, #64	; 0x40
 80008ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008d6:	2340      	movs	r3, #64	; 0x40
 80008d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2103      	movs	r1, #3
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 fc0e 	bl	8004100 <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xea>
  {
    Error_Handler();
 80008ea:	f000 f98b 	bl	8000c04 <Error_Handler>
  }
}
 80008ee:	bf00      	nop
 80008f0:	3770      	adds	r7, #112	; 0x70
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	58000400 	.word	0x58000400
 80008fc:	58024800 	.word	0x58024800

08000900 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08e      	sub	sp, #56	; 0x38
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000920:	463b      	mov	r3, r7
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]
 800092e:	615a      	str	r2, [r3, #20]
 8000930:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000932:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <MX_TIM3_Init+0xe0>)
 8000934:	4a2b      	ldr	r2, [pc, #172]	; (80009e4 <MX_TIM3_Init+0xe4>)
 8000936:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000938:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <MX_TIM3_Init+0xe0>)
 800093a:	2200      	movs	r2, #0
 800093c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <MX_TIM3_Init+0xe0>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 12;
 8000944:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <MX_TIM3_Init+0xe0>)
 8000946:	220c      	movs	r2, #12
 8000948:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094a:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <MX_TIM3_Init+0xe0>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000950:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <MX_TIM3_Init+0xe0>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000956:	4822      	ldr	r0, [pc, #136]	; (80009e0 <MX_TIM3_Init+0xe0>)
 8000958:	f005 fd8a 	bl	8006470 <HAL_TIM_Base_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000962:	f000 f94f 	bl	8000c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800096c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000970:	4619      	mov	r1, r3
 8000972:	481b      	ldr	r0, [pc, #108]	; (80009e0 <MX_TIM3_Init+0xe0>)
 8000974:	f006 f82e 	bl	80069d4 <HAL_TIM_ConfigClockSource>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800097e:	f000 f941 	bl	8000c04 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000982:	4817      	ldr	r0, [pc, #92]	; (80009e0 <MX_TIM3_Init+0xe0>)
 8000984:	f005 fe3c 	bl	8006600 <HAL_TIM_OC_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800098e:	f000 f939 	bl	8000c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	480f      	ldr	r0, [pc, #60]	; (80009e0 <MX_TIM3_Init+0xe0>)
 80009a2:	f006 fd4f 	bl	8007444 <HAL_TIMEx_MasterConfigSynchronization>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80009ac:	f000 f92a 	bl	8000c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80009b0:	2300      	movs	r3, #0
 80009b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009c0:	463b      	mov	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <MX_TIM3_Init+0xe0>)
 80009c8:	f005 ff8a 	bl	80068e0 <HAL_TIM_OC_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80009d2:	f000 f917 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	3738      	adds	r7, #56	; 0x38
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	240668cc 	.word	0x240668cc
 80009e4:	40000400 	.word	0x40000400

080009e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 80009ee:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <MX_USART3_UART_Init+0x94>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009f2:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a30:	4811      	ldr	r0, [pc, #68]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a32:	f006 fd95 	bl	8007560 <HAL_UART_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a3c:	f000 f8e2 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a44:	f007 fd9d 	bl	8008582 <HAL_UARTEx_SetTxFifoThreshold>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a4e:	f000 f8d9 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4808      	ldr	r0, [pc, #32]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a56:	f007 fdd2 	bl	80085fe <HAL_UARTEx_SetRxFifoThreshold>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a60:	f000 f8d0 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a66:	f007 fd53 	bl	8008510 <HAL_UARTEx_DisableFifoMode>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a70:	f000 f8c8 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	24066990 	.word	0x24066990
 8000a7c:	40004800 	.word	0x40004800

08000a80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <MX_DMA_Init+0x3c>)
 8000a88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a8c:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <MX_DMA_Init+0x3c>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_DMA_Init+0x3c>)
 8000a98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	200b      	movs	r0, #11
 8000aaa:	f000 fb70 	bl	800118e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000aae:	200b      	movs	r0, #11
 8000ab0:	f000 fb87 	bl	80011c2 <HAL_NVIC_EnableIRQ>

}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	58024400 	.word	0x58024400

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	4b2d      	ldr	r3, [pc, #180]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	4a2b      	ldr	r2, [pc, #172]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000ade:	f043 0304 	orr.w	r3, r3, #4
 8000ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae6:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af4:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	4a24      	ldr	r2, [pc, #144]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b04:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	4a1c      	ldr	r2, [pc, #112]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b22:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b36:	4a15      	ldr	r2, [pc, #84]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2103      	movs	r1, #3
 8000b52:	480f      	ldr	r0, [pc, #60]	; (8000b90 <MX_GPIO_Init+0xd0>)
 8000b54:	f002 fdd8 	bl	8003708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8000b5e:	480c      	ldr	r0, [pc, #48]	; (8000b90 <MX_GPIO_Init+0xd0>)
 8000b60:	f002 fdd2 	bl	8003708 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000b64:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000b68:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_GPIO_Init+0xd0>)
 8000b7e:	f002 fc13 	bl	80033a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	58024400 	.word	0x58024400
 8000b90:	58020400 	.word	0x58020400

08000b94 <end_of_scanline>:

/* USER CODE BEGIN 4 */

void end_of_scanline(){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0

	line++;
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <end_of_scanline+0x5c>)
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <end_of_scanline+0x5c>)
 8000ba4:	801a      	strh	r2, [r3, #0]

	if(line >= 525){
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <end_of_scanline+0x5c>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000bb0:	d902      	bls.n	8000bb8 <end_of_scanline+0x24>
		line = 0;
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <end_of_scanline+0x5c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	801a      	strh	r2, [r3, #0]
	}

	HAL_DMA_Start_IT(&hdma_tim3_ch1, (uint32_t)(frame+(line*400)), (uint32_t)&GPIOB->ODR, 400);
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <end_of_scanline+0x5c>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000bc4:	fb02 f303 	mul.w	r3, r2, r3
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <end_of_scanline+0x60>)
 8000bca:	4413      	add	r3, r2
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bd2:	4a09      	ldr	r2, [pc, #36]	; (8000bf8 <end_of_scanline+0x64>)
 8000bd4:	4809      	ldr	r0, [pc, #36]	; (8000bfc <end_of_scanline+0x68>)
 8000bd6:	f000 fe6b 	bl	80018b0 <HAL_DMA_Start_IT>
	__HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC1);
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <end_of_scanline+0x6c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	68da      	ldr	r2, [r3, #12]
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <end_of_scanline+0x6c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000be8:	60da      	str	r2, [r3, #12]

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	24066a24 	.word	0x24066a24
 8000bf4:	24000008 	.word	0x24000008
 8000bf8:	58020414 	.word	0x58020414
 8000bfc:	24066918 	.word	0x24066918
 8000c00:	240668cc 	.word	0x240668cc

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <Error_Handler+0x8>
	...

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <HAL_MspInit+0x30>)
 8000c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c1c:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_MspInit+0x30>)
 8000c1e:	f043 0302 	orr.w	r3, r3, #2
 8000c22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_MspInit+0x30>)
 8000c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	58024400 	.word	0x58024400

08000c44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a22      	ldr	r2, [pc, #136]	; (8000cdc <HAL_TIM_Base_MspInit+0x98>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d13e      	bne.n	8000cd4 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c56:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <HAL_TIM_Base_MspInit+0x9c>)
 8000c58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c5c:	4a20      	ldr	r2, [pc, #128]	; (8000ce0 <HAL_TIM_Base_MspInit+0x9c>)
 8000c5e:	f043 0302 	orr.w	r3, r3, #2
 8000c62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_TIM_Base_MspInit+0x9c>)
 8000c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Stream0;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <HAL_TIM_Base_MspInit+0xa0>)
 8000c76:	4a1c      	ldr	r2, [pc, #112]	; (8000ce8 <HAL_TIM_Base_MspInit+0xa4>)
 8000c78:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <HAL_TIM_Base_MspInit+0xa0>)
 8000c7c:	2217      	movs	r2, #23
 8000c7e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_TIM_Base_MspInit+0xa0>)
 8000c82:	2240      	movs	r2, #64	; 0x40
 8000c84:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <HAL_TIM_Base_MspInit+0xa0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_TIM_Base_MspInit+0xa0>)
 8000c8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c92:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <HAL_TIM_Base_MspInit+0xa0>)
 8000c96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c9a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_TIM_Base_MspInit+0xa0>)
 8000c9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ca2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <HAL_TIM_Base_MspInit+0xa0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_TIM_Base_MspInit+0xa0>)
 8000cac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cb0:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <HAL_TIM_Base_MspInit+0xa0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8000cb8:	480a      	ldr	r0, [pc, #40]	; (8000ce4 <HAL_TIM_Base_MspInit+0xa0>)
 8000cba:	f000 fa9d 	bl	80011f8 <HAL_DMA_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8000cc4:	f7ff ff9e 	bl	8000c04 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <HAL_TIM_Base_MspInit+0xa0>)
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <HAL_TIM_Base_MspInit+0xa0>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40000400 	.word	0x40000400
 8000ce0:	58024400 	.word	0x58024400
 8000ce4:	24066918 	.word	0x24066918
 8000ce8:	40020010 	.word	0x40020010

08000cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b0ba      	sub	sp, #232	; 0xe8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	22c0      	movs	r2, #192	; 0xc0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f007 fd03 	bl	8008718 <memset>
  if(huart->Instance==USART3)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a2f      	ldr	r2, [pc, #188]	; (8000dd4 <HAL_UART_MspInit+0xe8>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d157      	bne.n	8000dcc <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d1c:	f04f 0202 	mov.w	r2, #2
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000d2c:	2312      	movs	r3, #18
 8000d2e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d30:	2302      	movs	r3, #2
 8000d32:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 3;
 8000d34:	2303      	movs	r3, #3
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d3c:	23c0      	movs	r3, #192	; 0xc0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000d40:	2320      	movs	r3, #32
 8000d42:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000d44:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d48:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	4618      	mov	r0, r3
 8000d56:	f003 fd5f 	bl	8004818 <HAL_RCCEx_PeriphCLKConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_UART_MspInit+0x78>
    {
      Error_Handler();
 8000d60:	f7ff ff50 	bl	8000c04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <HAL_UART_MspInit+0xec>)
 8000d66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d6a:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <HAL_UART_MspInit+0xec>)
 8000d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d70:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d74:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <HAL_UART_MspInit+0xec>)
 8000d76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_UART_MspInit+0xec>)
 8000d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d88:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <HAL_UART_MspInit+0xec>)
 8000d8a:	f043 0308 	orr.w	r3, r3, #8
 8000d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_UART_MspInit+0xec>)
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d98:	f003 0308 	and.w	r3, r3, #8
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000da0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000da4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dba:	2307      	movs	r3, #7
 8000dbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <HAL_UART_MspInit+0xf0>)
 8000dc8:	f002 faee 	bl	80033a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dcc:	bf00      	nop
 8000dce:	37e8      	adds	r7, #232	; 0xe8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40004800 	.word	0x40004800
 8000dd8:	58024400 	.word	0x58024400
 8000ddc:	58020c00 	.word	0x58020c00

08000de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <NMI_Handler+0x4>

08000de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <HardFault_Handler+0x4>

08000dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <MemManage_Handler+0x4>

08000df2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <BusFault_Handler+0x4>

08000df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <UsageFault_Handler+0x4>

08000dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2c:	f000 f8a8 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <DMA1_Stream0_IRQHandler+0x10>)
 8000e3a:	f000 ffa3 	bl	8001d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	24066918 	.word	0x24066918

08000e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e4c:	f7ff fbc2 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e52:	490d      	ldr	r1, [pc, #52]	; (8000e88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e54:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e58:	e002      	b.n	8000e60 <LoopCopyDataInit>

08000e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5e:	3304      	adds	r3, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e64:	d3f9      	bcc.n	8000e5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e68:	4c0a      	ldr	r4, [pc, #40]	; (8000e94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e6c:	e001      	b.n	8000e72 <LoopFillZerobss>

08000e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e70:	3204      	adds	r2, #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e74:	d3fb      	bcc.n	8000e6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e76:	f007 fc57 	bl	8008728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7a:	f7ff fc41 	bl	8000700 <main>
  bx  lr
 8000e7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e80:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e88:	240668b0 	.word	0x240668b0
  ldr r2, =_sidata
 8000e8c:	080087d8 	.word	0x080087d8
  ldr r2, =_sbss
 8000e90:	240668b0 	.word	0x240668b0
  ldr r4, =_ebss
 8000e94:	24066a2c 	.word	0x24066a2c

08000e98 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC3_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea2:	2003      	movs	r0, #3
 8000ea4:	f000 f968 	bl	8001178 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ea8:	f003 fae0 	bl	800446c <HAL_RCC_GetSysClockFreq>
 8000eac:	4602      	mov	r2, r0
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_Init+0x68>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	0a1b      	lsrs	r3, r3, #8
 8000eb4:	f003 030f 	and.w	r3, r3, #15
 8000eb8:	4913      	ldr	r1, [pc, #76]	; (8000f08 <HAL_Init+0x6c>)
 8000eba:	5ccb      	ldrb	r3, [r1, r3]
 8000ebc:	f003 031f 	and.w	r3, r3, #31
 8000ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_Init+0x68>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_Init+0x6c>)
 8000ed0:	5cd3      	ldrb	r3, [r2, r3]
 8000ed2:	f003 031f 	and.w	r3, r3, #31
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8000edc:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <HAL_Init+0x70>)
 8000ede:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ee0:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <HAL_Init+0x74>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f000 f814 	bl	8000f14 <HAL_InitTick>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e002      	b.n	8000efc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef6:	f7ff fe8b 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	58024400 	.word	0x58024400
 8000f08:	08008788 	.word	0x08008788
 8000f0c:	24000004 	.word	0x24000004
 8000f10:	24000000 	.word	0x24000000

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_InitTick+0x60>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e021      	b.n	8000f6c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <HAL_InitTick+0x64>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_InitTick+0x60>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f94d 	bl	80011de <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00e      	b.n	8000f6c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d80a      	bhi.n	8000f6a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f000 f917 	bl	800118e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f60:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <HAL_InitTick+0x68>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	240668ac 	.word	0x240668ac
 8000f78:	24000000 	.word	0x24000000
 8000f7c:	240668a8 	.word	0x240668a8

08000f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	240668ac 	.word	0x240668ac
 8000fa4:	24066a28 	.word	0x24066a28

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <HAL_GetTick+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	24066a28 	.word	0x24066a28

08000fc0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_GetREVID+0x14>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	0c1b      	lsrs	r3, r3, #16
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	5c001000 	.word	0x5c001000

08000fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <__NVIC_SetPriorityGrouping+0x40>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	4313      	orrs	r3, r2
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	; (8001018 <__NVIC_SetPriorityGrouping+0x40>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00
 800101c:	05fa0000 	.word	0x05fa0000

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	; (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	; (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	; (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
         );
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001144:	d301      	bcc.n	800114a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001146:	2301      	movs	r3, #1
 8001148:	e00f      	b.n	800116a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <SysTick_Config+0x40>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001152:	210f      	movs	r1, #15
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f7ff ff8e 	bl	8001078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <SysTick_Config+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <SysTick_Config+0x40>)
 8001164:	2207      	movs	r2, #7
 8001166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	e000e010 	.word	0xe000e010

08001178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff29 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800119c:	f7ff ff40 	bl	8001020 <__NVIC_GetPriorityGrouping>
 80011a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff90 	bl	80010cc <NVIC_EncodePriority>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5f 	bl	8001078 <__NVIC_SetPriority>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff33 	bl	800103c <__NVIC_EnableIRQ>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffa4 	bl	8001134 <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001200:	f7ff fed2 	bl	8000fa8 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e316      	b.n	800183e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a66      	ldr	r2, [pc, #408]	; (80013b0 <HAL_DMA_Init+0x1b8>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d04a      	beq.n	80012b0 <HAL_DMA_Init+0xb8>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a65      	ldr	r2, [pc, #404]	; (80013b4 <HAL_DMA_Init+0x1bc>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d045      	beq.n	80012b0 <HAL_DMA_Init+0xb8>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a63      	ldr	r2, [pc, #396]	; (80013b8 <HAL_DMA_Init+0x1c0>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d040      	beq.n	80012b0 <HAL_DMA_Init+0xb8>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a62      	ldr	r2, [pc, #392]	; (80013bc <HAL_DMA_Init+0x1c4>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d03b      	beq.n	80012b0 <HAL_DMA_Init+0xb8>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a60      	ldr	r2, [pc, #384]	; (80013c0 <HAL_DMA_Init+0x1c8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d036      	beq.n	80012b0 <HAL_DMA_Init+0xb8>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a5f      	ldr	r2, [pc, #380]	; (80013c4 <HAL_DMA_Init+0x1cc>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d031      	beq.n	80012b0 <HAL_DMA_Init+0xb8>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a5d      	ldr	r2, [pc, #372]	; (80013c8 <HAL_DMA_Init+0x1d0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d02c      	beq.n	80012b0 <HAL_DMA_Init+0xb8>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a5c      	ldr	r2, [pc, #368]	; (80013cc <HAL_DMA_Init+0x1d4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d027      	beq.n	80012b0 <HAL_DMA_Init+0xb8>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a5a      	ldr	r2, [pc, #360]	; (80013d0 <HAL_DMA_Init+0x1d8>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d022      	beq.n	80012b0 <HAL_DMA_Init+0xb8>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a59      	ldr	r2, [pc, #356]	; (80013d4 <HAL_DMA_Init+0x1dc>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d01d      	beq.n	80012b0 <HAL_DMA_Init+0xb8>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a57      	ldr	r2, [pc, #348]	; (80013d8 <HAL_DMA_Init+0x1e0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d018      	beq.n	80012b0 <HAL_DMA_Init+0xb8>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a56      	ldr	r2, [pc, #344]	; (80013dc <HAL_DMA_Init+0x1e4>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d013      	beq.n	80012b0 <HAL_DMA_Init+0xb8>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a54      	ldr	r2, [pc, #336]	; (80013e0 <HAL_DMA_Init+0x1e8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d00e      	beq.n	80012b0 <HAL_DMA_Init+0xb8>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a53      	ldr	r2, [pc, #332]	; (80013e4 <HAL_DMA_Init+0x1ec>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d009      	beq.n	80012b0 <HAL_DMA_Init+0xb8>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a51      	ldr	r2, [pc, #324]	; (80013e8 <HAL_DMA_Init+0x1f0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d004      	beq.n	80012b0 <HAL_DMA_Init+0xb8>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a50      	ldr	r2, [pc, #320]	; (80013ec <HAL_DMA_Init+0x1f4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d101      	bne.n	80012b4 <HAL_DMA_Init+0xbc>
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <HAL_DMA_Init+0xbe>
 80012b4:	2300      	movs	r3, #0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 813b 	beq.w	8001532 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2202      	movs	r2, #2
 80012c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a37      	ldr	r2, [pc, #220]	; (80013b0 <HAL_DMA_Init+0x1b8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d04a      	beq.n	800136c <HAL_DMA_Init+0x174>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a36      	ldr	r2, [pc, #216]	; (80013b4 <HAL_DMA_Init+0x1bc>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d045      	beq.n	800136c <HAL_DMA_Init+0x174>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a34      	ldr	r2, [pc, #208]	; (80013b8 <HAL_DMA_Init+0x1c0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d040      	beq.n	800136c <HAL_DMA_Init+0x174>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a33      	ldr	r2, [pc, #204]	; (80013bc <HAL_DMA_Init+0x1c4>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d03b      	beq.n	800136c <HAL_DMA_Init+0x174>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a31      	ldr	r2, [pc, #196]	; (80013c0 <HAL_DMA_Init+0x1c8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d036      	beq.n	800136c <HAL_DMA_Init+0x174>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a30      	ldr	r2, [pc, #192]	; (80013c4 <HAL_DMA_Init+0x1cc>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d031      	beq.n	800136c <HAL_DMA_Init+0x174>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a2e      	ldr	r2, [pc, #184]	; (80013c8 <HAL_DMA_Init+0x1d0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d02c      	beq.n	800136c <HAL_DMA_Init+0x174>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a2d      	ldr	r2, [pc, #180]	; (80013cc <HAL_DMA_Init+0x1d4>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d027      	beq.n	800136c <HAL_DMA_Init+0x174>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a2b      	ldr	r2, [pc, #172]	; (80013d0 <HAL_DMA_Init+0x1d8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d022      	beq.n	800136c <HAL_DMA_Init+0x174>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a2a      	ldr	r2, [pc, #168]	; (80013d4 <HAL_DMA_Init+0x1dc>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d01d      	beq.n	800136c <HAL_DMA_Init+0x174>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a28      	ldr	r2, [pc, #160]	; (80013d8 <HAL_DMA_Init+0x1e0>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d018      	beq.n	800136c <HAL_DMA_Init+0x174>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a27      	ldr	r2, [pc, #156]	; (80013dc <HAL_DMA_Init+0x1e4>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d013      	beq.n	800136c <HAL_DMA_Init+0x174>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a25      	ldr	r2, [pc, #148]	; (80013e0 <HAL_DMA_Init+0x1e8>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d00e      	beq.n	800136c <HAL_DMA_Init+0x174>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a24      	ldr	r2, [pc, #144]	; (80013e4 <HAL_DMA_Init+0x1ec>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d009      	beq.n	800136c <HAL_DMA_Init+0x174>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a22      	ldr	r2, [pc, #136]	; (80013e8 <HAL_DMA_Init+0x1f0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d004      	beq.n	800136c <HAL_DMA_Init+0x174>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a21      	ldr	r2, [pc, #132]	; (80013ec <HAL_DMA_Init+0x1f4>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d108      	bne.n	800137e <HAL_DMA_Init+0x186>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0201 	bic.w	r2, r2, #1
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	e007      	b.n	800138e <HAL_DMA_Init+0x196>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0201 	bic.w	r2, r2, #1
 800138c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800138e:	e02f      	b.n	80013f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001390:	f7ff fe0a 	bl	8000fa8 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b05      	cmp	r3, #5
 800139c:	d928      	bls.n	80013f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2220      	movs	r2, #32
 80013a2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2203      	movs	r2, #3
 80013a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e246      	b.n	800183e <HAL_DMA_Init+0x646>
 80013b0:	40020010 	.word	0x40020010
 80013b4:	40020028 	.word	0x40020028
 80013b8:	40020040 	.word	0x40020040
 80013bc:	40020058 	.word	0x40020058
 80013c0:	40020070 	.word	0x40020070
 80013c4:	40020088 	.word	0x40020088
 80013c8:	400200a0 	.word	0x400200a0
 80013cc:	400200b8 	.word	0x400200b8
 80013d0:	40020410 	.word	0x40020410
 80013d4:	40020428 	.word	0x40020428
 80013d8:	40020440 	.word	0x40020440
 80013dc:	40020458 	.word	0x40020458
 80013e0:	40020470 	.word	0x40020470
 80013e4:	40020488 	.word	0x40020488
 80013e8:	400204a0 	.word	0x400204a0
 80013ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1c8      	bne.n	8001390 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	4b83      	ldr	r3, [pc, #524]	; (8001618 <HAL_DMA_Init+0x420>)
 800140a:	4013      	ands	r3, r2
 800140c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001416:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001422:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800142e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	4313      	orrs	r3, r2
 800143a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	2b04      	cmp	r3, #4
 8001442:	d107      	bne.n	8001454 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	4313      	orrs	r3, r2
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	4313      	orrs	r3, r2
 8001452:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001454:	4b71      	ldr	r3, [pc, #452]	; (800161c <HAL_DMA_Init+0x424>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b71      	ldr	r3, [pc, #452]	; (8001620 <HAL_DMA_Init+0x428>)
 800145a:	4013      	ands	r3, r2
 800145c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001460:	d328      	bcc.n	80014b4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b28      	cmp	r3, #40	; 0x28
 8001468:	d903      	bls.n	8001472 <HAL_DMA_Init+0x27a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b2e      	cmp	r3, #46	; 0x2e
 8001470:	d917      	bls.n	80014a2 <HAL_DMA_Init+0x2aa>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b3e      	cmp	r3, #62	; 0x3e
 8001478:	d903      	bls.n	8001482 <HAL_DMA_Init+0x28a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b42      	cmp	r3, #66	; 0x42
 8001480:	d90f      	bls.n	80014a2 <HAL_DMA_Init+0x2aa>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b46      	cmp	r3, #70	; 0x46
 8001488:	d903      	bls.n	8001492 <HAL_DMA_Init+0x29a>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b48      	cmp	r3, #72	; 0x48
 8001490:	d907      	bls.n	80014a2 <HAL_DMA_Init+0x2aa>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b4e      	cmp	r3, #78	; 0x4e
 8001498:	d905      	bls.n	80014a6 <HAL_DMA_Init+0x2ae>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b52      	cmp	r3, #82	; 0x52
 80014a0:	d801      	bhi.n	80014a6 <HAL_DMA_Init+0x2ae>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <HAL_DMA_Init+0x2b0>
 80014a6:	2300      	movs	r3, #0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014b2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f023 0307 	bic.w	r3, r3, #7
 80014ca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d117      	bne.n	800150e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00e      	beq.n	800150e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f001 fdcf 	bl	8003094 <DMA_CheckFifoParam>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d008      	beq.n	800150e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2240      	movs	r2, #64	; 0x40
 8001500:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e197      	b.n	800183e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f001 fd0a 	bl	8002f30 <DMA_CalcBaseAndBitshift>
 800151c:	4603      	mov	r3, r0
 800151e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001524:	f003 031f 	and.w	r3, r3, #31
 8001528:	223f      	movs	r2, #63	; 0x3f
 800152a:	409a      	lsls	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	e0cd      	b.n	80016ce <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a3b      	ldr	r2, [pc, #236]	; (8001624 <HAL_DMA_Init+0x42c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d022      	beq.n	8001582 <HAL_DMA_Init+0x38a>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a39      	ldr	r2, [pc, #228]	; (8001628 <HAL_DMA_Init+0x430>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d01d      	beq.n	8001582 <HAL_DMA_Init+0x38a>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a38      	ldr	r2, [pc, #224]	; (800162c <HAL_DMA_Init+0x434>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d018      	beq.n	8001582 <HAL_DMA_Init+0x38a>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a36      	ldr	r2, [pc, #216]	; (8001630 <HAL_DMA_Init+0x438>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d013      	beq.n	8001582 <HAL_DMA_Init+0x38a>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a35      	ldr	r2, [pc, #212]	; (8001634 <HAL_DMA_Init+0x43c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d00e      	beq.n	8001582 <HAL_DMA_Init+0x38a>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a33      	ldr	r2, [pc, #204]	; (8001638 <HAL_DMA_Init+0x440>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d009      	beq.n	8001582 <HAL_DMA_Init+0x38a>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a32      	ldr	r2, [pc, #200]	; (800163c <HAL_DMA_Init+0x444>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d004      	beq.n	8001582 <HAL_DMA_Init+0x38a>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a30      	ldr	r2, [pc, #192]	; (8001640 <HAL_DMA_Init+0x448>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_DMA_Init+0x38e>
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <HAL_DMA_Init+0x390>
 8001586:	2300      	movs	r3, #0
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 8097 	beq.w	80016bc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a24      	ldr	r2, [pc, #144]	; (8001624 <HAL_DMA_Init+0x42c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d021      	beq.n	80015dc <HAL_DMA_Init+0x3e4>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a22      	ldr	r2, [pc, #136]	; (8001628 <HAL_DMA_Init+0x430>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d01c      	beq.n	80015dc <HAL_DMA_Init+0x3e4>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a21      	ldr	r2, [pc, #132]	; (800162c <HAL_DMA_Init+0x434>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d017      	beq.n	80015dc <HAL_DMA_Init+0x3e4>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a1f      	ldr	r2, [pc, #124]	; (8001630 <HAL_DMA_Init+0x438>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d012      	beq.n	80015dc <HAL_DMA_Init+0x3e4>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <HAL_DMA_Init+0x43c>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d00d      	beq.n	80015dc <HAL_DMA_Init+0x3e4>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <HAL_DMA_Init+0x440>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d008      	beq.n	80015dc <HAL_DMA_Init+0x3e4>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a1b      	ldr	r2, [pc, #108]	; (800163c <HAL_DMA_Init+0x444>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d003      	beq.n	80015dc <HAL_DMA_Init+0x3e4>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a19      	ldr	r2, [pc, #100]	; (8001640 <HAL_DMA_Init+0x448>)
 80015da:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2202      	movs	r2, #2
 80015e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <HAL_DMA_Init+0x44c>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b40      	cmp	r3, #64	; 0x40
 8001602:	d021      	beq.n	8001648 <HAL_DMA_Init+0x450>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b80      	cmp	r3, #128	; 0x80
 800160a:	d102      	bne.n	8001612 <HAL_DMA_Init+0x41a>
 800160c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001610:	e01b      	b.n	800164a <HAL_DMA_Init+0x452>
 8001612:	2300      	movs	r3, #0
 8001614:	e019      	b.n	800164a <HAL_DMA_Init+0x452>
 8001616:	bf00      	nop
 8001618:	fe10803f 	.word	0xfe10803f
 800161c:	5c001000 	.word	0x5c001000
 8001620:	ffff0000 	.word	0xffff0000
 8001624:	58025408 	.word	0x58025408
 8001628:	5802541c 	.word	0x5802541c
 800162c:	58025430 	.word	0x58025430
 8001630:	58025444 	.word	0x58025444
 8001634:	58025458 	.word	0x58025458
 8001638:	5802546c 	.word	0x5802546c
 800163c:	58025480 	.word	0x58025480
 8001640:	58025494 	.word	0x58025494
 8001644:	fffe000f 	.word	0xfffe000f
 8001648:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	68d2      	ldr	r2, [r2, #12]
 800164e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001650:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001658:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001660:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001668:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001670:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001678:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	4313      	orrs	r3, r2
 800167e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b6e      	ldr	r3, [pc, #440]	; (8001848 <HAL_DMA_Init+0x650>)
 8001690:	4413      	add	r3, r2
 8001692:	4a6e      	ldr	r2, [pc, #440]	; (800184c <HAL_DMA_Init+0x654>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	009a      	lsls	r2, r3, #2
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f001 fc45 	bl	8002f30 <DMA_CalcBaseAndBitshift>
 80016a6:	4603      	mov	r3, r0
 80016a8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	2201      	movs	r2, #1
 80016b4:	409a      	lsls	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	e008      	b.n	80016ce <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2240      	movs	r2, #64	; 0x40
 80016c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2203      	movs	r2, #3
 80016c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e0b7      	b.n	800183e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a5f      	ldr	r2, [pc, #380]	; (8001850 <HAL_DMA_Init+0x658>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d072      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a5d      	ldr	r2, [pc, #372]	; (8001854 <HAL_DMA_Init+0x65c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d06d      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a5c      	ldr	r2, [pc, #368]	; (8001858 <HAL_DMA_Init+0x660>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d068      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a5a      	ldr	r2, [pc, #360]	; (800185c <HAL_DMA_Init+0x664>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d063      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a59      	ldr	r2, [pc, #356]	; (8001860 <HAL_DMA_Init+0x668>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d05e      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a57      	ldr	r2, [pc, #348]	; (8001864 <HAL_DMA_Init+0x66c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d059      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a56      	ldr	r2, [pc, #344]	; (8001868 <HAL_DMA_Init+0x670>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d054      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a54      	ldr	r2, [pc, #336]	; (800186c <HAL_DMA_Init+0x674>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d04f      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a53      	ldr	r2, [pc, #332]	; (8001870 <HAL_DMA_Init+0x678>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d04a      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a51      	ldr	r2, [pc, #324]	; (8001874 <HAL_DMA_Init+0x67c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d045      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a50      	ldr	r2, [pc, #320]	; (8001878 <HAL_DMA_Init+0x680>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d040      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a4e      	ldr	r2, [pc, #312]	; (800187c <HAL_DMA_Init+0x684>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d03b      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a4d      	ldr	r2, [pc, #308]	; (8001880 <HAL_DMA_Init+0x688>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d036      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a4b      	ldr	r2, [pc, #300]	; (8001884 <HAL_DMA_Init+0x68c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d031      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a4a      	ldr	r2, [pc, #296]	; (8001888 <HAL_DMA_Init+0x690>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d02c      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a48      	ldr	r2, [pc, #288]	; (800188c <HAL_DMA_Init+0x694>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d027      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a47      	ldr	r2, [pc, #284]	; (8001890 <HAL_DMA_Init+0x698>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d022      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a45      	ldr	r2, [pc, #276]	; (8001894 <HAL_DMA_Init+0x69c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d01d      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a44      	ldr	r2, [pc, #272]	; (8001898 <HAL_DMA_Init+0x6a0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d018      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a42      	ldr	r2, [pc, #264]	; (800189c <HAL_DMA_Init+0x6a4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d013      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a41      	ldr	r2, [pc, #260]	; (80018a0 <HAL_DMA_Init+0x6a8>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d00e      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a3f      	ldr	r2, [pc, #252]	; (80018a4 <HAL_DMA_Init+0x6ac>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d009      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a3e      	ldr	r2, [pc, #248]	; (80018a8 <HAL_DMA_Init+0x6b0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d004      	beq.n	80017be <HAL_DMA_Init+0x5c6>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a3c      	ldr	r2, [pc, #240]	; (80018ac <HAL_DMA_Init+0x6b4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_DMA_Init+0x5ca>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_DMA_Init+0x5cc>
 80017c2:	2300      	movs	r3, #0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d032      	beq.n	800182e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f001 fcdf 	bl	800318c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b80      	cmp	r3, #128	; 0x80
 80017d4:	d102      	bne.n	80017dc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80017f0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d010      	beq.n	800181c <HAL_DMA_Init+0x624>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d80c      	bhi.n	800181c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f001 fd5c 	bl	80032c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	e008      	b.n	800182e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	a7fdabf8 	.word	0xa7fdabf8
 800184c:	cccccccd 	.word	0xcccccccd
 8001850:	40020010 	.word	0x40020010
 8001854:	40020028 	.word	0x40020028
 8001858:	40020040 	.word	0x40020040
 800185c:	40020058 	.word	0x40020058
 8001860:	40020070 	.word	0x40020070
 8001864:	40020088 	.word	0x40020088
 8001868:	400200a0 	.word	0x400200a0
 800186c:	400200b8 	.word	0x400200b8
 8001870:	40020410 	.word	0x40020410
 8001874:	40020428 	.word	0x40020428
 8001878:	40020440 	.word	0x40020440
 800187c:	40020458 	.word	0x40020458
 8001880:	40020470 	.word	0x40020470
 8001884:	40020488 	.word	0x40020488
 8001888:	400204a0 	.word	0x400204a0
 800188c:	400204b8 	.word	0x400204b8
 8001890:	58025408 	.word	0x58025408
 8001894:	5802541c 	.word	0x5802541c
 8001898:	58025430 	.word	0x58025430
 800189c:	58025444 	.word	0x58025444
 80018a0:	58025458 	.word	0x58025458
 80018a4:	5802546c 	.word	0x5802546c
 80018a8:	58025480 	.word	0x58025480
 80018ac:	58025494 	.word	0x58025494

080018b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e226      	b.n	8001d1a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_DMA_Start_IT+0x2a>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e21f      	b.n	8001d1a <HAL_DMA_Start_IT+0x46a>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	f040 820a 	bne.w	8001d04 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2202      	movs	r2, #2
 80018f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a68      	ldr	r2, [pc, #416]	; (8001aa4 <HAL_DMA_Start_IT+0x1f4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d04a      	beq.n	800199e <HAL_DMA_Start_IT+0xee>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a66      	ldr	r2, [pc, #408]	; (8001aa8 <HAL_DMA_Start_IT+0x1f8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d045      	beq.n	800199e <HAL_DMA_Start_IT+0xee>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a65      	ldr	r2, [pc, #404]	; (8001aac <HAL_DMA_Start_IT+0x1fc>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d040      	beq.n	800199e <HAL_DMA_Start_IT+0xee>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a63      	ldr	r2, [pc, #396]	; (8001ab0 <HAL_DMA_Start_IT+0x200>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d03b      	beq.n	800199e <HAL_DMA_Start_IT+0xee>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a62      	ldr	r2, [pc, #392]	; (8001ab4 <HAL_DMA_Start_IT+0x204>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d036      	beq.n	800199e <HAL_DMA_Start_IT+0xee>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a60      	ldr	r2, [pc, #384]	; (8001ab8 <HAL_DMA_Start_IT+0x208>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d031      	beq.n	800199e <HAL_DMA_Start_IT+0xee>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a5f      	ldr	r2, [pc, #380]	; (8001abc <HAL_DMA_Start_IT+0x20c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d02c      	beq.n	800199e <HAL_DMA_Start_IT+0xee>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a5d      	ldr	r2, [pc, #372]	; (8001ac0 <HAL_DMA_Start_IT+0x210>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d027      	beq.n	800199e <HAL_DMA_Start_IT+0xee>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a5c      	ldr	r2, [pc, #368]	; (8001ac4 <HAL_DMA_Start_IT+0x214>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d022      	beq.n	800199e <HAL_DMA_Start_IT+0xee>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a5a      	ldr	r2, [pc, #360]	; (8001ac8 <HAL_DMA_Start_IT+0x218>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d01d      	beq.n	800199e <HAL_DMA_Start_IT+0xee>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a59      	ldr	r2, [pc, #356]	; (8001acc <HAL_DMA_Start_IT+0x21c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d018      	beq.n	800199e <HAL_DMA_Start_IT+0xee>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a57      	ldr	r2, [pc, #348]	; (8001ad0 <HAL_DMA_Start_IT+0x220>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d013      	beq.n	800199e <HAL_DMA_Start_IT+0xee>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a56      	ldr	r2, [pc, #344]	; (8001ad4 <HAL_DMA_Start_IT+0x224>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d00e      	beq.n	800199e <HAL_DMA_Start_IT+0xee>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a54      	ldr	r2, [pc, #336]	; (8001ad8 <HAL_DMA_Start_IT+0x228>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d009      	beq.n	800199e <HAL_DMA_Start_IT+0xee>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a53      	ldr	r2, [pc, #332]	; (8001adc <HAL_DMA_Start_IT+0x22c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d004      	beq.n	800199e <HAL_DMA_Start_IT+0xee>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a51      	ldr	r2, [pc, #324]	; (8001ae0 <HAL_DMA_Start_IT+0x230>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d108      	bne.n	80019b0 <HAL_DMA_Start_IT+0x100>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0201 	bic.w	r2, r2, #1
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	e007      	b.n	80019c0 <HAL_DMA_Start_IT+0x110>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0201 	bic.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f001 f906 	bl	8002bd8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a34      	ldr	r2, [pc, #208]	; (8001aa4 <HAL_DMA_Start_IT+0x1f4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d04a      	beq.n	8001a6c <HAL_DMA_Start_IT+0x1bc>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a33      	ldr	r2, [pc, #204]	; (8001aa8 <HAL_DMA_Start_IT+0x1f8>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d045      	beq.n	8001a6c <HAL_DMA_Start_IT+0x1bc>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a31      	ldr	r2, [pc, #196]	; (8001aac <HAL_DMA_Start_IT+0x1fc>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d040      	beq.n	8001a6c <HAL_DMA_Start_IT+0x1bc>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a30      	ldr	r2, [pc, #192]	; (8001ab0 <HAL_DMA_Start_IT+0x200>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d03b      	beq.n	8001a6c <HAL_DMA_Start_IT+0x1bc>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a2e      	ldr	r2, [pc, #184]	; (8001ab4 <HAL_DMA_Start_IT+0x204>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d036      	beq.n	8001a6c <HAL_DMA_Start_IT+0x1bc>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a2d      	ldr	r2, [pc, #180]	; (8001ab8 <HAL_DMA_Start_IT+0x208>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d031      	beq.n	8001a6c <HAL_DMA_Start_IT+0x1bc>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a2b      	ldr	r2, [pc, #172]	; (8001abc <HAL_DMA_Start_IT+0x20c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d02c      	beq.n	8001a6c <HAL_DMA_Start_IT+0x1bc>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a2a      	ldr	r2, [pc, #168]	; (8001ac0 <HAL_DMA_Start_IT+0x210>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d027      	beq.n	8001a6c <HAL_DMA_Start_IT+0x1bc>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a28      	ldr	r2, [pc, #160]	; (8001ac4 <HAL_DMA_Start_IT+0x214>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d022      	beq.n	8001a6c <HAL_DMA_Start_IT+0x1bc>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a27      	ldr	r2, [pc, #156]	; (8001ac8 <HAL_DMA_Start_IT+0x218>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d01d      	beq.n	8001a6c <HAL_DMA_Start_IT+0x1bc>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a25      	ldr	r2, [pc, #148]	; (8001acc <HAL_DMA_Start_IT+0x21c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d018      	beq.n	8001a6c <HAL_DMA_Start_IT+0x1bc>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a24      	ldr	r2, [pc, #144]	; (8001ad0 <HAL_DMA_Start_IT+0x220>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d013      	beq.n	8001a6c <HAL_DMA_Start_IT+0x1bc>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a22      	ldr	r2, [pc, #136]	; (8001ad4 <HAL_DMA_Start_IT+0x224>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00e      	beq.n	8001a6c <HAL_DMA_Start_IT+0x1bc>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a21      	ldr	r2, [pc, #132]	; (8001ad8 <HAL_DMA_Start_IT+0x228>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d009      	beq.n	8001a6c <HAL_DMA_Start_IT+0x1bc>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a1f      	ldr	r2, [pc, #124]	; (8001adc <HAL_DMA_Start_IT+0x22c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d004      	beq.n	8001a6c <HAL_DMA_Start_IT+0x1bc>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1e      	ldr	r2, [pc, #120]	; (8001ae0 <HAL_DMA_Start_IT+0x230>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d101      	bne.n	8001a70 <HAL_DMA_Start_IT+0x1c0>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <HAL_DMA_Start_IT+0x1c2>
 8001a70:	2300      	movs	r3, #0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d036      	beq.n	8001ae4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f023 021e 	bic.w	r2, r3, #30
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f042 0216 	orr.w	r2, r2, #22
 8001a88:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d03e      	beq.n	8001b10 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 0208 	orr.w	r2, r2, #8
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e035      	b.n	8001b10 <HAL_DMA_Start_IT+0x260>
 8001aa4:	40020010 	.word	0x40020010
 8001aa8:	40020028 	.word	0x40020028
 8001aac:	40020040 	.word	0x40020040
 8001ab0:	40020058 	.word	0x40020058
 8001ab4:	40020070 	.word	0x40020070
 8001ab8:	40020088 	.word	0x40020088
 8001abc:	400200a0 	.word	0x400200a0
 8001ac0:	400200b8 	.word	0x400200b8
 8001ac4:	40020410 	.word	0x40020410
 8001ac8:	40020428 	.word	0x40020428
 8001acc:	40020440 	.word	0x40020440
 8001ad0:	40020458 	.word	0x40020458
 8001ad4:	40020470 	.word	0x40020470
 8001ad8:	40020488 	.word	0x40020488
 8001adc:	400204a0 	.word	0x400204a0
 8001ae0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 020e 	bic.w	r2, r3, #14
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 020a 	orr.w	r2, r2, #10
 8001af6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d007      	beq.n	8001b10 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0204 	orr.w	r2, r2, #4
 8001b0e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a83      	ldr	r2, [pc, #524]	; (8001d24 <HAL_DMA_Start_IT+0x474>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d072      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a82      	ldr	r2, [pc, #520]	; (8001d28 <HAL_DMA_Start_IT+0x478>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d06d      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a80      	ldr	r2, [pc, #512]	; (8001d2c <HAL_DMA_Start_IT+0x47c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d068      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a7f      	ldr	r2, [pc, #508]	; (8001d30 <HAL_DMA_Start_IT+0x480>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d063      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a7d      	ldr	r2, [pc, #500]	; (8001d34 <HAL_DMA_Start_IT+0x484>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d05e      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a7c      	ldr	r2, [pc, #496]	; (8001d38 <HAL_DMA_Start_IT+0x488>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d059      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a7a      	ldr	r2, [pc, #488]	; (8001d3c <HAL_DMA_Start_IT+0x48c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d054      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a79      	ldr	r2, [pc, #484]	; (8001d40 <HAL_DMA_Start_IT+0x490>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d04f      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a77      	ldr	r2, [pc, #476]	; (8001d44 <HAL_DMA_Start_IT+0x494>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d04a      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a76      	ldr	r2, [pc, #472]	; (8001d48 <HAL_DMA_Start_IT+0x498>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d045      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a74      	ldr	r2, [pc, #464]	; (8001d4c <HAL_DMA_Start_IT+0x49c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d040      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a73      	ldr	r2, [pc, #460]	; (8001d50 <HAL_DMA_Start_IT+0x4a0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d03b      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a71      	ldr	r2, [pc, #452]	; (8001d54 <HAL_DMA_Start_IT+0x4a4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d036      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a70      	ldr	r2, [pc, #448]	; (8001d58 <HAL_DMA_Start_IT+0x4a8>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d031      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a6e      	ldr	r2, [pc, #440]	; (8001d5c <HAL_DMA_Start_IT+0x4ac>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d02c      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a6d      	ldr	r2, [pc, #436]	; (8001d60 <HAL_DMA_Start_IT+0x4b0>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d027      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a6b      	ldr	r2, [pc, #428]	; (8001d64 <HAL_DMA_Start_IT+0x4b4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d022      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a6a      	ldr	r2, [pc, #424]	; (8001d68 <HAL_DMA_Start_IT+0x4b8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d01d      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a68      	ldr	r2, [pc, #416]	; (8001d6c <HAL_DMA_Start_IT+0x4bc>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d018      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a67      	ldr	r2, [pc, #412]	; (8001d70 <HAL_DMA_Start_IT+0x4c0>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d013      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a65      	ldr	r2, [pc, #404]	; (8001d74 <HAL_DMA_Start_IT+0x4c4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d00e      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a64      	ldr	r2, [pc, #400]	; (8001d78 <HAL_DMA_Start_IT+0x4c8>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d009      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a62      	ldr	r2, [pc, #392]	; (8001d7c <HAL_DMA_Start_IT+0x4cc>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d004      	beq.n	8001c00 <HAL_DMA_Start_IT+0x350>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a61      	ldr	r2, [pc, #388]	; (8001d80 <HAL_DMA_Start_IT+0x4d0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d101      	bne.n	8001c04 <HAL_DMA_Start_IT+0x354>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <HAL_DMA_Start_IT+0x356>
 8001c04:	2300      	movs	r3, #0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d01a      	beq.n	8001c40 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d007      	beq.n	8001c28 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c26:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d007      	beq.n	8001c40 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c3e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a37      	ldr	r2, [pc, #220]	; (8001d24 <HAL_DMA_Start_IT+0x474>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d04a      	beq.n	8001ce0 <HAL_DMA_Start_IT+0x430>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a36      	ldr	r2, [pc, #216]	; (8001d28 <HAL_DMA_Start_IT+0x478>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d045      	beq.n	8001ce0 <HAL_DMA_Start_IT+0x430>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a34      	ldr	r2, [pc, #208]	; (8001d2c <HAL_DMA_Start_IT+0x47c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d040      	beq.n	8001ce0 <HAL_DMA_Start_IT+0x430>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a33      	ldr	r2, [pc, #204]	; (8001d30 <HAL_DMA_Start_IT+0x480>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d03b      	beq.n	8001ce0 <HAL_DMA_Start_IT+0x430>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a31      	ldr	r2, [pc, #196]	; (8001d34 <HAL_DMA_Start_IT+0x484>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d036      	beq.n	8001ce0 <HAL_DMA_Start_IT+0x430>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a30      	ldr	r2, [pc, #192]	; (8001d38 <HAL_DMA_Start_IT+0x488>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d031      	beq.n	8001ce0 <HAL_DMA_Start_IT+0x430>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a2e      	ldr	r2, [pc, #184]	; (8001d3c <HAL_DMA_Start_IT+0x48c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d02c      	beq.n	8001ce0 <HAL_DMA_Start_IT+0x430>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a2d      	ldr	r2, [pc, #180]	; (8001d40 <HAL_DMA_Start_IT+0x490>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d027      	beq.n	8001ce0 <HAL_DMA_Start_IT+0x430>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a2b      	ldr	r2, [pc, #172]	; (8001d44 <HAL_DMA_Start_IT+0x494>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d022      	beq.n	8001ce0 <HAL_DMA_Start_IT+0x430>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a2a      	ldr	r2, [pc, #168]	; (8001d48 <HAL_DMA_Start_IT+0x498>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d01d      	beq.n	8001ce0 <HAL_DMA_Start_IT+0x430>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a28      	ldr	r2, [pc, #160]	; (8001d4c <HAL_DMA_Start_IT+0x49c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d018      	beq.n	8001ce0 <HAL_DMA_Start_IT+0x430>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a27      	ldr	r2, [pc, #156]	; (8001d50 <HAL_DMA_Start_IT+0x4a0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d013      	beq.n	8001ce0 <HAL_DMA_Start_IT+0x430>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a25      	ldr	r2, [pc, #148]	; (8001d54 <HAL_DMA_Start_IT+0x4a4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00e      	beq.n	8001ce0 <HAL_DMA_Start_IT+0x430>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a24      	ldr	r2, [pc, #144]	; (8001d58 <HAL_DMA_Start_IT+0x4a8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d009      	beq.n	8001ce0 <HAL_DMA_Start_IT+0x430>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a22      	ldr	r2, [pc, #136]	; (8001d5c <HAL_DMA_Start_IT+0x4ac>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d004      	beq.n	8001ce0 <HAL_DMA_Start_IT+0x430>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a21      	ldr	r2, [pc, #132]	; (8001d60 <HAL_DMA_Start_IT+0x4b0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d108      	bne.n	8001cf2 <HAL_DMA_Start_IT+0x442>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	e012      	b.n	8001d18 <HAL_DMA_Start_IT+0x468>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f042 0201 	orr.w	r2, r2, #1
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	e009      	b.n	8001d18 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40020010 	.word	0x40020010
 8001d28:	40020028 	.word	0x40020028
 8001d2c:	40020040 	.word	0x40020040
 8001d30:	40020058 	.word	0x40020058
 8001d34:	40020070 	.word	0x40020070
 8001d38:	40020088 	.word	0x40020088
 8001d3c:	400200a0 	.word	0x400200a0
 8001d40:	400200b8 	.word	0x400200b8
 8001d44:	40020410 	.word	0x40020410
 8001d48:	40020428 	.word	0x40020428
 8001d4c:	40020440 	.word	0x40020440
 8001d50:	40020458 	.word	0x40020458
 8001d54:	40020470 	.word	0x40020470
 8001d58:	40020488 	.word	0x40020488
 8001d5c:	400204a0 	.word	0x400204a0
 8001d60:	400204b8 	.word	0x400204b8
 8001d64:	58025408 	.word	0x58025408
 8001d68:	5802541c 	.word	0x5802541c
 8001d6c:	58025430 	.word	0x58025430
 8001d70:	58025444 	.word	0x58025444
 8001d74:	58025458 	.word	0x58025458
 8001d78:	5802546c 	.word	0x5802546c
 8001d7c:	58025480 	.word	0x58025480
 8001d80:	58025494 	.word	0x58025494

08001d84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d90:	4b67      	ldr	r3, [pc, #412]	; (8001f30 <HAL_DMA_IRQHandler+0x1ac>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a67      	ldr	r2, [pc, #412]	; (8001f34 <HAL_DMA_IRQHandler+0x1b0>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	0a9b      	lsrs	r3, r3, #10
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a5f      	ldr	r2, [pc, #380]	; (8001f38 <HAL_DMA_IRQHandler+0x1b4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d04a      	beq.n	8001e56 <HAL_DMA_IRQHandler+0xd2>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a5d      	ldr	r2, [pc, #372]	; (8001f3c <HAL_DMA_IRQHandler+0x1b8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d045      	beq.n	8001e56 <HAL_DMA_IRQHandler+0xd2>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a5c      	ldr	r2, [pc, #368]	; (8001f40 <HAL_DMA_IRQHandler+0x1bc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d040      	beq.n	8001e56 <HAL_DMA_IRQHandler+0xd2>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a5a      	ldr	r2, [pc, #360]	; (8001f44 <HAL_DMA_IRQHandler+0x1c0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d03b      	beq.n	8001e56 <HAL_DMA_IRQHandler+0xd2>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a59      	ldr	r2, [pc, #356]	; (8001f48 <HAL_DMA_IRQHandler+0x1c4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d036      	beq.n	8001e56 <HAL_DMA_IRQHandler+0xd2>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a57      	ldr	r2, [pc, #348]	; (8001f4c <HAL_DMA_IRQHandler+0x1c8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d031      	beq.n	8001e56 <HAL_DMA_IRQHandler+0xd2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a56      	ldr	r2, [pc, #344]	; (8001f50 <HAL_DMA_IRQHandler+0x1cc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d02c      	beq.n	8001e56 <HAL_DMA_IRQHandler+0xd2>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a54      	ldr	r2, [pc, #336]	; (8001f54 <HAL_DMA_IRQHandler+0x1d0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d027      	beq.n	8001e56 <HAL_DMA_IRQHandler+0xd2>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a53      	ldr	r2, [pc, #332]	; (8001f58 <HAL_DMA_IRQHandler+0x1d4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d022      	beq.n	8001e56 <HAL_DMA_IRQHandler+0xd2>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a51      	ldr	r2, [pc, #324]	; (8001f5c <HAL_DMA_IRQHandler+0x1d8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d01d      	beq.n	8001e56 <HAL_DMA_IRQHandler+0xd2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a50      	ldr	r2, [pc, #320]	; (8001f60 <HAL_DMA_IRQHandler+0x1dc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d018      	beq.n	8001e56 <HAL_DMA_IRQHandler+0xd2>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a4e      	ldr	r2, [pc, #312]	; (8001f64 <HAL_DMA_IRQHandler+0x1e0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d013      	beq.n	8001e56 <HAL_DMA_IRQHandler+0xd2>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a4d      	ldr	r2, [pc, #308]	; (8001f68 <HAL_DMA_IRQHandler+0x1e4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d00e      	beq.n	8001e56 <HAL_DMA_IRQHandler+0xd2>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a4b      	ldr	r2, [pc, #300]	; (8001f6c <HAL_DMA_IRQHandler+0x1e8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d009      	beq.n	8001e56 <HAL_DMA_IRQHandler+0xd2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a4a      	ldr	r2, [pc, #296]	; (8001f70 <HAL_DMA_IRQHandler+0x1ec>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d004      	beq.n	8001e56 <HAL_DMA_IRQHandler+0xd2>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a48      	ldr	r2, [pc, #288]	; (8001f74 <HAL_DMA_IRQHandler+0x1f0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d101      	bne.n	8001e5a <HAL_DMA_IRQHandler+0xd6>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <HAL_DMA_IRQHandler+0xd8>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 842b 	beq.w	80026b8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	2208      	movs	r2, #8
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80a2 	beq.w	8001fbc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a2e      	ldr	r2, [pc, #184]	; (8001f38 <HAL_DMA_IRQHandler+0x1b4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d04a      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x194>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a2d      	ldr	r2, [pc, #180]	; (8001f3c <HAL_DMA_IRQHandler+0x1b8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d045      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x194>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a2b      	ldr	r2, [pc, #172]	; (8001f40 <HAL_DMA_IRQHandler+0x1bc>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d040      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x194>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a2a      	ldr	r2, [pc, #168]	; (8001f44 <HAL_DMA_IRQHandler+0x1c0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d03b      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x194>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a28      	ldr	r2, [pc, #160]	; (8001f48 <HAL_DMA_IRQHandler+0x1c4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d036      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x194>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a27      	ldr	r2, [pc, #156]	; (8001f4c <HAL_DMA_IRQHandler+0x1c8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d031      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x194>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a25      	ldr	r2, [pc, #148]	; (8001f50 <HAL_DMA_IRQHandler+0x1cc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d02c      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x194>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a24      	ldr	r2, [pc, #144]	; (8001f54 <HAL_DMA_IRQHandler+0x1d0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d027      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x194>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a22      	ldr	r2, [pc, #136]	; (8001f58 <HAL_DMA_IRQHandler+0x1d4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d022      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x194>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a21      	ldr	r2, [pc, #132]	; (8001f5c <HAL_DMA_IRQHandler+0x1d8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d01d      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x194>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a1f      	ldr	r2, [pc, #124]	; (8001f60 <HAL_DMA_IRQHandler+0x1dc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d018      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x194>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a1e      	ldr	r2, [pc, #120]	; (8001f64 <HAL_DMA_IRQHandler+0x1e0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d013      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x194>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a1c      	ldr	r2, [pc, #112]	; (8001f68 <HAL_DMA_IRQHandler+0x1e4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00e      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x194>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <HAL_DMA_IRQHandler+0x1e8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d009      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x194>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a19      	ldr	r2, [pc, #100]	; (8001f70 <HAL_DMA_IRQHandler+0x1ec>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d004      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x194>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <HAL_DMA_IRQHandler+0x1f0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d12f      	bne.n	8001f78 <HAL_DMA_IRQHandler+0x1f4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	bf14      	ite	ne
 8001f26:	2301      	movne	r3, #1
 8001f28:	2300      	moveq	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	e02e      	b.n	8001f8c <HAL_DMA_IRQHandler+0x208>
 8001f2e:	bf00      	nop
 8001f30:	24000000 	.word	0x24000000
 8001f34:	1b4e81b5 	.word	0x1b4e81b5
 8001f38:	40020010 	.word	0x40020010
 8001f3c:	40020028 	.word	0x40020028
 8001f40:	40020040 	.word	0x40020040
 8001f44:	40020058 	.word	0x40020058
 8001f48:	40020070 	.word	0x40020070
 8001f4c:	40020088 	.word	0x40020088
 8001f50:	400200a0 	.word	0x400200a0
 8001f54:	400200b8 	.word	0x400200b8
 8001f58:	40020410 	.word	0x40020410
 8001f5c:	40020428 	.word	0x40020428
 8001f60:	40020440 	.word	0x40020440
 8001f64:	40020458 	.word	0x40020458
 8001f68:	40020470 	.word	0x40020470
 8001f6c:	40020488 	.word	0x40020488
 8001f70:	400204a0 	.word	0x400204a0
 8001f74:	400204b8 	.word	0x400204b8
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	bf14      	ite	ne
 8001f86:	2301      	movne	r3, #1
 8001f88:	2300      	moveq	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d015      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0204 	bic.w	r2, r2, #4
 8001f9e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	2208      	movs	r2, #8
 8001faa:	409a      	lsls	r2, r3
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb4:	f043 0201 	orr.w	r2, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc0:	f003 031f 	and.w	r3, r3, #31
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d06e      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a69      	ldr	r2, [pc, #420]	; (800217c <HAL_DMA_IRQHandler+0x3f8>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d04a      	beq.n	8002072 <HAL_DMA_IRQHandler+0x2ee>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a67      	ldr	r2, [pc, #412]	; (8002180 <HAL_DMA_IRQHandler+0x3fc>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d045      	beq.n	8002072 <HAL_DMA_IRQHandler+0x2ee>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a66      	ldr	r2, [pc, #408]	; (8002184 <HAL_DMA_IRQHandler+0x400>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d040      	beq.n	8002072 <HAL_DMA_IRQHandler+0x2ee>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a64      	ldr	r2, [pc, #400]	; (8002188 <HAL_DMA_IRQHandler+0x404>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d03b      	beq.n	8002072 <HAL_DMA_IRQHandler+0x2ee>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a63      	ldr	r2, [pc, #396]	; (800218c <HAL_DMA_IRQHandler+0x408>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d036      	beq.n	8002072 <HAL_DMA_IRQHandler+0x2ee>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a61      	ldr	r2, [pc, #388]	; (8002190 <HAL_DMA_IRQHandler+0x40c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d031      	beq.n	8002072 <HAL_DMA_IRQHandler+0x2ee>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a60      	ldr	r2, [pc, #384]	; (8002194 <HAL_DMA_IRQHandler+0x410>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d02c      	beq.n	8002072 <HAL_DMA_IRQHandler+0x2ee>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a5e      	ldr	r2, [pc, #376]	; (8002198 <HAL_DMA_IRQHandler+0x414>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d027      	beq.n	8002072 <HAL_DMA_IRQHandler+0x2ee>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a5d      	ldr	r2, [pc, #372]	; (800219c <HAL_DMA_IRQHandler+0x418>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d022      	beq.n	8002072 <HAL_DMA_IRQHandler+0x2ee>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a5b      	ldr	r2, [pc, #364]	; (80021a0 <HAL_DMA_IRQHandler+0x41c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d01d      	beq.n	8002072 <HAL_DMA_IRQHandler+0x2ee>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a5a      	ldr	r2, [pc, #360]	; (80021a4 <HAL_DMA_IRQHandler+0x420>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d018      	beq.n	8002072 <HAL_DMA_IRQHandler+0x2ee>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a58      	ldr	r2, [pc, #352]	; (80021a8 <HAL_DMA_IRQHandler+0x424>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <HAL_DMA_IRQHandler+0x2ee>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a57      	ldr	r2, [pc, #348]	; (80021ac <HAL_DMA_IRQHandler+0x428>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00e      	beq.n	8002072 <HAL_DMA_IRQHandler+0x2ee>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a55      	ldr	r2, [pc, #340]	; (80021b0 <HAL_DMA_IRQHandler+0x42c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d009      	beq.n	8002072 <HAL_DMA_IRQHandler+0x2ee>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a54      	ldr	r2, [pc, #336]	; (80021b4 <HAL_DMA_IRQHandler+0x430>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d004      	beq.n	8002072 <HAL_DMA_IRQHandler+0x2ee>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a52      	ldr	r2, [pc, #328]	; (80021b8 <HAL_DMA_IRQHandler+0x434>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d10a      	bne.n	8002088 <HAL_DMA_IRQHandler+0x304>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf14      	ite	ne
 8002080:	2301      	movne	r3, #1
 8002082:	2300      	moveq	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	e003      	b.n	8002090 <HAL_DMA_IRQHandler+0x30c>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2300      	movs	r3, #0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00d      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	2201      	movs	r2, #1
 800209e:	409a      	lsls	r2, r3
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	f043 0202 	orr.w	r2, r3, #2
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b4:	f003 031f 	and.w	r3, r3, #31
 80020b8:	2204      	movs	r2, #4
 80020ba:	409a      	lsls	r2, r3
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 808f 	beq.w	80021e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a2c      	ldr	r2, [pc, #176]	; (800217c <HAL_DMA_IRQHandler+0x3f8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d04a      	beq.n	8002166 <HAL_DMA_IRQHandler+0x3e2>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a2a      	ldr	r2, [pc, #168]	; (8002180 <HAL_DMA_IRQHandler+0x3fc>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d045      	beq.n	8002166 <HAL_DMA_IRQHandler+0x3e2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a29      	ldr	r2, [pc, #164]	; (8002184 <HAL_DMA_IRQHandler+0x400>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d040      	beq.n	8002166 <HAL_DMA_IRQHandler+0x3e2>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a27      	ldr	r2, [pc, #156]	; (8002188 <HAL_DMA_IRQHandler+0x404>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d03b      	beq.n	8002166 <HAL_DMA_IRQHandler+0x3e2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a26      	ldr	r2, [pc, #152]	; (800218c <HAL_DMA_IRQHandler+0x408>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d036      	beq.n	8002166 <HAL_DMA_IRQHandler+0x3e2>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a24      	ldr	r2, [pc, #144]	; (8002190 <HAL_DMA_IRQHandler+0x40c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d031      	beq.n	8002166 <HAL_DMA_IRQHandler+0x3e2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a23      	ldr	r2, [pc, #140]	; (8002194 <HAL_DMA_IRQHandler+0x410>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d02c      	beq.n	8002166 <HAL_DMA_IRQHandler+0x3e2>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a21      	ldr	r2, [pc, #132]	; (8002198 <HAL_DMA_IRQHandler+0x414>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d027      	beq.n	8002166 <HAL_DMA_IRQHandler+0x3e2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a20      	ldr	r2, [pc, #128]	; (800219c <HAL_DMA_IRQHandler+0x418>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d022      	beq.n	8002166 <HAL_DMA_IRQHandler+0x3e2>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1e      	ldr	r2, [pc, #120]	; (80021a0 <HAL_DMA_IRQHandler+0x41c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d01d      	beq.n	8002166 <HAL_DMA_IRQHandler+0x3e2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a1d      	ldr	r2, [pc, #116]	; (80021a4 <HAL_DMA_IRQHandler+0x420>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d018      	beq.n	8002166 <HAL_DMA_IRQHandler+0x3e2>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a1b      	ldr	r2, [pc, #108]	; (80021a8 <HAL_DMA_IRQHandler+0x424>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_DMA_IRQHandler+0x3e2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a1a      	ldr	r2, [pc, #104]	; (80021ac <HAL_DMA_IRQHandler+0x428>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d00e      	beq.n	8002166 <HAL_DMA_IRQHandler+0x3e2>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a18      	ldr	r2, [pc, #96]	; (80021b0 <HAL_DMA_IRQHandler+0x42c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d009      	beq.n	8002166 <HAL_DMA_IRQHandler+0x3e2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a17      	ldr	r2, [pc, #92]	; (80021b4 <HAL_DMA_IRQHandler+0x430>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d004      	beq.n	8002166 <HAL_DMA_IRQHandler+0x3e2>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a15      	ldr	r2, [pc, #84]	; (80021b8 <HAL_DMA_IRQHandler+0x434>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d12a      	bne.n	80021bc <HAL_DMA_IRQHandler+0x438>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf14      	ite	ne
 8002174:	2301      	movne	r3, #1
 8002176:	2300      	moveq	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	e023      	b.n	80021c4 <HAL_DMA_IRQHandler+0x440>
 800217c:	40020010 	.word	0x40020010
 8002180:	40020028 	.word	0x40020028
 8002184:	40020040 	.word	0x40020040
 8002188:	40020058 	.word	0x40020058
 800218c:	40020070 	.word	0x40020070
 8002190:	40020088 	.word	0x40020088
 8002194:	400200a0 	.word	0x400200a0
 8002198:	400200b8 	.word	0x400200b8
 800219c:	40020410 	.word	0x40020410
 80021a0:	40020428 	.word	0x40020428
 80021a4:	40020440 	.word	0x40020440
 80021a8:	40020458 	.word	0x40020458
 80021ac:	40020470 	.word	0x40020470
 80021b0:	40020488 	.word	0x40020488
 80021b4:	400204a0 	.word	0x400204a0
 80021b8:	400204b8 	.word	0x400204b8
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2300      	movs	r3, #0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00d      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	2204      	movs	r2, #4
 80021d2:	409a      	lsls	r2, r3
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021dc:	f043 0204 	orr.w	r2, r3, #4
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	2210      	movs	r2, #16
 80021ee:	409a      	lsls	r2, r3
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80a6 	beq.w	8002346 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a85      	ldr	r2, [pc, #532]	; (8002414 <HAL_DMA_IRQHandler+0x690>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d04a      	beq.n	800229a <HAL_DMA_IRQHandler+0x516>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a83      	ldr	r2, [pc, #524]	; (8002418 <HAL_DMA_IRQHandler+0x694>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d045      	beq.n	800229a <HAL_DMA_IRQHandler+0x516>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a82      	ldr	r2, [pc, #520]	; (800241c <HAL_DMA_IRQHandler+0x698>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d040      	beq.n	800229a <HAL_DMA_IRQHandler+0x516>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a80      	ldr	r2, [pc, #512]	; (8002420 <HAL_DMA_IRQHandler+0x69c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d03b      	beq.n	800229a <HAL_DMA_IRQHandler+0x516>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a7f      	ldr	r2, [pc, #508]	; (8002424 <HAL_DMA_IRQHandler+0x6a0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d036      	beq.n	800229a <HAL_DMA_IRQHandler+0x516>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a7d      	ldr	r2, [pc, #500]	; (8002428 <HAL_DMA_IRQHandler+0x6a4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d031      	beq.n	800229a <HAL_DMA_IRQHandler+0x516>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a7c      	ldr	r2, [pc, #496]	; (800242c <HAL_DMA_IRQHandler+0x6a8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d02c      	beq.n	800229a <HAL_DMA_IRQHandler+0x516>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a7a      	ldr	r2, [pc, #488]	; (8002430 <HAL_DMA_IRQHandler+0x6ac>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d027      	beq.n	800229a <HAL_DMA_IRQHandler+0x516>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a79      	ldr	r2, [pc, #484]	; (8002434 <HAL_DMA_IRQHandler+0x6b0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d022      	beq.n	800229a <HAL_DMA_IRQHandler+0x516>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a77      	ldr	r2, [pc, #476]	; (8002438 <HAL_DMA_IRQHandler+0x6b4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01d      	beq.n	800229a <HAL_DMA_IRQHandler+0x516>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a76      	ldr	r2, [pc, #472]	; (800243c <HAL_DMA_IRQHandler+0x6b8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d018      	beq.n	800229a <HAL_DMA_IRQHandler+0x516>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a74      	ldr	r2, [pc, #464]	; (8002440 <HAL_DMA_IRQHandler+0x6bc>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_DMA_IRQHandler+0x516>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a73      	ldr	r2, [pc, #460]	; (8002444 <HAL_DMA_IRQHandler+0x6c0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00e      	beq.n	800229a <HAL_DMA_IRQHandler+0x516>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a71      	ldr	r2, [pc, #452]	; (8002448 <HAL_DMA_IRQHandler+0x6c4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d009      	beq.n	800229a <HAL_DMA_IRQHandler+0x516>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a70      	ldr	r2, [pc, #448]	; (800244c <HAL_DMA_IRQHandler+0x6c8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d004      	beq.n	800229a <HAL_DMA_IRQHandler+0x516>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a6e      	ldr	r2, [pc, #440]	; (8002450 <HAL_DMA_IRQHandler+0x6cc>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d10a      	bne.n	80022b0 <HAL_DMA_IRQHandler+0x52c>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	e009      	b.n	80022c4 <HAL_DMA_IRQHandler+0x540>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bf14      	ite	ne
 80022be:	2301      	movne	r3, #1
 80022c0:	2300      	moveq	r3, #0
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d03e      	beq.n	8002346 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	2210      	movs	r2, #16
 80022d2:	409a      	lsls	r2, r3
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d018      	beq.n	8002318 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d108      	bne.n	8002306 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d024      	beq.n	8002346 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	4798      	blx	r3
 8002304:	e01f      	b.n	8002346 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800230a:	2b00      	cmp	r3, #0
 800230c:	d01b      	beq.n	8002346 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	4798      	blx	r3
 8002316:	e016      	b.n	8002346 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d107      	bne.n	8002336 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0208 	bic.w	r2, r2, #8
 8002334:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	2220      	movs	r2, #32
 8002350:	409a      	lsls	r2, r3
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 8110 	beq.w	800257c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a2c      	ldr	r2, [pc, #176]	; (8002414 <HAL_DMA_IRQHandler+0x690>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d04a      	beq.n	80023fc <HAL_DMA_IRQHandler+0x678>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a2b      	ldr	r2, [pc, #172]	; (8002418 <HAL_DMA_IRQHandler+0x694>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d045      	beq.n	80023fc <HAL_DMA_IRQHandler+0x678>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a29      	ldr	r2, [pc, #164]	; (800241c <HAL_DMA_IRQHandler+0x698>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d040      	beq.n	80023fc <HAL_DMA_IRQHandler+0x678>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a28      	ldr	r2, [pc, #160]	; (8002420 <HAL_DMA_IRQHandler+0x69c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d03b      	beq.n	80023fc <HAL_DMA_IRQHandler+0x678>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a26      	ldr	r2, [pc, #152]	; (8002424 <HAL_DMA_IRQHandler+0x6a0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d036      	beq.n	80023fc <HAL_DMA_IRQHandler+0x678>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a25      	ldr	r2, [pc, #148]	; (8002428 <HAL_DMA_IRQHandler+0x6a4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d031      	beq.n	80023fc <HAL_DMA_IRQHandler+0x678>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a23      	ldr	r2, [pc, #140]	; (800242c <HAL_DMA_IRQHandler+0x6a8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d02c      	beq.n	80023fc <HAL_DMA_IRQHandler+0x678>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a22      	ldr	r2, [pc, #136]	; (8002430 <HAL_DMA_IRQHandler+0x6ac>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d027      	beq.n	80023fc <HAL_DMA_IRQHandler+0x678>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a20      	ldr	r2, [pc, #128]	; (8002434 <HAL_DMA_IRQHandler+0x6b0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d022      	beq.n	80023fc <HAL_DMA_IRQHandler+0x678>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a1f      	ldr	r2, [pc, #124]	; (8002438 <HAL_DMA_IRQHandler+0x6b4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d01d      	beq.n	80023fc <HAL_DMA_IRQHandler+0x678>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a1d      	ldr	r2, [pc, #116]	; (800243c <HAL_DMA_IRQHandler+0x6b8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d018      	beq.n	80023fc <HAL_DMA_IRQHandler+0x678>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a1c      	ldr	r2, [pc, #112]	; (8002440 <HAL_DMA_IRQHandler+0x6bc>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d013      	beq.n	80023fc <HAL_DMA_IRQHandler+0x678>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a1a      	ldr	r2, [pc, #104]	; (8002444 <HAL_DMA_IRQHandler+0x6c0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00e      	beq.n	80023fc <HAL_DMA_IRQHandler+0x678>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a19      	ldr	r2, [pc, #100]	; (8002448 <HAL_DMA_IRQHandler+0x6c4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d009      	beq.n	80023fc <HAL_DMA_IRQHandler+0x678>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a17      	ldr	r2, [pc, #92]	; (800244c <HAL_DMA_IRQHandler+0x6c8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d004      	beq.n	80023fc <HAL_DMA_IRQHandler+0x678>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a16      	ldr	r2, [pc, #88]	; (8002450 <HAL_DMA_IRQHandler+0x6cc>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d12b      	bne.n	8002454 <HAL_DMA_IRQHandler+0x6d0>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf14      	ite	ne
 800240a:	2301      	movne	r3, #1
 800240c:	2300      	moveq	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	e02a      	b.n	8002468 <HAL_DMA_IRQHandler+0x6e4>
 8002412:	bf00      	nop
 8002414:	40020010 	.word	0x40020010
 8002418:	40020028 	.word	0x40020028
 800241c:	40020040 	.word	0x40020040
 8002420:	40020058 	.word	0x40020058
 8002424:	40020070 	.word	0x40020070
 8002428:	40020088 	.word	0x40020088
 800242c:	400200a0 	.word	0x400200a0
 8002430:	400200b8 	.word	0x400200b8
 8002434:	40020410 	.word	0x40020410
 8002438:	40020428 	.word	0x40020428
 800243c:	40020440 	.word	0x40020440
 8002440:	40020458 	.word	0x40020458
 8002444:	40020470 	.word	0x40020470
 8002448:	40020488 	.word	0x40020488
 800244c:	400204a0 	.word	0x400204a0
 8002450:	400204b8 	.word	0x400204b8
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	bf14      	ite	ne
 8002462:	2301      	movne	r3, #1
 8002464:	2300      	moveq	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 8087 	beq.w	800257c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002472:	f003 031f 	and.w	r3, r3, #31
 8002476:	2220      	movs	r2, #32
 8002478:	409a      	lsls	r2, r3
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b04      	cmp	r3, #4
 8002488:	d139      	bne.n	80024fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0216 	bic.w	r2, r2, #22
 8002498:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d103      	bne.n	80024ba <HAL_DMA_IRQHandler+0x736>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0208 	bic.w	r2, r2, #8
 80024c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	223f      	movs	r2, #63	; 0x3f
 80024d4:	409a      	lsls	r2, r3
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 834a 	beq.w	8002b88 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	4798      	blx	r3
          }
          return;
 80024fc:	e344      	b.n	8002b88 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d018      	beq.n	800253e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d108      	bne.n	800252c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	2b00      	cmp	r3, #0
 8002520:	d02c      	beq.n	800257c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	4798      	blx	r3
 800252a:	e027      	b.n	800257c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002530:	2b00      	cmp	r3, #0
 8002532:	d023      	beq.n	800257c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	4798      	blx	r3
 800253c:	e01e      	b.n	800257c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10f      	bne.n	800256c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0210 	bic.w	r2, r2, #16
 800255a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 8306 	beq.w	8002b92 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 8088 	beq.w	80026a4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2204      	movs	r2, #4
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a7a      	ldr	r2, [pc, #488]	; (800278c <HAL_DMA_IRQHandler+0xa08>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d04a      	beq.n	800263c <HAL_DMA_IRQHandler+0x8b8>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a79      	ldr	r2, [pc, #484]	; (8002790 <HAL_DMA_IRQHandler+0xa0c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d045      	beq.n	800263c <HAL_DMA_IRQHandler+0x8b8>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a77      	ldr	r2, [pc, #476]	; (8002794 <HAL_DMA_IRQHandler+0xa10>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d040      	beq.n	800263c <HAL_DMA_IRQHandler+0x8b8>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a76      	ldr	r2, [pc, #472]	; (8002798 <HAL_DMA_IRQHandler+0xa14>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d03b      	beq.n	800263c <HAL_DMA_IRQHandler+0x8b8>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a74      	ldr	r2, [pc, #464]	; (800279c <HAL_DMA_IRQHandler+0xa18>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d036      	beq.n	800263c <HAL_DMA_IRQHandler+0x8b8>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a73      	ldr	r2, [pc, #460]	; (80027a0 <HAL_DMA_IRQHandler+0xa1c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d031      	beq.n	800263c <HAL_DMA_IRQHandler+0x8b8>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a71      	ldr	r2, [pc, #452]	; (80027a4 <HAL_DMA_IRQHandler+0xa20>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d02c      	beq.n	800263c <HAL_DMA_IRQHandler+0x8b8>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a70      	ldr	r2, [pc, #448]	; (80027a8 <HAL_DMA_IRQHandler+0xa24>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d027      	beq.n	800263c <HAL_DMA_IRQHandler+0x8b8>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a6e      	ldr	r2, [pc, #440]	; (80027ac <HAL_DMA_IRQHandler+0xa28>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d022      	beq.n	800263c <HAL_DMA_IRQHandler+0x8b8>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a6d      	ldr	r2, [pc, #436]	; (80027b0 <HAL_DMA_IRQHandler+0xa2c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d01d      	beq.n	800263c <HAL_DMA_IRQHandler+0x8b8>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a6b      	ldr	r2, [pc, #428]	; (80027b4 <HAL_DMA_IRQHandler+0xa30>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d018      	beq.n	800263c <HAL_DMA_IRQHandler+0x8b8>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a6a      	ldr	r2, [pc, #424]	; (80027b8 <HAL_DMA_IRQHandler+0xa34>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d013      	beq.n	800263c <HAL_DMA_IRQHandler+0x8b8>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a68      	ldr	r2, [pc, #416]	; (80027bc <HAL_DMA_IRQHandler+0xa38>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00e      	beq.n	800263c <HAL_DMA_IRQHandler+0x8b8>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a67      	ldr	r2, [pc, #412]	; (80027c0 <HAL_DMA_IRQHandler+0xa3c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d009      	beq.n	800263c <HAL_DMA_IRQHandler+0x8b8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a65      	ldr	r2, [pc, #404]	; (80027c4 <HAL_DMA_IRQHandler+0xa40>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d004      	beq.n	800263c <HAL_DMA_IRQHandler+0x8b8>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a64      	ldr	r2, [pc, #400]	; (80027c8 <HAL_DMA_IRQHandler+0xa44>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d108      	bne.n	800264e <HAL_DMA_IRQHandler+0x8ca>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0201 	bic.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e007      	b.n	800265e <HAL_DMA_IRQHandler+0x8da>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0201 	bic.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	3301      	adds	r3, #1
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002666:	429a      	cmp	r2, r3
 8002668:	d307      	bcc.n	800267a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f2      	bne.n	800265e <HAL_DMA_IRQHandler+0x8da>
 8002678:	e000      	b.n	800267c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800267a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d004      	beq.n	8002694 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2203      	movs	r2, #3
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002692:	e003      	b.n	800269c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 8272 	beq.w	8002b92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	4798      	blx	r3
 80026b6:	e26c      	b.n	8002b92 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a43      	ldr	r2, [pc, #268]	; (80027cc <HAL_DMA_IRQHandler+0xa48>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d022      	beq.n	8002708 <HAL_DMA_IRQHandler+0x984>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a42      	ldr	r2, [pc, #264]	; (80027d0 <HAL_DMA_IRQHandler+0xa4c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d01d      	beq.n	8002708 <HAL_DMA_IRQHandler+0x984>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a40      	ldr	r2, [pc, #256]	; (80027d4 <HAL_DMA_IRQHandler+0xa50>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d018      	beq.n	8002708 <HAL_DMA_IRQHandler+0x984>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a3f      	ldr	r2, [pc, #252]	; (80027d8 <HAL_DMA_IRQHandler+0xa54>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d013      	beq.n	8002708 <HAL_DMA_IRQHandler+0x984>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a3d      	ldr	r2, [pc, #244]	; (80027dc <HAL_DMA_IRQHandler+0xa58>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00e      	beq.n	8002708 <HAL_DMA_IRQHandler+0x984>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a3c      	ldr	r2, [pc, #240]	; (80027e0 <HAL_DMA_IRQHandler+0xa5c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d009      	beq.n	8002708 <HAL_DMA_IRQHandler+0x984>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a3a      	ldr	r2, [pc, #232]	; (80027e4 <HAL_DMA_IRQHandler+0xa60>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d004      	beq.n	8002708 <HAL_DMA_IRQHandler+0x984>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a39      	ldr	r2, [pc, #228]	; (80027e8 <HAL_DMA_IRQHandler+0xa64>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d101      	bne.n	800270c <HAL_DMA_IRQHandler+0x988>
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <HAL_DMA_IRQHandler+0x98a>
 800270c:	2300      	movs	r3, #0
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 823f 	beq.w	8002b92 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	2204      	movs	r2, #4
 8002726:	409a      	lsls	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 80cd 	beq.w	80028cc <HAL_DMA_IRQHandler+0xb48>
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80c7 	beq.w	80028cc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	2204      	movs	r2, #4
 8002748:	409a      	lsls	r2, r3
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d049      	beq.n	80027ec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 8210 	beq.w	8002b8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002774:	e20a      	b.n	8002b8c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 8206 	beq.w	8002b8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002788:	e200      	b.n	8002b8c <HAL_DMA_IRQHandler+0xe08>
 800278a:	bf00      	nop
 800278c:	40020010 	.word	0x40020010
 8002790:	40020028 	.word	0x40020028
 8002794:	40020040 	.word	0x40020040
 8002798:	40020058 	.word	0x40020058
 800279c:	40020070 	.word	0x40020070
 80027a0:	40020088 	.word	0x40020088
 80027a4:	400200a0 	.word	0x400200a0
 80027a8:	400200b8 	.word	0x400200b8
 80027ac:	40020410 	.word	0x40020410
 80027b0:	40020428 	.word	0x40020428
 80027b4:	40020440 	.word	0x40020440
 80027b8:	40020458 	.word	0x40020458
 80027bc:	40020470 	.word	0x40020470
 80027c0:	40020488 	.word	0x40020488
 80027c4:	400204a0 	.word	0x400204a0
 80027c8:	400204b8 	.word	0x400204b8
 80027cc:	58025408 	.word	0x58025408
 80027d0:	5802541c 	.word	0x5802541c
 80027d4:	58025430 	.word	0x58025430
 80027d8:	58025444 	.word	0x58025444
 80027dc:	58025458 	.word	0x58025458
 80027e0:	5802546c 	.word	0x5802546c
 80027e4:	58025480 	.word	0x58025480
 80027e8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d160      	bne.n	80028b8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a7f      	ldr	r2, [pc, #508]	; (80029f8 <HAL_DMA_IRQHandler+0xc74>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d04a      	beq.n	8002896 <HAL_DMA_IRQHandler+0xb12>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a7d      	ldr	r2, [pc, #500]	; (80029fc <HAL_DMA_IRQHandler+0xc78>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d045      	beq.n	8002896 <HAL_DMA_IRQHandler+0xb12>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a7c      	ldr	r2, [pc, #496]	; (8002a00 <HAL_DMA_IRQHandler+0xc7c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d040      	beq.n	8002896 <HAL_DMA_IRQHandler+0xb12>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a7a      	ldr	r2, [pc, #488]	; (8002a04 <HAL_DMA_IRQHandler+0xc80>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d03b      	beq.n	8002896 <HAL_DMA_IRQHandler+0xb12>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a79      	ldr	r2, [pc, #484]	; (8002a08 <HAL_DMA_IRQHandler+0xc84>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d036      	beq.n	8002896 <HAL_DMA_IRQHandler+0xb12>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a77      	ldr	r2, [pc, #476]	; (8002a0c <HAL_DMA_IRQHandler+0xc88>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d031      	beq.n	8002896 <HAL_DMA_IRQHandler+0xb12>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a76      	ldr	r2, [pc, #472]	; (8002a10 <HAL_DMA_IRQHandler+0xc8c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d02c      	beq.n	8002896 <HAL_DMA_IRQHandler+0xb12>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a74      	ldr	r2, [pc, #464]	; (8002a14 <HAL_DMA_IRQHandler+0xc90>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d027      	beq.n	8002896 <HAL_DMA_IRQHandler+0xb12>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a73      	ldr	r2, [pc, #460]	; (8002a18 <HAL_DMA_IRQHandler+0xc94>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d022      	beq.n	8002896 <HAL_DMA_IRQHandler+0xb12>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a71      	ldr	r2, [pc, #452]	; (8002a1c <HAL_DMA_IRQHandler+0xc98>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d01d      	beq.n	8002896 <HAL_DMA_IRQHandler+0xb12>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a70      	ldr	r2, [pc, #448]	; (8002a20 <HAL_DMA_IRQHandler+0xc9c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d018      	beq.n	8002896 <HAL_DMA_IRQHandler+0xb12>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a6e      	ldr	r2, [pc, #440]	; (8002a24 <HAL_DMA_IRQHandler+0xca0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d013      	beq.n	8002896 <HAL_DMA_IRQHandler+0xb12>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a6d      	ldr	r2, [pc, #436]	; (8002a28 <HAL_DMA_IRQHandler+0xca4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00e      	beq.n	8002896 <HAL_DMA_IRQHandler+0xb12>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a6b      	ldr	r2, [pc, #428]	; (8002a2c <HAL_DMA_IRQHandler+0xca8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d009      	beq.n	8002896 <HAL_DMA_IRQHandler+0xb12>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a6a      	ldr	r2, [pc, #424]	; (8002a30 <HAL_DMA_IRQHandler+0xcac>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d004      	beq.n	8002896 <HAL_DMA_IRQHandler+0xb12>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a68      	ldr	r2, [pc, #416]	; (8002a34 <HAL_DMA_IRQHandler+0xcb0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d108      	bne.n	80028a8 <HAL_DMA_IRQHandler+0xb24>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0208 	bic.w	r2, r2, #8
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	e007      	b.n	80028b8 <HAL_DMA_IRQHandler+0xb34>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0204 	bic.w	r2, r2, #4
 80028b6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 8165 	beq.w	8002b8c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028ca:	e15f      	b.n	8002b8c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	2202      	movs	r2, #2
 80028d6:	409a      	lsls	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 80c5 	beq.w	8002a6c <HAL_DMA_IRQHandler+0xce8>
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80bf 	beq.w	8002a6c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	2202      	movs	r2, #2
 80028f8:	409a      	lsls	r2, r3
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d018      	beq.n	800293a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d109      	bne.n	8002926 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 813a 	beq.w	8002b90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002924:	e134      	b.n	8002b90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 8130 	beq.w	8002b90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002938:	e12a      	b.n	8002b90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b00      	cmp	r3, #0
 8002942:	f040 8089 	bne.w	8002a58 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a2b      	ldr	r2, [pc, #172]	; (80029f8 <HAL_DMA_IRQHandler+0xc74>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d04a      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xc62>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a29      	ldr	r2, [pc, #164]	; (80029fc <HAL_DMA_IRQHandler+0xc78>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d045      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xc62>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a28      	ldr	r2, [pc, #160]	; (8002a00 <HAL_DMA_IRQHandler+0xc7c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d040      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xc62>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a26      	ldr	r2, [pc, #152]	; (8002a04 <HAL_DMA_IRQHandler+0xc80>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d03b      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xc62>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a25      	ldr	r2, [pc, #148]	; (8002a08 <HAL_DMA_IRQHandler+0xc84>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d036      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xc62>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a23      	ldr	r2, [pc, #140]	; (8002a0c <HAL_DMA_IRQHandler+0xc88>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d031      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xc62>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a22      	ldr	r2, [pc, #136]	; (8002a10 <HAL_DMA_IRQHandler+0xc8c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d02c      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xc62>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a20      	ldr	r2, [pc, #128]	; (8002a14 <HAL_DMA_IRQHandler+0xc90>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d027      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xc62>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a1f      	ldr	r2, [pc, #124]	; (8002a18 <HAL_DMA_IRQHandler+0xc94>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d022      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xc62>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1d      	ldr	r2, [pc, #116]	; (8002a1c <HAL_DMA_IRQHandler+0xc98>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d01d      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xc62>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1c      	ldr	r2, [pc, #112]	; (8002a20 <HAL_DMA_IRQHandler+0xc9c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d018      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xc62>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a1a      	ldr	r2, [pc, #104]	; (8002a24 <HAL_DMA_IRQHandler+0xca0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xc62>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a19      	ldr	r2, [pc, #100]	; (8002a28 <HAL_DMA_IRQHandler+0xca4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d00e      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xc62>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a17      	ldr	r2, [pc, #92]	; (8002a2c <HAL_DMA_IRQHandler+0xca8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d009      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xc62>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a16      	ldr	r2, [pc, #88]	; (8002a30 <HAL_DMA_IRQHandler+0xcac>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d004      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xc62>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a14      	ldr	r2, [pc, #80]	; (8002a34 <HAL_DMA_IRQHandler+0xcb0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d128      	bne.n	8002a38 <HAL_DMA_IRQHandler+0xcb4>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0214 	bic.w	r2, r2, #20
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	e027      	b.n	8002a48 <HAL_DMA_IRQHandler+0xcc4>
 80029f8:	40020010 	.word	0x40020010
 80029fc:	40020028 	.word	0x40020028
 8002a00:	40020040 	.word	0x40020040
 8002a04:	40020058 	.word	0x40020058
 8002a08:	40020070 	.word	0x40020070
 8002a0c:	40020088 	.word	0x40020088
 8002a10:	400200a0 	.word	0x400200a0
 8002a14:	400200b8 	.word	0x400200b8
 8002a18:	40020410 	.word	0x40020410
 8002a1c:	40020428 	.word	0x40020428
 8002a20:	40020440 	.word	0x40020440
 8002a24:	40020458 	.word	0x40020458
 8002a28:	40020470 	.word	0x40020470
 8002a2c:	40020488 	.word	0x40020488
 8002a30:	400204a0 	.word	0x400204a0
 8002a34:	400204b8 	.word	0x400204b8
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 020a 	bic.w	r2, r2, #10
 8002a46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 8097 	beq.w	8002b90 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a6a:	e091      	b.n	8002b90 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	2208      	movs	r2, #8
 8002a76:	409a      	lsls	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8088 	beq.w	8002b92 <HAL_DMA_IRQHandler+0xe0e>
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 8082 	beq.w	8002b92 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a41      	ldr	r2, [pc, #260]	; (8002b98 <HAL_DMA_IRQHandler+0xe14>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d04a      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xdaa>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a3f      	ldr	r2, [pc, #252]	; (8002b9c <HAL_DMA_IRQHandler+0xe18>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d045      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xdaa>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a3e      	ldr	r2, [pc, #248]	; (8002ba0 <HAL_DMA_IRQHandler+0xe1c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d040      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xdaa>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a3c      	ldr	r2, [pc, #240]	; (8002ba4 <HAL_DMA_IRQHandler+0xe20>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d03b      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xdaa>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a3b      	ldr	r2, [pc, #236]	; (8002ba8 <HAL_DMA_IRQHandler+0xe24>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d036      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xdaa>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a39      	ldr	r2, [pc, #228]	; (8002bac <HAL_DMA_IRQHandler+0xe28>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d031      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xdaa>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a38      	ldr	r2, [pc, #224]	; (8002bb0 <HAL_DMA_IRQHandler+0xe2c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d02c      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xdaa>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a36      	ldr	r2, [pc, #216]	; (8002bb4 <HAL_DMA_IRQHandler+0xe30>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d027      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xdaa>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a35      	ldr	r2, [pc, #212]	; (8002bb8 <HAL_DMA_IRQHandler+0xe34>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d022      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xdaa>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a33      	ldr	r2, [pc, #204]	; (8002bbc <HAL_DMA_IRQHandler+0xe38>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d01d      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xdaa>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a32      	ldr	r2, [pc, #200]	; (8002bc0 <HAL_DMA_IRQHandler+0xe3c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d018      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xdaa>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a30      	ldr	r2, [pc, #192]	; (8002bc4 <HAL_DMA_IRQHandler+0xe40>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xdaa>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a2f      	ldr	r2, [pc, #188]	; (8002bc8 <HAL_DMA_IRQHandler+0xe44>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00e      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xdaa>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a2d      	ldr	r2, [pc, #180]	; (8002bcc <HAL_DMA_IRQHandler+0xe48>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d009      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xdaa>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a2c      	ldr	r2, [pc, #176]	; (8002bd0 <HAL_DMA_IRQHandler+0xe4c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d004      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xdaa>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a2a      	ldr	r2, [pc, #168]	; (8002bd4 <HAL_DMA_IRQHandler+0xe50>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d108      	bne.n	8002b40 <HAL_DMA_IRQHandler+0xdbc>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 021c 	bic.w	r2, r2, #28
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	e007      	b.n	8002b50 <HAL_DMA_IRQHandler+0xdcc>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 020e 	bic.w	r2, r2, #14
 8002b4e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b54:	f003 031f 	and.w	r3, r3, #31
 8002b58:	2201      	movs	r2, #1
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	4798      	blx	r3
 8002b86:	e004      	b.n	8002b92 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002b88:	bf00      	nop
 8002b8a:	e002      	b.n	8002b92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b8c:	bf00      	nop
 8002b8e:	e000      	b.n	8002b92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b90:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002b92:	3728      	adds	r7, #40	; 0x28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40020010 	.word	0x40020010
 8002b9c:	40020028 	.word	0x40020028
 8002ba0:	40020040 	.word	0x40020040
 8002ba4:	40020058 	.word	0x40020058
 8002ba8:	40020070 	.word	0x40020070
 8002bac:	40020088 	.word	0x40020088
 8002bb0:	400200a0 	.word	0x400200a0
 8002bb4:	400200b8 	.word	0x400200b8
 8002bb8:	40020410 	.word	0x40020410
 8002bbc:	40020428 	.word	0x40020428
 8002bc0:	40020440 	.word	0x40020440
 8002bc4:	40020458 	.word	0x40020458
 8002bc8:	40020470 	.word	0x40020470
 8002bcc:	40020488 	.word	0x40020488
 8002bd0:	400204a0 	.word	0x400204a0
 8002bd4:	400204b8 	.word	0x400204b8

08002bd8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
 8002be4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a7f      	ldr	r2, [pc, #508]	; (8002df4 <DMA_SetConfig+0x21c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d072      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a7d      	ldr	r2, [pc, #500]	; (8002df8 <DMA_SetConfig+0x220>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d06d      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a7c      	ldr	r2, [pc, #496]	; (8002dfc <DMA_SetConfig+0x224>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d068      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a7a      	ldr	r2, [pc, #488]	; (8002e00 <DMA_SetConfig+0x228>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d063      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a79      	ldr	r2, [pc, #484]	; (8002e04 <DMA_SetConfig+0x22c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d05e      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a77      	ldr	r2, [pc, #476]	; (8002e08 <DMA_SetConfig+0x230>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d059      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a76      	ldr	r2, [pc, #472]	; (8002e0c <DMA_SetConfig+0x234>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d054      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a74      	ldr	r2, [pc, #464]	; (8002e10 <DMA_SetConfig+0x238>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d04f      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a73      	ldr	r2, [pc, #460]	; (8002e14 <DMA_SetConfig+0x23c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d04a      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a71      	ldr	r2, [pc, #452]	; (8002e18 <DMA_SetConfig+0x240>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d045      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a70      	ldr	r2, [pc, #448]	; (8002e1c <DMA_SetConfig+0x244>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d040      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a6e      	ldr	r2, [pc, #440]	; (8002e20 <DMA_SetConfig+0x248>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d03b      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a6d      	ldr	r2, [pc, #436]	; (8002e24 <DMA_SetConfig+0x24c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d036      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a6b      	ldr	r2, [pc, #428]	; (8002e28 <DMA_SetConfig+0x250>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d031      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a6a      	ldr	r2, [pc, #424]	; (8002e2c <DMA_SetConfig+0x254>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d02c      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a68      	ldr	r2, [pc, #416]	; (8002e30 <DMA_SetConfig+0x258>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d027      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a67      	ldr	r2, [pc, #412]	; (8002e34 <DMA_SetConfig+0x25c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d022      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a65      	ldr	r2, [pc, #404]	; (8002e38 <DMA_SetConfig+0x260>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d01d      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a64      	ldr	r2, [pc, #400]	; (8002e3c <DMA_SetConfig+0x264>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d018      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a62      	ldr	r2, [pc, #392]	; (8002e40 <DMA_SetConfig+0x268>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d013      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a61      	ldr	r2, [pc, #388]	; (8002e44 <DMA_SetConfig+0x26c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00e      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a5f      	ldr	r2, [pc, #380]	; (8002e48 <DMA_SetConfig+0x270>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d009      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a5e      	ldr	r2, [pc, #376]	; (8002e4c <DMA_SetConfig+0x274>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d004      	beq.n	8002ce2 <DMA_SetConfig+0x10a>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a5c      	ldr	r2, [pc, #368]	; (8002e50 <DMA_SetConfig+0x278>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d101      	bne.n	8002ce6 <DMA_SetConfig+0x10e>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <DMA_SetConfig+0x110>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00d      	beq.n	8002d08 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002cf4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d004      	beq.n	8002d08 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d06:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a39      	ldr	r2, [pc, #228]	; (8002df4 <DMA_SetConfig+0x21c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d04a      	beq.n	8002da8 <DMA_SetConfig+0x1d0>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a38      	ldr	r2, [pc, #224]	; (8002df8 <DMA_SetConfig+0x220>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d045      	beq.n	8002da8 <DMA_SetConfig+0x1d0>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a36      	ldr	r2, [pc, #216]	; (8002dfc <DMA_SetConfig+0x224>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d040      	beq.n	8002da8 <DMA_SetConfig+0x1d0>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a35      	ldr	r2, [pc, #212]	; (8002e00 <DMA_SetConfig+0x228>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d03b      	beq.n	8002da8 <DMA_SetConfig+0x1d0>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a33      	ldr	r2, [pc, #204]	; (8002e04 <DMA_SetConfig+0x22c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d036      	beq.n	8002da8 <DMA_SetConfig+0x1d0>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a32      	ldr	r2, [pc, #200]	; (8002e08 <DMA_SetConfig+0x230>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d031      	beq.n	8002da8 <DMA_SetConfig+0x1d0>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a30      	ldr	r2, [pc, #192]	; (8002e0c <DMA_SetConfig+0x234>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d02c      	beq.n	8002da8 <DMA_SetConfig+0x1d0>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a2f      	ldr	r2, [pc, #188]	; (8002e10 <DMA_SetConfig+0x238>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d027      	beq.n	8002da8 <DMA_SetConfig+0x1d0>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a2d      	ldr	r2, [pc, #180]	; (8002e14 <DMA_SetConfig+0x23c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d022      	beq.n	8002da8 <DMA_SetConfig+0x1d0>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a2c      	ldr	r2, [pc, #176]	; (8002e18 <DMA_SetConfig+0x240>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d01d      	beq.n	8002da8 <DMA_SetConfig+0x1d0>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a2a      	ldr	r2, [pc, #168]	; (8002e1c <DMA_SetConfig+0x244>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d018      	beq.n	8002da8 <DMA_SetConfig+0x1d0>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a29      	ldr	r2, [pc, #164]	; (8002e20 <DMA_SetConfig+0x248>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d013      	beq.n	8002da8 <DMA_SetConfig+0x1d0>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a27      	ldr	r2, [pc, #156]	; (8002e24 <DMA_SetConfig+0x24c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00e      	beq.n	8002da8 <DMA_SetConfig+0x1d0>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a26      	ldr	r2, [pc, #152]	; (8002e28 <DMA_SetConfig+0x250>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d009      	beq.n	8002da8 <DMA_SetConfig+0x1d0>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a24      	ldr	r2, [pc, #144]	; (8002e2c <DMA_SetConfig+0x254>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d004      	beq.n	8002da8 <DMA_SetConfig+0x1d0>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a23      	ldr	r2, [pc, #140]	; (8002e30 <DMA_SetConfig+0x258>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d101      	bne.n	8002dac <DMA_SetConfig+0x1d4>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <DMA_SetConfig+0x1d6>
 8002dac:	2300      	movs	r3, #0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d059      	beq.n	8002e66 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	223f      	movs	r2, #63	; 0x3f
 8002dbc:	409a      	lsls	r2, r3
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dd0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b40      	cmp	r3, #64	; 0x40
 8002de0:	d138      	bne.n	8002e54 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002df2:	e086      	b.n	8002f02 <DMA_SetConfig+0x32a>
 8002df4:	40020010 	.word	0x40020010
 8002df8:	40020028 	.word	0x40020028
 8002dfc:	40020040 	.word	0x40020040
 8002e00:	40020058 	.word	0x40020058
 8002e04:	40020070 	.word	0x40020070
 8002e08:	40020088 	.word	0x40020088
 8002e0c:	400200a0 	.word	0x400200a0
 8002e10:	400200b8 	.word	0x400200b8
 8002e14:	40020410 	.word	0x40020410
 8002e18:	40020428 	.word	0x40020428
 8002e1c:	40020440 	.word	0x40020440
 8002e20:	40020458 	.word	0x40020458
 8002e24:	40020470 	.word	0x40020470
 8002e28:	40020488 	.word	0x40020488
 8002e2c:	400204a0 	.word	0x400204a0
 8002e30:	400204b8 	.word	0x400204b8
 8002e34:	58025408 	.word	0x58025408
 8002e38:	5802541c 	.word	0x5802541c
 8002e3c:	58025430 	.word	0x58025430
 8002e40:	58025444 	.word	0x58025444
 8002e44:	58025458 	.word	0x58025458
 8002e48:	5802546c 	.word	0x5802546c
 8002e4c:	58025480 	.word	0x58025480
 8002e50:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	60da      	str	r2, [r3, #12]
}
 8002e64:	e04d      	b.n	8002f02 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a29      	ldr	r2, [pc, #164]	; (8002f10 <DMA_SetConfig+0x338>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d022      	beq.n	8002eb6 <DMA_SetConfig+0x2de>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a27      	ldr	r2, [pc, #156]	; (8002f14 <DMA_SetConfig+0x33c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d01d      	beq.n	8002eb6 <DMA_SetConfig+0x2de>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a26      	ldr	r2, [pc, #152]	; (8002f18 <DMA_SetConfig+0x340>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d018      	beq.n	8002eb6 <DMA_SetConfig+0x2de>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a24      	ldr	r2, [pc, #144]	; (8002f1c <DMA_SetConfig+0x344>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d013      	beq.n	8002eb6 <DMA_SetConfig+0x2de>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a23      	ldr	r2, [pc, #140]	; (8002f20 <DMA_SetConfig+0x348>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d00e      	beq.n	8002eb6 <DMA_SetConfig+0x2de>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a21      	ldr	r2, [pc, #132]	; (8002f24 <DMA_SetConfig+0x34c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d009      	beq.n	8002eb6 <DMA_SetConfig+0x2de>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a20      	ldr	r2, [pc, #128]	; (8002f28 <DMA_SetConfig+0x350>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d004      	beq.n	8002eb6 <DMA_SetConfig+0x2de>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1e      	ldr	r2, [pc, #120]	; (8002f2c <DMA_SetConfig+0x354>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d101      	bne.n	8002eba <DMA_SetConfig+0x2e2>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <DMA_SetConfig+0x2e4>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d020      	beq.n	8002f02 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	2201      	movs	r2, #1
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b40      	cmp	r3, #64	; 0x40
 8002ede:	d108      	bne.n	8002ef2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	60da      	str	r2, [r3, #12]
}
 8002ef0:	e007      	b.n	8002f02 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	60da      	str	r2, [r3, #12]
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	58025408 	.word	0x58025408
 8002f14:	5802541c 	.word	0x5802541c
 8002f18:	58025430 	.word	0x58025430
 8002f1c:	58025444 	.word	0x58025444
 8002f20:	58025458 	.word	0x58025458
 8002f24:	5802546c 	.word	0x5802546c
 8002f28:	58025480 	.word	0x58025480
 8002f2c:	58025494 	.word	0x58025494

08002f30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a42      	ldr	r2, [pc, #264]	; (8003048 <DMA_CalcBaseAndBitshift+0x118>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d04a      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a41      	ldr	r2, [pc, #260]	; (800304c <DMA_CalcBaseAndBitshift+0x11c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d045      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a3f      	ldr	r2, [pc, #252]	; (8003050 <DMA_CalcBaseAndBitshift+0x120>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d040      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a3e      	ldr	r2, [pc, #248]	; (8003054 <DMA_CalcBaseAndBitshift+0x124>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d03b      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a3c      	ldr	r2, [pc, #240]	; (8003058 <DMA_CalcBaseAndBitshift+0x128>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d036      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a3b      	ldr	r2, [pc, #236]	; (800305c <DMA_CalcBaseAndBitshift+0x12c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d031      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a39      	ldr	r2, [pc, #228]	; (8003060 <DMA_CalcBaseAndBitshift+0x130>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d02c      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a38      	ldr	r2, [pc, #224]	; (8003064 <DMA_CalcBaseAndBitshift+0x134>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d027      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a36      	ldr	r2, [pc, #216]	; (8003068 <DMA_CalcBaseAndBitshift+0x138>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d022      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a35      	ldr	r2, [pc, #212]	; (800306c <DMA_CalcBaseAndBitshift+0x13c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d01d      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a33      	ldr	r2, [pc, #204]	; (8003070 <DMA_CalcBaseAndBitshift+0x140>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d018      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a32      	ldr	r2, [pc, #200]	; (8003074 <DMA_CalcBaseAndBitshift+0x144>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d013      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a30      	ldr	r2, [pc, #192]	; (8003078 <DMA_CalcBaseAndBitshift+0x148>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00e      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a2f      	ldr	r2, [pc, #188]	; (800307c <DMA_CalcBaseAndBitshift+0x14c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d009      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a2d      	ldr	r2, [pc, #180]	; (8003080 <DMA_CalcBaseAndBitshift+0x150>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a2c      	ldr	r2, [pc, #176]	; (8003084 <DMA_CalcBaseAndBitshift+0x154>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d101      	bne.n	8002fdc <DMA_CalcBaseAndBitshift+0xac>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <DMA_CalcBaseAndBitshift+0xae>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d024      	beq.n	800302c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	3b10      	subs	r3, #16
 8002fea:	4a27      	ldr	r2, [pc, #156]	; (8003088 <DMA_CalcBaseAndBitshift+0x158>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	4a24      	ldr	r2, [pc, #144]	; (800308c <DMA_CalcBaseAndBitshift+0x15c>)
 8002ffc:	5cd3      	ldrb	r3, [r2, r3]
 8002ffe:	461a      	mov	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b03      	cmp	r3, #3
 8003008:	d908      	bls.n	800301c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	4b1f      	ldr	r3, [pc, #124]	; (8003090 <DMA_CalcBaseAndBitshift+0x160>)
 8003012:	4013      	ands	r3, r2
 8003014:	1d1a      	adds	r2, r3, #4
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	659a      	str	r2, [r3, #88]	; 0x58
 800301a:	e00d      	b.n	8003038 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <DMA_CalcBaseAndBitshift+0x160>)
 8003024:	4013      	ands	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6593      	str	r3, [r2, #88]	; 0x58
 800302a:	e005      	b.n	8003038 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800303c:	4618      	mov	r0, r3
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	40020010 	.word	0x40020010
 800304c:	40020028 	.word	0x40020028
 8003050:	40020040 	.word	0x40020040
 8003054:	40020058 	.word	0x40020058
 8003058:	40020070 	.word	0x40020070
 800305c:	40020088 	.word	0x40020088
 8003060:	400200a0 	.word	0x400200a0
 8003064:	400200b8 	.word	0x400200b8
 8003068:	40020410 	.word	0x40020410
 800306c:	40020428 	.word	0x40020428
 8003070:	40020440 	.word	0x40020440
 8003074:	40020458 	.word	0x40020458
 8003078:	40020470 	.word	0x40020470
 800307c:	40020488 	.word	0x40020488
 8003080:	400204a0 	.word	0x400204a0
 8003084:	400204b8 	.word	0x400204b8
 8003088:	aaaaaaab 	.word	0xaaaaaaab
 800308c:	08008798 	.word	0x08008798
 8003090:	fffffc00 	.word	0xfffffc00

08003094 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d120      	bne.n	80030ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d858      	bhi.n	8003162 <DMA_CheckFifoParam+0xce>
 80030b0:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <DMA_CheckFifoParam+0x24>)
 80030b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b6:	bf00      	nop
 80030b8:	080030c9 	.word	0x080030c9
 80030bc:	080030db 	.word	0x080030db
 80030c0:	080030c9 	.word	0x080030c9
 80030c4:	08003163 	.word	0x08003163
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d048      	beq.n	8003166 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80030d8:	e045      	b.n	8003166 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030e2:	d142      	bne.n	800316a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80030e8:	e03f      	b.n	800316a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f2:	d123      	bne.n	800313c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d838      	bhi.n	800316e <DMA_CheckFifoParam+0xda>
 80030fc:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <DMA_CheckFifoParam+0x70>)
 80030fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003102:	bf00      	nop
 8003104:	08003115 	.word	0x08003115
 8003108:	0800311b 	.word	0x0800311b
 800310c:	08003115 	.word	0x08003115
 8003110:	0800312d 	.word	0x0800312d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	73fb      	strb	r3, [r7, #15]
        break;
 8003118:	e030      	b.n	800317c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d025      	beq.n	8003172 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800312a:	e022      	b.n	8003172 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003134:	d11f      	bne.n	8003176 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800313a:	e01c      	b.n	8003176 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	2b02      	cmp	r3, #2
 8003142:	d902      	bls.n	800314a <DMA_CheckFifoParam+0xb6>
 8003144:	2b03      	cmp	r3, #3
 8003146:	d003      	beq.n	8003150 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003148:	e018      	b.n	800317c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
        break;
 800314e:	e015      	b.n	800317c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00e      	beq.n	800317a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
    break;
 8003160:	e00b      	b.n	800317a <DMA_CheckFifoParam+0xe6>
        break;
 8003162:	bf00      	nop
 8003164:	e00a      	b.n	800317c <DMA_CheckFifoParam+0xe8>
        break;
 8003166:	bf00      	nop
 8003168:	e008      	b.n	800317c <DMA_CheckFifoParam+0xe8>
        break;
 800316a:	bf00      	nop
 800316c:	e006      	b.n	800317c <DMA_CheckFifoParam+0xe8>
        break;
 800316e:	bf00      	nop
 8003170:	e004      	b.n	800317c <DMA_CheckFifoParam+0xe8>
        break;
 8003172:	bf00      	nop
 8003174:	e002      	b.n	800317c <DMA_CheckFifoParam+0xe8>
        break;
 8003176:	bf00      	nop
 8003178:	e000      	b.n	800317c <DMA_CheckFifoParam+0xe8>
    break;
 800317a:	bf00      	nop
    }
  }

  return status;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop

0800318c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a38      	ldr	r2, [pc, #224]	; (8003280 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d022      	beq.n	80031ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a36      	ldr	r2, [pc, #216]	; (8003284 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01d      	beq.n	80031ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a35      	ldr	r2, [pc, #212]	; (8003288 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d018      	beq.n	80031ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a33      	ldr	r2, [pc, #204]	; (800328c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a32      	ldr	r2, [pc, #200]	; (8003290 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00e      	beq.n	80031ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a30      	ldr	r2, [pc, #192]	; (8003294 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d009      	beq.n	80031ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a2f      	ldr	r2, [pc, #188]	; (8003298 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a2d      	ldr	r2, [pc, #180]	; (800329c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d101      	bne.n	80031ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80031ee:	2300      	movs	r3, #0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01a      	beq.n	800322a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	3b08      	subs	r3, #8
 80031fc:	4a28      	ldr	r2, [pc, #160]	; (80032a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	091b      	lsrs	r3, r3, #4
 8003204:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	461a      	mov	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a24      	ldr	r2, [pc, #144]	; (80032a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003218:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f003 031f 	and.w	r3, r3, #31
 8003220:	2201      	movs	r2, #1
 8003222:	409a      	lsls	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003228:	e024      	b.n	8003274 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	3b10      	subs	r3, #16
 8003232:	4a1e      	ldr	r2, [pc, #120]	; (80032ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003234:	fba2 2303 	umull	r2, r3, r2, r3
 8003238:	091b      	lsrs	r3, r3, #4
 800323a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4a1c      	ldr	r2, [pc, #112]	; (80032b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d806      	bhi.n	8003252 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4a1b      	ldr	r2, [pc, #108]	; (80032b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d902      	bls.n	8003252 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3308      	adds	r3, #8
 8003250:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4b18      	ldr	r3, [pc, #96]	; (80032b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	461a      	mov	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a16      	ldr	r2, [pc, #88]	; (80032bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003264:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	2201      	movs	r2, #1
 800326e:	409a      	lsls	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003274:	bf00      	nop
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	58025408 	.word	0x58025408
 8003284:	5802541c 	.word	0x5802541c
 8003288:	58025430 	.word	0x58025430
 800328c:	58025444 	.word	0x58025444
 8003290:	58025458 	.word	0x58025458
 8003294:	5802546c 	.word	0x5802546c
 8003298:	58025480 	.word	0x58025480
 800329c:	58025494 	.word	0x58025494
 80032a0:	cccccccd 	.word	0xcccccccd
 80032a4:	16009600 	.word	0x16009600
 80032a8:	58025880 	.word	0x58025880
 80032ac:	aaaaaaab 	.word	0xaaaaaaab
 80032b0:	400204b8 	.word	0x400204b8
 80032b4:	4002040f 	.word	0x4002040f
 80032b8:	10008200 	.word	0x10008200
 80032bc:	40020880 	.word	0x40020880

080032c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d04a      	beq.n	800336c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d847      	bhi.n	800336c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a25      	ldr	r2, [pc, #148]	; (8003378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d022      	beq.n	800332c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a24      	ldr	r2, [pc, #144]	; (800337c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d01d      	beq.n	800332c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a22      	ldr	r2, [pc, #136]	; (8003380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d018      	beq.n	800332c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a21      	ldr	r2, [pc, #132]	; (8003384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d013      	beq.n	800332c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a1f      	ldr	r2, [pc, #124]	; (8003388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00e      	beq.n	800332c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1e      	ldr	r2, [pc, #120]	; (800338c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d009      	beq.n	800332c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d004      	beq.n	800332c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1b      	ldr	r2, [pc, #108]	; (8003394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d101      	bne.n	8003330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800332c:	2301      	movs	r3, #1
 800332e:	e000      	b.n	8003332 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003330:	2300      	movs	r3, #0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4b17      	ldr	r3, [pc, #92]	; (8003398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	461a      	mov	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a15      	ldr	r2, [pc, #84]	; (800339c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003348:	671a      	str	r2, [r3, #112]	; 0x70
 800334a:	e009      	b.n	8003360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	461a      	mov	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a11      	ldr	r2, [pc, #68]	; (80033a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800335e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	3b01      	subs	r3, #1
 8003364:	2201      	movs	r2, #1
 8003366:	409a      	lsls	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800336c:	bf00      	nop
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	58025408 	.word	0x58025408
 800337c:	5802541c 	.word	0x5802541c
 8003380:	58025430 	.word	0x58025430
 8003384:	58025444 	.word	0x58025444
 8003388:	58025458 	.word	0x58025458
 800338c:	5802546c 	.word	0x5802546c
 8003390:	58025480 	.word	0x58025480
 8003394:	58025494 	.word	0x58025494
 8003398:	1600963f 	.word	0x1600963f
 800339c:	58025940 	.word	0x58025940
 80033a0:	1000823f 	.word	0x1000823f
 80033a4:	40020940 	.word	0x40020940

080033a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b089      	sub	sp, #36	; 0x24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80033b6:	4b89      	ldr	r3, [pc, #548]	; (80035dc <HAL_GPIO_Init+0x234>)
 80033b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033ba:	e194      	b.n	80036e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	2101      	movs	r1, #1
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	fa01 f303 	lsl.w	r3, r1, r3
 80033c8:	4013      	ands	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8186 	beq.w	80036e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d005      	beq.n	80033ec <HAL_GPIO_Init+0x44>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d130      	bne.n	800344e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	2203      	movs	r2, #3
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003422:	2201      	movs	r2, #1
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4013      	ands	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	091b      	lsrs	r3, r3, #4
 8003438:	f003 0201 	and.w	r2, r3, #1
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2b03      	cmp	r3, #3
 8003458:	d017      	beq.n	800348a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	2203      	movs	r2, #3
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d123      	bne.n	80034de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	08da      	lsrs	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3208      	adds	r2, #8
 800349e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	220f      	movs	r2, #15
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	691a      	ldr	r2, [r3, #16]
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	08da      	lsrs	r2, r3, #3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3208      	adds	r2, #8
 80034d8:	69b9      	ldr	r1, [r7, #24]
 80034da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	2203      	movs	r2, #3
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 0203 	and.w	r2, r3, #3
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 80e0 	beq.w	80036e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003520:	4b2f      	ldr	r3, [pc, #188]	; (80035e0 <HAL_GPIO_Init+0x238>)
 8003522:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003526:	4a2e      	ldr	r2, [pc, #184]	; (80035e0 <HAL_GPIO_Init+0x238>)
 8003528:	f043 0302 	orr.w	r3, r3, #2
 800352c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003530:	4b2b      	ldr	r3, [pc, #172]	; (80035e0 <HAL_GPIO_Init+0x238>)
 8003532:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800353e:	4a29      	ldr	r2, [pc, #164]	; (80035e4 <HAL_GPIO_Init+0x23c>)
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	089b      	lsrs	r3, r3, #2
 8003544:	3302      	adds	r3, #2
 8003546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	220f      	movs	r2, #15
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4013      	ands	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a20      	ldr	r2, [pc, #128]	; (80035e8 <HAL_GPIO_Init+0x240>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d052      	beq.n	8003610 <HAL_GPIO_Init+0x268>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1f      	ldr	r2, [pc, #124]	; (80035ec <HAL_GPIO_Init+0x244>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d031      	beq.n	80035d6 <HAL_GPIO_Init+0x22e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a1e      	ldr	r2, [pc, #120]	; (80035f0 <HAL_GPIO_Init+0x248>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d02b      	beq.n	80035d2 <HAL_GPIO_Init+0x22a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a1d      	ldr	r2, [pc, #116]	; (80035f4 <HAL_GPIO_Init+0x24c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d025      	beq.n	80035ce <HAL_GPIO_Init+0x226>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a1c      	ldr	r2, [pc, #112]	; (80035f8 <HAL_GPIO_Init+0x250>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d01f      	beq.n	80035ca <HAL_GPIO_Init+0x222>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a1b      	ldr	r2, [pc, #108]	; (80035fc <HAL_GPIO_Init+0x254>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d019      	beq.n	80035c6 <HAL_GPIO_Init+0x21e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a1a      	ldr	r2, [pc, #104]	; (8003600 <HAL_GPIO_Init+0x258>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d013      	beq.n	80035c2 <HAL_GPIO_Init+0x21a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a19      	ldr	r2, [pc, #100]	; (8003604 <HAL_GPIO_Init+0x25c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00d      	beq.n	80035be <HAL_GPIO_Init+0x216>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a18      	ldr	r2, [pc, #96]	; (8003608 <HAL_GPIO_Init+0x260>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d007      	beq.n	80035ba <HAL_GPIO_Init+0x212>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a17      	ldr	r2, [pc, #92]	; (800360c <HAL_GPIO_Init+0x264>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d101      	bne.n	80035b6 <HAL_GPIO_Init+0x20e>
 80035b2:	2309      	movs	r3, #9
 80035b4:	e02d      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035b6:	230a      	movs	r3, #10
 80035b8:	e02b      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035ba:	2308      	movs	r3, #8
 80035bc:	e029      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035be:	2307      	movs	r3, #7
 80035c0:	e027      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035c2:	2306      	movs	r3, #6
 80035c4:	e025      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035c6:	2305      	movs	r3, #5
 80035c8:	e023      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035ca:	2304      	movs	r3, #4
 80035cc:	e021      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035ce:	2303      	movs	r3, #3
 80035d0:	e01f      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e01d      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e01b      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035da:	bf00      	nop
 80035dc:	58000080 	.word	0x58000080
 80035e0:	58024400 	.word	0x58024400
 80035e4:	58000400 	.word	0x58000400
 80035e8:	58020000 	.word	0x58020000
 80035ec:	58020400 	.word	0x58020400
 80035f0:	58020800 	.word	0x58020800
 80035f4:	58020c00 	.word	0x58020c00
 80035f8:	58021000 	.word	0x58021000
 80035fc:	58021400 	.word	0x58021400
 8003600:	58021800 	.word	0x58021800
 8003604:	58021c00 	.word	0x58021c00
 8003608:	58022000 	.word	0x58022000
 800360c:	58022400 	.word	0x58022400
 8003610:	2300      	movs	r3, #0
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	f002 0203 	and.w	r2, r2, #3
 8003618:	0092      	lsls	r2, r2, #2
 800361a:	4093      	lsls	r3, r2
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003622:	4938      	ldr	r1, [pc, #224]	; (8003704 <HAL_GPIO_Init+0x35c>)
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	089b      	lsrs	r3, r3, #2
 8003628:	3302      	adds	r3, #2
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	43db      	mvns	r3, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4013      	ands	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003656:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800365e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	43db      	mvns	r3, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	43db      	mvns	r3, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	43db      	mvns	r3, r3
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4013      	ands	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	3301      	adds	r3, #1
 80036e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f47f ae63 	bne.w	80033bc <HAL_GPIO_Init+0x14>
  }
}
 80036f6:	bf00      	nop
 80036f8:	bf00      	nop
 80036fa:	3724      	adds	r7, #36	; 0x24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	58000400 	.word	0x58000400

08003708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	807b      	strh	r3, [r7, #2]
 8003714:	4613      	mov	r3, r2
 8003716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003718:	787b      	ldrb	r3, [r7, #1]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800371e:	887a      	ldrh	r2, [r7, #2]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003724:	e003      	b.n	800372e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003726:	887b      	ldrh	r3, [r7, #2]
 8003728:	041a      	lsls	r2, r3, #16
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	619a      	str	r2, [r3, #24]
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003744:	4a08      	ldr	r2, [pc, #32]	; (8003768 <HAL_HSEM_FastTake+0x2c>)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3320      	adds	r3, #32
 800374a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374e:	4a07      	ldr	r2, [pc, #28]	; (800376c <HAL_HSEM_FastTake+0x30>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d101      	bne.n	8003758 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	e000      	b.n	800375a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
}
 800375a:	4618      	mov	r0, r3
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	58026400 	.word	0x58026400
 800376c:	80000300 	.word	0x80000300

08003770 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800377a:	4906      	ldr	r1, [pc, #24]	; (8003794 <HAL_HSEM_Release+0x24>)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	58026400 	.word	0x58026400

08003798 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80037a0:	4b29      	ldr	r3, [pc, #164]	; (8003848 <HAL_PWREx_ConfigSupply+0xb0>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	2b06      	cmp	r3, #6
 80037aa:	d00a      	beq.n	80037c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80037ac:	4b26      	ldr	r3, [pc, #152]	; (8003848 <HAL_PWREx_ConfigSupply+0xb0>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d001      	beq.n	80037be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e040      	b.n	8003840 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	e03e      	b.n	8003840 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80037c2:	4b21      	ldr	r3, [pc, #132]	; (8003848 <HAL_PWREx_ConfigSupply+0xb0>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80037ca:	491f      	ldr	r1, [pc, #124]	; (8003848 <HAL_PWREx_ConfigSupply+0xb0>)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80037d2:	f7fd fbe9 	bl	8000fa8 <HAL_GetTick>
 80037d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037d8:	e009      	b.n	80037ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80037da:	f7fd fbe5 	bl	8000fa8 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037e8:	d901      	bls.n	80037ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e028      	b.n	8003840 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037ee:	4b16      	ldr	r3, [pc, #88]	; (8003848 <HAL_PWREx_ConfigSupply+0xb0>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037fa:	d1ee      	bne.n	80037da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b1e      	cmp	r3, #30
 8003800:	d008      	beq.n	8003814 <HAL_PWREx_ConfigSupply+0x7c>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b2e      	cmp	r3, #46	; 0x2e
 8003806:	d005      	beq.n	8003814 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b1d      	cmp	r3, #29
 800380c:	d002      	beq.n	8003814 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b2d      	cmp	r3, #45	; 0x2d
 8003812:	d114      	bne.n	800383e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003814:	f7fd fbc8 	bl	8000fa8 <HAL_GetTick>
 8003818:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800381a:	e009      	b.n	8003830 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800381c:	f7fd fbc4 	bl	8000fa8 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800382a:	d901      	bls.n	8003830 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e007      	b.n	8003840 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_PWREx_ConfigSupply+0xb0>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383c:	d1ee      	bne.n	800381c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	58024800 	.word	0x58024800

0800384c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08c      	sub	sp, #48	; 0x30
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d102      	bne.n	8003860 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	f000 bc48 	b.w	80040f0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 8088 	beq.w	800397e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800386e:	4b99      	ldr	r3, [pc, #612]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003878:	4b96      	ldr	r3, [pc, #600]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003880:	2b10      	cmp	r3, #16
 8003882:	d007      	beq.n	8003894 <HAL_RCC_OscConfig+0x48>
 8003884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003886:	2b18      	cmp	r3, #24
 8003888:	d111      	bne.n	80038ae <HAL_RCC_OscConfig+0x62>
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d10c      	bne.n	80038ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003894:	4b8f      	ldr	r3, [pc, #572]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d06d      	beq.n	800397c <HAL_RCC_OscConfig+0x130>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d169      	bne.n	800397c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	f000 bc21 	b.w	80040f0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b6:	d106      	bne.n	80038c6 <HAL_RCC_OscConfig+0x7a>
 80038b8:	4b86      	ldr	r3, [pc, #536]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a85      	ldr	r2, [pc, #532]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 80038be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	e02e      	b.n	8003924 <HAL_RCC_OscConfig+0xd8>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x9c>
 80038ce:	4b81      	ldr	r3, [pc, #516]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a80      	ldr	r2, [pc, #512]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 80038d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	4b7e      	ldr	r3, [pc, #504]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a7d      	ldr	r2, [pc, #500]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 80038e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	e01d      	b.n	8003924 <HAL_RCC_OscConfig+0xd8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038f0:	d10c      	bne.n	800390c <HAL_RCC_OscConfig+0xc0>
 80038f2:	4b78      	ldr	r3, [pc, #480]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a77      	ldr	r2, [pc, #476]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 80038f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	4b75      	ldr	r3, [pc, #468]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a74      	ldr	r2, [pc, #464]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 8003904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	e00b      	b.n	8003924 <HAL_RCC_OscConfig+0xd8>
 800390c:	4b71      	ldr	r3, [pc, #452]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a70      	ldr	r2, [pc, #448]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 8003912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4b6e      	ldr	r3, [pc, #440]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a6d      	ldr	r2, [pc, #436]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 800391e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d013      	beq.n	8003954 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7fd fb3c 	bl	8000fa8 <HAL_GetTick>
 8003930:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003934:	f7fd fb38 	bl	8000fa8 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b64      	cmp	r3, #100	; 0x64
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e3d4      	b.n	80040f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003946:	4b63      	ldr	r3, [pc, #396]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0xe8>
 8003952:	e014      	b.n	800397e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7fd fb28 	bl	8000fa8 <HAL_GetTick>
 8003958:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800395c:	f7fd fb24 	bl	8000fa8 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b64      	cmp	r3, #100	; 0x64
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e3c0      	b.n	80040f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800396e:	4b59      	ldr	r3, [pc, #356]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x110>
 800397a:	e000      	b.n	800397e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800397c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80ca 	beq.w	8003b20 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800398c:	4b51      	ldr	r3, [pc, #324]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003994:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003996:	4b4f      	ldr	r3, [pc, #316]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d007      	beq.n	80039b2 <HAL_RCC_OscConfig+0x166>
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	2b18      	cmp	r3, #24
 80039a6:	d156      	bne.n	8003a56 <HAL_RCC_OscConfig+0x20a>
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d151      	bne.n	8003a56 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039b2:	4b48      	ldr	r3, [pc, #288]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <HAL_RCC_OscConfig+0x17e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e392      	b.n	80040f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039ca:	4b42      	ldr	r3, [pc, #264]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 0219 	bic.w	r2, r3, #25
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	493f      	ldr	r1, [pc, #252]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fd fae4 	bl	8000fa8 <HAL_GetTick>
 80039e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e4:	f7fd fae0 	bl	8000fa8 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e37c      	b.n	80040f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039f6:	4b37      	ldr	r3, [pc, #220]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a02:	f7fd fadd 	bl	8000fc0 <HAL_GetREVID>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d817      	bhi.n	8003a40 <HAL_RCC_OscConfig+0x1f4>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	2b40      	cmp	r3, #64	; 0x40
 8003a16:	d108      	bne.n	8003a2a <HAL_RCC_OscConfig+0x1de>
 8003a18:	4b2e      	ldr	r3, [pc, #184]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a20:	4a2c      	ldr	r2, [pc, #176]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 8003a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a26:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a28:	e07a      	b.n	8003b20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2a:	4b2a      	ldr	r3, [pc, #168]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	031b      	lsls	r3, r3, #12
 8003a38:	4926      	ldr	r1, [pc, #152]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a3e:	e06f      	b.n	8003b20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a40:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	061b      	lsls	r3, r3, #24
 8003a4e:	4921      	ldr	r1, [pc, #132]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a54:	e064      	b.n	8003b20 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d047      	beq.n	8003aee <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 0219 	bic.w	r2, r3, #25
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	491a      	ldr	r1, [pc, #104]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a70:	f7fd fa9a 	bl	8000fa8 <HAL_GetTick>
 8003a74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a78:	f7fd fa96 	bl	8000fa8 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e332      	b.n	80040f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a96:	f7fd fa93 	bl	8000fc0 <HAL_GetREVID>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d819      	bhi.n	8003ad8 <HAL_RCC_OscConfig+0x28c>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	2b40      	cmp	r3, #64	; 0x40
 8003aaa:	d108      	bne.n	8003abe <HAL_RCC_OscConfig+0x272>
 8003aac:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003ab4:	4a07      	ldr	r2, [pc, #28]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 8003ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aba:	6053      	str	r3, [r2, #4]
 8003abc:	e030      	b.n	8003b20 <HAL_RCC_OscConfig+0x2d4>
 8003abe:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	031b      	lsls	r3, r3, #12
 8003acc:	4901      	ldr	r1, [pc, #4]	; (8003ad4 <HAL_RCC_OscConfig+0x288>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	604b      	str	r3, [r1, #4]
 8003ad2:	e025      	b.n	8003b20 <HAL_RCC_OscConfig+0x2d4>
 8003ad4:	58024400 	.word	0x58024400
 8003ad8:	4b9a      	ldr	r3, [pc, #616]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	061b      	lsls	r3, r3, #24
 8003ae6:	4997      	ldr	r1, [pc, #604]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
 8003aec:	e018      	b.n	8003b20 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aee:	4b95      	ldr	r3, [pc, #596]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a94      	ldr	r2, [pc, #592]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003af4:	f023 0301 	bic.w	r3, r3, #1
 8003af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afa:	f7fd fa55 	bl	8000fa8 <HAL_GetTick>
 8003afe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b02:	f7fd fa51 	bl	8000fa8 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e2ed      	b.n	80040f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b14:	4b8b      	ldr	r3, [pc, #556]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1f0      	bne.n	8003b02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0310 	and.w	r3, r3, #16
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80a9 	beq.w	8003c80 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b2e:	4b85      	ldr	r3, [pc, #532]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b36:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b38:	4b82      	ldr	r3, [pc, #520]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d007      	beq.n	8003b54 <HAL_RCC_OscConfig+0x308>
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	2b18      	cmp	r3, #24
 8003b48:	d13a      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x374>
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f003 0303 	and.w	r3, r3, #3
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d135      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b54:	4b7b      	ldr	r3, [pc, #492]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_OscConfig+0x320>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	2b80      	cmp	r3, #128	; 0x80
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e2c1      	b.n	80040f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b6c:	f7fd fa28 	bl	8000fc0 <HAL_GetREVID>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d817      	bhi.n	8003baa <HAL_RCC_OscConfig+0x35e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	d108      	bne.n	8003b94 <HAL_RCC_OscConfig+0x348>
 8003b82:	4b70      	ldr	r3, [pc, #448]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b8a:	4a6e      	ldr	r2, [pc, #440]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003b8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b90:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b92:	e075      	b.n	8003c80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b94:	4b6b      	ldr	r3, [pc, #428]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	069b      	lsls	r3, r3, #26
 8003ba2:	4968      	ldr	r1, [pc, #416]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ba8:	e06a      	b.n	8003c80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003baa:	4b66      	ldr	r3, [pc, #408]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	061b      	lsls	r3, r3, #24
 8003bb8:	4962      	ldr	r1, [pc, #392]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bbe:	e05f      	b.n	8003c80 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d042      	beq.n	8003c4e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003bc8:	4b5e      	ldr	r3, [pc, #376]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a5d      	ldr	r2, [pc, #372]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fd f9e8 	bl	8000fa8 <HAL_GetTick>
 8003bd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bdc:	f7fd f9e4 	bl	8000fa8 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e280      	b.n	80040f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bee:	4b55      	ldr	r3, [pc, #340]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bfa:	f7fd f9e1 	bl	8000fc0 <HAL_GetREVID>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d817      	bhi.n	8003c38 <HAL_RCC_OscConfig+0x3ec>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d108      	bne.n	8003c22 <HAL_RCC_OscConfig+0x3d6>
 8003c10:	4b4c      	ldr	r3, [pc, #304]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c18:	4a4a      	ldr	r2, [pc, #296]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003c1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c1e:	6053      	str	r3, [r2, #4]
 8003c20:	e02e      	b.n	8003c80 <HAL_RCC_OscConfig+0x434>
 8003c22:	4b48      	ldr	r3, [pc, #288]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	069b      	lsls	r3, r3, #26
 8003c30:	4944      	ldr	r1, [pc, #272]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	604b      	str	r3, [r1, #4]
 8003c36:	e023      	b.n	8003c80 <HAL_RCC_OscConfig+0x434>
 8003c38:	4b42      	ldr	r3, [pc, #264]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	061b      	lsls	r3, r3, #24
 8003c46:	493f      	ldr	r1, [pc, #252]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60cb      	str	r3, [r1, #12]
 8003c4c:	e018      	b.n	8003c80 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c4e:	4b3d      	ldr	r3, [pc, #244]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a3c      	ldr	r2, [pc, #240]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5a:	f7fd f9a5 	bl	8000fa8 <HAL_GetTick>
 8003c5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c62:	f7fd f9a1 	bl	8000fa8 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e23d      	b.n	80040f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c74:	4b33      	ldr	r3, [pc, #204]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1f0      	bne.n	8003c62 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d036      	beq.n	8003cfa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d019      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c94:	4b2b      	ldr	r3, [pc, #172]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c98:	4a2a      	ldr	r2, [pc, #168]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca0:	f7fd f982 	bl	8000fa8 <HAL_GetTick>
 8003ca4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca8:	f7fd f97e 	bl	8000fa8 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e21a      	b.n	80040f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cba:	4b22      	ldr	r3, [pc, #136]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x45c>
 8003cc6:	e018      	b.n	8003cfa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc8:	4b1e      	ldr	r3, [pc, #120]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ccc:	4a1d      	ldr	r2, [pc, #116]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd4:	f7fd f968 	bl	8000fa8 <HAL_GetTick>
 8003cd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cdc:	f7fd f964 	bl	8000fa8 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e200      	b.n	80040f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d039      	beq.n	8003d7a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01c      	beq.n	8003d48 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a0c      	ldr	r2, [pc, #48]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003d14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d1a:	f7fd f945 	bl	8000fa8 <HAL_GetTick>
 8003d1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d22:	f7fd f941 	bl	8000fa8 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e1dd      	b.n	80040f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d34:	4b03      	ldr	r3, [pc, #12]	; (8003d44 <HAL_RCC_OscConfig+0x4f8>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <HAL_RCC_OscConfig+0x4d6>
 8003d40:	e01b      	b.n	8003d7a <HAL_RCC_OscConfig+0x52e>
 8003d42:	bf00      	nop
 8003d44:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d48:	4b9b      	ldr	r3, [pc, #620]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a9a      	ldr	r2, [pc, #616]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003d4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d52:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d54:	f7fd f928 	bl	8000fa8 <HAL_GetTick>
 8003d58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d5c:	f7fd f924 	bl	8000fa8 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e1c0      	b.n	80040f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d6e:	4b92      	ldr	r3, [pc, #584]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8081 	beq.w	8003e8a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d88:	4b8c      	ldr	r3, [pc, #560]	; (8003fbc <HAL_RCC_OscConfig+0x770>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a8b      	ldr	r2, [pc, #556]	; (8003fbc <HAL_RCC_OscConfig+0x770>)
 8003d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d94:	f7fd f908 	bl	8000fa8 <HAL_GetTick>
 8003d98:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9c:	f7fd f904 	bl	8000fa8 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e1a0      	b.n	80040f0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dae:	4b83      	ldr	r3, [pc, #524]	; (8003fbc <HAL_RCC_OscConfig+0x770>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d106      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x584>
 8003dc2:	4b7d      	ldr	r3, [pc, #500]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	4a7c      	ldr	r2, [pc, #496]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dce:	e02d      	b.n	8003e2c <HAL_RCC_OscConfig+0x5e0>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10c      	bne.n	8003df2 <HAL_RCC_OscConfig+0x5a6>
 8003dd8:	4b77      	ldr	r3, [pc, #476]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	4a76      	ldr	r2, [pc, #472]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003dde:	f023 0301 	bic.w	r3, r3, #1
 8003de2:	6713      	str	r3, [r2, #112]	; 0x70
 8003de4:	4b74      	ldr	r3, [pc, #464]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de8:	4a73      	ldr	r2, [pc, #460]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003dea:	f023 0304 	bic.w	r3, r3, #4
 8003dee:	6713      	str	r3, [r2, #112]	; 0x70
 8003df0:	e01c      	b.n	8003e2c <HAL_RCC_OscConfig+0x5e0>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2b05      	cmp	r3, #5
 8003df8:	d10c      	bne.n	8003e14 <HAL_RCC_OscConfig+0x5c8>
 8003dfa:	4b6f      	ldr	r3, [pc, #444]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	4a6e      	ldr	r2, [pc, #440]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003e00:	f043 0304 	orr.w	r3, r3, #4
 8003e04:	6713      	str	r3, [r2, #112]	; 0x70
 8003e06:	4b6c      	ldr	r3, [pc, #432]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	4a6b      	ldr	r2, [pc, #428]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003e0c:	f043 0301 	orr.w	r3, r3, #1
 8003e10:	6713      	str	r3, [r2, #112]	; 0x70
 8003e12:	e00b      	b.n	8003e2c <HAL_RCC_OscConfig+0x5e0>
 8003e14:	4b68      	ldr	r3, [pc, #416]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e18:	4a67      	ldr	r2, [pc, #412]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e20:	4b65      	ldr	r3, [pc, #404]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e24:	4a64      	ldr	r2, [pc, #400]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003e26:	f023 0304 	bic.w	r3, r3, #4
 8003e2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d015      	beq.n	8003e60 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e34:	f7fd f8b8 	bl	8000fa8 <HAL_GetTick>
 8003e38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e3a:	e00a      	b.n	8003e52 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3c:	f7fd f8b4 	bl	8000fa8 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e14e      	b.n	80040f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e52:	4b59      	ldr	r3, [pc, #356]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0ee      	beq.n	8003e3c <HAL_RCC_OscConfig+0x5f0>
 8003e5e:	e014      	b.n	8003e8a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e60:	f7fd f8a2 	bl	8000fa8 <HAL_GetTick>
 8003e64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e66:	e00a      	b.n	8003e7e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e68:	f7fd f89e 	bl	8000fa8 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e138      	b.n	80040f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e7e:	4b4e      	ldr	r3, [pc, #312]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1ee      	bne.n	8003e68 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 812d 	beq.w	80040ee <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e94:	4b48      	ldr	r3, [pc, #288]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e9c:	2b18      	cmp	r3, #24
 8003e9e:	f000 80bd 	beq.w	800401c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	f040 809e 	bne.w	8003fe8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eac:	4b42      	ldr	r3, [pc, #264]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a41      	ldr	r2, [pc, #260]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003eb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7fd f876 	bl	8000fa8 <HAL_GetTick>
 8003ebc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec0:	f7fd f872 	bl	8000fa8 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e10e      	b.n	80040f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ed2:	4b39      	ldr	r3, [pc, #228]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f0      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ede:	4b36      	ldr	r3, [pc, #216]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ee2:	4b37      	ldr	r3, [pc, #220]	; (8003fc0 <HAL_RCC_OscConfig+0x774>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003eee:	0112      	lsls	r2, r2, #4
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	4931      	ldr	r1, [pc, #196]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	628b      	str	r3, [r1, #40]	; 0x28
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	3b01      	subs	r3, #1
 8003efe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f06:	3b01      	subs	r3, #1
 8003f08:	025b      	lsls	r3, r3, #9
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	3b01      	subs	r3, #1
 8003f14:	041b      	lsls	r3, r3, #16
 8003f16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f20:	3b01      	subs	r3, #1
 8003f22:	061b      	lsls	r3, r3, #24
 8003f24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f28:	4923      	ldr	r1, [pc, #140]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f2e:	4b22      	ldr	r3, [pc, #136]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	4a21      	ldr	r2, [pc, #132]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003f34:	f023 0301 	bic.w	r3, r3, #1
 8003f38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f3a:	4b1f      	ldr	r3, [pc, #124]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3e:	4b21      	ldr	r3, [pc, #132]	; (8003fc4 <HAL_RCC_OscConfig+0x778>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f46:	00d2      	lsls	r2, r2, #3
 8003f48:	491b      	ldr	r1, [pc, #108]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f4e:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	f023 020c 	bic.w	r2, r3, #12
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	4917      	ldr	r1, [pc, #92]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f60:	4b15      	ldr	r3, [pc, #84]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	f023 0202 	bic.w	r2, r3, #2
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6c:	4912      	ldr	r1, [pc, #72]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f72:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	4a10      	ldr	r2, [pc, #64]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f7e:	4b0e      	ldr	r3, [pc, #56]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	4a0d      	ldr	r2, [pc, #52]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f8a:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	4a0a      	ldr	r2, [pc, #40]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f96:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	4a07      	ldr	r2, [pc, #28]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa2:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <HAL_RCC_OscConfig+0x76c>)
 8003fa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fae:	f7fc fffb 	bl	8000fa8 <HAL_GetTick>
 8003fb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fb4:	e011      	b.n	8003fda <HAL_RCC_OscConfig+0x78e>
 8003fb6:	bf00      	nop
 8003fb8:	58024400 	.word	0x58024400
 8003fbc:	58024800 	.word	0x58024800
 8003fc0:	fffffc0c 	.word	0xfffffc0c
 8003fc4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc8:	f7fc ffee 	bl	8000fa8 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e08a      	b.n	80040f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fda:	4b47      	ldr	r3, [pc, #284]	; (80040f8 <HAL_RCC_OscConfig+0x8ac>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x77c>
 8003fe6:	e082      	b.n	80040ee <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe8:	4b43      	ldr	r3, [pc, #268]	; (80040f8 <HAL_RCC_OscConfig+0x8ac>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a42      	ldr	r2, [pc, #264]	; (80040f8 <HAL_RCC_OscConfig+0x8ac>)
 8003fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff4:	f7fc ffd8 	bl	8000fa8 <HAL_GetTick>
 8003ff8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ffc:	f7fc ffd4 	bl	8000fa8 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e070      	b.n	80040f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800400e:	4b3a      	ldr	r3, [pc, #232]	; (80040f8 <HAL_RCC_OscConfig+0x8ac>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCC_OscConfig+0x7b0>
 800401a:	e068      	b.n	80040ee <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800401c:	4b36      	ldr	r3, [pc, #216]	; (80040f8 <HAL_RCC_OscConfig+0x8ac>)
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004022:	4b35      	ldr	r3, [pc, #212]	; (80040f8 <HAL_RCC_OscConfig+0x8ac>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	2b01      	cmp	r3, #1
 800402e:	d031      	beq.n	8004094 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f003 0203 	and.w	r2, r3, #3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800403a:	429a      	cmp	r2, r3
 800403c:	d12a      	bne.n	8004094 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	091b      	lsrs	r3, r3, #4
 8004042:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404a:	429a      	cmp	r2, r3
 800404c:	d122      	bne.n	8004094 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800405a:	429a      	cmp	r2, r3
 800405c:	d11a      	bne.n	8004094 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	0a5b      	lsrs	r3, r3, #9
 8004062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800406c:	429a      	cmp	r2, r3
 800406e:	d111      	bne.n	8004094 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	0c1b      	lsrs	r3, r3, #16
 8004074:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d108      	bne.n	8004094 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	0e1b      	lsrs	r3, r3, #24
 8004086:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e02b      	b.n	80040f0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004098:	4b17      	ldr	r3, [pc, #92]	; (80040f8 <HAL_RCC_OscConfig+0x8ac>)
 800409a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409c:	08db      	lsrs	r3, r3, #3
 800409e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d01f      	beq.n	80040ee <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <HAL_RCC_OscConfig+0x8ac>)
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	4a11      	ldr	r2, [pc, #68]	; (80040f8 <HAL_RCC_OscConfig+0x8ac>)
 80040b4:	f023 0301 	bic.w	r3, r3, #1
 80040b8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040ba:	f7fc ff75 	bl	8000fa8 <HAL_GetTick>
 80040be:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80040c0:	bf00      	nop
 80040c2:	f7fc ff71 	bl	8000fa8 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d0f9      	beq.n	80040c2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040ce:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <HAL_RCC_OscConfig+0x8ac>)
 80040d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040d2:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <HAL_RCC_OscConfig+0x8b0>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040da:	00d2      	lsls	r2, r2, #3
 80040dc:	4906      	ldr	r1, [pc, #24]	; (80040f8 <HAL_RCC_OscConfig+0x8ac>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80040e2:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <HAL_RCC_OscConfig+0x8ac>)
 80040e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e6:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <HAL_RCC_OscConfig+0x8ac>)
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3730      	adds	r7, #48	; 0x30
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	58024400 	.word	0x58024400
 80040fc:	ffff0007 	.word	0xffff0007

08004100 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e19c      	b.n	800444e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004114:	4b8a      	ldr	r3, [pc, #552]	; (8004340 <HAL_RCC_ClockConfig+0x240>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d910      	bls.n	8004144 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004122:	4b87      	ldr	r3, [pc, #540]	; (8004340 <HAL_RCC_ClockConfig+0x240>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f023 020f 	bic.w	r2, r3, #15
 800412a:	4985      	ldr	r1, [pc, #532]	; (8004340 <HAL_RCC_ClockConfig+0x240>)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	4313      	orrs	r3, r2
 8004130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004132:	4b83      	ldr	r3, [pc, #524]	; (8004340 <HAL_RCC_ClockConfig+0x240>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d001      	beq.n	8004144 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e184      	b.n	800444e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d010      	beq.n	8004172 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	4b7b      	ldr	r3, [pc, #492]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800415c:	429a      	cmp	r2, r3
 800415e:	d908      	bls.n	8004172 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004160:	4b78      	ldr	r3, [pc, #480]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	4975      	ldr	r1, [pc, #468]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 800416e:	4313      	orrs	r3, r2
 8004170:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d010      	beq.n	80041a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695a      	ldr	r2, [r3, #20]
 8004182:	4b70      	ldr	r3, [pc, #448]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800418a:	429a      	cmp	r2, r3
 800418c:	d908      	bls.n	80041a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800418e:	4b6d      	ldr	r3, [pc, #436]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	496a      	ldr	r1, [pc, #424]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 800419c:	4313      	orrs	r3, r2
 800419e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d010      	beq.n	80041ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699a      	ldr	r2, [r3, #24]
 80041b0:	4b64      	ldr	r3, [pc, #400]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d908      	bls.n	80041ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041bc:	4b61      	ldr	r3, [pc, #388]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	495e      	ldr	r1, [pc, #376]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d010      	beq.n	80041fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69da      	ldr	r2, [r3, #28]
 80041de:	4b59      	ldr	r3, [pc, #356]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d908      	bls.n	80041fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041ea:	4b56      	ldr	r3, [pc, #344]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	4953      	ldr	r1, [pc, #332]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d010      	beq.n	800422a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	4b4d      	ldr	r3, [pc, #308]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	f003 030f 	and.w	r3, r3, #15
 8004214:	429a      	cmp	r2, r3
 8004216:	d908      	bls.n	800422a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004218:	4b4a      	ldr	r3, [pc, #296]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	f023 020f 	bic.w	r2, r3, #15
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4947      	ldr	r1, [pc, #284]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 8004226:	4313      	orrs	r3, r2
 8004228:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d055      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004236:	4b43      	ldr	r3, [pc, #268]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	4940      	ldr	r1, [pc, #256]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 8004244:	4313      	orrs	r3, r2
 8004246:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b02      	cmp	r3, #2
 800424e:	d107      	bne.n	8004260 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004250:	4b3c      	ldr	r3, [pc, #240]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d121      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0f6      	b.n	800444e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b03      	cmp	r3, #3
 8004266:	d107      	bne.n	8004278 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004268:	4b36      	ldr	r3, [pc, #216]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d115      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0ea      	b.n	800444e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d107      	bne.n	8004290 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004280:	4b30      	ldr	r3, [pc, #192]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d109      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0de      	b.n	800444e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004290:	4b2c      	ldr	r3, [pc, #176]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0d6      	b.n	800444e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042a0:	4b28      	ldr	r3, [pc, #160]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f023 0207 	bic.w	r2, r3, #7
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	4925      	ldr	r1, [pc, #148]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b2:	f7fc fe79 	bl	8000fa8 <HAL_GetTick>
 80042b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b8:	e00a      	b.n	80042d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ba:	f7fc fe75 	bl	8000fa8 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e0be      	b.n	800444e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d0:	4b1c      	ldr	r3, [pc, #112]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	429a      	cmp	r2, r3
 80042e0:	d1eb      	bne.n	80042ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d010      	beq.n	8004310 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	4b14      	ldr	r3, [pc, #80]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d208      	bcs.n	8004310 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042fe:	4b11      	ldr	r3, [pc, #68]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	f023 020f 	bic.w	r2, r3, #15
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	490e      	ldr	r1, [pc, #56]	; (8004344 <HAL_RCC_ClockConfig+0x244>)
 800430c:	4313      	orrs	r3, r2
 800430e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <HAL_RCC_ClockConfig+0x240>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d214      	bcs.n	8004348 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431e:	4b08      	ldr	r3, [pc, #32]	; (8004340 <HAL_RCC_ClockConfig+0x240>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f023 020f 	bic.w	r2, r3, #15
 8004326:	4906      	ldr	r1, [pc, #24]	; (8004340 <HAL_RCC_ClockConfig+0x240>)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	4313      	orrs	r3, r2
 800432c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800432e:	4b04      	ldr	r3, [pc, #16]	; (8004340 <HAL_RCC_ClockConfig+0x240>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d005      	beq.n	8004348 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e086      	b.n	800444e <HAL_RCC_ClockConfig+0x34e>
 8004340:	52002000 	.word	0x52002000
 8004344:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d010      	beq.n	8004376 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	4b3f      	ldr	r3, [pc, #252]	; (8004458 <HAL_RCC_ClockConfig+0x358>)
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004360:	429a      	cmp	r2, r3
 8004362:	d208      	bcs.n	8004376 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004364:	4b3c      	ldr	r3, [pc, #240]	; (8004458 <HAL_RCC_ClockConfig+0x358>)
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	4939      	ldr	r1, [pc, #228]	; (8004458 <HAL_RCC_ClockConfig+0x358>)
 8004372:	4313      	orrs	r3, r2
 8004374:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d010      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695a      	ldr	r2, [r3, #20]
 8004386:	4b34      	ldr	r3, [pc, #208]	; (8004458 <HAL_RCC_ClockConfig+0x358>)
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800438e:	429a      	cmp	r2, r3
 8004390:	d208      	bcs.n	80043a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004392:	4b31      	ldr	r3, [pc, #196]	; (8004458 <HAL_RCC_ClockConfig+0x358>)
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	492e      	ldr	r1, [pc, #184]	; (8004458 <HAL_RCC_ClockConfig+0x358>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d010      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699a      	ldr	r2, [r3, #24]
 80043b4:	4b28      	ldr	r3, [pc, #160]	; (8004458 <HAL_RCC_ClockConfig+0x358>)
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043bc:	429a      	cmp	r2, r3
 80043be:	d208      	bcs.n	80043d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043c0:	4b25      	ldr	r3, [pc, #148]	; (8004458 <HAL_RCC_ClockConfig+0x358>)
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	4922      	ldr	r1, [pc, #136]	; (8004458 <HAL_RCC_ClockConfig+0x358>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d010      	beq.n	8004400 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69da      	ldr	r2, [r3, #28]
 80043e2:	4b1d      	ldr	r3, [pc, #116]	; (8004458 <HAL_RCC_ClockConfig+0x358>)
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d208      	bcs.n	8004400 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80043ee:	4b1a      	ldr	r3, [pc, #104]	; (8004458 <HAL_RCC_ClockConfig+0x358>)
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	4917      	ldr	r1, [pc, #92]	; (8004458 <HAL_RCC_ClockConfig+0x358>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004400:	f000 f834 	bl	800446c <HAL_RCC_GetSysClockFreq>
 8004404:	4602      	mov	r2, r0
 8004406:	4b14      	ldr	r3, [pc, #80]	; (8004458 <HAL_RCC_ClockConfig+0x358>)
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	0a1b      	lsrs	r3, r3, #8
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	4912      	ldr	r1, [pc, #72]	; (800445c <HAL_RCC_ClockConfig+0x35c>)
 8004412:	5ccb      	ldrb	r3, [r1, r3]
 8004414:	f003 031f 	and.w	r3, r3, #31
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
 800441c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800441e:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <HAL_RCC_ClockConfig+0x358>)
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	4a0d      	ldr	r2, [pc, #52]	; (800445c <HAL_RCC_ClockConfig+0x35c>)
 8004428:	5cd3      	ldrb	r3, [r2, r3]
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
 8004434:	4a0a      	ldr	r2, [pc, #40]	; (8004460 <HAL_RCC_ClockConfig+0x360>)
 8004436:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004438:	4a0a      	ldr	r2, [pc, #40]	; (8004464 <HAL_RCC_ClockConfig+0x364>)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800443e:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <HAL_RCC_ClockConfig+0x368>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f7fc fd66 	bl	8000f14 <HAL_InitTick>
 8004448:	4603      	mov	r3, r0
 800444a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800444c:	7bfb      	ldrb	r3, [r7, #15]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	58024400 	.word	0x58024400
 800445c:	08008788 	.word	0x08008788
 8004460:	24000004 	.word	0x24000004
 8004464:	24000000 	.word	0x24000000
 8004468:	240668a8 	.word	0x240668a8

0800446c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800446c:	b480      	push	{r7}
 800446e:	b089      	sub	sp, #36	; 0x24
 8004470:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004472:	4bb3      	ldr	r3, [pc, #716]	; (8004740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800447a:	2b18      	cmp	r3, #24
 800447c:	f200 8155 	bhi.w	800472a <HAL_RCC_GetSysClockFreq+0x2be>
 8004480:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004486:	bf00      	nop
 8004488:	080044ed 	.word	0x080044ed
 800448c:	0800472b 	.word	0x0800472b
 8004490:	0800472b 	.word	0x0800472b
 8004494:	0800472b 	.word	0x0800472b
 8004498:	0800472b 	.word	0x0800472b
 800449c:	0800472b 	.word	0x0800472b
 80044a0:	0800472b 	.word	0x0800472b
 80044a4:	0800472b 	.word	0x0800472b
 80044a8:	08004513 	.word	0x08004513
 80044ac:	0800472b 	.word	0x0800472b
 80044b0:	0800472b 	.word	0x0800472b
 80044b4:	0800472b 	.word	0x0800472b
 80044b8:	0800472b 	.word	0x0800472b
 80044bc:	0800472b 	.word	0x0800472b
 80044c0:	0800472b 	.word	0x0800472b
 80044c4:	0800472b 	.word	0x0800472b
 80044c8:	08004519 	.word	0x08004519
 80044cc:	0800472b 	.word	0x0800472b
 80044d0:	0800472b 	.word	0x0800472b
 80044d4:	0800472b 	.word	0x0800472b
 80044d8:	0800472b 	.word	0x0800472b
 80044dc:	0800472b 	.word	0x0800472b
 80044e0:	0800472b 	.word	0x0800472b
 80044e4:	0800472b 	.word	0x0800472b
 80044e8:	0800451f 	.word	0x0800451f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044ec:	4b94      	ldr	r3, [pc, #592]	; (8004740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0320 	and.w	r3, r3, #32
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d009      	beq.n	800450c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044f8:	4b91      	ldr	r3, [pc, #580]	; (8004740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	08db      	lsrs	r3, r3, #3
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	4a90      	ldr	r2, [pc, #576]	; (8004744 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004504:	fa22 f303 	lsr.w	r3, r2, r3
 8004508:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800450a:	e111      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800450c:	4b8d      	ldr	r3, [pc, #564]	; (8004744 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800450e:	61bb      	str	r3, [r7, #24]
      break;
 8004510:	e10e      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004512:	4b8d      	ldr	r3, [pc, #564]	; (8004748 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004514:	61bb      	str	r3, [r7, #24]
      break;
 8004516:	e10b      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004518:	4b8c      	ldr	r3, [pc, #560]	; (800474c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800451a:	61bb      	str	r3, [r7, #24]
      break;
 800451c:	e108      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800451e:	4b88      	ldr	r3, [pc, #544]	; (8004740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004528:	4b85      	ldr	r3, [pc, #532]	; (8004740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800452a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452c:	091b      	lsrs	r3, r3, #4
 800452e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004532:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004534:	4b82      	ldr	r3, [pc, #520]	; (8004740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800453e:	4b80      	ldr	r3, [pc, #512]	; (8004740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004542:	08db      	lsrs	r3, r3, #3
 8004544:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	fb02 f303 	mul.w	r3, r2, r3
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004556:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 80e1 	beq.w	8004724 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b02      	cmp	r3, #2
 8004566:	f000 8083 	beq.w	8004670 <HAL_RCC_GetSysClockFreq+0x204>
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b02      	cmp	r3, #2
 800456e:	f200 80a1 	bhi.w	80046b4 <HAL_RCC_GetSysClockFreq+0x248>
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_RCC_GetSysClockFreq+0x114>
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d056      	beq.n	800462c <HAL_RCC_GetSysClockFreq+0x1c0>
 800457e:	e099      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004580:	4b6f      	ldr	r3, [pc, #444]	; (8004740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0320 	and.w	r3, r3, #32
 8004588:	2b00      	cmp	r3, #0
 800458a:	d02d      	beq.n	80045e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800458c:	4b6c      	ldr	r3, [pc, #432]	; (8004740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	08db      	lsrs	r3, r3, #3
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	4a6b      	ldr	r2, [pc, #428]	; (8004744 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004598:	fa22 f303 	lsr.w	r3, r2, r3
 800459c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	ee07 3a90 	vmov	s15, r3
 80045a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	ee07 3a90 	vmov	s15, r3
 80045ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045b6:	4b62      	ldr	r3, [pc, #392]	; (8004740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004750 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80045e6:	e087      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004754 <HAL_RCC_GetSysClockFreq+0x2e8>
 80045f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045fa:	4b51      	ldr	r3, [pc, #324]	; (8004740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460a:	ed97 6a02 	vldr	s12, [r7, #8]
 800460e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004750 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800461a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800461e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004626:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800462a:	e065      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004636:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004758 <HAL_RCC_GetSysClockFreq+0x2ec>
 800463a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800463e:	4b40      	ldr	r3, [pc, #256]	; (8004740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004652:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004750 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800465a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800466e:	e043      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800475c <HAL_RCC_GetSysClockFreq+0x2f0>
 800467e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004682:	4b2f      	ldr	r3, [pc, #188]	; (8004740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004692:	ed97 6a02 	vldr	s12, [r7, #8]
 8004696:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004750 <HAL_RCC_GetSysClockFreq+0x2e4>
 800469a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800469e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046b2:	e021      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004758 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046c6:	4b1e      	ldr	r3, [pc, #120]	; (8004740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004750 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80046f8:	4b11      	ldr	r3, [pc, #68]	; (8004740 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fc:	0a5b      	lsrs	r3, r3, #9
 80046fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004702:	3301      	adds	r3, #1
 8004704:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	ee07 3a90 	vmov	s15, r3
 800470c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004710:	edd7 6a07 	vldr	s13, [r7, #28]
 8004714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800471c:	ee17 3a90 	vmov	r3, s15
 8004720:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004722:	e005      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	61bb      	str	r3, [r7, #24]
      break;
 8004728:	e002      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800472a:	4b07      	ldr	r3, [pc, #28]	; (8004748 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800472c:	61bb      	str	r3, [r7, #24]
      break;
 800472e:	bf00      	nop
  }

  return sysclockfreq;
 8004730:	69bb      	ldr	r3, [r7, #24]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3724      	adds	r7, #36	; 0x24
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	58024400 	.word	0x58024400
 8004744:	03d09000 	.word	0x03d09000
 8004748:	003d0900 	.word	0x003d0900
 800474c:	007a1200 	.word	0x007a1200
 8004750:	46000000 	.word	0x46000000
 8004754:	4c742400 	.word	0x4c742400
 8004758:	4a742400 	.word	0x4a742400
 800475c:	4af42400 	.word	0x4af42400

08004760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004766:	f7ff fe81 	bl	800446c <HAL_RCC_GetSysClockFreq>
 800476a:	4602      	mov	r2, r0
 800476c:	4b10      	ldr	r3, [pc, #64]	; (80047b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	0a1b      	lsrs	r3, r3, #8
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	490f      	ldr	r1, [pc, #60]	; (80047b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004778:	5ccb      	ldrb	r3, [r1, r3]
 800477a:	f003 031f 	and.w	r3, r3, #31
 800477e:	fa22 f303 	lsr.w	r3, r2, r3
 8004782:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004784:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	f003 030f 	and.w	r3, r3, #15
 800478c:	4a09      	ldr	r2, [pc, #36]	; (80047b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800478e:	5cd3      	ldrb	r3, [r2, r3]
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	fa22 f303 	lsr.w	r3, r2, r3
 800479a:	4a07      	ldr	r2, [pc, #28]	; (80047b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800479c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800479e:	4a07      	ldr	r2, [pc, #28]	; (80047bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047a4:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80047a6:	681b      	ldr	r3, [r3, #0]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	58024400 	.word	0x58024400
 80047b4:	08008788 	.word	0x08008788
 80047b8:	24000004 	.word	0x24000004
 80047bc:	24000000 	.word	0x24000000

080047c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047c4:	f7ff ffcc 	bl	8004760 <HAL_RCC_GetHCLKFreq>
 80047c8:	4602      	mov	r2, r0
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	091b      	lsrs	r3, r3, #4
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	4904      	ldr	r1, [pc, #16]	; (80047e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047d6:	5ccb      	ldrb	r3, [r1, r3]
 80047d8:	f003 031f 	and.w	r3, r3, #31
 80047dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	58024400 	.word	0x58024400
 80047e8:	08008788 	.word	0x08008788

080047ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80047f0:	f7ff ffb6 	bl	8004760 <HAL_RCC_GetHCLKFreq>
 80047f4:	4602      	mov	r2, r0
 80047f6:	4b06      	ldr	r3, [pc, #24]	; (8004810 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	0a1b      	lsrs	r3, r3, #8
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	4904      	ldr	r1, [pc, #16]	; (8004814 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004802:	5ccb      	ldrb	r3, [r1, r3]
 8004804:	f003 031f 	and.w	r3, r3, #31
 8004808:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800480c:	4618      	mov	r0, r3
 800480e:	bd80      	pop	{r7, pc}
 8004810:	58024400 	.word	0x58024400
 8004814:	08008788 	.word	0x08008788

08004818 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800481c:	b0ca      	sub	sp, #296	; 0x128
 800481e:	af00      	add	r7, sp, #0
 8004820:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004824:	2300      	movs	r3, #0
 8004826:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800482a:	2300      	movs	r3, #0
 800482c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004838:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800483c:	2500      	movs	r5, #0
 800483e:	ea54 0305 	orrs.w	r3, r4, r5
 8004842:	d049      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800484a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800484e:	d02f      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004850:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004854:	d828      	bhi.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004856:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800485a:	d01a      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800485c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004860:	d822      	bhi.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800486a:	d007      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800486c:	e01c      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800486e:	4bb8      	ldr	r3, [pc, #736]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	4ab7      	ldr	r2, [pc, #732]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004878:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800487a:	e01a      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800487c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004880:	3308      	adds	r3, #8
 8004882:	2102      	movs	r1, #2
 8004884:	4618      	mov	r0, r3
 8004886:	f001 fc8f 	bl	80061a8 <RCCEx_PLL2_Config>
 800488a:	4603      	mov	r3, r0
 800488c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004890:	e00f      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004896:	3328      	adds	r3, #40	; 0x28
 8004898:	2102      	movs	r1, #2
 800489a:	4618      	mov	r0, r3
 800489c:	f001 fd36 	bl	800630c <RCCEx_PLL3_Config>
 80048a0:	4603      	mov	r3, r0
 80048a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048a6:	e004      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048ae:	e000      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80048b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10a      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80048ba:	4ba5      	ldr	r3, [pc, #660]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048be:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80048c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048c8:	4aa1      	ldr	r2, [pc, #644]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048ca:	430b      	orrs	r3, r1
 80048cc:	6513      	str	r3, [r2, #80]	; 0x50
 80048ce:	e003      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80048e4:	f04f 0900 	mov.w	r9, #0
 80048e8:	ea58 0309 	orrs.w	r3, r8, r9
 80048ec:	d047      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d82a      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80048f8:	a201      	add	r2, pc, #4	; (adr r2, 8004900 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80048fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fe:	bf00      	nop
 8004900:	08004915 	.word	0x08004915
 8004904:	08004923 	.word	0x08004923
 8004908:	08004939 	.word	0x08004939
 800490c:	08004957 	.word	0x08004957
 8004910:	08004957 	.word	0x08004957
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004914:	4b8e      	ldr	r3, [pc, #568]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	4a8d      	ldr	r2, [pc, #564]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800491a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800491e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004920:	e01a      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004926:	3308      	adds	r3, #8
 8004928:	2100      	movs	r1, #0
 800492a:	4618      	mov	r0, r3
 800492c:	f001 fc3c 	bl	80061a8 <RCCEx_PLL2_Config>
 8004930:	4603      	mov	r3, r0
 8004932:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004936:	e00f      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800493c:	3328      	adds	r3, #40	; 0x28
 800493e:	2100      	movs	r1, #0
 8004940:	4618      	mov	r0, r3
 8004942:	f001 fce3 	bl	800630c <RCCEx_PLL3_Config>
 8004946:	4603      	mov	r3, r0
 8004948:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800494c:	e004      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004954:	e000      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004958:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004960:	4b7b      	ldr	r3, [pc, #492]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004964:	f023 0107 	bic.w	r1, r3, #7
 8004968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	4a78      	ldr	r2, [pc, #480]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004970:	430b      	orrs	r3, r1
 8004972:	6513      	str	r3, [r2, #80]	; 0x50
 8004974:	e003      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004976:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800497a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800497e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004986:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800498a:	f04f 0b00 	mov.w	fp, #0
 800498e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004992:	d04c      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800499e:	d030      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80049a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a4:	d829      	bhi.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80049a6:	2bc0      	cmp	r3, #192	; 0xc0
 80049a8:	d02d      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80049aa:	2bc0      	cmp	r3, #192	; 0xc0
 80049ac:	d825      	bhi.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80049ae:	2b80      	cmp	r3, #128	; 0x80
 80049b0:	d018      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80049b2:	2b80      	cmp	r3, #128	; 0x80
 80049b4:	d821      	bhi.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80049ba:	2b40      	cmp	r3, #64	; 0x40
 80049bc:	d007      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80049be:	e01c      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c0:	4b63      	ldr	r3, [pc, #396]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	4a62      	ldr	r2, [pc, #392]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80049cc:	e01c      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d2:	3308      	adds	r3, #8
 80049d4:	2100      	movs	r1, #0
 80049d6:	4618      	mov	r0, r3
 80049d8:	f001 fbe6 	bl	80061a8 <RCCEx_PLL2_Config>
 80049dc:	4603      	mov	r3, r0
 80049de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80049e2:	e011      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049e8:	3328      	adds	r3, #40	; 0x28
 80049ea:	2100      	movs	r1, #0
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 fc8d 	bl	800630c <RCCEx_PLL3_Config>
 80049f2:	4603      	mov	r3, r0
 80049f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80049f8:	e006      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a00:	e002      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a02:	bf00      	nop
 8004a04:	e000      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004a10:	4b4f      	ldr	r3, [pc, #316]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a14:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1e:	4a4c      	ldr	r2, [pc, #304]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a20:	430b      	orrs	r3, r1
 8004a22:	6513      	str	r3, [r2, #80]	; 0x50
 8004a24:	e003      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a36:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004a3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004a44:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	d053      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a5a:	d035      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004a5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a60:	d82e      	bhi.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004a62:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a66:	d031      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004a68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a6c:	d828      	bhi.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004a6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a72:	d01a      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004a74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a78:	d822      	bhi.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004a7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a82:	d007      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004a84:	e01c      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a86:	4b32      	ldr	r3, [pc, #200]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8a:	4a31      	ldr	r2, [pc, #196]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a92:	e01c      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a98:	3308      	adds	r3, #8
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f001 fb83 	bl	80061a8 <RCCEx_PLL2_Config>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004aa8:	e011      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aae:	3328      	adds	r3, #40	; 0x28
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f001 fc2a 	bl	800630c <RCCEx_PLL3_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004abe:	e006      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ac6:	e002      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004ac8:	bf00      	nop
 8004aca:	e000      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10b      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004ad6:	4b1e      	ldr	r3, [pc, #120]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ada:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ae2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ae6:	4a1a      	ldr	r2, [pc, #104]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	6593      	str	r3, [r2, #88]	; 0x58
 8004aec:	e003      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004af2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004b02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b06:	2300      	movs	r3, #0
 8004b08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004b0c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004b10:	460b      	mov	r3, r1
 8004b12:	4313      	orrs	r3, r2
 8004b14:	d056      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b22:	d038      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004b24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b28:	d831      	bhi.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b2e:	d034      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004b30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b34:	d82b      	bhi.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b3a:	d01d      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004b3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b40:	d825      	bhi.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d006      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004b46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b4a:	d00a      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004b4c:	e01f      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b4e:	bf00      	nop
 8004b50:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b54:	4ba2      	ldr	r3, [pc, #648]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	4aa1      	ldr	r2, [pc, #644]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b60:	e01c      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b66:	3308      	adds	r3, #8
 8004b68:	2100      	movs	r1, #0
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f001 fb1c 	bl	80061a8 <RCCEx_PLL2_Config>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004b76:	e011      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b7c:	3328      	adds	r3, #40	; 0x28
 8004b7e:	2100      	movs	r1, #0
 8004b80:	4618      	mov	r0, r3
 8004b82:	f001 fbc3 	bl	800630c <RCCEx_PLL3_Config>
 8004b86:	4603      	mov	r3, r0
 8004b88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b8c:	e006      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b94:	e002      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004b96:	bf00      	nop
 8004b98:	e000      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10b      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ba4:	4b8e      	ldr	r3, [pc, #568]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004bb4:	4a8a      	ldr	r2, [pc, #552]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bb6:	430b      	orrs	r3, r1
 8004bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8004bba:	e003      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bcc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004bda:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004bde:	460b      	mov	r3, r1
 8004be0:	4313      	orrs	r3, r2
 8004be2:	d03a      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bea:	2b30      	cmp	r3, #48	; 0x30
 8004bec:	d01f      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004bee:	2b30      	cmp	r3, #48	; 0x30
 8004bf0:	d819      	bhi.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d00c      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	d815      	bhi.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d019      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004bfe:	2b10      	cmp	r3, #16
 8004c00:	d111      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c02:	4b77      	ldr	r3, [pc, #476]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c06:	4a76      	ldr	r2, [pc, #472]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004c0e:	e011      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c14:	3308      	adds	r3, #8
 8004c16:	2102      	movs	r1, #2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f001 fac5 	bl	80061a8 <RCCEx_PLL2_Config>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004c24:	e006      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c2c:	e002      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004c2e:	bf00      	nop
 8004c30:	e000      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c3c:	4b68      	ldr	r3, [pc, #416]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c40:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4a:	4a65      	ldr	r2, [pc, #404]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c50:	e003      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c62:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004c66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004c70:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004c74:	460b      	mov	r3, r1
 8004c76:	4313      	orrs	r3, r2
 8004c78:	d051      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c84:	d035      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004c86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c8a:	d82e      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004c8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c90:	d031      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004c92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c96:	d828      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9c:	d01a      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca2:	d822      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cac:	d007      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004cae:	e01c      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb0:	4b4b      	ldr	r3, [pc, #300]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	4a4a      	ldr	r2, [pc, #296]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004cbc:	e01c      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f001 fa6e 	bl	80061a8 <RCCEx_PLL2_Config>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004cd2:	e011      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cd8:	3328      	adds	r3, #40	; 0x28
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f001 fb15 	bl	800630c <RCCEx_PLL3_Config>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ce8:	e006      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004cf0:	e002      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004cf2:	bf00      	nop
 8004cf4:	e000      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10a      	bne.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d00:	4b37      	ldr	r3, [pc, #220]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d04:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0e:	4a34      	ldr	r2, [pc, #208]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d10:	430b      	orrs	r3, r1
 8004d12:	6513      	str	r3, [r2, #80]	; 0x50
 8004d14:	e003      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d26:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004d2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d2e:	2300      	movs	r3, #0
 8004d30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004d34:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	d056      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d48:	d033      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004d4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d4e:	d82c      	bhi.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004d50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d54:	d02f      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004d56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d5a:	d826      	bhi.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004d5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d60:	d02b      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004d62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d66:	d820      	bhi.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004d68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d6c:	d012      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004d6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d72:	d81a      	bhi.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d022      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d7c:	d115      	bne.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d82:	3308      	adds	r3, #8
 8004d84:	2101      	movs	r1, #1
 8004d86:	4618      	mov	r0, r3
 8004d88:	f001 fa0e 	bl	80061a8 <RCCEx_PLL2_Config>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d92:	e015      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d98:	3328      	adds	r3, #40	; 0x28
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f001 fab5 	bl	800630c <RCCEx_PLL3_Config>
 8004da2:	4603      	mov	r3, r0
 8004da4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004da8:	e00a      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004db0:	e006      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004db2:	bf00      	nop
 8004db4:	e004      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004db6:	bf00      	nop
 8004db8:	e002      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004dba:	bf00      	nop
 8004dbc:	e000      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10d      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004dc8:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dcc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dd6:	4a02      	ldr	r2, [pc, #8]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	6513      	str	r3, [r2, #80]	; 0x50
 8004ddc:	e006      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004dde:	bf00      	nop
 8004de0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004de8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004df8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e02:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	d055      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e18:	d033      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e1e:	d82c      	bhi.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e24:	d02f      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2a:	d826      	bhi.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e30:	d02b      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004e32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e36:	d820      	bhi.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e3c:	d012      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004e3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e42:	d81a      	bhi.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d022      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004e48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e4c:	d115      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e52:	3308      	adds	r3, #8
 8004e54:	2101      	movs	r1, #1
 8004e56:	4618      	mov	r0, r3
 8004e58:	f001 f9a6 	bl	80061a8 <RCCEx_PLL2_Config>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e62:	e015      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e68:	3328      	adds	r3, #40	; 0x28
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f001 fa4d 	bl	800630c <RCCEx_PLL3_Config>
 8004e72:	4603      	mov	r3, r0
 8004e74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e78:	e00a      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e80:	e006      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e82:	bf00      	nop
 8004e84:	e004      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e86:	bf00      	nop
 8004e88:	e002      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e8a:	bf00      	nop
 8004e8c:	e000      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10b      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e98:	4ba3      	ldr	r3, [pc, #652]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ea4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ea8:	4a9f      	ldr	r2, [pc, #636]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eaa:	430b      	orrs	r3, r1
 8004eac:	6593      	str	r3, [r2, #88]	; 0x58
 8004eae:	e003      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004eb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004ec4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004ece:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	d037      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ede:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ee2:	d00e      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ee8:	d816      	bhi.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d018      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004eee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ef2:	d111      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ef4:	4b8c      	ldr	r3, [pc, #560]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	4a8b      	ldr	r2, [pc, #556]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004efe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f00:	e00f      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f06:	3308      	adds	r3, #8
 8004f08:	2101      	movs	r1, #1
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f001 f94c 	bl	80061a8 <RCCEx_PLL2_Config>
 8004f10:	4603      	mov	r3, r0
 8004f12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f16:	e004      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f1e:	e000      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10a      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f2a:	4b7f      	ldr	r3, [pc, #508]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f38:	4a7b      	ldr	r2, [pc, #492]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f3a:	430b      	orrs	r3, r1
 8004f3c:	6513      	str	r3, [r2, #80]	; 0x50
 8004f3e:	e003      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f50:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004f54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004f5e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4313      	orrs	r3, r2
 8004f66:	d039      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d81c      	bhi.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004f72:	a201      	add	r2, pc, #4	; (adr r2, 8004f78 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f78:	08004fb5 	.word	0x08004fb5
 8004f7c:	08004f89 	.word	0x08004f89
 8004f80:	08004f97 	.word	0x08004f97
 8004f84:	08004fb5 	.word	0x08004fb5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f88:	4b67      	ldr	r3, [pc, #412]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	4a66      	ldr	r2, [pc, #408]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f94:	e00f      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	2102      	movs	r1, #2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f001 f902 	bl	80061a8 <RCCEx_PLL2_Config>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004faa:	e004      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004fb2:	e000      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10a      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004fbe:	4b5a      	ldr	r3, [pc, #360]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc2:	f023 0103 	bic.w	r1, r3, #3
 8004fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fcc:	4a56      	ldr	r2, [pc, #344]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fce:	430b      	orrs	r3, r1
 8004fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fd2:	e003      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004fe8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fec:	2300      	movs	r3, #0
 8004fee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ff2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f000 809f 	beq.w	800513c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ffe:	4b4b      	ldr	r3, [pc, #300]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a4a      	ldr	r2, [pc, #296]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005008:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800500a:	f7fb ffcd 	bl	8000fa8 <HAL_GetTick>
 800500e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005012:	e00b      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005014:	f7fb ffc8 	bl	8000fa8 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b64      	cmp	r3, #100	; 0x64
 8005022:	d903      	bls.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800502a:	e005      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800502c:	4b3f      	ldr	r3, [pc, #252]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0ed      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005038:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800503c:	2b00      	cmp	r3, #0
 800503e:	d179      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005040:	4b39      	ldr	r3, [pc, #228]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005042:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005048:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800504c:	4053      	eors	r3, r2
 800504e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005052:	2b00      	cmp	r3, #0
 8005054:	d015      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005056:	4b34      	ldr	r3, [pc, #208]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005062:	4b31      	ldr	r3, [pc, #196]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005066:	4a30      	ldr	r2, [pc, #192]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800506c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800506e:	4b2e      	ldr	r3, [pc, #184]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005072:	4a2d      	ldr	r2, [pc, #180]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005078:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800507a:	4a2b      	ldr	r2, [pc, #172]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800507c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005080:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005086:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800508a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800508e:	d118      	bne.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005090:	f7fb ff8a 	bl	8000fa8 <HAL_GetTick>
 8005094:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005098:	e00d      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509a:	f7fb ff85 	bl	8000fa8 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80050a4:	1ad2      	subs	r2, r2, r3
 80050a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d903      	bls.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80050b4:	e005      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050b6:	4b1c      	ldr	r3, [pc, #112]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0eb      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80050c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d129      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80050d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050da:	d10e      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80050dc:	4b12      	ldr	r3, [pc, #72]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80050e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80050ec:	091a      	lsrs	r2, r3, #4
 80050ee:	4b10      	ldr	r3, [pc, #64]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	4a0d      	ldr	r2, [pc, #52]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050f4:	430b      	orrs	r3, r1
 80050f6:	6113      	str	r3, [r2, #16]
 80050f8:	e005      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80050fa:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	4a0a      	ldr	r2, [pc, #40]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005100:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005104:	6113      	str	r3, [r2, #16]
 8005106:	4b08      	ldr	r3, [pc, #32]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005108:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800510a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800510e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005116:	4a04      	ldr	r2, [pc, #16]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005118:	430b      	orrs	r3, r1
 800511a:	6713      	str	r3, [r2, #112]	; 0x70
 800511c:	e00e      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800511e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005122:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005126:	e009      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005128:	58024400 	.word	0x58024400
 800512c:	58024800 	.word	0x58024800
 8005130:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005134:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005138:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800513c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005144:	f002 0301 	and.w	r3, r2, #1
 8005148:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800514c:	2300      	movs	r3, #0
 800514e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005152:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005156:	460b      	mov	r3, r1
 8005158:	4313      	orrs	r3, r2
 800515a:	f000 8089 	beq.w	8005270 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800515e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005164:	2b28      	cmp	r3, #40	; 0x28
 8005166:	d86b      	bhi.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005168:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800516a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516e:	bf00      	nop
 8005170:	08005249 	.word	0x08005249
 8005174:	08005241 	.word	0x08005241
 8005178:	08005241 	.word	0x08005241
 800517c:	08005241 	.word	0x08005241
 8005180:	08005241 	.word	0x08005241
 8005184:	08005241 	.word	0x08005241
 8005188:	08005241 	.word	0x08005241
 800518c:	08005241 	.word	0x08005241
 8005190:	08005215 	.word	0x08005215
 8005194:	08005241 	.word	0x08005241
 8005198:	08005241 	.word	0x08005241
 800519c:	08005241 	.word	0x08005241
 80051a0:	08005241 	.word	0x08005241
 80051a4:	08005241 	.word	0x08005241
 80051a8:	08005241 	.word	0x08005241
 80051ac:	08005241 	.word	0x08005241
 80051b0:	0800522b 	.word	0x0800522b
 80051b4:	08005241 	.word	0x08005241
 80051b8:	08005241 	.word	0x08005241
 80051bc:	08005241 	.word	0x08005241
 80051c0:	08005241 	.word	0x08005241
 80051c4:	08005241 	.word	0x08005241
 80051c8:	08005241 	.word	0x08005241
 80051cc:	08005241 	.word	0x08005241
 80051d0:	08005249 	.word	0x08005249
 80051d4:	08005241 	.word	0x08005241
 80051d8:	08005241 	.word	0x08005241
 80051dc:	08005241 	.word	0x08005241
 80051e0:	08005241 	.word	0x08005241
 80051e4:	08005241 	.word	0x08005241
 80051e8:	08005241 	.word	0x08005241
 80051ec:	08005241 	.word	0x08005241
 80051f0:	08005249 	.word	0x08005249
 80051f4:	08005241 	.word	0x08005241
 80051f8:	08005241 	.word	0x08005241
 80051fc:	08005241 	.word	0x08005241
 8005200:	08005241 	.word	0x08005241
 8005204:	08005241 	.word	0x08005241
 8005208:	08005241 	.word	0x08005241
 800520c:	08005241 	.word	0x08005241
 8005210:	08005249 	.word	0x08005249
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005218:	3308      	adds	r3, #8
 800521a:	2101      	movs	r1, #1
 800521c:	4618      	mov	r0, r3
 800521e:	f000 ffc3 	bl	80061a8 <RCCEx_PLL2_Config>
 8005222:	4603      	mov	r3, r0
 8005224:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005228:	e00f      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800522a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800522e:	3328      	adds	r3, #40	; 0x28
 8005230:	2101      	movs	r1, #1
 8005232:	4618      	mov	r0, r3
 8005234:	f001 f86a 	bl	800630c <RCCEx_PLL3_Config>
 8005238:	4603      	mov	r3, r0
 800523a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800523e:	e004      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005246:	e000      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800524a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10a      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005252:	4bbf      	ldr	r3, [pc, #764]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005256:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800525a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800525e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005260:	4abb      	ldr	r2, [pc, #748]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005262:	430b      	orrs	r3, r1
 8005264:	6553      	str	r3, [r2, #84]	; 0x54
 8005266:	e003      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005268:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800526c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005278:	f002 0302 	and.w	r3, r2, #2
 800527c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005280:	2300      	movs	r3, #0
 8005282:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005286:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800528a:	460b      	mov	r3, r1
 800528c:	4313      	orrs	r3, r2
 800528e:	d041      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005296:	2b05      	cmp	r3, #5
 8005298:	d824      	bhi.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800529a:	a201      	add	r2, pc, #4	; (adr r2, 80052a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	080052ed 	.word	0x080052ed
 80052a4:	080052b9 	.word	0x080052b9
 80052a8:	080052cf 	.word	0x080052cf
 80052ac:	080052ed 	.word	0x080052ed
 80052b0:	080052ed 	.word	0x080052ed
 80052b4:	080052ed 	.word	0x080052ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052bc:	3308      	adds	r3, #8
 80052be:	2101      	movs	r1, #1
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 ff71 	bl	80061a8 <RCCEx_PLL2_Config>
 80052c6:	4603      	mov	r3, r0
 80052c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80052cc:	e00f      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052d2:	3328      	adds	r3, #40	; 0x28
 80052d4:	2101      	movs	r1, #1
 80052d6:	4618      	mov	r0, r3
 80052d8:	f001 f818 	bl	800630c <RCCEx_PLL3_Config>
 80052dc:	4603      	mov	r3, r0
 80052de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80052e2:	e004      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052ea:	e000      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80052ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10a      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80052f6:	4b96      	ldr	r3, [pc, #600]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fa:	f023 0107 	bic.w	r1, r3, #7
 80052fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005302:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005304:	4a92      	ldr	r2, [pc, #584]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005306:	430b      	orrs	r3, r1
 8005308:	6553      	str	r3, [r2, #84]	; 0x54
 800530a:	e003      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005310:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	f002 0304 	and.w	r3, r2, #4
 8005320:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005324:	2300      	movs	r3, #0
 8005326:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800532a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800532e:	460b      	mov	r3, r1
 8005330:	4313      	orrs	r3, r2
 8005332:	d044      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800533c:	2b05      	cmp	r3, #5
 800533e:	d825      	bhi.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005340:	a201      	add	r2, pc, #4	; (adr r2, 8005348 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005346:	bf00      	nop
 8005348:	08005395 	.word	0x08005395
 800534c:	08005361 	.word	0x08005361
 8005350:	08005377 	.word	0x08005377
 8005354:	08005395 	.word	0x08005395
 8005358:	08005395 	.word	0x08005395
 800535c:	08005395 	.word	0x08005395
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005364:	3308      	adds	r3, #8
 8005366:	2101      	movs	r1, #1
 8005368:	4618      	mov	r0, r3
 800536a:	f000 ff1d 	bl	80061a8 <RCCEx_PLL2_Config>
 800536e:	4603      	mov	r3, r0
 8005370:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005374:	e00f      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800537a:	3328      	adds	r3, #40	; 0x28
 800537c:	2101      	movs	r1, #1
 800537e:	4618      	mov	r0, r3
 8005380:	f000 ffc4 	bl	800630c <RCCEx_PLL3_Config>
 8005384:	4603      	mov	r3, r0
 8005386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800538a:	e004      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005392:	e000      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005396:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10b      	bne.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800539e:	4b6c      	ldr	r3, [pc, #432]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a2:	f023 0107 	bic.w	r1, r3, #7
 80053a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ae:	4a68      	ldr	r2, [pc, #416]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053b0:	430b      	orrs	r3, r1
 80053b2:	6593      	str	r3, [r2, #88]	; 0x58
 80053b4:	e003      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	f002 0320 	and.w	r3, r2, #32
 80053ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053ce:	2300      	movs	r3, #0
 80053d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80053d8:	460b      	mov	r3, r1
 80053da:	4313      	orrs	r3, r2
 80053dc:	d055      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80053de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053ea:	d033      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80053ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053f0:	d82c      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80053f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f6:	d02f      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80053f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fc:	d826      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80053fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005402:	d02b      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005404:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005408:	d820      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800540a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800540e:	d012      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005414:	d81a      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005416:	2b00      	cmp	r3, #0
 8005418:	d022      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800541a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800541e:	d115      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005424:	3308      	adds	r3, #8
 8005426:	2100      	movs	r1, #0
 8005428:	4618      	mov	r0, r3
 800542a:	f000 febd 	bl	80061a8 <RCCEx_PLL2_Config>
 800542e:	4603      	mov	r3, r0
 8005430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005434:	e015      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800543a:	3328      	adds	r3, #40	; 0x28
 800543c:	2102      	movs	r1, #2
 800543e:	4618      	mov	r0, r3
 8005440:	f000 ff64 	bl	800630c <RCCEx_PLL3_Config>
 8005444:	4603      	mov	r3, r0
 8005446:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800544a:	e00a      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005452:	e006      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005454:	bf00      	nop
 8005456:	e004      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005458:	bf00      	nop
 800545a:	e002      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800545c:	bf00      	nop
 800545e:	e000      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005462:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10b      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800546a:	4b39      	ldr	r3, [pc, #228]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800546c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547a:	4a35      	ldr	r2, [pc, #212]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800547c:	430b      	orrs	r3, r1
 800547e:	6553      	str	r3, [r2, #84]	; 0x54
 8005480:	e003      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005482:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005486:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800548a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800548e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005492:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005496:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800549a:	2300      	movs	r3, #0
 800549c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80054a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4313      	orrs	r3, r2
 80054a8:	d058      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80054aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80054b6:	d033      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80054b8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80054bc:	d82c      	bhi.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80054be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c2:	d02f      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80054c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c8:	d826      	bhi.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80054ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054ce:	d02b      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80054d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054d4:	d820      	bhi.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80054d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054da:	d012      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80054dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e0:	d81a      	bhi.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d022      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80054e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ea:	d115      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054f0:	3308      	adds	r3, #8
 80054f2:	2100      	movs	r1, #0
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 fe57 	bl	80061a8 <RCCEx_PLL2_Config>
 80054fa:	4603      	mov	r3, r0
 80054fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005500:	e015      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005506:	3328      	adds	r3, #40	; 0x28
 8005508:	2102      	movs	r1, #2
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fefe 	bl	800630c <RCCEx_PLL3_Config>
 8005510:	4603      	mov	r3, r0
 8005512:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005516:	e00a      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800551e:	e006      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005520:	bf00      	nop
 8005522:	e004      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005524:	bf00      	nop
 8005526:	e002      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005528:	bf00      	nop
 800552a:	e000      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800552c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800552e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10e      	bne.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005536:	4b06      	ldr	r3, [pc, #24]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800553e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005542:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005546:	4a02      	ldr	r2, [pc, #8]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005548:	430b      	orrs	r3, r1
 800554a:	6593      	str	r3, [r2, #88]	; 0x58
 800554c:	e006      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800554e:	bf00      	nop
 8005550:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005554:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005558:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800555c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005564:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005568:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800556c:	2300      	movs	r3, #0
 800556e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005572:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005576:	460b      	mov	r3, r1
 8005578:	4313      	orrs	r3, r2
 800557a:	d055      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800557c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005580:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005584:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005588:	d033      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800558a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800558e:	d82c      	bhi.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005594:	d02f      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800559a:	d826      	bhi.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800559c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80055a0:	d02b      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80055a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80055a6:	d820      	bhi.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055ac:	d012      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80055ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055b2:	d81a      	bhi.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d022      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80055b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055bc:	d115      	bne.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c2:	3308      	adds	r3, #8
 80055c4:	2100      	movs	r1, #0
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fdee 	bl	80061a8 <RCCEx_PLL2_Config>
 80055cc:	4603      	mov	r3, r0
 80055ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80055d2:	e015      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d8:	3328      	adds	r3, #40	; 0x28
 80055da:	2102      	movs	r1, #2
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fe95 	bl	800630c <RCCEx_PLL3_Config>
 80055e2:	4603      	mov	r3, r0
 80055e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80055e8:	e00a      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055f0:	e006      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80055f2:	bf00      	nop
 80055f4:	e004      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80055f6:	bf00      	nop
 80055f8:	e002      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80055fa:	bf00      	nop
 80055fc:	e000      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80055fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005600:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10b      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005608:	4ba1      	ldr	r3, [pc, #644]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800560a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005614:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005618:	4a9d      	ldr	r2, [pc, #628]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800561a:	430b      	orrs	r3, r1
 800561c:	6593      	str	r3, [r2, #88]	; 0x58
 800561e:	e003      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005620:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005624:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800562c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005630:	f002 0308 	and.w	r3, r2, #8
 8005634:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005638:	2300      	movs	r3, #0
 800563a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800563e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005642:	460b      	mov	r3, r1
 8005644:	4313      	orrs	r3, r2
 8005646:	d01e      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800564c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005654:	d10c      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800565a:	3328      	adds	r3, #40	; 0x28
 800565c:	2102      	movs	r1, #2
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fe54 	bl	800630c <RCCEx_PLL3_Config>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005670:	4b87      	ldr	r3, [pc, #540]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005674:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800567c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005680:	4a83      	ldr	r2, [pc, #524]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005682:	430b      	orrs	r3, r1
 8005684:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800568a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568e:	f002 0310 	and.w	r3, r2, #16
 8005692:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005696:	2300      	movs	r3, #0
 8005698:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800569c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80056a0:	460b      	mov	r3, r1
 80056a2:	4313      	orrs	r3, r2
 80056a4:	d01e      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80056a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b2:	d10c      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b8:	3328      	adds	r3, #40	; 0x28
 80056ba:	2102      	movs	r1, #2
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fe25 	bl	800630c <RCCEx_PLL3_Config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056ce:	4b70      	ldr	r3, [pc, #448]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80056d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056de:	4a6c      	ldr	r2, [pc, #432]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056e0:	430b      	orrs	r3, r1
 80056e2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ec:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80056f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056f4:	2300      	movs	r3, #0
 80056f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80056fe:	460b      	mov	r3, r1
 8005700:	4313      	orrs	r3, r2
 8005702:	d03e      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005708:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800570c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005710:	d022      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005712:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005716:	d81b      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800571c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005720:	d00b      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005722:	e015      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005728:	3308      	adds	r3, #8
 800572a:	2100      	movs	r1, #0
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fd3b 	bl	80061a8 <RCCEx_PLL2_Config>
 8005732:	4603      	mov	r3, r0
 8005734:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005738:	e00f      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800573a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800573e:	3328      	adds	r3, #40	; 0x28
 8005740:	2102      	movs	r1, #2
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fde2 	bl	800630c <RCCEx_PLL3_Config>
 8005748:	4603      	mov	r3, r0
 800574a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800574e:	e004      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005756:	e000      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800575a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10b      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005762:	4b4b      	ldr	r3, [pc, #300]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005766:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800576a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800576e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005772:	4a47      	ldr	r2, [pc, #284]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005774:	430b      	orrs	r3, r1
 8005776:	6593      	str	r3, [r2, #88]	; 0x58
 8005778:	e003      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800577e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800578e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005790:	2300      	movs	r3, #0
 8005792:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005794:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005798:	460b      	mov	r3, r1
 800579a:	4313      	orrs	r3, r2
 800579c:	d03b      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800579e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057aa:	d01f      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80057ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057b0:	d818      	bhi.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80057b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057b6:	d003      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80057b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057bc:	d007      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80057be:	e011      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057c0:	4b33      	ldr	r3, [pc, #204]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	4a32      	ldr	r2, [pc, #200]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80057cc:	e00f      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d2:	3328      	adds	r3, #40	; 0x28
 80057d4:	2101      	movs	r1, #1
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fd98 	bl	800630c <RCCEx_PLL3_Config>
 80057dc:	4603      	mov	r3, r0
 80057de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80057e2:	e004      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057ea:	e000      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80057ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10b      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057f6:	4b26      	ldr	r3, [pc, #152]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80057fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005806:	4a22      	ldr	r2, [pc, #136]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005808:	430b      	orrs	r3, r1
 800580a:	6553      	str	r3, [r2, #84]	; 0x54
 800580c:	e003      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005812:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005822:	673b      	str	r3, [r7, #112]	; 0x70
 8005824:	2300      	movs	r3, #0
 8005826:	677b      	str	r3, [r7, #116]	; 0x74
 8005828:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800582c:	460b      	mov	r3, r1
 800582e:	4313      	orrs	r3, r2
 8005830:	d034      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800583c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005840:	d007      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005842:	e011      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005844:	4b12      	ldr	r3, [pc, #72]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	4a11      	ldr	r2, [pc, #68]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800584a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800584e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005850:	e00e      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005856:	3308      	adds	r3, #8
 8005858:	2102      	movs	r1, #2
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fca4 	bl	80061a8 <RCCEx_PLL2_Config>
 8005860:	4603      	mov	r3, r0
 8005862:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005866:	e003      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800586e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005870:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10d      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005878:	4b05      	ldr	r3, [pc, #20]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800587a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800587c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005886:	4a02      	ldr	r2, [pc, #8]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005888:	430b      	orrs	r3, r1
 800588a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800588c:	e006      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800588e:	bf00      	nop
 8005890:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005894:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005898:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800589c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80058a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80058aa:	2300      	movs	r3, #0
 80058ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80058b2:	460b      	mov	r3, r1
 80058b4:	4313      	orrs	r3, r2
 80058b6:	d00c      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058bc:	3328      	adds	r3, #40	; 0x28
 80058be:	2102      	movs	r1, #2
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fd23 	bl	800630c <RCCEx_PLL3_Config>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80058d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058da:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80058de:	663b      	str	r3, [r7, #96]	; 0x60
 80058e0:	2300      	movs	r3, #0
 80058e2:	667b      	str	r3, [r7, #100]	; 0x64
 80058e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80058e8:	460b      	mov	r3, r1
 80058ea:	4313      	orrs	r3, r2
 80058ec:	d038      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80058ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058fa:	d018      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80058fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005900:	d811      	bhi.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005906:	d014      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800590c:	d80b      	bhi.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800590e:	2b00      	cmp	r3, #0
 8005910:	d011      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005916:	d106      	bne.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005918:	4bc3      	ldr	r3, [pc, #780]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	4ac2      	ldr	r2, [pc, #776]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800591e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005922:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005924:	e008      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800592c:	e004      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800592e:	bf00      	nop
 8005930:	e002      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005932:	bf00      	nop
 8005934:	e000      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005938:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10b      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005940:	4bb9      	ldr	r3, [pc, #740]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005944:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800594c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005950:	4ab5      	ldr	r2, [pc, #724]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005952:	430b      	orrs	r3, r1
 8005954:	6553      	str	r3, [r2, #84]	; 0x54
 8005956:	e003      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005958:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800595c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005968:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800596c:	65bb      	str	r3, [r7, #88]	; 0x58
 800596e:	2300      	movs	r3, #0
 8005970:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005972:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005976:	460b      	mov	r3, r1
 8005978:	4313      	orrs	r3, r2
 800597a:	d009      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800597c:	4baa      	ldr	r3, [pc, #680]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800597e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005980:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800598a:	4aa7      	ldr	r2, [pc, #668]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800598c:	430b      	orrs	r3, r1
 800598e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005998:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800599c:	653b      	str	r3, [r7, #80]	; 0x50
 800599e:	2300      	movs	r3, #0
 80059a0:	657b      	str	r3, [r7, #84]	; 0x54
 80059a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80059a6:	460b      	mov	r3, r1
 80059a8:	4313      	orrs	r3, r2
 80059aa:	d00a      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80059ac:	4b9e      	ldr	r3, [pc, #632]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80059b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80059bc:	4a9a      	ldr	r2, [pc, #616]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059be:	430b      	orrs	r3, r1
 80059c0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ca:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80059ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80059d0:	2300      	movs	r3, #0
 80059d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059d4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80059d8:	460b      	mov	r3, r1
 80059da:	4313      	orrs	r3, r2
 80059dc:	d009      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059de:	4b92      	ldr	r3, [pc, #584]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80059e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ec:	4a8e      	ldr	r2, [pc, #568]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059ee:	430b      	orrs	r3, r1
 80059f0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80059f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80059fe:	643b      	str	r3, [r7, #64]	; 0x40
 8005a00:	2300      	movs	r3, #0
 8005a02:	647b      	str	r3, [r7, #68]	; 0x44
 8005a04:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005a08:	460b      	mov	r3, r1
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	d00e      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a0e:	4b86      	ldr	r3, [pc, #536]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	4a85      	ldr	r2, [pc, #532]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a18:	6113      	str	r3, [r2, #16]
 8005a1a:	4b83      	ldr	r3, [pc, #524]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a1c:	6919      	ldr	r1, [r3, #16]
 8005a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005a26:	4a80      	ldr	r2, [pc, #512]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005a38:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a3e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005a42:	460b      	mov	r3, r1
 8005a44:	4313      	orrs	r3, r2
 8005a46:	d009      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a48:	4b77      	ldr	r3, [pc, #476]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a56:	4a74      	ldr	r2, [pc, #464]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a58:	430b      	orrs	r3, r1
 8005a5a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a64:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005a68:	633b      	str	r3, [r7, #48]	; 0x30
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a6e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005a72:	460b      	mov	r3, r1
 8005a74:	4313      	orrs	r3, r2
 8005a76:	d00a      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a78:	4b6b      	ldr	r3, [pc, #428]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a88:	4a67      	ldr	r2, [pc, #412]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a96:	2100      	movs	r1, #0
 8005a98:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aa0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	d011      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aae:	3308      	adds	r3, #8
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fb78 	bl	80061a8 <RCCEx_PLL2_Config>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005abe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005aca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	6239      	str	r1, [r7, #32]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	d011      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aee:	3308      	adds	r3, #8
 8005af0:	2101      	movs	r1, #1
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fb58 	bl	80061a8 <RCCEx_PLL2_Config>
 8005af8:	4603      	mov	r3, r0
 8005afa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005afe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b16:	2100      	movs	r1, #0
 8005b18:	61b9      	str	r1, [r7, #24]
 8005b1a:	f003 0304 	and.w	r3, r3, #4
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b24:	460b      	mov	r3, r1
 8005b26:	4313      	orrs	r3, r2
 8005b28:	d011      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b2e:	3308      	adds	r3, #8
 8005b30:	2102      	movs	r1, #2
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 fb38 	bl	80061a8 <RCCEx_PLL2_Config>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	2100      	movs	r1, #0
 8005b58:	6139      	str	r1, [r7, #16]
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005b64:	460b      	mov	r3, r1
 8005b66:	4313      	orrs	r3, r2
 8005b68:	d011      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6e:	3328      	adds	r3, #40	; 0x28
 8005b70:	2100      	movs	r1, #0
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fbca 	bl	800630c <RCCEx_PLL3_Config>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b96:	2100      	movs	r1, #0
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	f003 0310 	and.w	r3, r3, #16
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	d011      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bae:	3328      	adds	r3, #40	; 0x28
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fbaa 	bl	800630c <RCCEx_PLL3_Config>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	6039      	str	r1, [r7, #0]
 8005bda:	f003 0320 	and.w	r3, r3, #32
 8005bde:	607b      	str	r3, [r7, #4]
 8005be0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005be4:	460b      	mov	r3, r1
 8005be6:	4313      	orrs	r3, r2
 8005be8:	d011      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bee:	3328      	adds	r3, #40	; 0x28
 8005bf0:	2102      	movs	r1, #2
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fb8a 	bl	800630c <RCCEx_PLL3_Config>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005c0e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	e000      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005c22:	46bd      	mov	sp, r7
 8005c24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c28:	58024400 	.word	0x58024400

08005c2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c30:	f7fe fd96 	bl	8004760 <HAL_RCC_GetHCLKFreq>
 8005c34:	4602      	mov	r2, r0
 8005c36:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	091b      	lsrs	r3, r3, #4
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	4904      	ldr	r1, [pc, #16]	; (8005c54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c42:	5ccb      	ldrb	r3, [r1, r3]
 8005c44:	f003 031f 	and.w	r3, r3, #31
 8005c48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	58024400 	.word	0x58024400
 8005c54:	08008788 	.word	0x08008788

08005c58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b089      	sub	sp, #36	; 0x24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c60:	4ba1      	ldr	r3, [pc, #644]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c64:	f003 0303 	and.w	r3, r3, #3
 8005c68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005c6a:	4b9f      	ldr	r3, [pc, #636]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6e:	0b1b      	lsrs	r3, r3, #12
 8005c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c76:	4b9c      	ldr	r3, [pc, #624]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7a:	091b      	lsrs	r3, r3, #4
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005c82:	4b99      	ldr	r3, [pc, #612]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c86:	08db      	lsrs	r3, r3, #3
 8005c88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	fb02 f303 	mul.w	r3, r2, r3
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8111 	beq.w	8005ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	f000 8083 	beq.w	8005db4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	f200 80a1 	bhi.w	8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d056      	beq.n	8005d70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005cc2:	e099      	b.n	8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cc4:	4b88      	ldr	r3, [pc, #544]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d02d      	beq.n	8005d2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cd0:	4b85      	ldr	r3, [pc, #532]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	08db      	lsrs	r3, r3, #3
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	4a84      	ldr	r2, [pc, #528]	; (8005eec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	ee07 3a90 	vmov	s15, r3
 8005ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	ee07 3a90 	vmov	s15, r3
 8005cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cfa:	4b7b      	ldr	r3, [pc, #492]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d2a:	e087      	b.n	8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	ee07 3a90 	vmov	s15, r3
 8005d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d3e:	4b6a      	ldr	r3, [pc, #424]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d52:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d6e:	e065      	b.n	8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	ee07 3a90 	vmov	s15, r3
 8005d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d82:	4b59      	ldr	r3, [pc, #356]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d96:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005db2:	e043      	b.n	8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	ee07 3a90 	vmov	s15, r3
 8005dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005efc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dc6:	4b48      	ldr	r3, [pc, #288]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dce:	ee07 3a90 	vmov	s15, r3
 8005dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dda:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005df6:	e021      	b.n	8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	ee07 3a90 	vmov	s15, r3
 8005dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e0a:	4b37      	ldr	r3, [pc, #220]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005e3c:	4b2a      	ldr	r3, [pc, #168]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e40:	0a5b      	lsrs	r3, r3, #9
 8005e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e46:	ee07 3a90 	vmov	s15, r3
 8005e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e56:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e62:	ee17 2a90 	vmov	r2, s15
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005e6a:	4b1f      	ldr	r3, [pc, #124]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6e:	0c1b      	lsrs	r3, r3, #16
 8005e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e74:	ee07 3a90 	vmov	s15, r3
 8005e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e84:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e90:	ee17 2a90 	vmov	r2, s15
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005e98:	4b13      	ldr	r3, [pc, #76]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9c:	0e1b      	lsrs	r3, r3, #24
 8005e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ea2:	ee07 3a90 	vmov	s15, r3
 8005ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005eae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ebe:	ee17 2a90 	vmov	r2, s15
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005ec6:	e008      	b.n	8005eda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	609a      	str	r2, [r3, #8]
}
 8005eda:	bf00      	nop
 8005edc:	3724      	adds	r7, #36	; 0x24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	58024400 	.word	0x58024400
 8005eec:	03d09000 	.word	0x03d09000
 8005ef0:	46000000 	.word	0x46000000
 8005ef4:	4c742400 	.word	0x4c742400
 8005ef8:	4a742400 	.word	0x4a742400
 8005efc:	4af42400 	.word	0x4af42400

08005f00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b089      	sub	sp, #36	; 0x24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f08:	4ba1      	ldr	r3, [pc, #644]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0c:	f003 0303 	and.w	r3, r3, #3
 8005f10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005f12:	4b9f      	ldr	r3, [pc, #636]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f16:	0d1b      	lsrs	r3, r3, #20
 8005f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f1e:	4b9c      	ldr	r3, [pc, #624]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f22:	0a1b      	lsrs	r3, r3, #8
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005f2a:	4b99      	ldr	r3, [pc, #612]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2e:	08db      	lsrs	r3, r3, #3
 8005f30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	fb02 f303 	mul.w	r3, r2, r3
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 8111 	beq.w	8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	f000 8083 	beq.w	800605c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	f200 80a1 	bhi.w	80060a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d056      	beq.n	8006018 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005f6a:	e099      	b.n	80060a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f6c:	4b88      	ldr	r3, [pc, #544]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d02d      	beq.n	8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f78:	4b85      	ldr	r3, [pc, #532]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	08db      	lsrs	r3, r3, #3
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	4a84      	ldr	r2, [pc, #528]	; (8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f84:	fa22 f303 	lsr.w	r3, r2, r3
 8005f88:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	ee07 3a90 	vmov	s15, r3
 8005f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa2:	4b7b      	ldr	r3, [pc, #492]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005faa:	ee07 3a90 	vmov	s15, r3
 8005fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005fd2:	e087      	b.n	80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	ee07 3a90 	vmov	s15, r3
 8005fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fde:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800619c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe6:	4b6a      	ldr	r3, [pc, #424]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fee:	ee07 3a90 	vmov	s15, r3
 8005ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ffa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800600a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800600e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006016:	e065      	b.n	80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006022:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80061a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800602a:	4b59      	ldr	r3, [pc, #356]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800603a:	ed97 6a03 	vldr	s12, [r7, #12]
 800603e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800604a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800604e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800605a:	e043      	b.n	80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	ee07 3a90 	vmov	s15, r3
 8006062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006066:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80061a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800606a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606e:	4b48      	ldr	r3, [pc, #288]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006082:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800608a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800609a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800609e:	e021      	b.n	80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80061a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80060ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b2:	4b37      	ldr	r3, [pc, #220]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ba:	ee07 3a90 	vmov	s15, r3
 80060be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80060e4:	4b2a      	ldr	r3, [pc, #168]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e8:	0a5b      	lsrs	r3, r3, #9
 80060ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ee:	ee07 3a90 	vmov	s15, r3
 80060f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800610a:	ee17 2a90 	vmov	r2, s15
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006112:	4b1f      	ldr	r3, [pc, #124]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	0c1b      	lsrs	r3, r3, #16
 8006118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800611c:	ee07 3a90 	vmov	s15, r3
 8006120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006124:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006128:	ee37 7a87 	vadd.f32	s14, s15, s14
 800612c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006138:	ee17 2a90 	vmov	r2, s15
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006140:	4b13      	ldr	r3, [pc, #76]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006144:	0e1b      	lsrs	r3, r3, #24
 8006146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006152:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006156:	ee37 7a87 	vadd.f32	s14, s15, s14
 800615a:	edd7 6a07 	vldr	s13, [r7, #28]
 800615e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006166:	ee17 2a90 	vmov	r2, s15
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800616e:	e008      	b.n	8006182 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	609a      	str	r2, [r3, #8]
}
 8006182:	bf00      	nop
 8006184:	3724      	adds	r7, #36	; 0x24
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	58024400 	.word	0x58024400
 8006194:	03d09000 	.word	0x03d09000
 8006198:	46000000 	.word	0x46000000
 800619c:	4c742400 	.word	0x4c742400
 80061a0:	4a742400 	.word	0x4a742400
 80061a4:	4af42400 	.word	0x4af42400

080061a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061b6:	4b53      	ldr	r3, [pc, #332]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80061b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d101      	bne.n	80061c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e099      	b.n	80062fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80061c6:	4b4f      	ldr	r3, [pc, #316]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a4e      	ldr	r2, [pc, #312]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80061cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061d2:	f7fa fee9 	bl	8000fa8 <HAL_GetTick>
 80061d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061d8:	e008      	b.n	80061ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80061da:	f7fa fee5 	bl	8000fa8 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d901      	bls.n	80061ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e086      	b.n	80062fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061ec:	4b45      	ldr	r3, [pc, #276]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1f0      	bne.n	80061da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80061f8:	4b42      	ldr	r3, [pc, #264]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80061fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	031b      	lsls	r3, r3, #12
 8006206:	493f      	ldr	r1, [pc, #252]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 8006208:	4313      	orrs	r3, r2
 800620a:	628b      	str	r3, [r1, #40]	; 0x28
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	3b01      	subs	r3, #1
 8006212:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	3b01      	subs	r3, #1
 800621c:	025b      	lsls	r3, r3, #9
 800621e:	b29b      	uxth	r3, r3
 8006220:	431a      	orrs	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	3b01      	subs	r3, #1
 8006228:	041b      	lsls	r3, r3, #16
 800622a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	3b01      	subs	r3, #1
 8006236:	061b      	lsls	r3, r3, #24
 8006238:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800623c:	4931      	ldr	r1, [pc, #196]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 800623e:	4313      	orrs	r3, r2
 8006240:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006242:	4b30      	ldr	r3, [pc, #192]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 8006244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006246:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	492d      	ldr	r1, [pc, #180]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 8006250:	4313      	orrs	r3, r2
 8006252:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006254:	4b2b      	ldr	r3, [pc, #172]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 8006256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006258:	f023 0220 	bic.w	r2, r3, #32
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	4928      	ldr	r1, [pc, #160]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 8006262:	4313      	orrs	r3, r2
 8006264:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006266:	4b27      	ldr	r3, [pc, #156]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 8006268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626a:	4a26      	ldr	r2, [pc, #152]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 800626c:	f023 0310 	bic.w	r3, r3, #16
 8006270:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006272:	4b24      	ldr	r3, [pc, #144]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 8006274:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006276:	4b24      	ldr	r3, [pc, #144]	; (8006308 <RCCEx_PLL2_Config+0x160>)
 8006278:	4013      	ands	r3, r2
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	69d2      	ldr	r2, [r2, #28]
 800627e:	00d2      	lsls	r2, r2, #3
 8006280:	4920      	ldr	r1, [pc, #128]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 8006282:	4313      	orrs	r3, r2
 8006284:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006286:	4b1f      	ldr	r3, [pc, #124]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 8006288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628a:	4a1e      	ldr	r2, [pc, #120]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 800628c:	f043 0310 	orr.w	r3, r3, #16
 8006290:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d106      	bne.n	80062a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006298:	4b1a      	ldr	r3, [pc, #104]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	4a19      	ldr	r2, [pc, #100]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 800629e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062a4:	e00f      	b.n	80062c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d106      	bne.n	80062ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80062ac:	4b15      	ldr	r3, [pc, #84]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80062ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b0:	4a14      	ldr	r2, [pc, #80]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80062b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062b8:	e005      	b.n	80062c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80062ba:	4b12      	ldr	r3, [pc, #72]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80062bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062be:	4a11      	ldr	r2, [pc, #68]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80062c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80062c6:	4b0f      	ldr	r3, [pc, #60]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a0e      	ldr	r2, [pc, #56]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80062cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062d2:	f7fa fe69 	bl	8000fa8 <HAL_GetTick>
 80062d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062d8:	e008      	b.n	80062ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80062da:	f7fa fe65 	bl	8000fa8 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d901      	bls.n	80062ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e006      	b.n	80062fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062ec:	4b05      	ldr	r3, [pc, #20]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0f0      	beq.n	80062da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	58024400 	.word	0x58024400
 8006308:	ffff0007 	.word	0xffff0007

0800630c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800631a:	4b53      	ldr	r3, [pc, #332]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 800631c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631e:	f003 0303 	and.w	r3, r3, #3
 8006322:	2b03      	cmp	r3, #3
 8006324:	d101      	bne.n	800632a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e099      	b.n	800645e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800632a:	4b4f      	ldr	r3, [pc, #316]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a4e      	ldr	r2, [pc, #312]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 8006330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006336:	f7fa fe37 	bl	8000fa8 <HAL_GetTick>
 800633a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800633c:	e008      	b.n	8006350 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800633e:	f7fa fe33 	bl	8000fa8 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e086      	b.n	800645e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006350:	4b45      	ldr	r3, [pc, #276]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1f0      	bne.n	800633e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800635c:	4b42      	ldr	r3, [pc, #264]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 800635e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006360:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	051b      	lsls	r3, r3, #20
 800636a:	493f      	ldr	r1, [pc, #252]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 800636c:	4313      	orrs	r3, r2
 800636e:	628b      	str	r3, [r1, #40]	; 0x28
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	3b01      	subs	r3, #1
 8006376:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	3b01      	subs	r3, #1
 8006380:	025b      	lsls	r3, r3, #9
 8006382:	b29b      	uxth	r3, r3
 8006384:	431a      	orrs	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	3b01      	subs	r3, #1
 800638c:	041b      	lsls	r3, r3, #16
 800638e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	3b01      	subs	r3, #1
 800639a:	061b      	lsls	r3, r3, #24
 800639c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063a0:	4931      	ldr	r1, [pc, #196]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80063a6:	4b30      	ldr	r3, [pc, #192]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	492d      	ldr	r1, [pc, #180]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80063b8:	4b2b      	ldr	r3, [pc, #172]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	4928      	ldr	r1, [pc, #160]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80063ca:	4b27      	ldr	r3, [pc, #156]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ce:	4a26      	ldr	r2, [pc, #152]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80063d6:	4b24      	ldr	r3, [pc, #144]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063da:	4b24      	ldr	r3, [pc, #144]	; (800646c <RCCEx_PLL3_Config+0x160>)
 80063dc:	4013      	ands	r3, r2
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	69d2      	ldr	r2, [r2, #28]
 80063e2:	00d2      	lsls	r2, r2, #3
 80063e4:	4920      	ldr	r1, [pc, #128]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80063ea:	4b1f      	ldr	r3, [pc, #124]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	4a1e      	ldr	r2, [pc, #120]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d106      	bne.n	800640a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80063fc:	4b1a      	ldr	r3, [pc, #104]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	4a19      	ldr	r2, [pc, #100]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 8006402:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006406:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006408:	e00f      	b.n	800642a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d106      	bne.n	800641e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006410:	4b15      	ldr	r3, [pc, #84]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	4a14      	ldr	r2, [pc, #80]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 8006416:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800641a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800641c:	e005      	b.n	800642a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800641e:	4b12      	ldr	r3, [pc, #72]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 8006420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006422:	4a11      	ldr	r2, [pc, #68]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 8006424:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006428:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800642a:	4b0f      	ldr	r3, [pc, #60]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a0e      	ldr	r2, [pc, #56]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 8006430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006436:	f7fa fdb7 	bl	8000fa8 <HAL_GetTick>
 800643a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800643c:	e008      	b.n	8006450 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800643e:	f7fa fdb3 	bl	8000fa8 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d901      	bls.n	8006450 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e006      	b.n	800645e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006450:	4b05      	ldr	r3, [pc, #20]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0f0      	beq.n	800643e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	58024400 	.word	0x58024400
 800646c:	ffff0007 	.word	0xffff0007

08006470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e049      	b.n	8006516 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d106      	bne.n	800649c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7fa fbd4 	bl	8000c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	3304      	adds	r3, #4
 80064ac:	4619      	mov	r1, r3
 80064ae:	4610      	mov	r0, r2
 80064b0:	f000 fb88 	bl	8006bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b01      	cmp	r3, #1
 8006532:	d001      	beq.n	8006538 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e04c      	b.n	80065d2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a26      	ldr	r2, [pc, #152]	; (80065e0 <HAL_TIM_Base_Start+0xc0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d022      	beq.n	8006590 <HAL_TIM_Base_Start+0x70>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006552:	d01d      	beq.n	8006590 <HAL_TIM_Base_Start+0x70>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a22      	ldr	r2, [pc, #136]	; (80065e4 <HAL_TIM_Base_Start+0xc4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d018      	beq.n	8006590 <HAL_TIM_Base_Start+0x70>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a21      	ldr	r2, [pc, #132]	; (80065e8 <HAL_TIM_Base_Start+0xc8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d013      	beq.n	8006590 <HAL_TIM_Base_Start+0x70>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a1f      	ldr	r2, [pc, #124]	; (80065ec <HAL_TIM_Base_Start+0xcc>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00e      	beq.n	8006590 <HAL_TIM_Base_Start+0x70>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a1e      	ldr	r2, [pc, #120]	; (80065f0 <HAL_TIM_Base_Start+0xd0>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d009      	beq.n	8006590 <HAL_TIM_Base_Start+0x70>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a1c      	ldr	r2, [pc, #112]	; (80065f4 <HAL_TIM_Base_Start+0xd4>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d004      	beq.n	8006590 <HAL_TIM_Base_Start+0x70>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a1b      	ldr	r2, [pc, #108]	; (80065f8 <HAL_TIM_Base_Start+0xd8>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d115      	bne.n	80065bc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	4b19      	ldr	r3, [pc, #100]	; (80065fc <HAL_TIM_Base_Start+0xdc>)
 8006598:	4013      	ands	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2b06      	cmp	r3, #6
 80065a0:	d015      	beq.n	80065ce <HAL_TIM_Base_Start+0xae>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065a8:	d011      	beq.n	80065ce <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f042 0201 	orr.w	r2, r2, #1
 80065b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ba:	e008      	b.n	80065ce <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0201 	orr.w	r2, r2, #1
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	e000      	b.n	80065d0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	40010000 	.word	0x40010000
 80065e4:	40000400 	.word	0x40000400
 80065e8:	40000800 	.word	0x40000800
 80065ec:	40000c00 	.word	0x40000c00
 80065f0:	40010400 	.word	0x40010400
 80065f4:	40001800 	.word	0x40001800
 80065f8:	40014000 	.word	0x40014000
 80065fc:	00010007 	.word	0x00010007

08006600 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e049      	b.n	80066a6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d106      	bne.n	800662c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f841 	bl	80066ae <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2202      	movs	r2, #2
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3304      	adds	r3, #4
 800663c:	4619      	mov	r1, r3
 800663e:	4610      	mov	r0, r2
 8006640:	f000 fac0 	bl	8006bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
	...

080066c4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d109      	bne.n	80066e8 <HAL_TIM_OC_Start+0x24>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b01      	cmp	r3, #1
 80066de:	bf14      	ite	ne
 80066e0:	2301      	movne	r3, #1
 80066e2:	2300      	moveq	r3, #0
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	e03c      	b.n	8006762 <HAL_TIM_OC_Start+0x9e>
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d109      	bne.n	8006702 <HAL_TIM_OC_Start+0x3e>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	bf14      	ite	ne
 80066fa:	2301      	movne	r3, #1
 80066fc:	2300      	moveq	r3, #0
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	e02f      	b.n	8006762 <HAL_TIM_OC_Start+0x9e>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b08      	cmp	r3, #8
 8006706:	d109      	bne.n	800671c <HAL_TIM_OC_Start+0x58>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b01      	cmp	r3, #1
 8006712:	bf14      	ite	ne
 8006714:	2301      	movne	r3, #1
 8006716:	2300      	moveq	r3, #0
 8006718:	b2db      	uxtb	r3, r3
 800671a:	e022      	b.n	8006762 <HAL_TIM_OC_Start+0x9e>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2b0c      	cmp	r3, #12
 8006720:	d109      	bne.n	8006736 <HAL_TIM_OC_Start+0x72>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b01      	cmp	r3, #1
 800672c:	bf14      	ite	ne
 800672e:	2301      	movne	r3, #1
 8006730:	2300      	moveq	r3, #0
 8006732:	b2db      	uxtb	r3, r3
 8006734:	e015      	b.n	8006762 <HAL_TIM_OC_Start+0x9e>
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b10      	cmp	r3, #16
 800673a:	d109      	bne.n	8006750 <HAL_TIM_OC_Start+0x8c>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b01      	cmp	r3, #1
 8006746:	bf14      	ite	ne
 8006748:	2301      	movne	r3, #1
 800674a:	2300      	moveq	r3, #0
 800674c:	b2db      	uxtb	r3, r3
 800674e:	e008      	b.n	8006762 <HAL_TIM_OC_Start+0x9e>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b01      	cmp	r3, #1
 800675a:	bf14      	ite	ne
 800675c:	2301      	movne	r3, #1
 800675e:	2300      	moveq	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e0a1      	b.n	80068ae <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d104      	bne.n	800677a <HAL_TIM_OC_Start+0xb6>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006778:	e023      	b.n	80067c2 <HAL_TIM_OC_Start+0xfe>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b04      	cmp	r3, #4
 800677e:	d104      	bne.n	800678a <HAL_TIM_OC_Start+0xc6>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006788:	e01b      	b.n	80067c2 <HAL_TIM_OC_Start+0xfe>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b08      	cmp	r3, #8
 800678e:	d104      	bne.n	800679a <HAL_TIM_OC_Start+0xd6>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006798:	e013      	b.n	80067c2 <HAL_TIM_OC_Start+0xfe>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b0c      	cmp	r3, #12
 800679e:	d104      	bne.n	80067aa <HAL_TIM_OC_Start+0xe6>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067a8:	e00b      	b.n	80067c2 <HAL_TIM_OC_Start+0xfe>
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b10      	cmp	r3, #16
 80067ae:	d104      	bne.n	80067ba <HAL_TIM_OC_Start+0xf6>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067b8:	e003      	b.n	80067c2 <HAL_TIM_OC_Start+0xfe>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2202      	movs	r2, #2
 80067be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2201      	movs	r2, #1
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fe14 	bl	80073f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a38      	ldr	r2, [pc, #224]	; (80068b8 <HAL_TIM_OC_Start+0x1f4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d013      	beq.n	8006802 <HAL_TIM_OC_Start+0x13e>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a37      	ldr	r2, [pc, #220]	; (80068bc <HAL_TIM_OC_Start+0x1f8>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00e      	beq.n	8006802 <HAL_TIM_OC_Start+0x13e>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a35      	ldr	r2, [pc, #212]	; (80068c0 <HAL_TIM_OC_Start+0x1fc>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d009      	beq.n	8006802 <HAL_TIM_OC_Start+0x13e>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a34      	ldr	r2, [pc, #208]	; (80068c4 <HAL_TIM_OC_Start+0x200>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d004      	beq.n	8006802 <HAL_TIM_OC_Start+0x13e>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a32      	ldr	r2, [pc, #200]	; (80068c8 <HAL_TIM_OC_Start+0x204>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d101      	bne.n	8006806 <HAL_TIM_OC_Start+0x142>
 8006802:	2301      	movs	r3, #1
 8006804:	e000      	b.n	8006808 <HAL_TIM_OC_Start+0x144>
 8006806:	2300      	movs	r3, #0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d007      	beq.n	800681c <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800681a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a25      	ldr	r2, [pc, #148]	; (80068b8 <HAL_TIM_OC_Start+0x1f4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d022      	beq.n	800686c <HAL_TIM_OC_Start+0x1a8>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800682e:	d01d      	beq.n	800686c <HAL_TIM_OC_Start+0x1a8>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a25      	ldr	r2, [pc, #148]	; (80068cc <HAL_TIM_OC_Start+0x208>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d018      	beq.n	800686c <HAL_TIM_OC_Start+0x1a8>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a24      	ldr	r2, [pc, #144]	; (80068d0 <HAL_TIM_OC_Start+0x20c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d013      	beq.n	800686c <HAL_TIM_OC_Start+0x1a8>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a22      	ldr	r2, [pc, #136]	; (80068d4 <HAL_TIM_OC_Start+0x210>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d00e      	beq.n	800686c <HAL_TIM_OC_Start+0x1a8>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a1a      	ldr	r2, [pc, #104]	; (80068bc <HAL_TIM_OC_Start+0x1f8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d009      	beq.n	800686c <HAL_TIM_OC_Start+0x1a8>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a1e      	ldr	r2, [pc, #120]	; (80068d8 <HAL_TIM_OC_Start+0x214>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d004      	beq.n	800686c <HAL_TIM_OC_Start+0x1a8>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a16      	ldr	r2, [pc, #88]	; (80068c0 <HAL_TIM_OC_Start+0x1fc>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d115      	bne.n	8006898 <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689a      	ldr	r2, [r3, #8]
 8006872:	4b1a      	ldr	r3, [pc, #104]	; (80068dc <HAL_TIM_OC_Start+0x218>)
 8006874:	4013      	ands	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b06      	cmp	r3, #6
 800687c:	d015      	beq.n	80068aa <HAL_TIM_OC_Start+0x1e6>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006884:	d011      	beq.n	80068aa <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f042 0201 	orr.w	r2, r2, #1
 8006894:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006896:	e008      	b.n	80068aa <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0201 	orr.w	r2, r2, #1
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	e000      	b.n	80068ac <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	40010000 	.word	0x40010000
 80068bc:	40010400 	.word	0x40010400
 80068c0:	40014000 	.word	0x40014000
 80068c4:	40014400 	.word	0x40014400
 80068c8:	40014800 	.word	0x40014800
 80068cc:	40000400 	.word	0x40000400
 80068d0:	40000800 	.word	0x40000800
 80068d4:	40000c00 	.word	0x40000c00
 80068d8:	40001800 	.word	0x40001800
 80068dc:	00010007 	.word	0x00010007

080068e0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d101      	bne.n	80068fe <HAL_TIM_OC_ConfigChannel+0x1e>
 80068fa:	2302      	movs	r3, #2
 80068fc:	e066      	b.n	80069cc <HAL_TIM_OC_ConfigChannel+0xec>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b14      	cmp	r3, #20
 800690a:	d857      	bhi.n	80069bc <HAL_TIM_OC_ConfigChannel+0xdc>
 800690c:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <HAL_TIM_OC_ConfigChannel+0x34>)
 800690e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006912:	bf00      	nop
 8006914:	08006969 	.word	0x08006969
 8006918:	080069bd 	.word	0x080069bd
 800691c:	080069bd 	.word	0x080069bd
 8006920:	080069bd 	.word	0x080069bd
 8006924:	08006977 	.word	0x08006977
 8006928:	080069bd 	.word	0x080069bd
 800692c:	080069bd 	.word	0x080069bd
 8006930:	080069bd 	.word	0x080069bd
 8006934:	08006985 	.word	0x08006985
 8006938:	080069bd 	.word	0x080069bd
 800693c:	080069bd 	.word	0x080069bd
 8006940:	080069bd 	.word	0x080069bd
 8006944:	08006993 	.word	0x08006993
 8006948:	080069bd 	.word	0x080069bd
 800694c:	080069bd 	.word	0x080069bd
 8006950:	080069bd 	.word	0x080069bd
 8006954:	080069a1 	.word	0x080069a1
 8006958:	080069bd 	.word	0x080069bd
 800695c:	080069bd 	.word	0x080069bd
 8006960:	080069bd 	.word	0x080069bd
 8006964:	080069af 	.word	0x080069af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	4618      	mov	r0, r3
 8006970:	f000 f9ce 	bl	8006d10 <TIM_OC1_SetConfig>
      break;
 8006974:	e025      	b.n	80069c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68b9      	ldr	r1, [r7, #8]
 800697c:	4618      	mov	r0, r3
 800697e:	f000 fa57 	bl	8006e30 <TIM_OC2_SetConfig>
      break;
 8006982:	e01e      	b.n	80069c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68b9      	ldr	r1, [r7, #8]
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fada 	bl	8006f44 <TIM_OC3_SetConfig>
      break;
 8006990:	e017      	b.n	80069c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68b9      	ldr	r1, [r7, #8]
 8006998:	4618      	mov	r0, r3
 800699a:	f000 fb5b 	bl	8007054 <TIM_OC4_SetConfig>
      break;
 800699e:	e010      	b.n	80069c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68b9      	ldr	r1, [r7, #8]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fbbe 	bl	8007128 <TIM_OC5_SetConfig>
      break;
 80069ac:	e009      	b.n	80069c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68b9      	ldr	r1, [r7, #8]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 fc1b 	bl	80071f0 <TIM_OC6_SetConfig>
      break;
 80069ba:	e002      	b.n	80069c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	75fb      	strb	r3, [r7, #23]
      break;
 80069c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d101      	bne.n	80069f0 <HAL_TIM_ConfigClockSource+0x1c>
 80069ec:	2302      	movs	r3, #2
 80069ee:	e0dc      	b.n	8006baa <HAL_TIM_ConfigClockSource+0x1d6>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	4b6a      	ldr	r3, [pc, #424]	; (8006bb4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a64      	ldr	r2, [pc, #400]	; (8006bb8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	f000 80a9 	beq.w	8006b7e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a2c:	4a62      	ldr	r2, [pc, #392]	; (8006bb8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	f200 80ae 	bhi.w	8006b90 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a34:	4a61      	ldr	r2, [pc, #388]	; (8006bbc <HAL_TIM_ConfigClockSource+0x1e8>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	f000 80a1 	beq.w	8006b7e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a3c:	4a5f      	ldr	r2, [pc, #380]	; (8006bbc <HAL_TIM_ConfigClockSource+0x1e8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	f200 80a6 	bhi.w	8006b90 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a44:	4a5e      	ldr	r2, [pc, #376]	; (8006bc0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	f000 8099 	beq.w	8006b7e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a4c:	4a5c      	ldr	r2, [pc, #368]	; (8006bc0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	f200 809e 	bhi.w	8006b90 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006a58:	f000 8091 	beq.w	8006b7e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a5c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006a60:	f200 8096 	bhi.w	8006b90 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a68:	f000 8089 	beq.w	8006b7e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a70:	f200 808e 	bhi.w	8006b90 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a78:	d03e      	beq.n	8006af8 <HAL_TIM_ConfigClockSource+0x124>
 8006a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a7e:	f200 8087 	bhi.w	8006b90 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a86:	f000 8086 	beq.w	8006b96 <HAL_TIM_ConfigClockSource+0x1c2>
 8006a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a8e:	d87f      	bhi.n	8006b90 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a90:	2b70      	cmp	r3, #112	; 0x70
 8006a92:	d01a      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0xf6>
 8006a94:	2b70      	cmp	r3, #112	; 0x70
 8006a96:	d87b      	bhi.n	8006b90 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a98:	2b60      	cmp	r3, #96	; 0x60
 8006a9a:	d050      	beq.n	8006b3e <HAL_TIM_ConfigClockSource+0x16a>
 8006a9c:	2b60      	cmp	r3, #96	; 0x60
 8006a9e:	d877      	bhi.n	8006b90 <HAL_TIM_ConfigClockSource+0x1bc>
 8006aa0:	2b50      	cmp	r3, #80	; 0x50
 8006aa2:	d03c      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0x14a>
 8006aa4:	2b50      	cmp	r3, #80	; 0x50
 8006aa6:	d873      	bhi.n	8006b90 <HAL_TIM_ConfigClockSource+0x1bc>
 8006aa8:	2b40      	cmp	r3, #64	; 0x40
 8006aaa:	d058      	beq.n	8006b5e <HAL_TIM_ConfigClockSource+0x18a>
 8006aac:	2b40      	cmp	r3, #64	; 0x40
 8006aae:	d86f      	bhi.n	8006b90 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ab0:	2b30      	cmp	r3, #48	; 0x30
 8006ab2:	d064      	beq.n	8006b7e <HAL_TIM_ConfigClockSource+0x1aa>
 8006ab4:	2b30      	cmp	r3, #48	; 0x30
 8006ab6:	d86b      	bhi.n	8006b90 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ab8:	2b20      	cmp	r3, #32
 8006aba:	d060      	beq.n	8006b7e <HAL_TIM_ConfigClockSource+0x1aa>
 8006abc:	2b20      	cmp	r3, #32
 8006abe:	d867      	bhi.n	8006b90 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d05c      	beq.n	8006b7e <HAL_TIM_ConfigClockSource+0x1aa>
 8006ac4:	2b10      	cmp	r3, #16
 8006ac6:	d05a      	beq.n	8006b7e <HAL_TIM_ConfigClockSource+0x1aa>
 8006ac8:	e062      	b.n	8006b90 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ada:	f000 fc6d 	bl	80073b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006aec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	609a      	str	r2, [r3, #8]
      break;
 8006af6:	e04f      	b.n	8006b98 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b08:	f000 fc56 	bl	80073b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689a      	ldr	r2, [r3, #8]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b1a:	609a      	str	r2, [r3, #8]
      break;
 8006b1c:	e03c      	b.n	8006b98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f000 fbc6 	bl	80072bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2150      	movs	r1, #80	; 0x50
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 fc20 	bl	800737c <TIM_ITRx_SetConfig>
      break;
 8006b3c:	e02c      	b.n	8006b98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	f000 fbe5 	bl	800731a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2160      	movs	r1, #96	; 0x60
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fc10 	bl	800737c <TIM_ITRx_SetConfig>
      break;
 8006b5c:	e01c      	b.n	8006b98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	f000 fba6 	bl	80072bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2140      	movs	r1, #64	; 0x40
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 fc00 	bl	800737c <TIM_ITRx_SetConfig>
      break;
 8006b7c:	e00c      	b.n	8006b98 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4619      	mov	r1, r3
 8006b88:	4610      	mov	r0, r2
 8006b8a:	f000 fbf7 	bl	800737c <TIM_ITRx_SetConfig>
      break;
 8006b8e:	e003      	b.n	8006b98 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	73fb      	strb	r3, [r7, #15]
      break;
 8006b94:	e000      	b.n	8006b98 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006b96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	ffceff88 	.word	0xffceff88
 8006bb8:	00100040 	.word	0x00100040
 8006bbc:	00100030 	.word	0x00100030
 8006bc0:	00100020 	.word	0x00100020

08006bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a46      	ldr	r2, [pc, #280]	; (8006cf0 <TIM_Base_SetConfig+0x12c>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d013      	beq.n	8006c04 <TIM_Base_SetConfig+0x40>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be2:	d00f      	beq.n	8006c04 <TIM_Base_SetConfig+0x40>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a43      	ldr	r2, [pc, #268]	; (8006cf4 <TIM_Base_SetConfig+0x130>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d00b      	beq.n	8006c04 <TIM_Base_SetConfig+0x40>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a42      	ldr	r2, [pc, #264]	; (8006cf8 <TIM_Base_SetConfig+0x134>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d007      	beq.n	8006c04 <TIM_Base_SetConfig+0x40>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a41      	ldr	r2, [pc, #260]	; (8006cfc <TIM_Base_SetConfig+0x138>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d003      	beq.n	8006c04 <TIM_Base_SetConfig+0x40>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a40      	ldr	r2, [pc, #256]	; (8006d00 <TIM_Base_SetConfig+0x13c>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d108      	bne.n	8006c16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a35      	ldr	r2, [pc, #212]	; (8006cf0 <TIM_Base_SetConfig+0x12c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d01f      	beq.n	8006c5e <TIM_Base_SetConfig+0x9a>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c24:	d01b      	beq.n	8006c5e <TIM_Base_SetConfig+0x9a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a32      	ldr	r2, [pc, #200]	; (8006cf4 <TIM_Base_SetConfig+0x130>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d017      	beq.n	8006c5e <TIM_Base_SetConfig+0x9a>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a31      	ldr	r2, [pc, #196]	; (8006cf8 <TIM_Base_SetConfig+0x134>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d013      	beq.n	8006c5e <TIM_Base_SetConfig+0x9a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a30      	ldr	r2, [pc, #192]	; (8006cfc <TIM_Base_SetConfig+0x138>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00f      	beq.n	8006c5e <TIM_Base_SetConfig+0x9a>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a2f      	ldr	r2, [pc, #188]	; (8006d00 <TIM_Base_SetConfig+0x13c>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00b      	beq.n	8006c5e <TIM_Base_SetConfig+0x9a>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a2e      	ldr	r2, [pc, #184]	; (8006d04 <TIM_Base_SetConfig+0x140>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d007      	beq.n	8006c5e <TIM_Base_SetConfig+0x9a>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a2d      	ldr	r2, [pc, #180]	; (8006d08 <TIM_Base_SetConfig+0x144>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d003      	beq.n	8006c5e <TIM_Base_SetConfig+0x9a>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a2c      	ldr	r2, [pc, #176]	; (8006d0c <TIM_Base_SetConfig+0x148>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d108      	bne.n	8006c70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a16      	ldr	r2, [pc, #88]	; (8006cf0 <TIM_Base_SetConfig+0x12c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d00f      	beq.n	8006cbc <TIM_Base_SetConfig+0xf8>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a18      	ldr	r2, [pc, #96]	; (8006d00 <TIM_Base_SetConfig+0x13c>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00b      	beq.n	8006cbc <TIM_Base_SetConfig+0xf8>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a17      	ldr	r2, [pc, #92]	; (8006d04 <TIM_Base_SetConfig+0x140>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d007      	beq.n	8006cbc <TIM_Base_SetConfig+0xf8>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a16      	ldr	r2, [pc, #88]	; (8006d08 <TIM_Base_SetConfig+0x144>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d003      	beq.n	8006cbc <TIM_Base_SetConfig+0xf8>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a15      	ldr	r2, [pc, #84]	; (8006d0c <TIM_Base_SetConfig+0x148>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d103      	bne.n	8006cc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	691a      	ldr	r2, [r3, #16]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d105      	bne.n	8006ce2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	f023 0201 	bic.w	r2, r3, #1
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	611a      	str	r2, [r3, #16]
  }
}
 8006ce2:	bf00      	nop
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	40010000 	.word	0x40010000
 8006cf4:	40000400 	.word	0x40000400
 8006cf8:	40000800 	.word	0x40000800
 8006cfc:	40000c00 	.word	0x40000c00
 8006d00:	40010400 	.word	0x40010400
 8006d04:	40014000 	.word	0x40014000
 8006d08:	40014400 	.word	0x40014400
 8006d0c:	40014800 	.word	0x40014800

08006d10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	f023 0201 	bic.w	r2, r3, #1
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4b37      	ldr	r3, [pc, #220]	; (8006e18 <TIM_OC1_SetConfig+0x108>)
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f023 0303 	bic.w	r3, r3, #3
 8006d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f023 0302 	bic.w	r3, r3, #2
 8006d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a2d      	ldr	r2, [pc, #180]	; (8006e1c <TIM_OC1_SetConfig+0x10c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00f      	beq.n	8006d8c <TIM_OC1_SetConfig+0x7c>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a2c      	ldr	r2, [pc, #176]	; (8006e20 <TIM_OC1_SetConfig+0x110>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d00b      	beq.n	8006d8c <TIM_OC1_SetConfig+0x7c>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a2b      	ldr	r2, [pc, #172]	; (8006e24 <TIM_OC1_SetConfig+0x114>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d007      	beq.n	8006d8c <TIM_OC1_SetConfig+0x7c>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a2a      	ldr	r2, [pc, #168]	; (8006e28 <TIM_OC1_SetConfig+0x118>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d003      	beq.n	8006d8c <TIM_OC1_SetConfig+0x7c>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a29      	ldr	r2, [pc, #164]	; (8006e2c <TIM_OC1_SetConfig+0x11c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d10c      	bne.n	8006da6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f023 0308 	bic.w	r3, r3, #8
 8006d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f023 0304 	bic.w	r3, r3, #4
 8006da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a1c      	ldr	r2, [pc, #112]	; (8006e1c <TIM_OC1_SetConfig+0x10c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d00f      	beq.n	8006dce <TIM_OC1_SetConfig+0xbe>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a1b      	ldr	r2, [pc, #108]	; (8006e20 <TIM_OC1_SetConfig+0x110>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d00b      	beq.n	8006dce <TIM_OC1_SetConfig+0xbe>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a1a      	ldr	r2, [pc, #104]	; (8006e24 <TIM_OC1_SetConfig+0x114>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d007      	beq.n	8006dce <TIM_OC1_SetConfig+0xbe>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a19      	ldr	r2, [pc, #100]	; (8006e28 <TIM_OC1_SetConfig+0x118>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d003      	beq.n	8006dce <TIM_OC1_SetConfig+0xbe>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a18      	ldr	r2, [pc, #96]	; (8006e2c <TIM_OC1_SetConfig+0x11c>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d111      	bne.n	8006df2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	621a      	str	r2, [r3, #32]
}
 8006e0c:	bf00      	nop
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	fffeff8f 	.word	0xfffeff8f
 8006e1c:	40010000 	.word	0x40010000
 8006e20:	40010400 	.word	0x40010400
 8006e24:	40014000 	.word	0x40014000
 8006e28:	40014400 	.word	0x40014400
 8006e2c:	40014800 	.word	0x40014800

08006e30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	f023 0210 	bic.w	r2, r3, #16
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	4b34      	ldr	r3, [pc, #208]	; (8006f2c <TIM_OC2_SetConfig+0xfc>)
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	021b      	lsls	r3, r3, #8
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f023 0320 	bic.w	r3, r3, #32
 8006e7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	011b      	lsls	r3, r3, #4
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a29      	ldr	r2, [pc, #164]	; (8006f30 <TIM_OC2_SetConfig+0x100>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d003      	beq.n	8006e98 <TIM_OC2_SetConfig+0x68>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a28      	ldr	r2, [pc, #160]	; (8006f34 <TIM_OC2_SetConfig+0x104>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d10d      	bne.n	8006eb4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	011b      	lsls	r3, r3, #4
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a1e      	ldr	r2, [pc, #120]	; (8006f30 <TIM_OC2_SetConfig+0x100>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d00f      	beq.n	8006edc <TIM_OC2_SetConfig+0xac>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a1d      	ldr	r2, [pc, #116]	; (8006f34 <TIM_OC2_SetConfig+0x104>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d00b      	beq.n	8006edc <TIM_OC2_SetConfig+0xac>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a1c      	ldr	r2, [pc, #112]	; (8006f38 <TIM_OC2_SetConfig+0x108>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d007      	beq.n	8006edc <TIM_OC2_SetConfig+0xac>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a1b      	ldr	r2, [pc, #108]	; (8006f3c <TIM_OC2_SetConfig+0x10c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d003      	beq.n	8006edc <TIM_OC2_SetConfig+0xac>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a1a      	ldr	r2, [pc, #104]	; (8006f40 <TIM_OC2_SetConfig+0x110>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d113      	bne.n	8006f04 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006eea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	621a      	str	r2, [r3, #32]
}
 8006f1e:	bf00      	nop
 8006f20:	371c      	adds	r7, #28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	feff8fff 	.word	0xfeff8fff
 8006f30:	40010000 	.word	0x40010000
 8006f34:	40010400 	.word	0x40010400
 8006f38:	40014000 	.word	0x40014000
 8006f3c:	40014400 	.word	0x40014400
 8006f40:	40014800 	.word	0x40014800

08006f44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	4b33      	ldr	r3, [pc, #204]	; (800703c <TIM_OC3_SetConfig+0xf8>)
 8006f70:	4013      	ands	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 0303 	bic.w	r3, r3, #3
 8006f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	021b      	lsls	r3, r3, #8
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a28      	ldr	r2, [pc, #160]	; (8007040 <TIM_OC3_SetConfig+0xfc>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d003      	beq.n	8006faa <TIM_OC3_SetConfig+0x66>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a27      	ldr	r2, [pc, #156]	; (8007044 <TIM_OC3_SetConfig+0x100>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d10d      	bne.n	8006fc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	021b      	lsls	r3, r3, #8
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a1d      	ldr	r2, [pc, #116]	; (8007040 <TIM_OC3_SetConfig+0xfc>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00f      	beq.n	8006fee <TIM_OC3_SetConfig+0xaa>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a1c      	ldr	r2, [pc, #112]	; (8007044 <TIM_OC3_SetConfig+0x100>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d00b      	beq.n	8006fee <TIM_OC3_SetConfig+0xaa>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a1b      	ldr	r2, [pc, #108]	; (8007048 <TIM_OC3_SetConfig+0x104>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d007      	beq.n	8006fee <TIM_OC3_SetConfig+0xaa>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a1a      	ldr	r2, [pc, #104]	; (800704c <TIM_OC3_SetConfig+0x108>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d003      	beq.n	8006fee <TIM_OC3_SetConfig+0xaa>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a19      	ldr	r2, [pc, #100]	; (8007050 <TIM_OC3_SetConfig+0x10c>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d113      	bne.n	8007016 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	011b      	lsls	r3, r3, #4
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	4313      	orrs	r3, r2
 8007008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	011b      	lsls	r3, r3, #4
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	4313      	orrs	r3, r2
 8007014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	621a      	str	r2, [r3, #32]
}
 8007030:	bf00      	nop
 8007032:	371c      	adds	r7, #28
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	fffeff8f 	.word	0xfffeff8f
 8007040:	40010000 	.word	0x40010000
 8007044:	40010400 	.word	0x40010400
 8007048:	40014000 	.word	0x40014000
 800704c:	40014400 	.word	0x40014400
 8007050:	40014800 	.word	0x40014800

08007054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4b24      	ldr	r3, [pc, #144]	; (8007110 <TIM_OC4_SetConfig+0xbc>)
 8007080:	4013      	ands	r3, r2
 8007082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800708a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	021b      	lsls	r3, r3, #8
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	4313      	orrs	r3, r2
 8007096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800709e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	031b      	lsls	r3, r3, #12
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a19      	ldr	r2, [pc, #100]	; (8007114 <TIM_OC4_SetConfig+0xc0>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d00f      	beq.n	80070d4 <TIM_OC4_SetConfig+0x80>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a18      	ldr	r2, [pc, #96]	; (8007118 <TIM_OC4_SetConfig+0xc4>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d00b      	beq.n	80070d4 <TIM_OC4_SetConfig+0x80>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a17      	ldr	r2, [pc, #92]	; (800711c <TIM_OC4_SetConfig+0xc8>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d007      	beq.n	80070d4 <TIM_OC4_SetConfig+0x80>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a16      	ldr	r2, [pc, #88]	; (8007120 <TIM_OC4_SetConfig+0xcc>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d003      	beq.n	80070d4 <TIM_OC4_SetConfig+0x80>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a15      	ldr	r2, [pc, #84]	; (8007124 <TIM_OC4_SetConfig+0xd0>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d109      	bne.n	80070e8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	019b      	lsls	r3, r3, #6
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	621a      	str	r2, [r3, #32]
}
 8007102:	bf00      	nop
 8007104:	371c      	adds	r7, #28
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	feff8fff 	.word	0xfeff8fff
 8007114:	40010000 	.word	0x40010000
 8007118:	40010400 	.word	0x40010400
 800711c:	40014000 	.word	0x40014000
 8007120:	40014400 	.word	0x40014400
 8007124:	40014800 	.word	0x40014800

08007128 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	4b21      	ldr	r3, [pc, #132]	; (80071d8 <TIM_OC5_SetConfig+0xb0>)
 8007154:	4013      	ands	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	4313      	orrs	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007168:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	041b      	lsls	r3, r3, #16
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	4313      	orrs	r3, r2
 8007174:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a18      	ldr	r2, [pc, #96]	; (80071dc <TIM_OC5_SetConfig+0xb4>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d00f      	beq.n	800719e <TIM_OC5_SetConfig+0x76>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a17      	ldr	r2, [pc, #92]	; (80071e0 <TIM_OC5_SetConfig+0xb8>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d00b      	beq.n	800719e <TIM_OC5_SetConfig+0x76>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a16      	ldr	r2, [pc, #88]	; (80071e4 <TIM_OC5_SetConfig+0xbc>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d007      	beq.n	800719e <TIM_OC5_SetConfig+0x76>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a15      	ldr	r2, [pc, #84]	; (80071e8 <TIM_OC5_SetConfig+0xc0>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d003      	beq.n	800719e <TIM_OC5_SetConfig+0x76>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a14      	ldr	r2, [pc, #80]	; (80071ec <TIM_OC5_SetConfig+0xc4>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d109      	bne.n	80071b2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	021b      	lsls	r3, r3, #8
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	621a      	str	r2, [r3, #32]
}
 80071cc:	bf00      	nop
 80071ce:	371c      	adds	r7, #28
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	fffeff8f 	.word	0xfffeff8f
 80071dc:	40010000 	.word	0x40010000
 80071e0:	40010400 	.word	0x40010400
 80071e4:	40014000 	.word	0x40014000
 80071e8:	40014400 	.word	0x40014400
 80071ec:	40014800 	.word	0x40014800

080071f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	4b22      	ldr	r3, [pc, #136]	; (80072a4 <TIM_OC6_SetConfig+0xb4>)
 800721c:	4013      	ands	r3, r2
 800721e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	021b      	lsls	r3, r3, #8
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	4313      	orrs	r3, r2
 800722a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007232:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	051b      	lsls	r3, r3, #20
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	4313      	orrs	r3, r2
 800723e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a19      	ldr	r2, [pc, #100]	; (80072a8 <TIM_OC6_SetConfig+0xb8>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d00f      	beq.n	8007268 <TIM_OC6_SetConfig+0x78>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a18      	ldr	r2, [pc, #96]	; (80072ac <TIM_OC6_SetConfig+0xbc>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00b      	beq.n	8007268 <TIM_OC6_SetConfig+0x78>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a17      	ldr	r2, [pc, #92]	; (80072b0 <TIM_OC6_SetConfig+0xc0>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d007      	beq.n	8007268 <TIM_OC6_SetConfig+0x78>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a16      	ldr	r2, [pc, #88]	; (80072b4 <TIM_OC6_SetConfig+0xc4>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d003      	beq.n	8007268 <TIM_OC6_SetConfig+0x78>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a15      	ldr	r2, [pc, #84]	; (80072b8 <TIM_OC6_SetConfig+0xc8>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d109      	bne.n	800727c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800726e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	695b      	ldr	r3, [r3, #20]
 8007274:	029b      	lsls	r3, r3, #10
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	4313      	orrs	r3, r2
 800727a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	621a      	str	r2, [r3, #32]
}
 8007296:	bf00      	nop
 8007298:	371c      	adds	r7, #28
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	feff8fff 	.word	0xfeff8fff
 80072a8:	40010000 	.word	0x40010000
 80072ac:	40010400 	.word	0x40010400
 80072b0:	40014000 	.word	0x40014000
 80072b4:	40014400 	.word	0x40014400
 80072b8:	40014800 	.word	0x40014800

080072bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	f023 0201 	bic.w	r2, r3, #1
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	011b      	lsls	r3, r3, #4
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f023 030a 	bic.w	r3, r3, #10
 80072f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	4313      	orrs	r3, r2
 8007300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	621a      	str	r2, [r3, #32]
}
 800730e:	bf00      	nop
 8007310:	371c      	adds	r7, #28
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800731a:	b480      	push	{r7}
 800731c:	b087      	sub	sp, #28
 800731e:	af00      	add	r7, sp, #0
 8007320:	60f8      	str	r0, [r7, #12]
 8007322:	60b9      	str	r1, [r7, #8]
 8007324:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	f023 0210 	bic.w	r2, r3, #16
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007344:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	031b      	lsls	r3, r3, #12
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	4313      	orrs	r3, r2
 800734e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007356:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	011b      	lsls	r3, r3, #4
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	4313      	orrs	r3, r2
 8007360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	621a      	str	r2, [r3, #32]
}
 800736e:	bf00      	nop
 8007370:	371c      	adds	r7, #28
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
	...

0800737c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	4b09      	ldr	r3, [pc, #36]	; (80073b4 <TIM_ITRx_SetConfig+0x38>)
 8007390:	4013      	ands	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007394:	683a      	ldr	r2, [r7, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	4313      	orrs	r3, r2
 800739a:	f043 0307 	orr.w	r3, r3, #7
 800739e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	609a      	str	r2, [r3, #8]
}
 80073a6:	bf00      	nop
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	ffcfff8f 	.word	0xffcfff8f

080073b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
 80073c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	021a      	lsls	r2, r3, #8
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	431a      	orrs	r2, r3
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	4313      	orrs	r3, r2
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	609a      	str	r2, [r3, #8]
}
 80073ec:	bf00      	nop
 80073ee:	371c      	adds	r7, #28
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	f003 031f 	and.w	r3, r3, #31
 800740a:	2201      	movs	r2, #1
 800740c:	fa02 f303 	lsl.w	r3, r2, r3
 8007410:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6a1a      	ldr	r2, [r3, #32]
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	43db      	mvns	r3, r3
 800741a:	401a      	ands	r2, r3
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a1a      	ldr	r2, [r3, #32]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	f003 031f 	and.w	r3, r3, #31
 800742a:	6879      	ldr	r1, [r7, #4]
 800742c:	fa01 f303 	lsl.w	r3, r1, r3
 8007430:	431a      	orrs	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	621a      	str	r2, [r3, #32]
}
 8007436:	bf00      	nop
 8007438:	371c      	adds	r7, #28
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
	...

08007444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007454:	2b01      	cmp	r3, #1
 8007456:	d101      	bne.n	800745c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007458:	2302      	movs	r3, #2
 800745a:	e06d      	b.n	8007538 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2202      	movs	r2, #2
 8007468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a30      	ldr	r2, [pc, #192]	; (8007544 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d004      	beq.n	8007490 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a2f      	ldr	r2, [pc, #188]	; (8007548 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d108      	bne.n	80074a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007496:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	4313      	orrs	r3, r2
 80074a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a20      	ldr	r2, [pc, #128]	; (8007544 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d022      	beq.n	800750c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ce:	d01d      	beq.n	800750c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a1d      	ldr	r2, [pc, #116]	; (800754c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d018      	beq.n	800750c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a1c      	ldr	r2, [pc, #112]	; (8007550 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d013      	beq.n	800750c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a1a      	ldr	r2, [pc, #104]	; (8007554 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d00e      	beq.n	800750c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a15      	ldr	r2, [pc, #84]	; (8007548 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d009      	beq.n	800750c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a16      	ldr	r2, [pc, #88]	; (8007558 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d004      	beq.n	800750c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a15      	ldr	r2, [pc, #84]	; (800755c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d10c      	bne.n	8007526 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007512:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	4313      	orrs	r3, r2
 800751c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	40010000 	.word	0x40010000
 8007548:	40010400 	.word	0x40010400
 800754c:	40000400 	.word	0x40000400
 8007550:	40000800 	.word	0x40000800
 8007554:	40000c00 	.word	0x40000c00
 8007558:	40001800 	.word	0x40001800
 800755c:	40014000 	.word	0x40014000

08007560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e042      	b.n	80075f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007578:	2b00      	cmp	r3, #0
 800757a:	d106      	bne.n	800758a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7f9 fbb1 	bl	8000cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2224      	movs	r2, #36	; 0x24
 800758e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 0201 	bic.w	r2, r2, #1
 80075a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d002      	beq.n	80075b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fd90 	bl	80080d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f825 	bl	8007600 <UART_SetConfig>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d101      	bne.n	80075c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e01b      	b.n	80075f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689a      	ldr	r2, [r3, #8]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f042 0201 	orr.w	r2, r2, #1
 80075ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fe0f 	bl	8008214 <UART_CheckIdleState>
 80075f6:	4603      	mov	r3, r0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007604:	b092      	sub	sp, #72	; 0x48
 8007606:	af00      	add	r7, sp, #0
 8007608:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	431a      	orrs	r2, r3
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	431a      	orrs	r2, r3
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	4313      	orrs	r3, r2
 8007626:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	4bbe      	ldr	r3, [pc, #760]	; (8007928 <UART_SetConfig+0x328>)
 8007630:	4013      	ands	r3, r2
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	6812      	ldr	r2, [r2, #0]
 8007636:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007638:	430b      	orrs	r3, r1
 800763a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	68da      	ldr	r2, [r3, #12]
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4ab3      	ldr	r2, [pc, #716]	; (800792c <UART_SetConfig+0x32c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d004      	beq.n	800766c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007668:	4313      	orrs	r3, r2
 800766a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	4baf      	ldr	r3, [pc, #700]	; (8007930 <UART_SetConfig+0x330>)
 8007674:	4013      	ands	r3, r2
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	6812      	ldr	r2, [r2, #0]
 800767a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800767c:	430b      	orrs	r3, r1
 800767e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007686:	f023 010f 	bic.w	r1, r3, #15
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4aa6      	ldr	r2, [pc, #664]	; (8007934 <UART_SetConfig+0x334>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d177      	bne.n	8007790 <UART_SetConfig+0x190>
 80076a0:	4ba5      	ldr	r3, [pc, #660]	; (8007938 <UART_SetConfig+0x338>)
 80076a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076a8:	2b28      	cmp	r3, #40	; 0x28
 80076aa:	d86d      	bhi.n	8007788 <UART_SetConfig+0x188>
 80076ac:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <UART_SetConfig+0xb4>)
 80076ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b2:	bf00      	nop
 80076b4:	08007759 	.word	0x08007759
 80076b8:	08007789 	.word	0x08007789
 80076bc:	08007789 	.word	0x08007789
 80076c0:	08007789 	.word	0x08007789
 80076c4:	08007789 	.word	0x08007789
 80076c8:	08007789 	.word	0x08007789
 80076cc:	08007789 	.word	0x08007789
 80076d0:	08007789 	.word	0x08007789
 80076d4:	08007761 	.word	0x08007761
 80076d8:	08007789 	.word	0x08007789
 80076dc:	08007789 	.word	0x08007789
 80076e0:	08007789 	.word	0x08007789
 80076e4:	08007789 	.word	0x08007789
 80076e8:	08007789 	.word	0x08007789
 80076ec:	08007789 	.word	0x08007789
 80076f0:	08007789 	.word	0x08007789
 80076f4:	08007769 	.word	0x08007769
 80076f8:	08007789 	.word	0x08007789
 80076fc:	08007789 	.word	0x08007789
 8007700:	08007789 	.word	0x08007789
 8007704:	08007789 	.word	0x08007789
 8007708:	08007789 	.word	0x08007789
 800770c:	08007789 	.word	0x08007789
 8007710:	08007789 	.word	0x08007789
 8007714:	08007771 	.word	0x08007771
 8007718:	08007789 	.word	0x08007789
 800771c:	08007789 	.word	0x08007789
 8007720:	08007789 	.word	0x08007789
 8007724:	08007789 	.word	0x08007789
 8007728:	08007789 	.word	0x08007789
 800772c:	08007789 	.word	0x08007789
 8007730:	08007789 	.word	0x08007789
 8007734:	08007779 	.word	0x08007779
 8007738:	08007789 	.word	0x08007789
 800773c:	08007789 	.word	0x08007789
 8007740:	08007789 	.word	0x08007789
 8007744:	08007789 	.word	0x08007789
 8007748:	08007789 	.word	0x08007789
 800774c:	08007789 	.word	0x08007789
 8007750:	08007789 	.word	0x08007789
 8007754:	08007781 	.word	0x08007781
 8007758:	2301      	movs	r3, #1
 800775a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800775e:	e222      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007760:	2304      	movs	r3, #4
 8007762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007766:	e21e      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007768:	2308      	movs	r3, #8
 800776a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800776e:	e21a      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007770:	2310      	movs	r3, #16
 8007772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007776:	e216      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007778:	2320      	movs	r3, #32
 800777a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800777e:	e212      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007780:	2340      	movs	r3, #64	; 0x40
 8007782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007786:	e20e      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007788:	2380      	movs	r3, #128	; 0x80
 800778a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800778e:	e20a      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a69      	ldr	r2, [pc, #420]	; (800793c <UART_SetConfig+0x33c>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d130      	bne.n	80077fc <UART_SetConfig+0x1fc>
 800779a:	4b67      	ldr	r3, [pc, #412]	; (8007938 <UART_SetConfig+0x338>)
 800779c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800779e:	f003 0307 	and.w	r3, r3, #7
 80077a2:	2b05      	cmp	r3, #5
 80077a4:	d826      	bhi.n	80077f4 <UART_SetConfig+0x1f4>
 80077a6:	a201      	add	r2, pc, #4	; (adr r2, 80077ac <UART_SetConfig+0x1ac>)
 80077a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ac:	080077c5 	.word	0x080077c5
 80077b0:	080077cd 	.word	0x080077cd
 80077b4:	080077d5 	.word	0x080077d5
 80077b8:	080077dd 	.word	0x080077dd
 80077bc:	080077e5 	.word	0x080077e5
 80077c0:	080077ed 	.word	0x080077ed
 80077c4:	2300      	movs	r3, #0
 80077c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ca:	e1ec      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 80077cc:	2304      	movs	r3, #4
 80077ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077d2:	e1e8      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 80077d4:	2308      	movs	r3, #8
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077da:	e1e4      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 80077dc:	2310      	movs	r3, #16
 80077de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077e2:	e1e0      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 80077e4:	2320      	movs	r3, #32
 80077e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ea:	e1dc      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 80077ec:	2340      	movs	r3, #64	; 0x40
 80077ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077f2:	e1d8      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 80077f4:	2380      	movs	r3, #128	; 0x80
 80077f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077fa:	e1d4      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a4f      	ldr	r2, [pc, #316]	; (8007940 <UART_SetConfig+0x340>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d130      	bne.n	8007868 <UART_SetConfig+0x268>
 8007806:	4b4c      	ldr	r3, [pc, #304]	; (8007938 <UART_SetConfig+0x338>)
 8007808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780a:	f003 0307 	and.w	r3, r3, #7
 800780e:	2b05      	cmp	r3, #5
 8007810:	d826      	bhi.n	8007860 <UART_SetConfig+0x260>
 8007812:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <UART_SetConfig+0x218>)
 8007814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007818:	08007831 	.word	0x08007831
 800781c:	08007839 	.word	0x08007839
 8007820:	08007841 	.word	0x08007841
 8007824:	08007849 	.word	0x08007849
 8007828:	08007851 	.word	0x08007851
 800782c:	08007859 	.word	0x08007859
 8007830:	2300      	movs	r3, #0
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007836:	e1b6      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007838:	2304      	movs	r3, #4
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800783e:	e1b2      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007840:	2308      	movs	r3, #8
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007846:	e1ae      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007848:	2310      	movs	r3, #16
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800784e:	e1aa      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007850:	2320      	movs	r3, #32
 8007852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007856:	e1a6      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007858:	2340      	movs	r3, #64	; 0x40
 800785a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800785e:	e1a2      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007860:	2380      	movs	r3, #128	; 0x80
 8007862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007866:	e19e      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a35      	ldr	r2, [pc, #212]	; (8007944 <UART_SetConfig+0x344>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d130      	bne.n	80078d4 <UART_SetConfig+0x2d4>
 8007872:	4b31      	ldr	r3, [pc, #196]	; (8007938 <UART_SetConfig+0x338>)
 8007874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007876:	f003 0307 	and.w	r3, r3, #7
 800787a:	2b05      	cmp	r3, #5
 800787c:	d826      	bhi.n	80078cc <UART_SetConfig+0x2cc>
 800787e:	a201      	add	r2, pc, #4	; (adr r2, 8007884 <UART_SetConfig+0x284>)
 8007880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007884:	0800789d 	.word	0x0800789d
 8007888:	080078a5 	.word	0x080078a5
 800788c:	080078ad 	.word	0x080078ad
 8007890:	080078b5 	.word	0x080078b5
 8007894:	080078bd 	.word	0x080078bd
 8007898:	080078c5 	.word	0x080078c5
 800789c:	2300      	movs	r3, #0
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078a2:	e180      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 80078a4:	2304      	movs	r3, #4
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078aa:	e17c      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 80078ac:	2308      	movs	r3, #8
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078b2:	e178      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 80078b4:	2310      	movs	r3, #16
 80078b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ba:	e174      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 80078bc:	2320      	movs	r3, #32
 80078be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078c2:	e170      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 80078c4:	2340      	movs	r3, #64	; 0x40
 80078c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ca:	e16c      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 80078cc:	2380      	movs	r3, #128	; 0x80
 80078ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078d2:	e168      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a1b      	ldr	r2, [pc, #108]	; (8007948 <UART_SetConfig+0x348>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d142      	bne.n	8007964 <UART_SetConfig+0x364>
 80078de:	4b16      	ldr	r3, [pc, #88]	; (8007938 <UART_SetConfig+0x338>)
 80078e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	2b05      	cmp	r3, #5
 80078e8:	d838      	bhi.n	800795c <UART_SetConfig+0x35c>
 80078ea:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <UART_SetConfig+0x2f0>)
 80078ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f0:	08007909 	.word	0x08007909
 80078f4:	08007911 	.word	0x08007911
 80078f8:	08007919 	.word	0x08007919
 80078fc:	08007921 	.word	0x08007921
 8007900:	0800794d 	.word	0x0800794d
 8007904:	08007955 	.word	0x08007955
 8007908:	2300      	movs	r3, #0
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800790e:	e14a      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007910:	2304      	movs	r3, #4
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007916:	e146      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007918:	2308      	movs	r3, #8
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800791e:	e142      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007920:	2310      	movs	r3, #16
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007926:	e13e      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007928:	cfff69f3 	.word	0xcfff69f3
 800792c:	58000c00 	.word	0x58000c00
 8007930:	11fff4ff 	.word	0x11fff4ff
 8007934:	40011000 	.word	0x40011000
 8007938:	58024400 	.word	0x58024400
 800793c:	40004400 	.word	0x40004400
 8007940:	40004800 	.word	0x40004800
 8007944:	40004c00 	.word	0x40004c00
 8007948:	40005000 	.word	0x40005000
 800794c:	2320      	movs	r3, #32
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007952:	e128      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007954:	2340      	movs	r3, #64	; 0x40
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800795a:	e124      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 800795c:	2380      	movs	r3, #128	; 0x80
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007962:	e120      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4acb      	ldr	r2, [pc, #812]	; (8007c98 <UART_SetConfig+0x698>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d176      	bne.n	8007a5c <UART_SetConfig+0x45c>
 800796e:	4bcb      	ldr	r3, [pc, #812]	; (8007c9c <UART_SetConfig+0x69c>)
 8007970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007972:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007976:	2b28      	cmp	r3, #40	; 0x28
 8007978:	d86c      	bhi.n	8007a54 <UART_SetConfig+0x454>
 800797a:	a201      	add	r2, pc, #4	; (adr r2, 8007980 <UART_SetConfig+0x380>)
 800797c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007980:	08007a25 	.word	0x08007a25
 8007984:	08007a55 	.word	0x08007a55
 8007988:	08007a55 	.word	0x08007a55
 800798c:	08007a55 	.word	0x08007a55
 8007990:	08007a55 	.word	0x08007a55
 8007994:	08007a55 	.word	0x08007a55
 8007998:	08007a55 	.word	0x08007a55
 800799c:	08007a55 	.word	0x08007a55
 80079a0:	08007a2d 	.word	0x08007a2d
 80079a4:	08007a55 	.word	0x08007a55
 80079a8:	08007a55 	.word	0x08007a55
 80079ac:	08007a55 	.word	0x08007a55
 80079b0:	08007a55 	.word	0x08007a55
 80079b4:	08007a55 	.word	0x08007a55
 80079b8:	08007a55 	.word	0x08007a55
 80079bc:	08007a55 	.word	0x08007a55
 80079c0:	08007a35 	.word	0x08007a35
 80079c4:	08007a55 	.word	0x08007a55
 80079c8:	08007a55 	.word	0x08007a55
 80079cc:	08007a55 	.word	0x08007a55
 80079d0:	08007a55 	.word	0x08007a55
 80079d4:	08007a55 	.word	0x08007a55
 80079d8:	08007a55 	.word	0x08007a55
 80079dc:	08007a55 	.word	0x08007a55
 80079e0:	08007a3d 	.word	0x08007a3d
 80079e4:	08007a55 	.word	0x08007a55
 80079e8:	08007a55 	.word	0x08007a55
 80079ec:	08007a55 	.word	0x08007a55
 80079f0:	08007a55 	.word	0x08007a55
 80079f4:	08007a55 	.word	0x08007a55
 80079f8:	08007a55 	.word	0x08007a55
 80079fc:	08007a55 	.word	0x08007a55
 8007a00:	08007a45 	.word	0x08007a45
 8007a04:	08007a55 	.word	0x08007a55
 8007a08:	08007a55 	.word	0x08007a55
 8007a0c:	08007a55 	.word	0x08007a55
 8007a10:	08007a55 	.word	0x08007a55
 8007a14:	08007a55 	.word	0x08007a55
 8007a18:	08007a55 	.word	0x08007a55
 8007a1c:	08007a55 	.word	0x08007a55
 8007a20:	08007a4d 	.word	0x08007a4d
 8007a24:	2301      	movs	r3, #1
 8007a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a2a:	e0bc      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007a2c:	2304      	movs	r3, #4
 8007a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a32:	e0b8      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007a34:	2308      	movs	r3, #8
 8007a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a3a:	e0b4      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007a3c:	2310      	movs	r3, #16
 8007a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a42:	e0b0      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007a44:	2320      	movs	r3, #32
 8007a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a4a:	e0ac      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007a4c:	2340      	movs	r3, #64	; 0x40
 8007a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a52:	e0a8      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007a54:	2380      	movs	r3, #128	; 0x80
 8007a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a5a:	e0a4      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a8f      	ldr	r2, [pc, #572]	; (8007ca0 <UART_SetConfig+0x6a0>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d130      	bne.n	8007ac8 <UART_SetConfig+0x4c8>
 8007a66:	4b8d      	ldr	r3, [pc, #564]	; (8007c9c <UART_SetConfig+0x69c>)
 8007a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a6a:	f003 0307 	and.w	r3, r3, #7
 8007a6e:	2b05      	cmp	r3, #5
 8007a70:	d826      	bhi.n	8007ac0 <UART_SetConfig+0x4c0>
 8007a72:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <UART_SetConfig+0x478>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007a91 	.word	0x08007a91
 8007a7c:	08007a99 	.word	0x08007a99
 8007a80:	08007aa1 	.word	0x08007aa1
 8007a84:	08007aa9 	.word	0x08007aa9
 8007a88:	08007ab1 	.word	0x08007ab1
 8007a8c:	08007ab9 	.word	0x08007ab9
 8007a90:	2300      	movs	r3, #0
 8007a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a96:	e086      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007a98:	2304      	movs	r3, #4
 8007a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a9e:	e082      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007aa0:	2308      	movs	r3, #8
 8007aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aa6:	e07e      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007aa8:	2310      	movs	r3, #16
 8007aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aae:	e07a      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007ab0:	2320      	movs	r3, #32
 8007ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ab6:	e076      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007ab8:	2340      	movs	r3, #64	; 0x40
 8007aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007abe:	e072      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007ac0:	2380      	movs	r3, #128	; 0x80
 8007ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ac6:	e06e      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a75      	ldr	r2, [pc, #468]	; (8007ca4 <UART_SetConfig+0x6a4>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d130      	bne.n	8007b34 <UART_SetConfig+0x534>
 8007ad2:	4b72      	ldr	r3, [pc, #456]	; (8007c9c <UART_SetConfig+0x69c>)
 8007ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad6:	f003 0307 	and.w	r3, r3, #7
 8007ada:	2b05      	cmp	r3, #5
 8007adc:	d826      	bhi.n	8007b2c <UART_SetConfig+0x52c>
 8007ade:	a201      	add	r2, pc, #4	; (adr r2, 8007ae4 <UART_SetConfig+0x4e4>)
 8007ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae4:	08007afd 	.word	0x08007afd
 8007ae8:	08007b05 	.word	0x08007b05
 8007aec:	08007b0d 	.word	0x08007b0d
 8007af0:	08007b15 	.word	0x08007b15
 8007af4:	08007b1d 	.word	0x08007b1d
 8007af8:	08007b25 	.word	0x08007b25
 8007afc:	2300      	movs	r3, #0
 8007afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b02:	e050      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007b04:	2304      	movs	r3, #4
 8007b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b0a:	e04c      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007b0c:	2308      	movs	r3, #8
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b12:	e048      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007b14:	2310      	movs	r3, #16
 8007b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b1a:	e044      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007b1c:	2320      	movs	r3, #32
 8007b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b22:	e040      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007b24:	2340      	movs	r3, #64	; 0x40
 8007b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b2a:	e03c      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007b2c:	2380      	movs	r3, #128	; 0x80
 8007b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b32:	e038      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a5b      	ldr	r2, [pc, #364]	; (8007ca8 <UART_SetConfig+0x6a8>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d130      	bne.n	8007ba0 <UART_SetConfig+0x5a0>
 8007b3e:	4b57      	ldr	r3, [pc, #348]	; (8007c9c <UART_SetConfig+0x69c>)
 8007b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b42:	f003 0307 	and.w	r3, r3, #7
 8007b46:	2b05      	cmp	r3, #5
 8007b48:	d826      	bhi.n	8007b98 <UART_SetConfig+0x598>
 8007b4a:	a201      	add	r2, pc, #4	; (adr r2, 8007b50 <UART_SetConfig+0x550>)
 8007b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b50:	08007b69 	.word	0x08007b69
 8007b54:	08007b71 	.word	0x08007b71
 8007b58:	08007b79 	.word	0x08007b79
 8007b5c:	08007b81 	.word	0x08007b81
 8007b60:	08007b89 	.word	0x08007b89
 8007b64:	08007b91 	.word	0x08007b91
 8007b68:	2302      	movs	r3, #2
 8007b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b6e:	e01a      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007b70:	2304      	movs	r3, #4
 8007b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b76:	e016      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007b78:	2308      	movs	r3, #8
 8007b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b7e:	e012      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007b80:	2310      	movs	r3, #16
 8007b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b86:	e00e      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007b88:	2320      	movs	r3, #32
 8007b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b8e:	e00a      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007b90:	2340      	movs	r3, #64	; 0x40
 8007b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b96:	e006      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007b98:	2380      	movs	r3, #128	; 0x80
 8007b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b9e:	e002      	b.n	8007ba6 <UART_SetConfig+0x5a6>
 8007ba0:	2380      	movs	r3, #128	; 0x80
 8007ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a3f      	ldr	r2, [pc, #252]	; (8007ca8 <UART_SetConfig+0x6a8>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	f040 80f8 	bne.w	8007da2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bb2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007bb6:	2b20      	cmp	r3, #32
 8007bb8:	dc46      	bgt.n	8007c48 <UART_SetConfig+0x648>
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	f2c0 8082 	blt.w	8007cc4 <UART_SetConfig+0x6c4>
 8007bc0:	3b02      	subs	r3, #2
 8007bc2:	2b1e      	cmp	r3, #30
 8007bc4:	d87e      	bhi.n	8007cc4 <UART_SetConfig+0x6c4>
 8007bc6:	a201      	add	r2, pc, #4	; (adr r2, 8007bcc <UART_SetConfig+0x5cc>)
 8007bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bcc:	08007c4f 	.word	0x08007c4f
 8007bd0:	08007cc5 	.word	0x08007cc5
 8007bd4:	08007c57 	.word	0x08007c57
 8007bd8:	08007cc5 	.word	0x08007cc5
 8007bdc:	08007cc5 	.word	0x08007cc5
 8007be0:	08007cc5 	.word	0x08007cc5
 8007be4:	08007c67 	.word	0x08007c67
 8007be8:	08007cc5 	.word	0x08007cc5
 8007bec:	08007cc5 	.word	0x08007cc5
 8007bf0:	08007cc5 	.word	0x08007cc5
 8007bf4:	08007cc5 	.word	0x08007cc5
 8007bf8:	08007cc5 	.word	0x08007cc5
 8007bfc:	08007cc5 	.word	0x08007cc5
 8007c00:	08007cc5 	.word	0x08007cc5
 8007c04:	08007c77 	.word	0x08007c77
 8007c08:	08007cc5 	.word	0x08007cc5
 8007c0c:	08007cc5 	.word	0x08007cc5
 8007c10:	08007cc5 	.word	0x08007cc5
 8007c14:	08007cc5 	.word	0x08007cc5
 8007c18:	08007cc5 	.word	0x08007cc5
 8007c1c:	08007cc5 	.word	0x08007cc5
 8007c20:	08007cc5 	.word	0x08007cc5
 8007c24:	08007cc5 	.word	0x08007cc5
 8007c28:	08007cc5 	.word	0x08007cc5
 8007c2c:	08007cc5 	.word	0x08007cc5
 8007c30:	08007cc5 	.word	0x08007cc5
 8007c34:	08007cc5 	.word	0x08007cc5
 8007c38:	08007cc5 	.word	0x08007cc5
 8007c3c:	08007cc5 	.word	0x08007cc5
 8007c40:	08007cc5 	.word	0x08007cc5
 8007c44:	08007cb7 	.word	0x08007cb7
 8007c48:	2b40      	cmp	r3, #64	; 0x40
 8007c4a:	d037      	beq.n	8007cbc <UART_SetConfig+0x6bc>
 8007c4c:	e03a      	b.n	8007cc4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007c4e:	f7fd ffed 	bl	8005c2c <HAL_RCCEx_GetD3PCLK1Freq>
 8007c52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c54:	e03c      	b.n	8007cd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fd fffc 	bl	8005c58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c64:	e034      	b.n	8007cd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c66:	f107 0318 	add.w	r3, r7, #24
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fe f948 	bl	8005f00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c74:	e02c      	b.n	8007cd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c76:	4b09      	ldr	r3, [pc, #36]	; (8007c9c <UART_SetConfig+0x69c>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0320 	and.w	r3, r3, #32
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d016      	beq.n	8007cb0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c82:	4b06      	ldr	r3, [pc, #24]	; (8007c9c <UART_SetConfig+0x69c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	08db      	lsrs	r3, r3, #3
 8007c88:	f003 0303 	and.w	r3, r3, #3
 8007c8c:	4a07      	ldr	r2, [pc, #28]	; (8007cac <UART_SetConfig+0x6ac>)
 8007c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c94:	e01c      	b.n	8007cd0 <UART_SetConfig+0x6d0>
 8007c96:	bf00      	nop
 8007c98:	40011400 	.word	0x40011400
 8007c9c:	58024400 	.word	0x58024400
 8007ca0:	40007800 	.word	0x40007800
 8007ca4:	40007c00 	.word	0x40007c00
 8007ca8:	58000c00 	.word	0x58000c00
 8007cac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007cb0:	4b9d      	ldr	r3, [pc, #628]	; (8007f28 <UART_SetConfig+0x928>)
 8007cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cb4:	e00c      	b.n	8007cd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cb6:	4b9d      	ldr	r3, [pc, #628]	; (8007f2c <UART_SetConfig+0x92c>)
 8007cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cba:	e009      	b.n	8007cd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cc2:	e005      	b.n	8007cd0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007cce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f000 81de 	beq.w	8008094 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	4a94      	ldr	r2, [pc, #592]	; (8007f30 <UART_SetConfig+0x930>)
 8007cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cea:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	005b      	lsls	r3, r3, #1
 8007cf4:	4413      	add	r3, r2
 8007cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d305      	bcc.n	8007d08 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d903      	bls.n	8007d10 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007d0e:	e1c1      	b.n	8008094 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d12:	2200      	movs	r2, #0
 8007d14:	60bb      	str	r3, [r7, #8]
 8007d16:	60fa      	str	r2, [r7, #12]
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	4a84      	ldr	r2, [pc, #528]	; (8007f30 <UART_SetConfig+0x930>)
 8007d1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	2200      	movs	r2, #0
 8007d26:	603b      	str	r3, [r7, #0]
 8007d28:	607a      	str	r2, [r7, #4]
 8007d2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d32:	f7f8 fad1 	bl	80002d8 <__aeabi_uldivmod>
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	4610      	mov	r0, r2
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	f04f 0200 	mov.w	r2, #0
 8007d42:	f04f 0300 	mov.w	r3, #0
 8007d46:	020b      	lsls	r3, r1, #8
 8007d48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d4c:	0202      	lsls	r2, r0, #8
 8007d4e:	6979      	ldr	r1, [r7, #20]
 8007d50:	6849      	ldr	r1, [r1, #4]
 8007d52:	0849      	lsrs	r1, r1, #1
 8007d54:	2000      	movs	r0, #0
 8007d56:	460c      	mov	r4, r1
 8007d58:	4605      	mov	r5, r0
 8007d5a:	eb12 0804 	adds.w	r8, r2, r4
 8007d5e:	eb43 0905 	adc.w	r9, r3, r5
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	469a      	mov	sl, r3
 8007d6a:	4693      	mov	fp, r2
 8007d6c:	4652      	mov	r2, sl
 8007d6e:	465b      	mov	r3, fp
 8007d70:	4640      	mov	r0, r8
 8007d72:	4649      	mov	r1, r9
 8007d74:	f7f8 fab0 	bl	80002d8 <__aeabi_uldivmod>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d86:	d308      	bcc.n	8007d9a <UART_SetConfig+0x79a>
 8007d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d8e:	d204      	bcs.n	8007d9a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d96:	60da      	str	r2, [r3, #12]
 8007d98:	e17c      	b.n	8008094 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007da0:	e178      	b.n	8008094 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	69db      	ldr	r3, [r3, #28]
 8007da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007daa:	f040 80c5 	bne.w	8007f38 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007dae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	dc48      	bgt.n	8007e48 <UART_SetConfig+0x848>
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	db7b      	blt.n	8007eb2 <UART_SetConfig+0x8b2>
 8007dba:	2b20      	cmp	r3, #32
 8007dbc:	d879      	bhi.n	8007eb2 <UART_SetConfig+0x8b2>
 8007dbe:	a201      	add	r2, pc, #4	; (adr r2, 8007dc4 <UART_SetConfig+0x7c4>)
 8007dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc4:	08007e4f 	.word	0x08007e4f
 8007dc8:	08007e57 	.word	0x08007e57
 8007dcc:	08007eb3 	.word	0x08007eb3
 8007dd0:	08007eb3 	.word	0x08007eb3
 8007dd4:	08007e5f 	.word	0x08007e5f
 8007dd8:	08007eb3 	.word	0x08007eb3
 8007ddc:	08007eb3 	.word	0x08007eb3
 8007de0:	08007eb3 	.word	0x08007eb3
 8007de4:	08007e6f 	.word	0x08007e6f
 8007de8:	08007eb3 	.word	0x08007eb3
 8007dec:	08007eb3 	.word	0x08007eb3
 8007df0:	08007eb3 	.word	0x08007eb3
 8007df4:	08007eb3 	.word	0x08007eb3
 8007df8:	08007eb3 	.word	0x08007eb3
 8007dfc:	08007eb3 	.word	0x08007eb3
 8007e00:	08007eb3 	.word	0x08007eb3
 8007e04:	08007e7f 	.word	0x08007e7f
 8007e08:	08007eb3 	.word	0x08007eb3
 8007e0c:	08007eb3 	.word	0x08007eb3
 8007e10:	08007eb3 	.word	0x08007eb3
 8007e14:	08007eb3 	.word	0x08007eb3
 8007e18:	08007eb3 	.word	0x08007eb3
 8007e1c:	08007eb3 	.word	0x08007eb3
 8007e20:	08007eb3 	.word	0x08007eb3
 8007e24:	08007eb3 	.word	0x08007eb3
 8007e28:	08007eb3 	.word	0x08007eb3
 8007e2c:	08007eb3 	.word	0x08007eb3
 8007e30:	08007eb3 	.word	0x08007eb3
 8007e34:	08007eb3 	.word	0x08007eb3
 8007e38:	08007eb3 	.word	0x08007eb3
 8007e3c:	08007eb3 	.word	0x08007eb3
 8007e40:	08007eb3 	.word	0x08007eb3
 8007e44:	08007ea5 	.word	0x08007ea5
 8007e48:	2b40      	cmp	r3, #64	; 0x40
 8007e4a:	d02e      	beq.n	8007eaa <UART_SetConfig+0x8aa>
 8007e4c:	e031      	b.n	8007eb2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e4e:	f7fc fcb7 	bl	80047c0 <HAL_RCC_GetPCLK1Freq>
 8007e52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e54:	e033      	b.n	8007ebe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e56:	f7fc fcc9 	bl	80047ec <HAL_RCC_GetPCLK2Freq>
 8007e5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e5c:	e02f      	b.n	8007ebe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fd fef8 	bl	8005c58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e6c:	e027      	b.n	8007ebe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e6e:	f107 0318 	add.w	r3, r7, #24
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fe f844 	bl	8005f00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e7c:	e01f      	b.n	8007ebe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e7e:	4b2d      	ldr	r3, [pc, #180]	; (8007f34 <UART_SetConfig+0x934>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0320 	and.w	r3, r3, #32
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d009      	beq.n	8007e9e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e8a:	4b2a      	ldr	r3, [pc, #168]	; (8007f34 <UART_SetConfig+0x934>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	08db      	lsrs	r3, r3, #3
 8007e90:	f003 0303 	and.w	r3, r3, #3
 8007e94:	4a24      	ldr	r2, [pc, #144]	; (8007f28 <UART_SetConfig+0x928>)
 8007e96:	fa22 f303 	lsr.w	r3, r2, r3
 8007e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e9c:	e00f      	b.n	8007ebe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007e9e:	4b22      	ldr	r3, [pc, #136]	; (8007f28 <UART_SetConfig+0x928>)
 8007ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ea2:	e00c      	b.n	8007ebe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ea4:	4b21      	ldr	r3, [pc, #132]	; (8007f2c <UART_SetConfig+0x92c>)
 8007ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ea8:	e009      	b.n	8007ebe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eb0:	e005      	b.n	8007ebe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007ebc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 80e7 	beq.w	8008094 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eca:	4a19      	ldr	r2, [pc, #100]	; (8007f30 <UART_SetConfig+0x930>)
 8007ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ed4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ed8:	005a      	lsls	r2, r3, #1
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	085b      	lsrs	r3, r3, #1
 8007ee0:	441a      	add	r2, r3
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eee:	2b0f      	cmp	r3, #15
 8007ef0:	d916      	bls.n	8007f20 <UART_SetConfig+0x920>
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef8:	d212      	bcs.n	8007f20 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	f023 030f 	bic.w	r3, r3, #15
 8007f02:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f06:	085b      	lsrs	r3, r3, #1
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	f003 0307 	and.w	r3, r3, #7
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007f12:	4313      	orrs	r3, r2
 8007f14:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007f1c:	60da      	str	r2, [r3, #12]
 8007f1e:	e0b9      	b.n	8008094 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007f26:	e0b5      	b.n	8008094 <UART_SetConfig+0xa94>
 8007f28:	03d09000 	.word	0x03d09000
 8007f2c:	003d0900 	.word	0x003d0900
 8007f30:	080087a0 	.word	0x080087a0
 8007f34:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f3c:	2b20      	cmp	r3, #32
 8007f3e:	dc49      	bgt.n	8007fd4 <UART_SetConfig+0x9d4>
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	db7c      	blt.n	800803e <UART_SetConfig+0xa3e>
 8007f44:	2b20      	cmp	r3, #32
 8007f46:	d87a      	bhi.n	800803e <UART_SetConfig+0xa3e>
 8007f48:	a201      	add	r2, pc, #4	; (adr r2, 8007f50 <UART_SetConfig+0x950>)
 8007f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4e:	bf00      	nop
 8007f50:	08007fdb 	.word	0x08007fdb
 8007f54:	08007fe3 	.word	0x08007fe3
 8007f58:	0800803f 	.word	0x0800803f
 8007f5c:	0800803f 	.word	0x0800803f
 8007f60:	08007feb 	.word	0x08007feb
 8007f64:	0800803f 	.word	0x0800803f
 8007f68:	0800803f 	.word	0x0800803f
 8007f6c:	0800803f 	.word	0x0800803f
 8007f70:	08007ffb 	.word	0x08007ffb
 8007f74:	0800803f 	.word	0x0800803f
 8007f78:	0800803f 	.word	0x0800803f
 8007f7c:	0800803f 	.word	0x0800803f
 8007f80:	0800803f 	.word	0x0800803f
 8007f84:	0800803f 	.word	0x0800803f
 8007f88:	0800803f 	.word	0x0800803f
 8007f8c:	0800803f 	.word	0x0800803f
 8007f90:	0800800b 	.word	0x0800800b
 8007f94:	0800803f 	.word	0x0800803f
 8007f98:	0800803f 	.word	0x0800803f
 8007f9c:	0800803f 	.word	0x0800803f
 8007fa0:	0800803f 	.word	0x0800803f
 8007fa4:	0800803f 	.word	0x0800803f
 8007fa8:	0800803f 	.word	0x0800803f
 8007fac:	0800803f 	.word	0x0800803f
 8007fb0:	0800803f 	.word	0x0800803f
 8007fb4:	0800803f 	.word	0x0800803f
 8007fb8:	0800803f 	.word	0x0800803f
 8007fbc:	0800803f 	.word	0x0800803f
 8007fc0:	0800803f 	.word	0x0800803f
 8007fc4:	0800803f 	.word	0x0800803f
 8007fc8:	0800803f 	.word	0x0800803f
 8007fcc:	0800803f 	.word	0x0800803f
 8007fd0:	08008031 	.word	0x08008031
 8007fd4:	2b40      	cmp	r3, #64	; 0x40
 8007fd6:	d02e      	beq.n	8008036 <UART_SetConfig+0xa36>
 8007fd8:	e031      	b.n	800803e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fda:	f7fc fbf1 	bl	80047c0 <HAL_RCC_GetPCLK1Freq>
 8007fde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007fe0:	e033      	b.n	800804a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fe2:	f7fc fc03 	bl	80047ec <HAL_RCC_GetPCLK2Freq>
 8007fe6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007fe8:	e02f      	b.n	800804a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fd fe32 	bl	8005c58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ff8:	e027      	b.n	800804a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ffa:	f107 0318 	add.w	r3, r7, #24
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fd ff7e 	bl	8005f00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008008:	e01f      	b.n	800804a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800800a:	4b2d      	ldr	r3, [pc, #180]	; (80080c0 <UART_SetConfig+0xac0>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0320 	and.w	r3, r3, #32
 8008012:	2b00      	cmp	r3, #0
 8008014:	d009      	beq.n	800802a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008016:	4b2a      	ldr	r3, [pc, #168]	; (80080c0 <UART_SetConfig+0xac0>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	08db      	lsrs	r3, r3, #3
 800801c:	f003 0303 	and.w	r3, r3, #3
 8008020:	4a28      	ldr	r2, [pc, #160]	; (80080c4 <UART_SetConfig+0xac4>)
 8008022:	fa22 f303 	lsr.w	r3, r2, r3
 8008026:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008028:	e00f      	b.n	800804a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800802a:	4b26      	ldr	r3, [pc, #152]	; (80080c4 <UART_SetConfig+0xac4>)
 800802c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800802e:	e00c      	b.n	800804a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008030:	4b25      	ldr	r3, [pc, #148]	; (80080c8 <UART_SetConfig+0xac8>)
 8008032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008034:	e009      	b.n	800804a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800803a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800803c:	e005      	b.n	800804a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800803e:	2300      	movs	r3, #0
 8008040:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008048:	bf00      	nop
    }

    if (pclk != 0U)
 800804a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800804c:	2b00      	cmp	r3, #0
 800804e:	d021      	beq.n	8008094 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008054:	4a1d      	ldr	r2, [pc, #116]	; (80080cc <UART_SetConfig+0xacc>)
 8008056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800805a:	461a      	mov	r2, r3
 800805c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800805e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	085b      	lsrs	r3, r3, #1
 8008068:	441a      	add	r2, r3
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008072:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008076:	2b0f      	cmp	r3, #15
 8008078:	d909      	bls.n	800808e <UART_SetConfig+0xa8e>
 800807a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008080:	d205      	bcs.n	800808e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008084:	b29a      	uxth	r2, r3
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	60da      	str	r2, [r3, #12]
 800808c:	e002      	b.n	8008094 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	2201      	movs	r2, #1
 8008098:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	2201      	movs	r2, #1
 80080a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2200      	movs	r2, #0
 80080a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	2200      	movs	r2, #0
 80080ae:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80080b0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3748      	adds	r7, #72	; 0x48
 80080b8:	46bd      	mov	sp, r7
 80080ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080be:	bf00      	nop
 80080c0:	58024400 	.word	0x58024400
 80080c4:	03d09000 	.word	0x03d09000
 80080c8:	003d0900 	.word	0x003d0900
 80080cc:	080087a0 	.word	0x080087a0

080080d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080dc:	f003 0308 	and.w	r3, r3, #8
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00a      	beq.n	80080fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	430a      	orrs	r2, r1
 80080f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00a      	beq.n	800811c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	430a      	orrs	r2, r1
 800811a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00a      	beq.n	800813e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008142:	f003 0304 	and.w	r3, r3, #4
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00a      	beq.n	8008160 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	430a      	orrs	r2, r1
 800815e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008164:	f003 0310 	and.w	r3, r3, #16
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00a      	beq.n	8008182 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	430a      	orrs	r2, r1
 8008180:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00a      	beq.n	80081a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	430a      	orrs	r2, r1
 80081a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d01a      	beq.n	80081e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081ce:	d10a      	bne.n	80081e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	430a      	orrs	r2, r1
 80081e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00a      	beq.n	8008208 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	430a      	orrs	r2, r1
 8008206:	605a      	str	r2, [r3, #4]
  }
}
 8008208:	bf00      	nop
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b098      	sub	sp, #96	; 0x60
 8008218:	af02      	add	r7, sp, #8
 800821a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008224:	f7f8 fec0 	bl	8000fa8 <HAL_GetTick>
 8008228:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0308 	and.w	r3, r3, #8
 8008234:	2b08      	cmp	r3, #8
 8008236:	d12f      	bne.n	8008298 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008238:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008240:	2200      	movs	r2, #0
 8008242:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f88e 	bl	8008368 <UART_WaitOnFlagUntilTimeout>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d022      	beq.n	8008298 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825a:	e853 3f00 	ldrex	r3, [r3]
 800825e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008262:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008266:	653b      	str	r3, [r7, #80]	; 0x50
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	461a      	mov	r2, r3
 800826e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008270:	647b      	str	r3, [r7, #68]	; 0x44
 8008272:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008274:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008276:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008278:	e841 2300 	strex	r3, r2, [r1]
 800827c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800827e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1e6      	bne.n	8008252 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2220      	movs	r2, #32
 8008288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e063      	b.n	8008360 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0304 	and.w	r3, r3, #4
 80082a2:	2b04      	cmp	r3, #4
 80082a4:	d149      	bne.n	800833a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082ae:	2200      	movs	r2, #0
 80082b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f857 	bl	8008368 <UART_WaitOnFlagUntilTimeout>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d03c      	beq.n	800833a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	e853 3f00 	ldrex	r3, [r3]
 80082cc:	623b      	str	r3, [r7, #32]
   return(result);
 80082ce:	6a3b      	ldr	r3, [r7, #32]
 80082d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	461a      	mov	r2, r3
 80082dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082de:	633b      	str	r3, [r7, #48]	; 0x30
 80082e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082e6:	e841 2300 	strex	r3, r2, [r1]
 80082ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1e6      	bne.n	80082c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	3308      	adds	r3, #8
 80082f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	e853 3f00 	ldrex	r3, [r3]
 8008300:	60fb      	str	r3, [r7, #12]
   return(result);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f023 0301 	bic.w	r3, r3, #1
 8008308:	64bb      	str	r3, [r7, #72]	; 0x48
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	3308      	adds	r3, #8
 8008310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008312:	61fa      	str	r2, [r7, #28]
 8008314:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008316:	69b9      	ldr	r1, [r7, #24]
 8008318:	69fa      	ldr	r2, [r7, #28]
 800831a:	e841 2300 	strex	r3, r2, [r1]
 800831e:	617b      	str	r3, [r7, #20]
   return(result);
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1e5      	bne.n	80082f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2220      	movs	r2, #32
 800832a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e012      	b.n	8008360 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2220      	movs	r2, #32
 800833e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2220      	movs	r2, #32
 8008346:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3758      	adds	r7, #88	; 0x58
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	603b      	str	r3, [r7, #0]
 8008374:	4613      	mov	r3, r2
 8008376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008378:	e04f      	b.n	800841a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008380:	d04b      	beq.n	800841a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008382:	f7f8 fe11 	bl	8000fa8 <HAL_GetTick>
 8008386:	4602      	mov	r2, r0
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	69ba      	ldr	r2, [r7, #24]
 800838e:	429a      	cmp	r2, r3
 8008390:	d302      	bcc.n	8008398 <UART_WaitOnFlagUntilTimeout+0x30>
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d101      	bne.n	800839c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008398:	2303      	movs	r3, #3
 800839a:	e04e      	b.n	800843a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 0304 	and.w	r3, r3, #4
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d037      	beq.n	800841a <UART_WaitOnFlagUntilTimeout+0xb2>
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	2b80      	cmp	r3, #128	; 0x80
 80083ae:	d034      	beq.n	800841a <UART_WaitOnFlagUntilTimeout+0xb2>
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2b40      	cmp	r3, #64	; 0x40
 80083b4:	d031      	beq.n	800841a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	69db      	ldr	r3, [r3, #28]
 80083bc:	f003 0308 	and.w	r3, r3, #8
 80083c0:	2b08      	cmp	r3, #8
 80083c2:	d110      	bne.n	80083e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2208      	movs	r2, #8
 80083ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 f839 	bl	8008444 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2208      	movs	r2, #8
 80083d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e029      	b.n	800843a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083f4:	d111      	bne.n	800841a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f000 f81f 	bl	8008444 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2220      	movs	r2, #32
 800840a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008416:	2303      	movs	r3, #3
 8008418:	e00f      	b.n	800843a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	69da      	ldr	r2, [r3, #28]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	4013      	ands	r3, r2
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	429a      	cmp	r2, r3
 8008428:	bf0c      	ite	eq
 800842a:	2301      	moveq	r3, #1
 800842c:	2300      	movne	r3, #0
 800842e:	b2db      	uxtb	r3, r3
 8008430:	461a      	mov	r2, r3
 8008432:	79fb      	ldrb	r3, [r7, #7]
 8008434:	429a      	cmp	r2, r3
 8008436:	d0a0      	beq.n	800837a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
	...

08008444 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008444:	b480      	push	{r7}
 8008446:	b095      	sub	sp, #84	; 0x54
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008454:	e853 3f00 	ldrex	r3, [r3]
 8008458:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800845a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008460:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	461a      	mov	r2, r3
 8008468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800846a:	643b      	str	r3, [r7, #64]	; 0x40
 800846c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008470:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008472:	e841 2300 	strex	r3, r2, [r1]
 8008476:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1e6      	bne.n	800844c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3308      	adds	r3, #8
 8008484:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	e853 3f00 	ldrex	r3, [r3]
 800848c:	61fb      	str	r3, [r7, #28]
   return(result);
 800848e:	69fa      	ldr	r2, [r7, #28]
 8008490:	4b1e      	ldr	r3, [pc, #120]	; (800850c <UART_EndRxTransfer+0xc8>)
 8008492:	4013      	ands	r3, r2
 8008494:	64bb      	str	r3, [r7, #72]	; 0x48
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3308      	adds	r3, #8
 800849c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800849e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084a6:	e841 2300 	strex	r3, r2, [r1]
 80084aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1e5      	bne.n	800847e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d118      	bne.n	80084ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	e853 3f00 	ldrex	r3, [r3]
 80084c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f023 0310 	bic.w	r3, r3, #16
 80084ce:	647b      	str	r3, [r7, #68]	; 0x44
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	461a      	mov	r2, r3
 80084d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d8:	61bb      	str	r3, [r7, #24]
 80084da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084dc:	6979      	ldr	r1, [r7, #20]
 80084de:	69ba      	ldr	r2, [r7, #24]
 80084e0:	e841 2300 	strex	r3, r2, [r1]
 80084e4:	613b      	str	r3, [r7, #16]
   return(result);
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1e6      	bne.n	80084ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2220      	movs	r2, #32
 80084f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008500:	bf00      	nop
 8008502:	3754      	adds	r7, #84	; 0x54
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	effffffe 	.word	0xeffffffe

08008510 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800851e:	2b01      	cmp	r3, #1
 8008520:	d101      	bne.n	8008526 <HAL_UARTEx_DisableFifoMode+0x16>
 8008522:	2302      	movs	r3, #2
 8008524:	e027      	b.n	8008576 <HAL_UARTEx_DisableFifoMode+0x66>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2224      	movs	r2, #36	; 0x24
 8008532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f022 0201 	bic.w	r2, r2, #1
 800854c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008554:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2220      	movs	r2, #32
 8008568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3714      	adds	r7, #20
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008592:	2b01      	cmp	r3, #1
 8008594:	d101      	bne.n	800859a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008596:	2302      	movs	r3, #2
 8008598:	e02d      	b.n	80085f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2224      	movs	r2, #36	; 0x24
 80085a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f022 0201 	bic.w	r2, r2, #1
 80085c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f850 	bl	800867c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2220      	movs	r2, #32
 80085e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800860e:	2b01      	cmp	r3, #1
 8008610:	d101      	bne.n	8008616 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008612:	2302      	movs	r3, #2
 8008614:	e02d      	b.n	8008672 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2224      	movs	r2, #36	; 0x24
 8008622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f022 0201 	bic.w	r2, r2, #1
 800863c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	430a      	orrs	r2, r1
 8008650:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f812 	bl	800867c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2220      	movs	r2, #32
 8008664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
	...

0800867c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008688:	2b00      	cmp	r3, #0
 800868a:	d108      	bne.n	800869e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800869c:	e031      	b.n	8008702 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800869e:	2310      	movs	r3, #16
 80086a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086a2:	2310      	movs	r3, #16
 80086a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	0e5b      	lsrs	r3, r3, #25
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	f003 0307 	and.w	r3, r3, #7
 80086b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	0f5b      	lsrs	r3, r3, #29
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	f003 0307 	and.w	r3, r3, #7
 80086c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	7b3a      	ldrb	r2, [r7, #12]
 80086ca:	4911      	ldr	r1, [pc, #68]	; (8008710 <UARTEx_SetNbDataToProcess+0x94>)
 80086cc:	5c8a      	ldrb	r2, [r1, r2]
 80086ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80086d2:	7b3a      	ldrb	r2, [r7, #12]
 80086d4:	490f      	ldr	r1, [pc, #60]	; (8008714 <UARTEx_SetNbDataToProcess+0x98>)
 80086d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80086dc:	b29a      	uxth	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086e4:	7bfb      	ldrb	r3, [r7, #15]
 80086e6:	7b7a      	ldrb	r2, [r7, #13]
 80086e8:	4909      	ldr	r1, [pc, #36]	; (8008710 <UARTEx_SetNbDataToProcess+0x94>)
 80086ea:	5c8a      	ldrb	r2, [r1, r2]
 80086ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80086f0:	7b7a      	ldrb	r2, [r7, #13]
 80086f2:	4908      	ldr	r1, [pc, #32]	; (8008714 <UARTEx_SetNbDataToProcess+0x98>)
 80086f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008702:	bf00      	nop
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	080087b8 	.word	0x080087b8
 8008714:	080087c0 	.word	0x080087c0

08008718 <memset>:
 8008718:	4402      	add	r2, r0
 800871a:	4603      	mov	r3, r0
 800871c:	4293      	cmp	r3, r2
 800871e:	d100      	bne.n	8008722 <memset+0xa>
 8008720:	4770      	bx	lr
 8008722:	f803 1b01 	strb.w	r1, [r3], #1
 8008726:	e7f9      	b.n	800871c <memset+0x4>

08008728 <__libc_init_array>:
 8008728:	b570      	push	{r4, r5, r6, lr}
 800872a:	4d0d      	ldr	r5, [pc, #52]	; (8008760 <__libc_init_array+0x38>)
 800872c:	4c0d      	ldr	r4, [pc, #52]	; (8008764 <__libc_init_array+0x3c>)
 800872e:	1b64      	subs	r4, r4, r5
 8008730:	10a4      	asrs	r4, r4, #2
 8008732:	2600      	movs	r6, #0
 8008734:	42a6      	cmp	r6, r4
 8008736:	d109      	bne.n	800874c <__libc_init_array+0x24>
 8008738:	4d0b      	ldr	r5, [pc, #44]	; (8008768 <__libc_init_array+0x40>)
 800873a:	4c0c      	ldr	r4, [pc, #48]	; (800876c <__libc_init_array+0x44>)
 800873c:	f000 f818 	bl	8008770 <_init>
 8008740:	1b64      	subs	r4, r4, r5
 8008742:	10a4      	asrs	r4, r4, #2
 8008744:	2600      	movs	r6, #0
 8008746:	42a6      	cmp	r6, r4
 8008748:	d105      	bne.n	8008756 <__libc_init_array+0x2e>
 800874a:	bd70      	pop	{r4, r5, r6, pc}
 800874c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008750:	4798      	blx	r3
 8008752:	3601      	adds	r6, #1
 8008754:	e7ee      	b.n	8008734 <__libc_init_array+0xc>
 8008756:	f855 3b04 	ldr.w	r3, [r5], #4
 800875a:	4798      	blx	r3
 800875c:	3601      	adds	r6, #1
 800875e:	e7f2      	b.n	8008746 <__libc_init_array+0x1e>
 8008760:	080087d0 	.word	0x080087d0
 8008764:	080087d0 	.word	0x080087d0
 8008768:	080087d0 	.word	0x080087d0
 800876c:	080087d4 	.word	0x080087d4

08008770 <_init>:
 8008770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008772:	bf00      	nop
 8008774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008776:	bc08      	pop	{r3}
 8008778:	469e      	mov	lr, r3
 800877a:	4770      	bx	lr

0800877c <_fini>:
 800877c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877e:	bf00      	nop
 8008780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008782:	bc08      	pop	{r3}
 8008784:	469e      	mov	lr, r3
 8008786:	4770      	bx	lr
