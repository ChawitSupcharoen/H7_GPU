
Code_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009690  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009928  08009928  00019928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009968  08009968  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08009968  08009968  00019968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009970  08009970  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009970  08009970  00019970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009974  08009974  00019974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  24000000  08009978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  24000030  080099a8  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240006dc  080099a8  000206dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a97d  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fdd  00000000  00000000  0003aa1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  0003da00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001035  00000000  00000000  0003eeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003abbc  00000000  00000000  0003feed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c2e7  00000000  00000000  0007aaa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00186233  00000000  00000000  00096d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005948  00000000  00000000  0021cfc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0022290c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000030 	.word	0x24000030
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009910 	.word	0x08009910

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000034 	.word	0x24000034
 80002d4:	08009910 	.word	0x08009910

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b3b      	ldr	r3, [pc, #236]	; (80007fc <main+0xfc>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 fc37 	bl	8000f9c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fe25 	bl	800137c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f871 	bl	8000818 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000736:	4b31      	ldr	r3, [pc, #196]	; (80007fc <main+0xfc>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a2f      	ldr	r2, [pc, #188]	; (80007fc <main+0xfc>)
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <main+0xfc>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000754:	2000      	movs	r0, #0
 8000756:	f003 fa85 	bl	8003c64 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f003 fa9b 	bl	8003c98 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000766:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b24      	ldr	r3, [pc, #144]	; (80007fc <main+0xfc>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x80>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x6a>
if ( timeout < 0 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x8a>
{
Error_Handler();
 8000786:	f000 fc09 	bl	8000f9c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 fa21 	bl	8000bd0 <MX_GPIO_Init>
  MX_DMA_Init();
 800078e:	f000 f9ff 	bl	8000b90 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000792:	f000 f9cb 	bl	8000b2c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000796:	f000 f909 	bl	80009ac <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800079a:	f000 f97b 	bl	8000a94 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800079e:	f000 f8b9 	bl	8000914 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  GPIOB->ODR = 0x00;
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <main+0x100>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  HAL_Delay(500);
 80007a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ac:	f000 fe78 	bl	80014a0 <HAL_Delay>
  HAL_TIM_Base_Start(&htim3);
 80007b0:	4814      	ldr	r0, [pc, #80]	; (8000804 <main+0x104>)
 80007b2:	f006 fa89 	bl	8006cc8 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 80007b6:	2100      	movs	r1, #0
 80007b8:	4812      	ldr	r0, [pc, #72]	; (8000804 <main+0x104>)
 80007ba:	f006 fbfd 	bl	8006fb8 <HAL_TIM_OC_Start>
  hdma_tim3_ch1.XferCpltCallback = endof_scan_line;
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <main+0x108>)
 80007c0:	4a12      	ldr	r2, [pc, #72]	; (800080c <main+0x10c>)
 80007c2:	63da      	str	r2, [r3, #60]	; 0x3c
//  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC1);
//
//
//  HAL_Delay(2000);
//
  HAL_DMA_Start_IT(&hdma_tim3_ch1, (uint32_t)test_frame, (uint32_t) &GPIOB->ODR, 16);
 80007c4:	4912      	ldr	r1, [pc, #72]	; (8000810 <main+0x110>)
 80007c6:	2310      	movs	r3, #16
 80007c8:	4a12      	ldr	r2, [pc, #72]	; (8000814 <main+0x114>)
 80007ca:	480f      	ldr	r0, [pc, #60]	; (8000808 <main+0x108>)
 80007cc:	f001 fb04 	bl	8001dd8 <HAL_DMA_Start_IT>
  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC1);
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <main+0x104>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	68da      	ldr	r2, [r3, #12]
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <main+0x104>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007de:	60da      	str	r2, [r3, #12]

  HAL_Delay(1000);
 80007e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e4:	f000 fe5c 	bl	80014a0 <HAL_Delay>

  start_Vsync_Sequence();
 80007e8:	f000 fb34 	bl	8000e54 <start_Vsync_Sequence>

  HAL_Delay(1000);
 80007ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007f0:	f000 fe56 	bl	80014a0 <HAL_Delay>

  start_Hsync_Sequence();
 80007f4:	f000 fb16 	bl	8000e24 <start_Hsync_Sequence>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <main+0xf8>
 80007fa:	bf00      	nop
 80007fc:	58024400 	.word	0x58024400
 8000800:	58020400 	.word	0x58020400
 8000804:	24000098 	.word	0x24000098
 8000808:	240000e4 	.word	0x240000e4
 800080c:	08000d91 	.word	0x08000d91
 8000810:	24000008 	.word	0x24000008
 8000814:	58020414 	.word	0x58020414

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b09c      	sub	sp, #112	; 0x70
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000822:	224c      	movs	r2, #76	; 0x4c
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f009 f845 	bl	80098b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2220      	movs	r2, #32
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f009 f83f 	bl	80098b6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000838:	2004      	movs	r0, #4
 800083a:	f003 fb71 	bl	8003f20 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	4b32      	ldr	r3, [pc, #200]	; (800090c <SystemClock_Config+0xf4>)
 8000844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000846:	4a31      	ldr	r2, [pc, #196]	; (800090c <SystemClock_Config+0xf4>)
 8000848:	f023 0301 	bic.w	r3, r3, #1
 800084c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800084e:	4b2f      	ldr	r3, [pc, #188]	; (800090c <SystemClock_Config+0xf4>)
 8000850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	4b2d      	ldr	r3, [pc, #180]	; (8000910 <SystemClock_Config+0xf8>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000860:	4a2b      	ldr	r2, [pc, #172]	; (8000910 <SystemClock_Config+0xf8>)
 8000862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b29      	ldr	r3, [pc, #164]	; (8000910 <SystemClock_Config+0xf8>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000874:	bf00      	nop
 8000876:	4b26      	ldr	r3, [pc, #152]	; (8000910 <SystemClock_Config+0xf8>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800087e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000882:	d1f8      	bne.n	8000876 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000884:	2301      	movs	r3, #1
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000888:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088e:	2302      	movs	r3, #2
 8000890:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000892:	2302      	movs	r3, #2
 8000894:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000896:	2301      	movs	r3, #1
 8000898:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800089a:	2312      	movs	r3, #18
 800089c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008aa:	230c      	movs	r3, #12
 80008ac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80008ae:	2302      	movs	r3, #2
 80008b0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80008b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008bc:	4618      	mov	r0, r3
 80008be:	f003 fb99 	bl	8003ff4 <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008c8:	f000 fb68 	bl	8000f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008cc:	233f      	movs	r3, #63	; 0x3f
 80008ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d0:	2303      	movs	r3, #3
 80008d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008dc:	2340      	movs	r3, #64	; 0x40
 80008de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008e0:	2340      	movs	r3, #64	; 0x40
 80008e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008ea:	2340      	movs	r3, #64	; 0x40
 80008ec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2101      	movs	r1, #1
 80008f2:	4618      	mov	r0, r3
 80008f4:	f003 ffd8 	bl	80048a8 <HAL_RCC_ClockConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80008fe:	f000 fb4d 	bl	8000f9c <Error_Handler>
  }
}
 8000902:	bf00      	nop
 8000904:	3770      	adds	r7, #112	; 0x70
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	58000400 	.word	0x58000400
 8000910:	58024800 	.word	0x58024800

08000914 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091a:	f107 0310 	add.w	r3, r7, #16
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000932:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000934:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000938:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800093a:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <MX_TIM2_Init+0x94>)
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000948:	2201      	movs	r2, #1
 800094a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_TIM2_Init+0x94>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000954:	2280      	movs	r2, #128	; 0x80
 8000956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000958:	4813      	ldr	r0, [pc, #76]	; (80009a8 <MX_TIM2_Init+0x94>)
 800095a:	f006 f95d 	bl	8006c18 <HAL_TIM_Base_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000964:	f000 fb1a 	bl	8000f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800096e:	f107 0310 	add.w	r3, r7, #16
 8000972:	4619      	mov	r1, r3
 8000974:	480c      	ldr	r0, [pc, #48]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000976:	f006 fdaf 	bl	80074d8 <HAL_TIM_ConfigClockSource>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000980:	f000 fb0c 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000992:	f007 fb01 	bl	8007f98 <HAL_TIMEx_MasterConfigSynchronization>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800099c:	f000 fafe 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	3720      	adds	r7, #32
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2400004c 	.word	0x2400004c

080009ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08e      	sub	sp, #56	; 0x38
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009cc:	463b      	mov	r3, r7
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]
 80009da:	615a      	str	r2, [r3, #20]
 80009dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009de:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <MX_TIM3_Init+0xe0>)
 80009e0:	4a2b      	ldr	r2, [pc, #172]	; (8000a90 <MX_TIM3_Init+0xe4>)
 80009e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80009e4:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <MX_TIM3_Init+0xe0>)
 80009e6:	2263      	movs	r2, #99	; 0x63
 80009e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <MX_TIM3_Init+0xe0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5;
 80009f0:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <MX_TIM3_Init+0xe0>)
 80009f2:	2205      	movs	r2, #5
 80009f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f6:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <MX_TIM3_Init+0xe0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009fc:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <MX_TIM3_Init+0xe0>)
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a02:	4822      	ldr	r0, [pc, #136]	; (8000a8c <MX_TIM3_Init+0xe0>)
 8000a04:	f006 f908 	bl	8006c18 <HAL_TIM_Base_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a0e:	f000 fac5 	bl	8000f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	481b      	ldr	r0, [pc, #108]	; (8000a8c <MX_TIM3_Init+0xe0>)
 8000a20:	f006 fd5a 	bl	80074d8 <HAL_TIM_ConfigClockSource>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a2a:	f000 fab7 	bl	8000f9c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000a2e:	4817      	ldr	r0, [pc, #92]	; (8000a8c <MX_TIM3_Init+0xe0>)
 8000a30:	f006 fa61 	bl	8006ef6 <HAL_TIM_OC_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a3a:	f000 faaf 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480f      	ldr	r0, [pc, #60]	; (8000a8c <MX_TIM3_Init+0xe0>)
 8000a4e:	f007 faa3 	bl	8007f98 <HAL_TIMEx_MasterConfigSynchronization>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a58:	f000 faa0 	bl	8000f9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	2200      	movs	r2, #0
 8000a70:	4619      	mov	r1, r3
 8000a72:	4806      	ldr	r0, [pc, #24]	; (8000a8c <MX_TIM3_Init+0xe0>)
 8000a74:	f006 fcb6 	bl	80073e4 <HAL_TIM_OC_ConfigChannel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000a7e:	f000 fa8d 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	3738      	adds	r7, #56	; 0x38
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	24000098 	.word	0x24000098
 8000a90:	40000400 	.word	0x40000400

08000a94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a98:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000a9a:	4a23      	ldr	r2, [pc, #140]	; (8000b28 <MX_USART3_UART_Init+0x94>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a9e:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000adc:	4811      	ldr	r0, [pc, #68]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ade:	f007 fb07 	bl	80080f0 <HAL_UART_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ae8:	f000 fa58 	bl	8000f9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aec:	2100      	movs	r1, #0
 8000aee:	480d      	ldr	r0, [pc, #52]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000af0:	f008 fb0f 	bl	8009112 <HAL_UARTEx_SetTxFifoThreshold>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000afa:	f000 fa4f 	bl	8000f9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afe:	2100      	movs	r1, #0
 8000b00:	4808      	ldr	r0, [pc, #32]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000b02:	f008 fb44 	bl	800918e <HAL_UARTEx_SetRxFifoThreshold>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b0c:	f000 fa46 	bl	8000f9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000b12:	f008 fac5 	bl	80090a0 <HAL_UARTEx_DisableFifoMode>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b1c:	f000 fa3e 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2400015c 	.word	0x2400015c
 8000b28:	40004800 	.word	0x40004800

08000b2c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b32:	4a16      	ldr	r2, [pc, #88]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b34:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b38:	2209      	movs	r2, #9
 8000b3a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b3e:	2202      	movs	r2, #2
 8000b40:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b74:	f003 f8a4 	bl	8003cc0 <HAL_PCD_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b7e:	f000 fa0d 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	240001f0 	.word	0x240001f0
 8000b8c:	40080000 	.word	0x40080000

08000b90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <MX_DMA_Init+0x3c>)
 8000b98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <MX_DMA_Init+0x3c>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_DMA_Init+0x3c>)
 8000ba8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	200b      	movs	r0, #11
 8000bba:	f000 fd7c 	bl	80016b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bbe:	200b      	movs	r0, #11
 8000bc0:	f000 fd93 	bl	80016ea <HAL_NVIC_EnableIRQ>

}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	58024400 	.word	0x58024400

08000bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	; 0x30
 8000bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	4b64      	ldr	r3, [pc, #400]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bec:	4a62      	ldr	r2, [pc, #392]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf6:	4b60      	ldr	r3, [pc, #384]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
 8000c02:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c04:	4b5c      	ldr	r3, [pc, #368]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0a:	4a5b      	ldr	r2, [pc, #364]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c14:	4b58      	ldr	r3, [pc, #352]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b55      	ldr	r3, [pc, #340]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	4a53      	ldr	r2, [pc, #332]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c32:	4b51      	ldr	r3, [pc, #324]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c40:	4b4d      	ldr	r3, [pc, #308]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	4a4c      	ldr	r2, [pc, #304]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c50:	4b49      	ldr	r3, [pc, #292]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c5e:	4b46      	ldr	r3, [pc, #280]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c64:	4a44      	ldr	r2, [pc, #272]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000c66:	f043 0310 	orr.w	r3, r3, #16
 8000c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6e:	4b42      	ldr	r3, [pc, #264]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c74:	f003 0310 	and.w	r3, r3, #16
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7c:	4b3e      	ldr	r3, [pc, #248]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c82:	4a3d      	ldr	r2, [pc, #244]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000c84:	f043 0308 	orr.w	r3, r3, #8
 8000c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8c:	4b3a      	ldr	r3, [pc, #232]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c92:	f003 0308 	and.w	r3, r3, #8
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c9a:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	4a35      	ldr	r2, [pc, #212]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000caa:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cbe:	482f      	ldr	r0, [pc, #188]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000cc0:	f002 ffb6 	bl	8003c30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f248 0103 	movw	r1, #32771	; 0x8003
 8000cca:	482d      	ldr	r0, [pc, #180]	; (8000d80 <MX_GPIO_Init+0x1b0>)
 8000ccc:	f002 ffb0 	bl	8003c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cd0:	2332      	movs	r3, #50	; 0x32
 8000cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce0:	230b      	movs	r3, #11
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4826      	ldr	r0, [pc, #152]	; (8000d84 <MX_GPIO_Init+0x1b4>)
 8000cec:	f002 fdf0 	bl	80038d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000cf0:	2386      	movs	r3, #134	; 0x86
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d00:	230b      	movs	r3, #11
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	481f      	ldr	r0, [pc, #124]	; (8000d88 <MX_GPIO_Init+0x1b8>)
 8000d0c:	f002 fde0 	bl	80038d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d14:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	4619      	mov	r1, r3
 8000d28:	4814      	ldr	r0, [pc, #80]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000d2a:	f002 fdd1 	bl	80038d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8000d2e:	f248 0303 	movw	r3, #32771	; 0x8003
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	480e      	ldr	r0, [pc, #56]	; (8000d80 <MX_GPIO_Init+0x1b0>)
 8000d48:	f002 fdc2 	bl	80038d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d4c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d5e:	230b      	movs	r3, #11
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	4808      	ldr	r0, [pc, #32]	; (8000d8c <MX_GPIO_Init+0x1bc>)
 8000d6a:	f002 fdb1 	bl	80038d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d6e:	bf00      	nop
 8000d70:	3730      	adds	r7, #48	; 0x30
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	58024400 	.word	0x58024400
 8000d7c:	58020400 	.word	0x58020400
 8000d80:	58021000 	.word	0x58021000
 8000d84:	58020800 	.word	0x58020800
 8000d88:	58020000 	.word	0x58020000
 8000d8c:	58021800 	.word	0x58021800

08000d90 <endof_scan_line>:

/* USER CODE BEGIN 4 */
void endof_scan_line(DMA_HandleTypeDef* _hdma){
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

	GPIOB->ODR = 0x00;
 8000d98:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <endof_scan_line+0x70>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000d9e:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <endof_scan_line+0x74>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <endof_scan_line+0x78>)
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d903      	bls.n	8000db2 <endof_scan_line+0x22>
 8000daa:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <endof_scan_line+0x7c>)
 8000dac:	2220      	movs	r2, #32
 8000dae:	605a      	str	r2, [r3, #4]

	// Setup for Hsync sequence

	return;
 8000db0:	e021      	b.n	8000df6 <endof_scan_line+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <endof_scan_line+0x74>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <endof_scan_line+0x80>)
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d903      	bls.n	8000dc6 <endof_scan_line+0x36>
 8000dbe:	4a15      	ldr	r2, [pc, #84]	; (8000e14 <endof_scan_line+0x84>)
 8000dc0:	2320      	movs	r3, #32
 8000dc2:	60d3      	str	r3, [r2, #12]
	return;
 8000dc4:	e017      	b.n	8000df6 <endof_scan_line+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <endof_scan_line+0x74>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <endof_scan_line+0x88>)
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d903      	bls.n	8000dda <endof_scan_line+0x4a>
 8000dd2:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <endof_scan_line+0x84>)
 8000dd4:	2320      	movs	r3, #32
 8000dd6:	6093      	str	r3, [r2, #8]
	return;
 8000dd8:	e00d      	b.n	8000df6 <endof_scan_line+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <endof_scan_line+0x74>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <endof_scan_line+0x8c>)
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d903      	bls.n	8000dee <endof_scan_line+0x5e>
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <endof_scan_line+0x90>)
 8000de8:	2320      	movs	r3, #32
 8000dea:	60d3      	str	r3, [r2, #12]
	return;
 8000dec:	e003      	b.n	8000df6 <endof_scan_line+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000dee:	4a0c      	ldr	r2, [pc, #48]	; (8000e20 <endof_scan_line+0x90>)
 8000df0:	2320      	movs	r3, #32
 8000df2:	6093      	str	r3, [r2, #8]
	return;
 8000df4:	bf00      	nop
}
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	58020400 	.word	0x58020400
 8000e04:	240000e4 	.word	0x240000e4
 8000e08:	400204b8 	.word	0x400204b8
 8000e0c:	58025400 	.word	0x58025400
 8000e10:	40020458 	.word	0x40020458
 8000e14:	40020400 	.word	0x40020400
 8000e18:	400200b8 	.word	0x400200b8
 8000e1c:	40020058 	.word	0x40020058
 8000e20:	40020000 	.word	0x40020000

08000e24 <start_Hsync_Sequence>:

void start_Hsync_Sequence(){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0


	// Setup presecaler
//	TIM2->PSC = 0;
	TIM2->PSC = 99;
 8000e28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e2c:	2263      	movs	r2, #99	; 0x63
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28

	// Choose pulse sequence
	pulse_iter = 0;
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <start_Hsync_Sequence+0x24>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	801a      	strh	r2, [r3, #0]

	// Show width of pulse
	// TODO: Remove later
	GPIOB->ODR = 0xffff;
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <start_Hsync_Sequence+0x28>)
 8000e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e3c:	615a      	str	r2, [r3, #20]

	// Run the timer
	HAL_TIM_Base_Start_IT(&htim2);
 8000e3e:	4804      	ldr	r0, [pc, #16]	; (8000e50 <start_Hsync_Sequence+0x2c>)
 8000e40:	f005 ffb2 	bl	8006da8 <HAL_TIM_Base_Start_IT>

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	240006d4 	.word	0x240006d4
 8000e4c:	58020400 	.word	0x58020400
 8000e50:	2400004c 	.word	0x2400004c

08000e54 <start_Vsync_Sequence>:


void start_Vsync_Sequence(){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0


	// Setup presecaler
	TIM2->PSC = 0;
 8000e58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	629a      	str	r2, [r3, #40]	; 0x28


	// Choose pulse sequence
	pulse_iter = 0x10;
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <start_Vsync_Sequence+0x24>)
 8000e62:	2210      	movs	r2, #16
 8000e64:	801a      	strh	r2, [r3, #0]

	// Show width of pulse
	// TODO: Remove later
	GPIOB->ODR = 0xffff;
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <start_Vsync_Sequence+0x28>)
 8000e68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e6c:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start_IT(&htim2);
 8000e6e:	4804      	ldr	r0, [pc, #16]	; (8000e80 <start_Vsync_Sequence+0x2c>)
 8000e70:	f005 ff9a 	bl	8006da8 <HAL_TIM_Base_Start_IT>
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	240006d4 	.word	0x240006d4
 8000e7c:	58020400 	.word	0x58020400
 8000e80:	2400004c 	.word	0x2400004c

08000e84 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

	if(htim == &htim2){
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a3e      	ldr	r2, [pc, #248]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d175      	bne.n	8000f80 <HAL_TIM_PeriodElapsedCallback+0xfc>

		if (pulse_iter == 0x00){
 8000e94:	4b3d      	ldr	r3, [pc, #244]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d108      	bne.n	8000eae <HAL_TIM_PeriodElapsedCallback+0x2a>
			GPIOE->ODR = 0x8001;
 8000e9c:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000e9e:	f248 0201 	movw	r2, #32769	; 0x8001
 8000ea2:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 45;
 8000ea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ea8:	222d      	movs	r2, #45	; 0x2d
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eac:	e062      	b.n	8000f74 <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
		else if (pulse_iter == 0x01){
 8000eae:	4b37      	ldr	r3, [pc, #220]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d109      	bne.n	8000eca <HAL_TIM_PeriodElapsedCallback+0x46>
			GPIOE->ODR = 0x8001;
 8000eb6:	4b36      	ldr	r3, [pc, #216]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000eb8:	f248 0201 	movw	r2, #32769	; 0x8001
 8000ebc:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 285;
 8000ebe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec2:	f240 121d 	movw	r2, #285	; 0x11d
 8000ec6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ec8:	e054      	b.n	8000f74 <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
		else if (pulse_iter == 0x02){
 8000eca:	4b30      	ldr	r3, [pc, #192]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d107      	bne.n	8000ee2 <HAL_TIM_PeriodElapsedCallback+0x5e>

			GPIOE->ODR = 0x0001;
 8000ed2:	4b2f      	ldr	r3, [pc, #188]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 143;
 8000ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000edc:	228f      	movs	r2, #143	; 0x8f
 8000ede:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ee0:	e048      	b.n	8000f74 <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
		else if (pulse_iter == 0x03){
 8000ee2:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d108      	bne.n	8000efc <HAL_TIM_PeriodElapsedCallback+0x78>

			GPIOE->ODR = 0x8001;
 8000eea:	4b29      	ldr	r3, [pc, #164]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000eec:	f248 0201 	movw	r2, #32769	; 0x8001
 8000ef0:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 1;
 8000ef2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000efa:	e03b      	b.n	8000f74 <HAL_TIM_PeriodElapsedCallback+0xf0>
		}


		else if (pulse_iter == 0x10){
 8000efc:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	2b10      	cmp	r3, #16
 8000f02:	d109      	bne.n	8000f18 <HAL_TIM_PeriodElapsedCallback+0x94>
			GPIOE->ODR = 0x8001;
 8000f04:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f06:	f248 0201 	movw	r2, #32769	; 0x8001
 8000f0a:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 23827;
 8000f0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f10:	f645 5213 	movw	r2, #23827	; 0x5d13
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f16:	e02d      	b.n	8000f74 <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
		else if (pulse_iter == 0x11){
 8000f18:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	2b11      	cmp	r3, #17
 8000f1e:	d109      	bne.n	8000f34 <HAL_TIM_PeriodElapsedCallback+0xb0>
			GPIOE->ODR = 0x8001;
 8000f20:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f22:	f248 0201 	movw	r2, #32769	; 0x8001
 8000f26:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 4751;
 8000f28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f2c:	f241 228f 	movw	r2, #4751	; 0x128f
 8000f30:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f32:	e01f      	b.n	8000f74 <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
		else if (pulse_iter == 0x12){
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	2b12      	cmp	r3, #18
 8000f3a:	d108      	bne.n	8000f4e <HAL_TIM_PeriodElapsedCallback+0xca>
			GPIOE->ODR = 0x8000;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f42:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 78675;
 8000f44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f48:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000f4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f4c:	e012      	b.n	8000f74 <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
		else if (pulse_iter == 0x13){
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	2b13      	cmp	r3, #19
 8000f54:	d108      	bne.n	8000f68 <HAL_TIM_PeriodElapsedCallback+0xe4>
			GPIOE->ODR = 0x8001;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f58:	f248 0201 	movw	r2, #32769	; 0x8001
 8000f5c:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 1;
 8000f5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f62:	2201      	movs	r2, #1
 8000f64:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f66:	e005      	b.n	8000f74 <HAL_TIM_PeriodElapsedCallback+0xf0>
		}



		else{
			HAL_TIM_Base_Stop_IT(&htim2);
 8000f68:	4807      	ldr	r0, [pc, #28]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f6a:	f005 ff95 	bl	8006e98 <HAL_TIM_Base_Stop_IT>
			GPIOB->ODR = 0x0000;
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	615a      	str	r2, [r3, #20]

		}

//		TIM2->ARR = pulse_sequence[pulse_iter];
		pulse_iter++;
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f7e:	801a      	strh	r2, [r3, #0]


	}

}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	2400004c 	.word	0x2400004c
 8000f8c:	240006d4 	.word	0x240006d4
 8000f90:	58021000 	.word	0x58021000
 8000f94:	00013353 	.word	0x00013353
 8000f98:	58020400 	.word	0x58020400

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <Error_Handler+0x8>
	...

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_MspInit+0x30>)
 8000fb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fb4:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_MspInit+0x30>)
 8000fb6:	f043 0302 	orr.w	r3, r3, #2
 8000fba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_MspInit+0x30>)
 8000fc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	58024400 	.word	0x58024400

08000fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fec:	d117      	bne.n	800101e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fee:	4b30      	ldr	r3, [pc, #192]	; (80010b0 <HAL_TIM_Base_MspInit+0xd4>)
 8000ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ff4:	4a2e      	ldr	r2, [pc, #184]	; (80010b0 <HAL_TIM_Base_MspInit+0xd4>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ffe:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <HAL_TIM_Base_MspInit+0xd4>)
 8001000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	2100      	movs	r1, #0
 8001010:	201c      	movs	r0, #28
 8001012:	f000 fb50 	bl	80016b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001016:	201c      	movs	r0, #28
 8001018:	f000 fb67 	bl	80016ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800101c:	e043      	b.n	80010a6 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a24      	ldr	r2, [pc, #144]	; (80010b4 <HAL_TIM_Base_MspInit+0xd8>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d13e      	bne.n	80010a6 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001028:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <HAL_TIM_Base_MspInit+0xd4>)
 800102a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800102e:	4a20      	ldr	r2, [pc, #128]	; (80010b0 <HAL_TIM_Base_MspInit+0xd4>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <HAL_TIM_Base_MspInit+0xd4>)
 800103a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1.Instance = DMA1_Stream0;
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <HAL_TIM_Base_MspInit+0xdc>)
 8001048:	4a1c      	ldr	r2, [pc, #112]	; (80010bc <HAL_TIM_Base_MspInit+0xe0>)
 800104a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <HAL_TIM_Base_MspInit+0xdc>)
 800104e:	2217      	movs	r2, #23
 8001050:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <HAL_TIM_Base_MspInit+0xdc>)
 8001054:	2240      	movs	r2, #64	; 0x40
 8001056:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001058:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <HAL_TIM_Base_MspInit+0xdc>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <HAL_TIM_Base_MspInit+0xdc>)
 8001060:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001064:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <HAL_TIM_Base_MspInit+0xdc>)
 8001068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800106c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_TIM_Base_MspInit+0xdc>)
 8001070:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001074:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <HAL_TIM_Base_MspInit+0xdc>)
 8001078:	2200      	movs	r2, #0
 800107a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_TIM_Base_MspInit+0xdc>)
 800107e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001082:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <HAL_TIM_Base_MspInit+0xdc>)
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800108a:	480b      	ldr	r0, [pc, #44]	; (80010b8 <HAL_TIM_Base_MspInit+0xdc>)
 800108c:	f000 fb48 	bl	8001720 <HAL_DMA_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_TIM_Base_MspInit+0xbe>
      Error_Handler();
 8001096:	f7ff ff81 	bl	8000f9c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <HAL_TIM_Base_MspInit+0xdc>)
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
 80010a0:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <HAL_TIM_Base_MspInit+0xdc>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	58024400 	.word	0x58024400
 80010b4:	40000400 	.word	0x40000400
 80010b8:	240000e4 	.word	0x240000e4
 80010bc:	40020010 	.word	0x40020010

080010c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b0ba      	sub	sp, #232	; 0xe8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	22c0      	movs	r2, #192	; 0xc0
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f008 fbe8 	bl	80098b6 <memset>
  if(huart->Instance==USART3)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a27      	ldr	r2, [pc, #156]	; (8001188 <HAL_UART_MspInit+0xc8>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d146      	bne.n	800117e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010f0:	f04f 0202 	mov.w	r2, #2
 80010f4:	f04f 0300 	mov.w	r3, #0
 80010f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	4618      	mov	r0, r3
 8001108:	f003 ff5a 	bl	8004fc0 <HAL_RCCEx_PeriphCLKConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001112:	f7ff ff43 	bl	8000f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_UART_MspInit+0xcc>)
 8001118:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800111c:	4a1b      	ldr	r2, [pc, #108]	; (800118c <HAL_UART_MspInit+0xcc>)
 800111e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001122:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <HAL_UART_MspInit+0xcc>)
 8001128:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800112c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_UART_MspInit+0xcc>)
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113a:	4a14      	ldr	r2, [pc, #80]	; (800118c <HAL_UART_MspInit+0xcc>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_UART_MspInit+0xcc>)
 8001146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001152:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001156:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800116c:	2307      	movs	r3, #7
 800116e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001172:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <HAL_UART_MspInit+0xd0>)
 800117a:	f002 fba9 	bl	80038d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800117e:	bf00      	nop
 8001180:	37e8      	adds	r7, #232	; 0xe8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40004800 	.word	0x40004800
 800118c:	58024400 	.word	0x58024400
 8001190:	58020c00 	.word	0x58020c00

08001194 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b0ba      	sub	sp, #232	; 0xe8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	22c0      	movs	r2, #192	; 0xc0
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f008 fb7e 	bl	80098b6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a38      	ldr	r2, [pc, #224]	; (80012a0 <HAL_PCD_MspInit+0x10c>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d169      	bne.n	8001298 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80011d0:	2301      	movs	r3, #1
 80011d2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80011d4:	2312      	movs	r3, #18
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011d8:	2302      	movs	r3, #2
 80011da:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80011dc:	2303      	movs	r3, #3
 80011de:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80011e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80011ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011ee:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80011f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4618      	mov	r0, r3
 80011fe:	f003 fedf 	bl	8004fc0 <HAL_RCCEx_PeriphCLKConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8001208:	f7ff fec8 	bl	8000f9c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800120c:	f002 fee2 	bl	8003fd4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <HAL_PCD_MspInit+0x110>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001216:	4a23      	ldr	r2, [pc, #140]	; (80012a4 <HAL_PCD_MspInit+0x110>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001220:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <HAL_PCD_MspInit+0x110>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800122e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001232:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001248:	230a      	movs	r3, #10
 800124a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001252:	4619      	mov	r1, r3
 8001254:	4814      	ldr	r0, [pc, #80]	; (80012a8 <HAL_PCD_MspInit+0x114>)
 8001256:	f002 fb3b 	bl	80038d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800125a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800125e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001272:	4619      	mov	r1, r3
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <HAL_PCD_MspInit+0x114>)
 8001276:	f002 fb2b 	bl	80038d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_PCD_MspInit+0x110>)
 800127c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001280:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <HAL_PCD_MspInit+0x110>)
 8001282:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001286:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_PCD_MspInit+0x110>)
 800128c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001298:	bf00      	nop
 800129a:	37e8      	adds	r7, #232	; 0xe8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40080000 	.word	0x40080000
 80012a4:	58024400 	.word	0x58024400
 80012a8:	58020000 	.word	0x58020000

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <NMI_Handler+0x4>

080012b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <MemManage_Handler+0x4>

080012be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <BusFault_Handler+0x4>

080012c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <UsageFault_Handler+0x4>

080012ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f8:	f000 f8b2 	bl	8001460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}

08001300 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <DMA1_Stream0_IRQHandler+0x10>)
 8001306:	f000 ffd1 	bl	80022ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	240000e4 	.word	0x240000e4

08001314 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <TIM2_IRQHandler+0x10>)
 800131a:	f005 ff5b 	bl	80071d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2400004c 	.word	0x2400004c

08001328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001360 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800132c:	f7ff f952 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001330:	480c      	ldr	r0, [pc, #48]	; (8001364 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001332:	490d      	ldr	r1, [pc, #52]	; (8001368 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001334:	4a0d      	ldr	r2, [pc, #52]	; (800136c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001348:	4c0a      	ldr	r4, [pc, #40]	; (8001374 <LoopFillZerobss+0x22>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001356:	f008 fab7 	bl	80098c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135a:	f7ff f9d1 	bl	8000700 <main>
  bx  lr
 800135e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001360:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001364:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001368:	24000030 	.word	0x24000030
  ldr r2, =_sidata
 800136c:	08009978 	.word	0x08009978
  ldr r2, =_sbss
 8001370:	24000030 	.word	0x24000030
  ldr r4, =_ebss
 8001374:	240006dc 	.word	0x240006dc

08001378 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC3_IRQHandler>
	...

0800137c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001382:	2003      	movs	r0, #3
 8001384:	f000 f98c 	bl	80016a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001388:	f003 fc44 	bl	8004c14 <HAL_RCC_GetSysClockFreq>
 800138c:	4602      	mov	r2, r0
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_Init+0x68>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	0a1b      	lsrs	r3, r3, #8
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	4913      	ldr	r1, [pc, #76]	; (80013e8 <HAL_Init+0x6c>)
 800139a:	5ccb      	ldrb	r3, [r1, r3]
 800139c:	f003 031f 	and.w	r3, r3, #31
 80013a0:	fa22 f303 	lsr.w	r3, r2, r3
 80013a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <HAL_Init+0x68>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <HAL_Init+0x6c>)
 80013b0:	5cd3      	ldrb	r3, [r2, r3]
 80013b2:	f003 031f 	and.w	r3, r3, #31
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	fa22 f303 	lsr.w	r3, r2, r3
 80013bc:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <HAL_Init+0x70>)
 80013be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013c0:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <HAL_Init+0x74>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c6:	2000      	movs	r0, #0
 80013c8:	f000 f814 	bl	80013f4 <HAL_InitTick>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e002      	b.n	80013dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013d6:	f7ff fde7 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	58024400 	.word	0x58024400
 80013e8:	08009928 	.word	0x08009928
 80013ec:	24000004 	.word	0x24000004
 80013f0:	24000000 	.word	0x24000000

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_InitTick+0x60>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e021      	b.n	800144c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <HAL_InitTick+0x64>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_InitTick+0x60>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001416:	fbb3 f3f1 	udiv	r3, r3, r1
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f971 	bl	8001706 <HAL_SYSTICK_Config>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e00e      	b.n	800144c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b0f      	cmp	r3, #15
 8001432:	d80a      	bhi.n	800144a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001434:	2200      	movs	r2, #0
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f000 f93b 	bl	80016b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001440:	4a06      	ldr	r2, [pc, #24]	; (800145c <HAL_InitTick+0x68>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	e000      	b.n	800144c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2400002c 	.word	0x2400002c
 8001458:	24000000 	.word	0x24000000
 800145c:	24000028 	.word	0x24000028

08001460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x20>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_IncTick+0x24>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <HAL_IncTick+0x24>)
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	2400002c 	.word	0x2400002c
 8001484:	240006d8 	.word	0x240006d8

08001488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <HAL_GetTick+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	240006d8 	.word	0x240006d8

080014a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f7ff ffee 	bl	8001488 <HAL_GetTick>
 80014ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b8:	d005      	beq.n	80014c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_Delay+0x44>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014c6:	bf00      	nop
 80014c8:	f7ff ffde 	bl	8001488 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d8f7      	bhi.n	80014c8 <HAL_Delay+0x28>
  {
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2400002c 	.word	0x2400002c

080014e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <HAL_GetREVID+0x14>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	0c1b      	lsrs	r3, r3, #16
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	5c001000 	.word	0x5c001000

08001500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <__NVIC_SetPriorityGrouping+0x40>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 800152a:	4313      	orrs	r3, r2
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <__NVIC_SetPriorityGrouping+0x40>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00
 8001544:	05fa0000 	.word	0x05fa0000

08001548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <__NVIC_GetPriorityGrouping+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0307 	and.w	r3, r3, #7
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800156e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001572:	2b00      	cmp	r3, #0
 8001574:	db0b      	blt.n	800158e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	f003 021f 	and.w	r2, r3, #31
 800157c:	4907      	ldr	r1, [pc, #28]	; (800159c <__NVIC_EnableIRQ+0x38>)
 800157e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	2001      	movs	r0, #1
 8001586:	fa00 f202 	lsl.w	r2, r0, r2
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	; (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	; (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
         );
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	; 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800166c:	d301      	bcc.n	8001672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166e:	2301      	movs	r3, #1
 8001670:	e00f      	b.n	8001692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <SysTick_Config+0x40>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167a:	210f      	movs	r1, #15
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f7ff ff8e 	bl	80015a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <SysTick_Config+0x40>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168a:	4b04      	ldr	r3, [pc, #16]	; (800169c <SysTick_Config+0x40>)
 800168c:	2207      	movs	r2, #7
 800168e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	e000e010 	.word	0xe000e010

080016a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff29 	bl	8001500 <__NVIC_SetPriorityGrouping>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016c4:	f7ff ff40 	bl	8001548 <__NVIC_GetPriorityGrouping>
 80016c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	6978      	ldr	r0, [r7, #20]
 80016d0:	f7ff ff90 	bl	80015f4 <NVIC_EncodePriority>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff5f 	bl	80015a0 <__NVIC_SetPriority>
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff33 	bl	8001564 <__NVIC_EnableIRQ>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ffa4 	bl	800165c <SysTick_Config>
 8001714:	4603      	mov	r3, r0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff feae 	bl	8001488 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e316      	b.n	8001d66 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a66      	ldr	r2, [pc, #408]	; (80018d8 <HAL_DMA_Init+0x1b8>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d04a      	beq.n	80017d8 <HAL_DMA_Init+0xb8>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a65      	ldr	r2, [pc, #404]	; (80018dc <HAL_DMA_Init+0x1bc>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d045      	beq.n	80017d8 <HAL_DMA_Init+0xb8>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a63      	ldr	r2, [pc, #396]	; (80018e0 <HAL_DMA_Init+0x1c0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d040      	beq.n	80017d8 <HAL_DMA_Init+0xb8>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a62      	ldr	r2, [pc, #392]	; (80018e4 <HAL_DMA_Init+0x1c4>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d03b      	beq.n	80017d8 <HAL_DMA_Init+0xb8>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a60      	ldr	r2, [pc, #384]	; (80018e8 <HAL_DMA_Init+0x1c8>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d036      	beq.n	80017d8 <HAL_DMA_Init+0xb8>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a5f      	ldr	r2, [pc, #380]	; (80018ec <HAL_DMA_Init+0x1cc>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d031      	beq.n	80017d8 <HAL_DMA_Init+0xb8>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a5d      	ldr	r2, [pc, #372]	; (80018f0 <HAL_DMA_Init+0x1d0>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d02c      	beq.n	80017d8 <HAL_DMA_Init+0xb8>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a5c      	ldr	r2, [pc, #368]	; (80018f4 <HAL_DMA_Init+0x1d4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d027      	beq.n	80017d8 <HAL_DMA_Init+0xb8>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a5a      	ldr	r2, [pc, #360]	; (80018f8 <HAL_DMA_Init+0x1d8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d022      	beq.n	80017d8 <HAL_DMA_Init+0xb8>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a59      	ldr	r2, [pc, #356]	; (80018fc <HAL_DMA_Init+0x1dc>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d01d      	beq.n	80017d8 <HAL_DMA_Init+0xb8>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a57      	ldr	r2, [pc, #348]	; (8001900 <HAL_DMA_Init+0x1e0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d018      	beq.n	80017d8 <HAL_DMA_Init+0xb8>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a56      	ldr	r2, [pc, #344]	; (8001904 <HAL_DMA_Init+0x1e4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d013      	beq.n	80017d8 <HAL_DMA_Init+0xb8>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a54      	ldr	r2, [pc, #336]	; (8001908 <HAL_DMA_Init+0x1e8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d00e      	beq.n	80017d8 <HAL_DMA_Init+0xb8>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a53      	ldr	r2, [pc, #332]	; (800190c <HAL_DMA_Init+0x1ec>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d009      	beq.n	80017d8 <HAL_DMA_Init+0xb8>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a51      	ldr	r2, [pc, #324]	; (8001910 <HAL_DMA_Init+0x1f0>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d004      	beq.n	80017d8 <HAL_DMA_Init+0xb8>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a50      	ldr	r2, [pc, #320]	; (8001914 <HAL_DMA_Init+0x1f4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d101      	bne.n	80017dc <HAL_DMA_Init+0xbc>
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <HAL_DMA_Init+0xbe>
 80017dc:	2300      	movs	r3, #0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 813b 	beq.w	8001a5a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2202      	movs	r2, #2
 80017e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a37      	ldr	r2, [pc, #220]	; (80018d8 <HAL_DMA_Init+0x1b8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d04a      	beq.n	8001894 <HAL_DMA_Init+0x174>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a36      	ldr	r2, [pc, #216]	; (80018dc <HAL_DMA_Init+0x1bc>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d045      	beq.n	8001894 <HAL_DMA_Init+0x174>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a34      	ldr	r2, [pc, #208]	; (80018e0 <HAL_DMA_Init+0x1c0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d040      	beq.n	8001894 <HAL_DMA_Init+0x174>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a33      	ldr	r2, [pc, #204]	; (80018e4 <HAL_DMA_Init+0x1c4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d03b      	beq.n	8001894 <HAL_DMA_Init+0x174>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a31      	ldr	r2, [pc, #196]	; (80018e8 <HAL_DMA_Init+0x1c8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d036      	beq.n	8001894 <HAL_DMA_Init+0x174>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a30      	ldr	r2, [pc, #192]	; (80018ec <HAL_DMA_Init+0x1cc>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d031      	beq.n	8001894 <HAL_DMA_Init+0x174>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a2e      	ldr	r2, [pc, #184]	; (80018f0 <HAL_DMA_Init+0x1d0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d02c      	beq.n	8001894 <HAL_DMA_Init+0x174>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a2d      	ldr	r2, [pc, #180]	; (80018f4 <HAL_DMA_Init+0x1d4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d027      	beq.n	8001894 <HAL_DMA_Init+0x174>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a2b      	ldr	r2, [pc, #172]	; (80018f8 <HAL_DMA_Init+0x1d8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d022      	beq.n	8001894 <HAL_DMA_Init+0x174>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a2a      	ldr	r2, [pc, #168]	; (80018fc <HAL_DMA_Init+0x1dc>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d01d      	beq.n	8001894 <HAL_DMA_Init+0x174>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a28      	ldr	r2, [pc, #160]	; (8001900 <HAL_DMA_Init+0x1e0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d018      	beq.n	8001894 <HAL_DMA_Init+0x174>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a27      	ldr	r2, [pc, #156]	; (8001904 <HAL_DMA_Init+0x1e4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d013      	beq.n	8001894 <HAL_DMA_Init+0x174>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a25      	ldr	r2, [pc, #148]	; (8001908 <HAL_DMA_Init+0x1e8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d00e      	beq.n	8001894 <HAL_DMA_Init+0x174>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a24      	ldr	r2, [pc, #144]	; (800190c <HAL_DMA_Init+0x1ec>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d009      	beq.n	8001894 <HAL_DMA_Init+0x174>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a22      	ldr	r2, [pc, #136]	; (8001910 <HAL_DMA_Init+0x1f0>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d004      	beq.n	8001894 <HAL_DMA_Init+0x174>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a21      	ldr	r2, [pc, #132]	; (8001914 <HAL_DMA_Init+0x1f4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d108      	bne.n	80018a6 <HAL_DMA_Init+0x186>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0201 	bic.w	r2, r2, #1
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	e007      	b.n	80018b6 <HAL_DMA_Init+0x196>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0201 	bic.w	r2, r2, #1
 80018b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80018b6:	e02f      	b.n	8001918 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018b8:	f7ff fde6 	bl	8001488 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b05      	cmp	r3, #5
 80018c4:	d928      	bls.n	8001918 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2220      	movs	r2, #32
 80018ca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2203      	movs	r2, #3
 80018d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e246      	b.n	8001d66 <HAL_DMA_Init+0x646>
 80018d8:	40020010 	.word	0x40020010
 80018dc:	40020028 	.word	0x40020028
 80018e0:	40020040 	.word	0x40020040
 80018e4:	40020058 	.word	0x40020058
 80018e8:	40020070 	.word	0x40020070
 80018ec:	40020088 	.word	0x40020088
 80018f0:	400200a0 	.word	0x400200a0
 80018f4:	400200b8 	.word	0x400200b8
 80018f8:	40020410 	.word	0x40020410
 80018fc:	40020428 	.word	0x40020428
 8001900:	40020440 	.word	0x40020440
 8001904:	40020458 	.word	0x40020458
 8001908:	40020470 	.word	0x40020470
 800190c:	40020488 	.word	0x40020488
 8001910:	400204a0 	.word	0x400204a0
 8001914:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1c8      	bne.n	80018b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4b83      	ldr	r3, [pc, #524]	; (8001b40 <HAL_DMA_Init+0x420>)
 8001932:	4013      	ands	r3, r2
 8001934:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800193e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800194a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001956:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	4313      	orrs	r3, r2
 8001962:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	2b04      	cmp	r3, #4
 800196a:	d107      	bne.n	800197c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	4313      	orrs	r3, r2
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	4313      	orrs	r3, r2
 800197a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800197c:	4b71      	ldr	r3, [pc, #452]	; (8001b44 <HAL_DMA_Init+0x424>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b71      	ldr	r3, [pc, #452]	; (8001b48 <HAL_DMA_Init+0x428>)
 8001982:	4013      	ands	r3, r2
 8001984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001988:	d328      	bcc.n	80019dc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b28      	cmp	r3, #40	; 0x28
 8001990:	d903      	bls.n	800199a <HAL_DMA_Init+0x27a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b2e      	cmp	r3, #46	; 0x2e
 8001998:	d917      	bls.n	80019ca <HAL_DMA_Init+0x2aa>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b3e      	cmp	r3, #62	; 0x3e
 80019a0:	d903      	bls.n	80019aa <HAL_DMA_Init+0x28a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b42      	cmp	r3, #66	; 0x42
 80019a8:	d90f      	bls.n	80019ca <HAL_DMA_Init+0x2aa>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b46      	cmp	r3, #70	; 0x46
 80019b0:	d903      	bls.n	80019ba <HAL_DMA_Init+0x29a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b48      	cmp	r3, #72	; 0x48
 80019b8:	d907      	bls.n	80019ca <HAL_DMA_Init+0x2aa>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b4e      	cmp	r3, #78	; 0x4e
 80019c0:	d905      	bls.n	80019ce <HAL_DMA_Init+0x2ae>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b52      	cmp	r3, #82	; 0x52
 80019c8:	d801      	bhi.n	80019ce <HAL_DMA_Init+0x2ae>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <HAL_DMA_Init+0x2b0>
 80019ce:	2300      	movs	r3, #0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019da:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f023 0307 	bic.w	r3, r3, #7
 80019f2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d117      	bne.n	8001a36 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00e      	beq.n	8001a36 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f001 fdcf 	bl	80035bc <DMA_CheckFifoParam>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d008      	beq.n	8001a36 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2240      	movs	r2, #64	; 0x40
 8001a28:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e197      	b.n	8001d66 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f001 fd0a 	bl	8003458 <DMA_CalcBaseAndBitshift>
 8001a44:	4603      	mov	r3, r0
 8001a46:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	f003 031f 	and.w	r3, r3, #31
 8001a50:	223f      	movs	r2, #63	; 0x3f
 8001a52:	409a      	lsls	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	e0cd      	b.n	8001bf6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a3b      	ldr	r2, [pc, #236]	; (8001b4c <HAL_DMA_Init+0x42c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d022      	beq.n	8001aaa <HAL_DMA_Init+0x38a>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a39      	ldr	r2, [pc, #228]	; (8001b50 <HAL_DMA_Init+0x430>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d01d      	beq.n	8001aaa <HAL_DMA_Init+0x38a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a38      	ldr	r2, [pc, #224]	; (8001b54 <HAL_DMA_Init+0x434>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d018      	beq.n	8001aaa <HAL_DMA_Init+0x38a>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a36      	ldr	r2, [pc, #216]	; (8001b58 <HAL_DMA_Init+0x438>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d013      	beq.n	8001aaa <HAL_DMA_Init+0x38a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a35      	ldr	r2, [pc, #212]	; (8001b5c <HAL_DMA_Init+0x43c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d00e      	beq.n	8001aaa <HAL_DMA_Init+0x38a>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a33      	ldr	r2, [pc, #204]	; (8001b60 <HAL_DMA_Init+0x440>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d009      	beq.n	8001aaa <HAL_DMA_Init+0x38a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a32      	ldr	r2, [pc, #200]	; (8001b64 <HAL_DMA_Init+0x444>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d004      	beq.n	8001aaa <HAL_DMA_Init+0x38a>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a30      	ldr	r2, [pc, #192]	; (8001b68 <HAL_DMA_Init+0x448>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d101      	bne.n	8001aae <HAL_DMA_Init+0x38e>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_DMA_Init+0x390>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 8097 	beq.w	8001be4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a24      	ldr	r2, [pc, #144]	; (8001b4c <HAL_DMA_Init+0x42c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d021      	beq.n	8001b04 <HAL_DMA_Init+0x3e4>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a22      	ldr	r2, [pc, #136]	; (8001b50 <HAL_DMA_Init+0x430>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d01c      	beq.n	8001b04 <HAL_DMA_Init+0x3e4>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a21      	ldr	r2, [pc, #132]	; (8001b54 <HAL_DMA_Init+0x434>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d017      	beq.n	8001b04 <HAL_DMA_Init+0x3e4>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <HAL_DMA_Init+0x438>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d012      	beq.n	8001b04 <HAL_DMA_Init+0x3e4>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1e      	ldr	r2, [pc, #120]	; (8001b5c <HAL_DMA_Init+0x43c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d00d      	beq.n	8001b04 <HAL_DMA_Init+0x3e4>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a1c      	ldr	r2, [pc, #112]	; (8001b60 <HAL_DMA_Init+0x440>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d008      	beq.n	8001b04 <HAL_DMA_Init+0x3e4>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <HAL_DMA_Init+0x444>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d003      	beq.n	8001b04 <HAL_DMA_Init+0x3e4>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a19      	ldr	r2, [pc, #100]	; (8001b68 <HAL_DMA_Init+0x448>)
 8001b02:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <HAL_DMA_Init+0x44c>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b40      	cmp	r3, #64	; 0x40
 8001b2a:	d021      	beq.n	8001b70 <HAL_DMA_Init+0x450>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b80      	cmp	r3, #128	; 0x80
 8001b32:	d102      	bne.n	8001b3a <HAL_DMA_Init+0x41a>
 8001b34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b38:	e01b      	b.n	8001b72 <HAL_DMA_Init+0x452>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e019      	b.n	8001b72 <HAL_DMA_Init+0x452>
 8001b3e:	bf00      	nop
 8001b40:	fe10803f 	.word	0xfe10803f
 8001b44:	5c001000 	.word	0x5c001000
 8001b48:	ffff0000 	.word	0xffff0000
 8001b4c:	58025408 	.word	0x58025408
 8001b50:	5802541c 	.word	0x5802541c
 8001b54:	58025430 	.word	0x58025430
 8001b58:	58025444 	.word	0x58025444
 8001b5c:	58025458 	.word	0x58025458
 8001b60:	5802546c 	.word	0x5802546c
 8001b64:	58025480 	.word	0x58025480
 8001b68:	58025494 	.word	0x58025494
 8001b6c:	fffe000f 	.word	0xfffe000f
 8001b70:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68d2      	ldr	r2, [r2, #12]
 8001b76:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ba0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b6e      	ldr	r3, [pc, #440]	; (8001d70 <HAL_DMA_Init+0x650>)
 8001bb8:	4413      	add	r3, r2
 8001bba:	4a6e      	ldr	r2, [pc, #440]	; (8001d74 <HAL_DMA_Init+0x654>)
 8001bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	009a      	lsls	r2, r3, #2
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f001 fc45 	bl	8003458 <DMA_CalcBaseAndBitshift>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	2201      	movs	r2, #1
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	e008      	b.n	8001bf6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2240      	movs	r2, #64	; 0x40
 8001be8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2203      	movs	r2, #3
 8001bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e0b7      	b.n	8001d66 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a5f      	ldr	r2, [pc, #380]	; (8001d78 <HAL_DMA_Init+0x658>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d072      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a5d      	ldr	r2, [pc, #372]	; (8001d7c <HAL_DMA_Init+0x65c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d06d      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a5c      	ldr	r2, [pc, #368]	; (8001d80 <HAL_DMA_Init+0x660>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d068      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a5a      	ldr	r2, [pc, #360]	; (8001d84 <HAL_DMA_Init+0x664>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d063      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a59      	ldr	r2, [pc, #356]	; (8001d88 <HAL_DMA_Init+0x668>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d05e      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a57      	ldr	r2, [pc, #348]	; (8001d8c <HAL_DMA_Init+0x66c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d059      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a56      	ldr	r2, [pc, #344]	; (8001d90 <HAL_DMA_Init+0x670>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d054      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a54      	ldr	r2, [pc, #336]	; (8001d94 <HAL_DMA_Init+0x674>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d04f      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a53      	ldr	r2, [pc, #332]	; (8001d98 <HAL_DMA_Init+0x678>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d04a      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a51      	ldr	r2, [pc, #324]	; (8001d9c <HAL_DMA_Init+0x67c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d045      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a50      	ldr	r2, [pc, #320]	; (8001da0 <HAL_DMA_Init+0x680>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d040      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a4e      	ldr	r2, [pc, #312]	; (8001da4 <HAL_DMA_Init+0x684>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d03b      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a4d      	ldr	r2, [pc, #308]	; (8001da8 <HAL_DMA_Init+0x688>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d036      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a4b      	ldr	r2, [pc, #300]	; (8001dac <HAL_DMA_Init+0x68c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d031      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a4a      	ldr	r2, [pc, #296]	; (8001db0 <HAL_DMA_Init+0x690>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d02c      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a48      	ldr	r2, [pc, #288]	; (8001db4 <HAL_DMA_Init+0x694>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d027      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a47      	ldr	r2, [pc, #284]	; (8001db8 <HAL_DMA_Init+0x698>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d022      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a45      	ldr	r2, [pc, #276]	; (8001dbc <HAL_DMA_Init+0x69c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d01d      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a44      	ldr	r2, [pc, #272]	; (8001dc0 <HAL_DMA_Init+0x6a0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d018      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a42      	ldr	r2, [pc, #264]	; (8001dc4 <HAL_DMA_Init+0x6a4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a41      	ldr	r2, [pc, #260]	; (8001dc8 <HAL_DMA_Init+0x6a8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d00e      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a3f      	ldr	r2, [pc, #252]	; (8001dcc <HAL_DMA_Init+0x6ac>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d009      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a3e      	ldr	r2, [pc, #248]	; (8001dd0 <HAL_DMA_Init+0x6b0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d004      	beq.n	8001ce6 <HAL_DMA_Init+0x5c6>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a3c      	ldr	r2, [pc, #240]	; (8001dd4 <HAL_DMA_Init+0x6b4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d101      	bne.n	8001cea <HAL_DMA_Init+0x5ca>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <HAL_DMA_Init+0x5cc>
 8001cea:	2300      	movs	r3, #0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d032      	beq.n	8001d56 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f001 fcdf 	bl	80036b4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b80      	cmp	r3, #128	; 0x80
 8001cfc:	d102      	bne.n	8001d04 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d18:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d010      	beq.n	8001d44 <HAL_DMA_Init+0x624>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d80c      	bhi.n	8001d44 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f001 fd5c 	bl	80037e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	e008      	b.n	8001d56 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	a7fdabf8 	.word	0xa7fdabf8
 8001d74:	cccccccd 	.word	0xcccccccd
 8001d78:	40020010 	.word	0x40020010
 8001d7c:	40020028 	.word	0x40020028
 8001d80:	40020040 	.word	0x40020040
 8001d84:	40020058 	.word	0x40020058
 8001d88:	40020070 	.word	0x40020070
 8001d8c:	40020088 	.word	0x40020088
 8001d90:	400200a0 	.word	0x400200a0
 8001d94:	400200b8 	.word	0x400200b8
 8001d98:	40020410 	.word	0x40020410
 8001d9c:	40020428 	.word	0x40020428
 8001da0:	40020440 	.word	0x40020440
 8001da4:	40020458 	.word	0x40020458
 8001da8:	40020470 	.word	0x40020470
 8001dac:	40020488 	.word	0x40020488
 8001db0:	400204a0 	.word	0x400204a0
 8001db4:	400204b8 	.word	0x400204b8
 8001db8:	58025408 	.word	0x58025408
 8001dbc:	5802541c 	.word	0x5802541c
 8001dc0:	58025430 	.word	0x58025430
 8001dc4:	58025444 	.word	0x58025444
 8001dc8:	58025458 	.word	0x58025458
 8001dcc:	5802546c 	.word	0x5802546c
 8001dd0:	58025480 	.word	0x58025480
 8001dd4:	58025494 	.word	0x58025494

08001dd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e226      	b.n	8002242 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_DMA_Start_IT+0x2a>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e21f      	b.n	8002242 <HAL_DMA_Start_IT+0x46a>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	f040 820a 	bne.w	800222c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a68      	ldr	r2, [pc, #416]	; (8001fcc <HAL_DMA_Start_IT+0x1f4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d04a      	beq.n	8001ec6 <HAL_DMA_Start_IT+0xee>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a66      	ldr	r2, [pc, #408]	; (8001fd0 <HAL_DMA_Start_IT+0x1f8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d045      	beq.n	8001ec6 <HAL_DMA_Start_IT+0xee>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a65      	ldr	r2, [pc, #404]	; (8001fd4 <HAL_DMA_Start_IT+0x1fc>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d040      	beq.n	8001ec6 <HAL_DMA_Start_IT+0xee>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a63      	ldr	r2, [pc, #396]	; (8001fd8 <HAL_DMA_Start_IT+0x200>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d03b      	beq.n	8001ec6 <HAL_DMA_Start_IT+0xee>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a62      	ldr	r2, [pc, #392]	; (8001fdc <HAL_DMA_Start_IT+0x204>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d036      	beq.n	8001ec6 <HAL_DMA_Start_IT+0xee>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a60      	ldr	r2, [pc, #384]	; (8001fe0 <HAL_DMA_Start_IT+0x208>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d031      	beq.n	8001ec6 <HAL_DMA_Start_IT+0xee>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a5f      	ldr	r2, [pc, #380]	; (8001fe4 <HAL_DMA_Start_IT+0x20c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d02c      	beq.n	8001ec6 <HAL_DMA_Start_IT+0xee>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a5d      	ldr	r2, [pc, #372]	; (8001fe8 <HAL_DMA_Start_IT+0x210>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d027      	beq.n	8001ec6 <HAL_DMA_Start_IT+0xee>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a5c      	ldr	r2, [pc, #368]	; (8001fec <HAL_DMA_Start_IT+0x214>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d022      	beq.n	8001ec6 <HAL_DMA_Start_IT+0xee>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a5a      	ldr	r2, [pc, #360]	; (8001ff0 <HAL_DMA_Start_IT+0x218>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01d      	beq.n	8001ec6 <HAL_DMA_Start_IT+0xee>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a59      	ldr	r2, [pc, #356]	; (8001ff4 <HAL_DMA_Start_IT+0x21c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d018      	beq.n	8001ec6 <HAL_DMA_Start_IT+0xee>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a57      	ldr	r2, [pc, #348]	; (8001ff8 <HAL_DMA_Start_IT+0x220>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_DMA_Start_IT+0xee>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a56      	ldr	r2, [pc, #344]	; (8001ffc <HAL_DMA_Start_IT+0x224>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00e      	beq.n	8001ec6 <HAL_DMA_Start_IT+0xee>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a54      	ldr	r2, [pc, #336]	; (8002000 <HAL_DMA_Start_IT+0x228>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d009      	beq.n	8001ec6 <HAL_DMA_Start_IT+0xee>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a53      	ldr	r2, [pc, #332]	; (8002004 <HAL_DMA_Start_IT+0x22c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d004      	beq.n	8001ec6 <HAL_DMA_Start_IT+0xee>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a51      	ldr	r2, [pc, #324]	; (8002008 <HAL_DMA_Start_IT+0x230>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d108      	bne.n	8001ed8 <HAL_DMA_Start_IT+0x100>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0201 	bic.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e007      	b.n	8001ee8 <HAL_DMA_Start_IT+0x110>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0201 	bic.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f001 f906 	bl	8003100 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a34      	ldr	r2, [pc, #208]	; (8001fcc <HAL_DMA_Start_IT+0x1f4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d04a      	beq.n	8001f94 <HAL_DMA_Start_IT+0x1bc>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a33      	ldr	r2, [pc, #204]	; (8001fd0 <HAL_DMA_Start_IT+0x1f8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d045      	beq.n	8001f94 <HAL_DMA_Start_IT+0x1bc>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a31      	ldr	r2, [pc, #196]	; (8001fd4 <HAL_DMA_Start_IT+0x1fc>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d040      	beq.n	8001f94 <HAL_DMA_Start_IT+0x1bc>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a30      	ldr	r2, [pc, #192]	; (8001fd8 <HAL_DMA_Start_IT+0x200>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d03b      	beq.n	8001f94 <HAL_DMA_Start_IT+0x1bc>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a2e      	ldr	r2, [pc, #184]	; (8001fdc <HAL_DMA_Start_IT+0x204>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d036      	beq.n	8001f94 <HAL_DMA_Start_IT+0x1bc>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a2d      	ldr	r2, [pc, #180]	; (8001fe0 <HAL_DMA_Start_IT+0x208>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d031      	beq.n	8001f94 <HAL_DMA_Start_IT+0x1bc>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a2b      	ldr	r2, [pc, #172]	; (8001fe4 <HAL_DMA_Start_IT+0x20c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d02c      	beq.n	8001f94 <HAL_DMA_Start_IT+0x1bc>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a2a      	ldr	r2, [pc, #168]	; (8001fe8 <HAL_DMA_Start_IT+0x210>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d027      	beq.n	8001f94 <HAL_DMA_Start_IT+0x1bc>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a28      	ldr	r2, [pc, #160]	; (8001fec <HAL_DMA_Start_IT+0x214>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d022      	beq.n	8001f94 <HAL_DMA_Start_IT+0x1bc>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a27      	ldr	r2, [pc, #156]	; (8001ff0 <HAL_DMA_Start_IT+0x218>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d01d      	beq.n	8001f94 <HAL_DMA_Start_IT+0x1bc>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a25      	ldr	r2, [pc, #148]	; (8001ff4 <HAL_DMA_Start_IT+0x21c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d018      	beq.n	8001f94 <HAL_DMA_Start_IT+0x1bc>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a24      	ldr	r2, [pc, #144]	; (8001ff8 <HAL_DMA_Start_IT+0x220>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d013      	beq.n	8001f94 <HAL_DMA_Start_IT+0x1bc>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a22      	ldr	r2, [pc, #136]	; (8001ffc <HAL_DMA_Start_IT+0x224>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d00e      	beq.n	8001f94 <HAL_DMA_Start_IT+0x1bc>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a21      	ldr	r2, [pc, #132]	; (8002000 <HAL_DMA_Start_IT+0x228>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d009      	beq.n	8001f94 <HAL_DMA_Start_IT+0x1bc>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1f      	ldr	r2, [pc, #124]	; (8002004 <HAL_DMA_Start_IT+0x22c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d004      	beq.n	8001f94 <HAL_DMA_Start_IT+0x1bc>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1e      	ldr	r2, [pc, #120]	; (8002008 <HAL_DMA_Start_IT+0x230>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d101      	bne.n	8001f98 <HAL_DMA_Start_IT+0x1c0>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <HAL_DMA_Start_IT+0x1c2>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d036      	beq.n	800200c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f023 021e 	bic.w	r2, r3, #30
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f042 0216 	orr.w	r2, r2, #22
 8001fb0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d03e      	beq.n	8002038 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0208 	orr.w	r2, r2, #8
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	e035      	b.n	8002038 <HAL_DMA_Start_IT+0x260>
 8001fcc:	40020010 	.word	0x40020010
 8001fd0:	40020028 	.word	0x40020028
 8001fd4:	40020040 	.word	0x40020040
 8001fd8:	40020058 	.word	0x40020058
 8001fdc:	40020070 	.word	0x40020070
 8001fe0:	40020088 	.word	0x40020088
 8001fe4:	400200a0 	.word	0x400200a0
 8001fe8:	400200b8 	.word	0x400200b8
 8001fec:	40020410 	.word	0x40020410
 8001ff0:	40020428 	.word	0x40020428
 8001ff4:	40020440 	.word	0x40020440
 8001ff8:	40020458 	.word	0x40020458
 8001ffc:	40020470 	.word	0x40020470
 8002000:	40020488 	.word	0x40020488
 8002004:	400204a0 	.word	0x400204a0
 8002008:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 020e 	bic.w	r2, r3, #14
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 020a 	orr.w	r2, r2, #10
 800201e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0204 	orr.w	r2, r2, #4
 8002036:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a83      	ldr	r2, [pc, #524]	; (800224c <HAL_DMA_Start_IT+0x474>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d072      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a82      	ldr	r2, [pc, #520]	; (8002250 <HAL_DMA_Start_IT+0x478>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d06d      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a80      	ldr	r2, [pc, #512]	; (8002254 <HAL_DMA_Start_IT+0x47c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d068      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a7f      	ldr	r2, [pc, #508]	; (8002258 <HAL_DMA_Start_IT+0x480>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d063      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a7d      	ldr	r2, [pc, #500]	; (800225c <HAL_DMA_Start_IT+0x484>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d05e      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a7c      	ldr	r2, [pc, #496]	; (8002260 <HAL_DMA_Start_IT+0x488>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d059      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a7a      	ldr	r2, [pc, #488]	; (8002264 <HAL_DMA_Start_IT+0x48c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d054      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a79      	ldr	r2, [pc, #484]	; (8002268 <HAL_DMA_Start_IT+0x490>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d04f      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a77      	ldr	r2, [pc, #476]	; (800226c <HAL_DMA_Start_IT+0x494>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d04a      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a76      	ldr	r2, [pc, #472]	; (8002270 <HAL_DMA_Start_IT+0x498>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d045      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a74      	ldr	r2, [pc, #464]	; (8002274 <HAL_DMA_Start_IT+0x49c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d040      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a73      	ldr	r2, [pc, #460]	; (8002278 <HAL_DMA_Start_IT+0x4a0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d03b      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a71      	ldr	r2, [pc, #452]	; (800227c <HAL_DMA_Start_IT+0x4a4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d036      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a70      	ldr	r2, [pc, #448]	; (8002280 <HAL_DMA_Start_IT+0x4a8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d031      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a6e      	ldr	r2, [pc, #440]	; (8002284 <HAL_DMA_Start_IT+0x4ac>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d02c      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a6d      	ldr	r2, [pc, #436]	; (8002288 <HAL_DMA_Start_IT+0x4b0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d027      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a6b      	ldr	r2, [pc, #428]	; (800228c <HAL_DMA_Start_IT+0x4b4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d022      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a6a      	ldr	r2, [pc, #424]	; (8002290 <HAL_DMA_Start_IT+0x4b8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d01d      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a68      	ldr	r2, [pc, #416]	; (8002294 <HAL_DMA_Start_IT+0x4bc>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d018      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a67      	ldr	r2, [pc, #412]	; (8002298 <HAL_DMA_Start_IT+0x4c0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d013      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a65      	ldr	r2, [pc, #404]	; (800229c <HAL_DMA_Start_IT+0x4c4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00e      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a64      	ldr	r2, [pc, #400]	; (80022a0 <HAL_DMA_Start_IT+0x4c8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d009      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a62      	ldr	r2, [pc, #392]	; (80022a4 <HAL_DMA_Start_IT+0x4cc>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d004      	beq.n	8002128 <HAL_DMA_Start_IT+0x350>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a61      	ldr	r2, [pc, #388]	; (80022a8 <HAL_DMA_Start_IT+0x4d0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d101      	bne.n	800212c <HAL_DMA_Start_IT+0x354>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_DMA_Start_IT+0x356>
 800212c:	2300      	movs	r3, #0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d01a      	beq.n	8002168 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d007      	beq.n	8002150 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800214a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800214e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002154:	2b00      	cmp	r3, #0
 8002156:	d007      	beq.n	8002168 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002162:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002166:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a37      	ldr	r2, [pc, #220]	; (800224c <HAL_DMA_Start_IT+0x474>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d04a      	beq.n	8002208 <HAL_DMA_Start_IT+0x430>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a36      	ldr	r2, [pc, #216]	; (8002250 <HAL_DMA_Start_IT+0x478>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d045      	beq.n	8002208 <HAL_DMA_Start_IT+0x430>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a34      	ldr	r2, [pc, #208]	; (8002254 <HAL_DMA_Start_IT+0x47c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d040      	beq.n	8002208 <HAL_DMA_Start_IT+0x430>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a33      	ldr	r2, [pc, #204]	; (8002258 <HAL_DMA_Start_IT+0x480>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d03b      	beq.n	8002208 <HAL_DMA_Start_IT+0x430>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a31      	ldr	r2, [pc, #196]	; (800225c <HAL_DMA_Start_IT+0x484>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d036      	beq.n	8002208 <HAL_DMA_Start_IT+0x430>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a30      	ldr	r2, [pc, #192]	; (8002260 <HAL_DMA_Start_IT+0x488>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d031      	beq.n	8002208 <HAL_DMA_Start_IT+0x430>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a2e      	ldr	r2, [pc, #184]	; (8002264 <HAL_DMA_Start_IT+0x48c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d02c      	beq.n	8002208 <HAL_DMA_Start_IT+0x430>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a2d      	ldr	r2, [pc, #180]	; (8002268 <HAL_DMA_Start_IT+0x490>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d027      	beq.n	8002208 <HAL_DMA_Start_IT+0x430>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a2b      	ldr	r2, [pc, #172]	; (800226c <HAL_DMA_Start_IT+0x494>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d022      	beq.n	8002208 <HAL_DMA_Start_IT+0x430>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a2a      	ldr	r2, [pc, #168]	; (8002270 <HAL_DMA_Start_IT+0x498>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d01d      	beq.n	8002208 <HAL_DMA_Start_IT+0x430>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a28      	ldr	r2, [pc, #160]	; (8002274 <HAL_DMA_Start_IT+0x49c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d018      	beq.n	8002208 <HAL_DMA_Start_IT+0x430>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a27      	ldr	r2, [pc, #156]	; (8002278 <HAL_DMA_Start_IT+0x4a0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d013      	beq.n	8002208 <HAL_DMA_Start_IT+0x430>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a25      	ldr	r2, [pc, #148]	; (800227c <HAL_DMA_Start_IT+0x4a4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00e      	beq.n	8002208 <HAL_DMA_Start_IT+0x430>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a24      	ldr	r2, [pc, #144]	; (8002280 <HAL_DMA_Start_IT+0x4a8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d009      	beq.n	8002208 <HAL_DMA_Start_IT+0x430>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a22      	ldr	r2, [pc, #136]	; (8002284 <HAL_DMA_Start_IT+0x4ac>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d004      	beq.n	8002208 <HAL_DMA_Start_IT+0x430>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a21      	ldr	r2, [pc, #132]	; (8002288 <HAL_DMA_Start_IT+0x4b0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d108      	bne.n	800221a <HAL_DMA_Start_IT+0x442>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	e012      	b.n	8002240 <HAL_DMA_Start_IT+0x468>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0201 	orr.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	e009      	b.n	8002240 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002232:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002240:	7dfb      	ldrb	r3, [r7, #23]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40020010 	.word	0x40020010
 8002250:	40020028 	.word	0x40020028
 8002254:	40020040 	.word	0x40020040
 8002258:	40020058 	.word	0x40020058
 800225c:	40020070 	.word	0x40020070
 8002260:	40020088 	.word	0x40020088
 8002264:	400200a0 	.word	0x400200a0
 8002268:	400200b8 	.word	0x400200b8
 800226c:	40020410 	.word	0x40020410
 8002270:	40020428 	.word	0x40020428
 8002274:	40020440 	.word	0x40020440
 8002278:	40020458 	.word	0x40020458
 800227c:	40020470 	.word	0x40020470
 8002280:	40020488 	.word	0x40020488
 8002284:	400204a0 	.word	0x400204a0
 8002288:	400204b8 	.word	0x400204b8
 800228c:	58025408 	.word	0x58025408
 8002290:	5802541c 	.word	0x5802541c
 8002294:	58025430 	.word	0x58025430
 8002298:	58025444 	.word	0x58025444
 800229c:	58025458 	.word	0x58025458
 80022a0:	5802546c 	.word	0x5802546c
 80022a4:	58025480 	.word	0x58025480
 80022a8:	58025494 	.word	0x58025494

080022ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	; 0x28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022b8:	4b67      	ldr	r3, [pc, #412]	; (8002458 <HAL_DMA_IRQHandler+0x1ac>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a67      	ldr	r2, [pc, #412]	; (800245c <HAL_DMA_IRQHandler+0x1b0>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	0a9b      	lsrs	r3, r3, #10
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a5f      	ldr	r2, [pc, #380]	; (8002460 <HAL_DMA_IRQHandler+0x1b4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d04a      	beq.n	800237e <HAL_DMA_IRQHandler+0xd2>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a5d      	ldr	r2, [pc, #372]	; (8002464 <HAL_DMA_IRQHandler+0x1b8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d045      	beq.n	800237e <HAL_DMA_IRQHandler+0xd2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a5c      	ldr	r2, [pc, #368]	; (8002468 <HAL_DMA_IRQHandler+0x1bc>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d040      	beq.n	800237e <HAL_DMA_IRQHandler+0xd2>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a5a      	ldr	r2, [pc, #360]	; (800246c <HAL_DMA_IRQHandler+0x1c0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d03b      	beq.n	800237e <HAL_DMA_IRQHandler+0xd2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a59      	ldr	r2, [pc, #356]	; (8002470 <HAL_DMA_IRQHandler+0x1c4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d036      	beq.n	800237e <HAL_DMA_IRQHandler+0xd2>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a57      	ldr	r2, [pc, #348]	; (8002474 <HAL_DMA_IRQHandler+0x1c8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d031      	beq.n	800237e <HAL_DMA_IRQHandler+0xd2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a56      	ldr	r2, [pc, #344]	; (8002478 <HAL_DMA_IRQHandler+0x1cc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d02c      	beq.n	800237e <HAL_DMA_IRQHandler+0xd2>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a54      	ldr	r2, [pc, #336]	; (800247c <HAL_DMA_IRQHandler+0x1d0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d027      	beq.n	800237e <HAL_DMA_IRQHandler+0xd2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a53      	ldr	r2, [pc, #332]	; (8002480 <HAL_DMA_IRQHandler+0x1d4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d022      	beq.n	800237e <HAL_DMA_IRQHandler+0xd2>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a51      	ldr	r2, [pc, #324]	; (8002484 <HAL_DMA_IRQHandler+0x1d8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d01d      	beq.n	800237e <HAL_DMA_IRQHandler+0xd2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a50      	ldr	r2, [pc, #320]	; (8002488 <HAL_DMA_IRQHandler+0x1dc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d018      	beq.n	800237e <HAL_DMA_IRQHandler+0xd2>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a4e      	ldr	r2, [pc, #312]	; (800248c <HAL_DMA_IRQHandler+0x1e0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d013      	beq.n	800237e <HAL_DMA_IRQHandler+0xd2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a4d      	ldr	r2, [pc, #308]	; (8002490 <HAL_DMA_IRQHandler+0x1e4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d00e      	beq.n	800237e <HAL_DMA_IRQHandler+0xd2>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a4b      	ldr	r2, [pc, #300]	; (8002494 <HAL_DMA_IRQHandler+0x1e8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d009      	beq.n	800237e <HAL_DMA_IRQHandler+0xd2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a4a      	ldr	r2, [pc, #296]	; (8002498 <HAL_DMA_IRQHandler+0x1ec>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d004      	beq.n	800237e <HAL_DMA_IRQHandler+0xd2>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a48      	ldr	r2, [pc, #288]	; (800249c <HAL_DMA_IRQHandler+0x1f0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d101      	bne.n	8002382 <HAL_DMA_IRQHandler+0xd6>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_DMA_IRQHandler+0xd8>
 8002382:	2300      	movs	r3, #0
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 842b 	beq.w	8002be0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	2208      	movs	r2, #8
 8002394:	409a      	lsls	r2, r3
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 80a2 	beq.w	80024e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a2e      	ldr	r2, [pc, #184]	; (8002460 <HAL_DMA_IRQHandler+0x1b4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d04a      	beq.n	8002440 <HAL_DMA_IRQHandler+0x194>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a2d      	ldr	r2, [pc, #180]	; (8002464 <HAL_DMA_IRQHandler+0x1b8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d045      	beq.n	8002440 <HAL_DMA_IRQHandler+0x194>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a2b      	ldr	r2, [pc, #172]	; (8002468 <HAL_DMA_IRQHandler+0x1bc>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d040      	beq.n	8002440 <HAL_DMA_IRQHandler+0x194>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a2a      	ldr	r2, [pc, #168]	; (800246c <HAL_DMA_IRQHandler+0x1c0>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d03b      	beq.n	8002440 <HAL_DMA_IRQHandler+0x194>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a28      	ldr	r2, [pc, #160]	; (8002470 <HAL_DMA_IRQHandler+0x1c4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d036      	beq.n	8002440 <HAL_DMA_IRQHandler+0x194>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a27      	ldr	r2, [pc, #156]	; (8002474 <HAL_DMA_IRQHandler+0x1c8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d031      	beq.n	8002440 <HAL_DMA_IRQHandler+0x194>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a25      	ldr	r2, [pc, #148]	; (8002478 <HAL_DMA_IRQHandler+0x1cc>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d02c      	beq.n	8002440 <HAL_DMA_IRQHandler+0x194>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a24      	ldr	r2, [pc, #144]	; (800247c <HAL_DMA_IRQHandler+0x1d0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d027      	beq.n	8002440 <HAL_DMA_IRQHandler+0x194>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a22      	ldr	r2, [pc, #136]	; (8002480 <HAL_DMA_IRQHandler+0x1d4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d022      	beq.n	8002440 <HAL_DMA_IRQHandler+0x194>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a21      	ldr	r2, [pc, #132]	; (8002484 <HAL_DMA_IRQHandler+0x1d8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d01d      	beq.n	8002440 <HAL_DMA_IRQHandler+0x194>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a1f      	ldr	r2, [pc, #124]	; (8002488 <HAL_DMA_IRQHandler+0x1dc>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d018      	beq.n	8002440 <HAL_DMA_IRQHandler+0x194>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a1e      	ldr	r2, [pc, #120]	; (800248c <HAL_DMA_IRQHandler+0x1e0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d013      	beq.n	8002440 <HAL_DMA_IRQHandler+0x194>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a1c      	ldr	r2, [pc, #112]	; (8002490 <HAL_DMA_IRQHandler+0x1e4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d00e      	beq.n	8002440 <HAL_DMA_IRQHandler+0x194>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1b      	ldr	r2, [pc, #108]	; (8002494 <HAL_DMA_IRQHandler+0x1e8>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d009      	beq.n	8002440 <HAL_DMA_IRQHandler+0x194>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a19      	ldr	r2, [pc, #100]	; (8002498 <HAL_DMA_IRQHandler+0x1ec>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d004      	beq.n	8002440 <HAL_DMA_IRQHandler+0x194>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a18      	ldr	r2, [pc, #96]	; (800249c <HAL_DMA_IRQHandler+0x1f0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d12f      	bne.n	80024a0 <HAL_DMA_IRQHandler+0x1f4>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	bf14      	ite	ne
 800244e:	2301      	movne	r3, #1
 8002450:	2300      	moveq	r3, #0
 8002452:	b2db      	uxtb	r3, r3
 8002454:	e02e      	b.n	80024b4 <HAL_DMA_IRQHandler+0x208>
 8002456:	bf00      	nop
 8002458:	24000000 	.word	0x24000000
 800245c:	1b4e81b5 	.word	0x1b4e81b5
 8002460:	40020010 	.word	0x40020010
 8002464:	40020028 	.word	0x40020028
 8002468:	40020040 	.word	0x40020040
 800246c:	40020058 	.word	0x40020058
 8002470:	40020070 	.word	0x40020070
 8002474:	40020088 	.word	0x40020088
 8002478:	400200a0 	.word	0x400200a0
 800247c:	400200b8 	.word	0x400200b8
 8002480:	40020410 	.word	0x40020410
 8002484:	40020428 	.word	0x40020428
 8002488:	40020440 	.word	0x40020440
 800248c:	40020458 	.word	0x40020458
 8002490:	40020470 	.word	0x40020470
 8002494:	40020488 	.word	0x40020488
 8002498:	400204a0 	.word	0x400204a0
 800249c:	400204b8 	.word	0x400204b8
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	bf14      	ite	ne
 80024ae:	2301      	movne	r3, #1
 80024b0:	2300      	moveq	r3, #0
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d015      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0204 	bic.w	r2, r2, #4
 80024c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	2208      	movs	r2, #8
 80024d2:	409a      	lsls	r2, r3
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024dc:	f043 0201 	orr.w	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e8:	f003 031f 	and.w	r3, r3, #31
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	fa22 f303 	lsr.w	r3, r2, r3
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d06e      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a69      	ldr	r2, [pc, #420]	; (80026a4 <HAL_DMA_IRQHandler+0x3f8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d04a      	beq.n	800259a <HAL_DMA_IRQHandler+0x2ee>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a67      	ldr	r2, [pc, #412]	; (80026a8 <HAL_DMA_IRQHandler+0x3fc>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d045      	beq.n	800259a <HAL_DMA_IRQHandler+0x2ee>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a66      	ldr	r2, [pc, #408]	; (80026ac <HAL_DMA_IRQHandler+0x400>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d040      	beq.n	800259a <HAL_DMA_IRQHandler+0x2ee>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a64      	ldr	r2, [pc, #400]	; (80026b0 <HAL_DMA_IRQHandler+0x404>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d03b      	beq.n	800259a <HAL_DMA_IRQHandler+0x2ee>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a63      	ldr	r2, [pc, #396]	; (80026b4 <HAL_DMA_IRQHandler+0x408>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d036      	beq.n	800259a <HAL_DMA_IRQHandler+0x2ee>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a61      	ldr	r2, [pc, #388]	; (80026b8 <HAL_DMA_IRQHandler+0x40c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d031      	beq.n	800259a <HAL_DMA_IRQHandler+0x2ee>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a60      	ldr	r2, [pc, #384]	; (80026bc <HAL_DMA_IRQHandler+0x410>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d02c      	beq.n	800259a <HAL_DMA_IRQHandler+0x2ee>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a5e      	ldr	r2, [pc, #376]	; (80026c0 <HAL_DMA_IRQHandler+0x414>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d027      	beq.n	800259a <HAL_DMA_IRQHandler+0x2ee>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a5d      	ldr	r2, [pc, #372]	; (80026c4 <HAL_DMA_IRQHandler+0x418>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d022      	beq.n	800259a <HAL_DMA_IRQHandler+0x2ee>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a5b      	ldr	r2, [pc, #364]	; (80026c8 <HAL_DMA_IRQHandler+0x41c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d01d      	beq.n	800259a <HAL_DMA_IRQHandler+0x2ee>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a5a      	ldr	r2, [pc, #360]	; (80026cc <HAL_DMA_IRQHandler+0x420>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d018      	beq.n	800259a <HAL_DMA_IRQHandler+0x2ee>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a58      	ldr	r2, [pc, #352]	; (80026d0 <HAL_DMA_IRQHandler+0x424>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_DMA_IRQHandler+0x2ee>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a57      	ldr	r2, [pc, #348]	; (80026d4 <HAL_DMA_IRQHandler+0x428>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d00e      	beq.n	800259a <HAL_DMA_IRQHandler+0x2ee>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a55      	ldr	r2, [pc, #340]	; (80026d8 <HAL_DMA_IRQHandler+0x42c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d009      	beq.n	800259a <HAL_DMA_IRQHandler+0x2ee>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a54      	ldr	r2, [pc, #336]	; (80026dc <HAL_DMA_IRQHandler+0x430>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d004      	beq.n	800259a <HAL_DMA_IRQHandler+0x2ee>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a52      	ldr	r2, [pc, #328]	; (80026e0 <HAL_DMA_IRQHandler+0x434>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d10a      	bne.n	80025b0 <HAL_DMA_IRQHandler+0x304>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bf14      	ite	ne
 80025a8:	2301      	movne	r3, #1
 80025aa:	2300      	moveq	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	e003      	b.n	80025b8 <HAL_DMA_IRQHandler+0x30c>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2300      	movs	r3, #0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00d      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	f003 031f 	and.w	r3, r3, #31
 80025c4:	2201      	movs	r2, #1
 80025c6:	409a      	lsls	r2, r3
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d0:	f043 0202 	orr.w	r2, r3, #2
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	2204      	movs	r2, #4
 80025e2:	409a      	lsls	r2, r3
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 808f 	beq.w	800270c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a2c      	ldr	r2, [pc, #176]	; (80026a4 <HAL_DMA_IRQHandler+0x3f8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d04a      	beq.n	800268e <HAL_DMA_IRQHandler+0x3e2>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a2a      	ldr	r2, [pc, #168]	; (80026a8 <HAL_DMA_IRQHandler+0x3fc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d045      	beq.n	800268e <HAL_DMA_IRQHandler+0x3e2>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a29      	ldr	r2, [pc, #164]	; (80026ac <HAL_DMA_IRQHandler+0x400>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d040      	beq.n	800268e <HAL_DMA_IRQHandler+0x3e2>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a27      	ldr	r2, [pc, #156]	; (80026b0 <HAL_DMA_IRQHandler+0x404>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d03b      	beq.n	800268e <HAL_DMA_IRQHandler+0x3e2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a26      	ldr	r2, [pc, #152]	; (80026b4 <HAL_DMA_IRQHandler+0x408>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d036      	beq.n	800268e <HAL_DMA_IRQHandler+0x3e2>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a24      	ldr	r2, [pc, #144]	; (80026b8 <HAL_DMA_IRQHandler+0x40c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d031      	beq.n	800268e <HAL_DMA_IRQHandler+0x3e2>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a23      	ldr	r2, [pc, #140]	; (80026bc <HAL_DMA_IRQHandler+0x410>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d02c      	beq.n	800268e <HAL_DMA_IRQHandler+0x3e2>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a21      	ldr	r2, [pc, #132]	; (80026c0 <HAL_DMA_IRQHandler+0x414>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d027      	beq.n	800268e <HAL_DMA_IRQHandler+0x3e2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a20      	ldr	r2, [pc, #128]	; (80026c4 <HAL_DMA_IRQHandler+0x418>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d022      	beq.n	800268e <HAL_DMA_IRQHandler+0x3e2>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a1e      	ldr	r2, [pc, #120]	; (80026c8 <HAL_DMA_IRQHandler+0x41c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d01d      	beq.n	800268e <HAL_DMA_IRQHandler+0x3e2>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a1d      	ldr	r2, [pc, #116]	; (80026cc <HAL_DMA_IRQHandler+0x420>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d018      	beq.n	800268e <HAL_DMA_IRQHandler+0x3e2>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <HAL_DMA_IRQHandler+0x424>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d013      	beq.n	800268e <HAL_DMA_IRQHandler+0x3e2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1a      	ldr	r2, [pc, #104]	; (80026d4 <HAL_DMA_IRQHandler+0x428>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00e      	beq.n	800268e <HAL_DMA_IRQHandler+0x3e2>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a18      	ldr	r2, [pc, #96]	; (80026d8 <HAL_DMA_IRQHandler+0x42c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d009      	beq.n	800268e <HAL_DMA_IRQHandler+0x3e2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a17      	ldr	r2, [pc, #92]	; (80026dc <HAL_DMA_IRQHandler+0x430>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d004      	beq.n	800268e <HAL_DMA_IRQHandler+0x3e2>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a15      	ldr	r2, [pc, #84]	; (80026e0 <HAL_DMA_IRQHandler+0x434>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d12a      	bne.n	80026e4 <HAL_DMA_IRQHandler+0x438>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf14      	ite	ne
 800269c:	2301      	movne	r3, #1
 800269e:	2300      	moveq	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	e023      	b.n	80026ec <HAL_DMA_IRQHandler+0x440>
 80026a4:	40020010 	.word	0x40020010
 80026a8:	40020028 	.word	0x40020028
 80026ac:	40020040 	.word	0x40020040
 80026b0:	40020058 	.word	0x40020058
 80026b4:	40020070 	.word	0x40020070
 80026b8:	40020088 	.word	0x40020088
 80026bc:	400200a0 	.word	0x400200a0
 80026c0:	400200b8 	.word	0x400200b8
 80026c4:	40020410 	.word	0x40020410
 80026c8:	40020428 	.word	0x40020428
 80026cc:	40020440 	.word	0x40020440
 80026d0:	40020458 	.word	0x40020458
 80026d4:	40020470 	.word	0x40020470
 80026d8:	40020488 	.word	0x40020488
 80026dc:	400204a0 	.word	0x400204a0
 80026e0:	400204b8 	.word	0x400204b8
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2300      	movs	r3, #0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00d      	beq.n	800270c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	2204      	movs	r2, #4
 80026fa:	409a      	lsls	r2, r3
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002704:	f043 0204 	orr.w	r2, r3, #4
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	2210      	movs	r2, #16
 8002716:	409a      	lsls	r2, r3
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 80a6 	beq.w	800286e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a85      	ldr	r2, [pc, #532]	; (800293c <HAL_DMA_IRQHandler+0x690>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d04a      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x516>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a83      	ldr	r2, [pc, #524]	; (8002940 <HAL_DMA_IRQHandler+0x694>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d045      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x516>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a82      	ldr	r2, [pc, #520]	; (8002944 <HAL_DMA_IRQHandler+0x698>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d040      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x516>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a80      	ldr	r2, [pc, #512]	; (8002948 <HAL_DMA_IRQHandler+0x69c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d03b      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x516>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a7f      	ldr	r2, [pc, #508]	; (800294c <HAL_DMA_IRQHandler+0x6a0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d036      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x516>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a7d      	ldr	r2, [pc, #500]	; (8002950 <HAL_DMA_IRQHandler+0x6a4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d031      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x516>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a7c      	ldr	r2, [pc, #496]	; (8002954 <HAL_DMA_IRQHandler+0x6a8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d02c      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x516>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a7a      	ldr	r2, [pc, #488]	; (8002958 <HAL_DMA_IRQHandler+0x6ac>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d027      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x516>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a79      	ldr	r2, [pc, #484]	; (800295c <HAL_DMA_IRQHandler+0x6b0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d022      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x516>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a77      	ldr	r2, [pc, #476]	; (8002960 <HAL_DMA_IRQHandler+0x6b4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d01d      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x516>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a76      	ldr	r2, [pc, #472]	; (8002964 <HAL_DMA_IRQHandler+0x6b8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d018      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x516>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a74      	ldr	r2, [pc, #464]	; (8002968 <HAL_DMA_IRQHandler+0x6bc>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d013      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x516>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a73      	ldr	r2, [pc, #460]	; (800296c <HAL_DMA_IRQHandler+0x6c0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00e      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x516>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a71      	ldr	r2, [pc, #452]	; (8002970 <HAL_DMA_IRQHandler+0x6c4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d009      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x516>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a70      	ldr	r2, [pc, #448]	; (8002974 <HAL_DMA_IRQHandler+0x6c8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d004      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x516>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a6e      	ldr	r2, [pc, #440]	; (8002978 <HAL_DMA_IRQHandler+0x6cc>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d10a      	bne.n	80027d8 <HAL_DMA_IRQHandler+0x52c>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	bf14      	ite	ne
 80027d0:	2301      	movne	r3, #1
 80027d2:	2300      	moveq	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	e009      	b.n	80027ec <HAL_DMA_IRQHandler+0x540>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	bf14      	ite	ne
 80027e6:	2301      	movne	r3, #1
 80027e8:	2300      	moveq	r3, #0
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d03e      	beq.n	800286e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	2210      	movs	r2, #16
 80027fa:	409a      	lsls	r2, r3
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d018      	beq.n	8002840 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d108      	bne.n	800282e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	2b00      	cmp	r3, #0
 8002822:	d024      	beq.n	800286e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4798      	blx	r3
 800282c:	e01f      	b.n	800286e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002832:	2b00      	cmp	r3, #0
 8002834:	d01b      	beq.n	800286e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	4798      	blx	r3
 800283e:	e016      	b.n	800286e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d107      	bne.n	800285e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0208 	bic.w	r2, r2, #8
 800285c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	2220      	movs	r2, #32
 8002878:	409a      	lsls	r2, r3
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8110 	beq.w	8002aa4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a2c      	ldr	r2, [pc, #176]	; (800293c <HAL_DMA_IRQHandler+0x690>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d04a      	beq.n	8002924 <HAL_DMA_IRQHandler+0x678>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a2b      	ldr	r2, [pc, #172]	; (8002940 <HAL_DMA_IRQHandler+0x694>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d045      	beq.n	8002924 <HAL_DMA_IRQHandler+0x678>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a29      	ldr	r2, [pc, #164]	; (8002944 <HAL_DMA_IRQHandler+0x698>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d040      	beq.n	8002924 <HAL_DMA_IRQHandler+0x678>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a28      	ldr	r2, [pc, #160]	; (8002948 <HAL_DMA_IRQHandler+0x69c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d03b      	beq.n	8002924 <HAL_DMA_IRQHandler+0x678>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a26      	ldr	r2, [pc, #152]	; (800294c <HAL_DMA_IRQHandler+0x6a0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d036      	beq.n	8002924 <HAL_DMA_IRQHandler+0x678>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a25      	ldr	r2, [pc, #148]	; (8002950 <HAL_DMA_IRQHandler+0x6a4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d031      	beq.n	8002924 <HAL_DMA_IRQHandler+0x678>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a23      	ldr	r2, [pc, #140]	; (8002954 <HAL_DMA_IRQHandler+0x6a8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d02c      	beq.n	8002924 <HAL_DMA_IRQHandler+0x678>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a22      	ldr	r2, [pc, #136]	; (8002958 <HAL_DMA_IRQHandler+0x6ac>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d027      	beq.n	8002924 <HAL_DMA_IRQHandler+0x678>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a20      	ldr	r2, [pc, #128]	; (800295c <HAL_DMA_IRQHandler+0x6b0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d022      	beq.n	8002924 <HAL_DMA_IRQHandler+0x678>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1f      	ldr	r2, [pc, #124]	; (8002960 <HAL_DMA_IRQHandler+0x6b4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d01d      	beq.n	8002924 <HAL_DMA_IRQHandler+0x678>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1d      	ldr	r2, [pc, #116]	; (8002964 <HAL_DMA_IRQHandler+0x6b8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d018      	beq.n	8002924 <HAL_DMA_IRQHandler+0x678>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1c      	ldr	r2, [pc, #112]	; (8002968 <HAL_DMA_IRQHandler+0x6bc>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d013      	beq.n	8002924 <HAL_DMA_IRQHandler+0x678>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1a      	ldr	r2, [pc, #104]	; (800296c <HAL_DMA_IRQHandler+0x6c0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00e      	beq.n	8002924 <HAL_DMA_IRQHandler+0x678>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a19      	ldr	r2, [pc, #100]	; (8002970 <HAL_DMA_IRQHandler+0x6c4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d009      	beq.n	8002924 <HAL_DMA_IRQHandler+0x678>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a17      	ldr	r2, [pc, #92]	; (8002974 <HAL_DMA_IRQHandler+0x6c8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d004      	beq.n	8002924 <HAL_DMA_IRQHandler+0x678>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a16      	ldr	r2, [pc, #88]	; (8002978 <HAL_DMA_IRQHandler+0x6cc>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d12b      	bne.n	800297c <HAL_DMA_IRQHandler+0x6d0>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0310 	and.w	r3, r3, #16
 800292e:	2b00      	cmp	r3, #0
 8002930:	bf14      	ite	ne
 8002932:	2301      	movne	r3, #1
 8002934:	2300      	moveq	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	e02a      	b.n	8002990 <HAL_DMA_IRQHandler+0x6e4>
 800293a:	bf00      	nop
 800293c:	40020010 	.word	0x40020010
 8002940:	40020028 	.word	0x40020028
 8002944:	40020040 	.word	0x40020040
 8002948:	40020058 	.word	0x40020058
 800294c:	40020070 	.word	0x40020070
 8002950:	40020088 	.word	0x40020088
 8002954:	400200a0 	.word	0x400200a0
 8002958:	400200b8 	.word	0x400200b8
 800295c:	40020410 	.word	0x40020410
 8002960:	40020428 	.word	0x40020428
 8002964:	40020440 	.word	0x40020440
 8002968:	40020458 	.word	0x40020458
 800296c:	40020470 	.word	0x40020470
 8002970:	40020488 	.word	0x40020488
 8002974:	400204a0 	.word	0x400204a0
 8002978:	400204b8 	.word	0x400204b8
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	bf14      	ite	ne
 800298a:	2301      	movne	r3, #1
 800298c:	2300      	moveq	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8087 	beq.w	8002aa4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	2220      	movs	r2, #32
 80029a0:	409a      	lsls	r2, r3
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d139      	bne.n	8002a26 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0216 	bic.w	r2, r2, #22
 80029c0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029d0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d103      	bne.n	80029e2 <HAL_DMA_IRQHandler+0x736>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d007      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0208 	bic.w	r2, r2, #8
 80029f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	223f      	movs	r2, #63	; 0x3f
 80029fc:	409a      	lsls	r2, r3
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 834a 	beq.w	80030b0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
          }
          return;
 8002a24:	e344      	b.n	80030b0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d018      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d108      	bne.n	8002a54 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d02c      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	4798      	blx	r3
 8002a52:	e027      	b.n	8002aa4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d023      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	4798      	blx	r3
 8002a64:	e01e      	b.n	8002aa4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10f      	bne.n	8002a94 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0210 	bic.w	r2, r2, #16
 8002a82:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 8306 	beq.w	80030ba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8088 	beq.w	8002bcc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2204      	movs	r2, #4
 8002ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a7a      	ldr	r2, [pc, #488]	; (8002cb4 <HAL_DMA_IRQHandler+0xa08>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d04a      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x8b8>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a79      	ldr	r2, [pc, #484]	; (8002cb8 <HAL_DMA_IRQHandler+0xa0c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d045      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x8b8>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a77      	ldr	r2, [pc, #476]	; (8002cbc <HAL_DMA_IRQHandler+0xa10>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d040      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x8b8>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a76      	ldr	r2, [pc, #472]	; (8002cc0 <HAL_DMA_IRQHandler+0xa14>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d03b      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x8b8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a74      	ldr	r2, [pc, #464]	; (8002cc4 <HAL_DMA_IRQHandler+0xa18>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d036      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x8b8>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a73      	ldr	r2, [pc, #460]	; (8002cc8 <HAL_DMA_IRQHandler+0xa1c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d031      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x8b8>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a71      	ldr	r2, [pc, #452]	; (8002ccc <HAL_DMA_IRQHandler+0xa20>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d02c      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x8b8>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a70      	ldr	r2, [pc, #448]	; (8002cd0 <HAL_DMA_IRQHandler+0xa24>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d027      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x8b8>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a6e      	ldr	r2, [pc, #440]	; (8002cd4 <HAL_DMA_IRQHandler+0xa28>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d022      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x8b8>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a6d      	ldr	r2, [pc, #436]	; (8002cd8 <HAL_DMA_IRQHandler+0xa2c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d01d      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x8b8>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a6b      	ldr	r2, [pc, #428]	; (8002cdc <HAL_DMA_IRQHandler+0xa30>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d018      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x8b8>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a6a      	ldr	r2, [pc, #424]	; (8002ce0 <HAL_DMA_IRQHandler+0xa34>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d013      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x8b8>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a68      	ldr	r2, [pc, #416]	; (8002ce4 <HAL_DMA_IRQHandler+0xa38>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00e      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x8b8>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a67      	ldr	r2, [pc, #412]	; (8002ce8 <HAL_DMA_IRQHandler+0xa3c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d009      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x8b8>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a65      	ldr	r2, [pc, #404]	; (8002cec <HAL_DMA_IRQHandler+0xa40>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d004      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x8b8>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a64      	ldr	r2, [pc, #400]	; (8002cf0 <HAL_DMA_IRQHandler+0xa44>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d108      	bne.n	8002b76 <HAL_DMA_IRQHandler+0x8ca>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0201 	bic.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	e007      	b.n	8002b86 <HAL_DMA_IRQHandler+0x8da>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0201 	bic.w	r2, r2, #1
 8002b84:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d307      	bcc.n	8002ba2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f2      	bne.n	8002b86 <HAL_DMA_IRQHandler+0x8da>
 8002ba0:	e000      	b.n	8002ba4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002ba2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d004      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002bba:	e003      	b.n	8002bc4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 8272 	beq.w	80030ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	4798      	blx	r3
 8002bde:	e26c      	b.n	80030ba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a43      	ldr	r2, [pc, #268]	; (8002cf4 <HAL_DMA_IRQHandler+0xa48>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d022      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x984>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a42      	ldr	r2, [pc, #264]	; (8002cf8 <HAL_DMA_IRQHandler+0xa4c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d01d      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x984>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a40      	ldr	r2, [pc, #256]	; (8002cfc <HAL_DMA_IRQHandler+0xa50>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d018      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x984>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a3f      	ldr	r2, [pc, #252]	; (8002d00 <HAL_DMA_IRQHandler+0xa54>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d013      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x984>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a3d      	ldr	r2, [pc, #244]	; (8002d04 <HAL_DMA_IRQHandler+0xa58>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00e      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x984>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a3c      	ldr	r2, [pc, #240]	; (8002d08 <HAL_DMA_IRQHandler+0xa5c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d009      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x984>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a3a      	ldr	r2, [pc, #232]	; (8002d0c <HAL_DMA_IRQHandler+0xa60>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d004      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x984>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a39      	ldr	r2, [pc, #228]	; (8002d10 <HAL_DMA_IRQHandler+0xa64>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d101      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x988>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <HAL_DMA_IRQHandler+0x98a>
 8002c34:	2300      	movs	r3, #0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 823f 	beq.w	80030ba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c48:	f003 031f 	and.w	r3, r3, #31
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80cd 	beq.w	8002df4 <HAL_DMA_IRQHandler+0xb48>
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80c7 	beq.w	8002df4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	2204      	movs	r2, #4
 8002c70:	409a      	lsls	r2, r3
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d049      	beq.n	8002d14 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 8210 	beq.w	80030b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c9c:	e20a      	b.n	80030b4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8206 	beq.w	80030b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cb0:	e200      	b.n	80030b4 <HAL_DMA_IRQHandler+0xe08>
 8002cb2:	bf00      	nop
 8002cb4:	40020010 	.word	0x40020010
 8002cb8:	40020028 	.word	0x40020028
 8002cbc:	40020040 	.word	0x40020040
 8002cc0:	40020058 	.word	0x40020058
 8002cc4:	40020070 	.word	0x40020070
 8002cc8:	40020088 	.word	0x40020088
 8002ccc:	400200a0 	.word	0x400200a0
 8002cd0:	400200b8 	.word	0x400200b8
 8002cd4:	40020410 	.word	0x40020410
 8002cd8:	40020428 	.word	0x40020428
 8002cdc:	40020440 	.word	0x40020440
 8002ce0:	40020458 	.word	0x40020458
 8002ce4:	40020470 	.word	0x40020470
 8002ce8:	40020488 	.word	0x40020488
 8002cec:	400204a0 	.word	0x400204a0
 8002cf0:	400204b8 	.word	0x400204b8
 8002cf4:	58025408 	.word	0x58025408
 8002cf8:	5802541c 	.word	0x5802541c
 8002cfc:	58025430 	.word	0x58025430
 8002d00:	58025444 	.word	0x58025444
 8002d04:	58025458 	.word	0x58025458
 8002d08:	5802546c 	.word	0x5802546c
 8002d0c:	58025480 	.word	0x58025480
 8002d10:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d160      	bne.n	8002de0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a7f      	ldr	r2, [pc, #508]	; (8002f20 <HAL_DMA_IRQHandler+0xc74>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d04a      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xb12>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a7d      	ldr	r2, [pc, #500]	; (8002f24 <HAL_DMA_IRQHandler+0xc78>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d045      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xb12>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a7c      	ldr	r2, [pc, #496]	; (8002f28 <HAL_DMA_IRQHandler+0xc7c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d040      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xb12>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a7a      	ldr	r2, [pc, #488]	; (8002f2c <HAL_DMA_IRQHandler+0xc80>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d03b      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xb12>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a79      	ldr	r2, [pc, #484]	; (8002f30 <HAL_DMA_IRQHandler+0xc84>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d036      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xb12>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a77      	ldr	r2, [pc, #476]	; (8002f34 <HAL_DMA_IRQHandler+0xc88>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d031      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xb12>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a76      	ldr	r2, [pc, #472]	; (8002f38 <HAL_DMA_IRQHandler+0xc8c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d02c      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xb12>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a74      	ldr	r2, [pc, #464]	; (8002f3c <HAL_DMA_IRQHandler+0xc90>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d027      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xb12>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a73      	ldr	r2, [pc, #460]	; (8002f40 <HAL_DMA_IRQHandler+0xc94>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d022      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xb12>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a71      	ldr	r2, [pc, #452]	; (8002f44 <HAL_DMA_IRQHandler+0xc98>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d01d      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xb12>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a70      	ldr	r2, [pc, #448]	; (8002f48 <HAL_DMA_IRQHandler+0xc9c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d018      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xb12>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a6e      	ldr	r2, [pc, #440]	; (8002f4c <HAL_DMA_IRQHandler+0xca0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xb12>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a6d      	ldr	r2, [pc, #436]	; (8002f50 <HAL_DMA_IRQHandler+0xca4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00e      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xb12>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a6b      	ldr	r2, [pc, #428]	; (8002f54 <HAL_DMA_IRQHandler+0xca8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d009      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xb12>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a6a      	ldr	r2, [pc, #424]	; (8002f58 <HAL_DMA_IRQHandler+0xcac>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d004      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xb12>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a68      	ldr	r2, [pc, #416]	; (8002f5c <HAL_DMA_IRQHandler+0xcb0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d108      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0xb24>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0208 	bic.w	r2, r2, #8
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	e007      	b.n	8002de0 <HAL_DMA_IRQHandler+0xb34>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0204 	bic.w	r2, r2, #4
 8002dde:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 8165 	beq.w	80030b4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002df2:	e15f      	b.n	80030b4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80c5 	beq.w	8002f94 <HAL_DMA_IRQHandler+0xce8>
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80bf 	beq.w	8002f94 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	2202      	movs	r2, #2
 8002e20:	409a      	lsls	r2, r3
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d018      	beq.n	8002e62 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 813a 	beq.w	80030b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e4c:	e134      	b.n	80030b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8130 	beq.w	80030b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e60:	e12a      	b.n	80030b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f040 8089 	bne.w	8002f80 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a2b      	ldr	r2, [pc, #172]	; (8002f20 <HAL_DMA_IRQHandler+0xc74>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d04a      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xc62>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a29      	ldr	r2, [pc, #164]	; (8002f24 <HAL_DMA_IRQHandler+0xc78>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d045      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xc62>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a28      	ldr	r2, [pc, #160]	; (8002f28 <HAL_DMA_IRQHandler+0xc7c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d040      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xc62>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a26      	ldr	r2, [pc, #152]	; (8002f2c <HAL_DMA_IRQHandler+0xc80>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d03b      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xc62>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a25      	ldr	r2, [pc, #148]	; (8002f30 <HAL_DMA_IRQHandler+0xc84>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d036      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xc62>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a23      	ldr	r2, [pc, #140]	; (8002f34 <HAL_DMA_IRQHandler+0xc88>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d031      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xc62>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a22      	ldr	r2, [pc, #136]	; (8002f38 <HAL_DMA_IRQHandler+0xc8c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d02c      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xc62>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a20      	ldr	r2, [pc, #128]	; (8002f3c <HAL_DMA_IRQHandler+0xc90>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d027      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xc62>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1f      	ldr	r2, [pc, #124]	; (8002f40 <HAL_DMA_IRQHandler+0xc94>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d022      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xc62>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1d      	ldr	r2, [pc, #116]	; (8002f44 <HAL_DMA_IRQHandler+0xc98>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d01d      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xc62>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <HAL_DMA_IRQHandler+0xc9c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d018      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xc62>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a1a      	ldr	r2, [pc, #104]	; (8002f4c <HAL_DMA_IRQHandler+0xca0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d013      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xc62>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <HAL_DMA_IRQHandler+0xca4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00e      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xc62>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a17      	ldr	r2, [pc, #92]	; (8002f54 <HAL_DMA_IRQHandler+0xca8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d009      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xc62>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a16      	ldr	r2, [pc, #88]	; (8002f58 <HAL_DMA_IRQHandler+0xcac>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d004      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xc62>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a14      	ldr	r2, [pc, #80]	; (8002f5c <HAL_DMA_IRQHandler+0xcb0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d128      	bne.n	8002f60 <HAL_DMA_IRQHandler+0xcb4>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0214 	bic.w	r2, r2, #20
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	e027      	b.n	8002f70 <HAL_DMA_IRQHandler+0xcc4>
 8002f20:	40020010 	.word	0x40020010
 8002f24:	40020028 	.word	0x40020028
 8002f28:	40020040 	.word	0x40020040
 8002f2c:	40020058 	.word	0x40020058
 8002f30:	40020070 	.word	0x40020070
 8002f34:	40020088 	.word	0x40020088
 8002f38:	400200a0 	.word	0x400200a0
 8002f3c:	400200b8 	.word	0x400200b8
 8002f40:	40020410 	.word	0x40020410
 8002f44:	40020428 	.word	0x40020428
 8002f48:	40020440 	.word	0x40020440
 8002f4c:	40020458 	.word	0x40020458
 8002f50:	40020470 	.word	0x40020470
 8002f54:	40020488 	.word	0x40020488
 8002f58:	400204a0 	.word	0x400204a0
 8002f5c:	400204b8 	.word	0x400204b8
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 020a 	bic.w	r2, r2, #10
 8002f6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 8097 	beq.w	80030b8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f92:	e091      	b.n	80030b8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 8088 	beq.w	80030ba <HAL_DMA_IRQHandler+0xe0e>
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 8082 	beq.w	80030ba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a41      	ldr	r2, [pc, #260]	; (80030c0 <HAL_DMA_IRQHandler+0xe14>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d04a      	beq.n	8003056 <HAL_DMA_IRQHandler+0xdaa>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a3f      	ldr	r2, [pc, #252]	; (80030c4 <HAL_DMA_IRQHandler+0xe18>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d045      	beq.n	8003056 <HAL_DMA_IRQHandler+0xdaa>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a3e      	ldr	r2, [pc, #248]	; (80030c8 <HAL_DMA_IRQHandler+0xe1c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d040      	beq.n	8003056 <HAL_DMA_IRQHandler+0xdaa>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a3c      	ldr	r2, [pc, #240]	; (80030cc <HAL_DMA_IRQHandler+0xe20>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d03b      	beq.n	8003056 <HAL_DMA_IRQHandler+0xdaa>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a3b      	ldr	r2, [pc, #236]	; (80030d0 <HAL_DMA_IRQHandler+0xe24>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d036      	beq.n	8003056 <HAL_DMA_IRQHandler+0xdaa>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a39      	ldr	r2, [pc, #228]	; (80030d4 <HAL_DMA_IRQHandler+0xe28>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d031      	beq.n	8003056 <HAL_DMA_IRQHandler+0xdaa>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a38      	ldr	r2, [pc, #224]	; (80030d8 <HAL_DMA_IRQHandler+0xe2c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d02c      	beq.n	8003056 <HAL_DMA_IRQHandler+0xdaa>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a36      	ldr	r2, [pc, #216]	; (80030dc <HAL_DMA_IRQHandler+0xe30>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d027      	beq.n	8003056 <HAL_DMA_IRQHandler+0xdaa>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a35      	ldr	r2, [pc, #212]	; (80030e0 <HAL_DMA_IRQHandler+0xe34>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d022      	beq.n	8003056 <HAL_DMA_IRQHandler+0xdaa>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a33      	ldr	r2, [pc, #204]	; (80030e4 <HAL_DMA_IRQHandler+0xe38>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d01d      	beq.n	8003056 <HAL_DMA_IRQHandler+0xdaa>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a32      	ldr	r2, [pc, #200]	; (80030e8 <HAL_DMA_IRQHandler+0xe3c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d018      	beq.n	8003056 <HAL_DMA_IRQHandler+0xdaa>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a30      	ldr	r2, [pc, #192]	; (80030ec <HAL_DMA_IRQHandler+0xe40>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d013      	beq.n	8003056 <HAL_DMA_IRQHandler+0xdaa>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a2f      	ldr	r2, [pc, #188]	; (80030f0 <HAL_DMA_IRQHandler+0xe44>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00e      	beq.n	8003056 <HAL_DMA_IRQHandler+0xdaa>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a2d      	ldr	r2, [pc, #180]	; (80030f4 <HAL_DMA_IRQHandler+0xe48>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d009      	beq.n	8003056 <HAL_DMA_IRQHandler+0xdaa>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a2c      	ldr	r2, [pc, #176]	; (80030f8 <HAL_DMA_IRQHandler+0xe4c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d004      	beq.n	8003056 <HAL_DMA_IRQHandler+0xdaa>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a2a      	ldr	r2, [pc, #168]	; (80030fc <HAL_DMA_IRQHandler+0xe50>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d108      	bne.n	8003068 <HAL_DMA_IRQHandler+0xdbc>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 021c 	bic.w	r2, r2, #28
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	e007      	b.n	8003078 <HAL_DMA_IRQHandler+0xdcc>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 020e 	bic.w	r2, r2, #14
 8003076:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	2201      	movs	r2, #1
 8003082:	409a      	lsls	r2, r3
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	4798      	blx	r3
 80030ae:	e004      	b.n	80030ba <HAL_DMA_IRQHandler+0xe0e>
          return;
 80030b0:	bf00      	nop
 80030b2:	e002      	b.n	80030ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030b4:	bf00      	nop
 80030b6:	e000      	b.n	80030ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030b8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80030ba:	3728      	adds	r7, #40	; 0x28
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40020010 	.word	0x40020010
 80030c4:	40020028 	.word	0x40020028
 80030c8:	40020040 	.word	0x40020040
 80030cc:	40020058 	.word	0x40020058
 80030d0:	40020070 	.word	0x40020070
 80030d4:	40020088 	.word	0x40020088
 80030d8:	400200a0 	.word	0x400200a0
 80030dc:	400200b8 	.word	0x400200b8
 80030e0:	40020410 	.word	0x40020410
 80030e4:	40020428 	.word	0x40020428
 80030e8:	40020440 	.word	0x40020440
 80030ec:	40020458 	.word	0x40020458
 80030f0:	40020470 	.word	0x40020470
 80030f4:	40020488 	.word	0x40020488
 80030f8:	400204a0 	.word	0x400204a0
 80030fc:	400204b8 	.word	0x400204b8

08003100 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003112:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a7f      	ldr	r2, [pc, #508]	; (800331c <DMA_SetConfig+0x21c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d072      	beq.n	800320a <DMA_SetConfig+0x10a>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a7d      	ldr	r2, [pc, #500]	; (8003320 <DMA_SetConfig+0x220>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d06d      	beq.n	800320a <DMA_SetConfig+0x10a>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a7c      	ldr	r2, [pc, #496]	; (8003324 <DMA_SetConfig+0x224>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d068      	beq.n	800320a <DMA_SetConfig+0x10a>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a7a      	ldr	r2, [pc, #488]	; (8003328 <DMA_SetConfig+0x228>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d063      	beq.n	800320a <DMA_SetConfig+0x10a>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a79      	ldr	r2, [pc, #484]	; (800332c <DMA_SetConfig+0x22c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d05e      	beq.n	800320a <DMA_SetConfig+0x10a>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a77      	ldr	r2, [pc, #476]	; (8003330 <DMA_SetConfig+0x230>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d059      	beq.n	800320a <DMA_SetConfig+0x10a>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a76      	ldr	r2, [pc, #472]	; (8003334 <DMA_SetConfig+0x234>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d054      	beq.n	800320a <DMA_SetConfig+0x10a>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a74      	ldr	r2, [pc, #464]	; (8003338 <DMA_SetConfig+0x238>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d04f      	beq.n	800320a <DMA_SetConfig+0x10a>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a73      	ldr	r2, [pc, #460]	; (800333c <DMA_SetConfig+0x23c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d04a      	beq.n	800320a <DMA_SetConfig+0x10a>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a71      	ldr	r2, [pc, #452]	; (8003340 <DMA_SetConfig+0x240>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d045      	beq.n	800320a <DMA_SetConfig+0x10a>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a70      	ldr	r2, [pc, #448]	; (8003344 <DMA_SetConfig+0x244>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d040      	beq.n	800320a <DMA_SetConfig+0x10a>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a6e      	ldr	r2, [pc, #440]	; (8003348 <DMA_SetConfig+0x248>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d03b      	beq.n	800320a <DMA_SetConfig+0x10a>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a6d      	ldr	r2, [pc, #436]	; (800334c <DMA_SetConfig+0x24c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d036      	beq.n	800320a <DMA_SetConfig+0x10a>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a6b      	ldr	r2, [pc, #428]	; (8003350 <DMA_SetConfig+0x250>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d031      	beq.n	800320a <DMA_SetConfig+0x10a>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a6a      	ldr	r2, [pc, #424]	; (8003354 <DMA_SetConfig+0x254>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d02c      	beq.n	800320a <DMA_SetConfig+0x10a>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a68      	ldr	r2, [pc, #416]	; (8003358 <DMA_SetConfig+0x258>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d027      	beq.n	800320a <DMA_SetConfig+0x10a>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a67      	ldr	r2, [pc, #412]	; (800335c <DMA_SetConfig+0x25c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d022      	beq.n	800320a <DMA_SetConfig+0x10a>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a65      	ldr	r2, [pc, #404]	; (8003360 <DMA_SetConfig+0x260>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d01d      	beq.n	800320a <DMA_SetConfig+0x10a>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a64      	ldr	r2, [pc, #400]	; (8003364 <DMA_SetConfig+0x264>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d018      	beq.n	800320a <DMA_SetConfig+0x10a>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a62      	ldr	r2, [pc, #392]	; (8003368 <DMA_SetConfig+0x268>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <DMA_SetConfig+0x10a>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a61      	ldr	r2, [pc, #388]	; (800336c <DMA_SetConfig+0x26c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00e      	beq.n	800320a <DMA_SetConfig+0x10a>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a5f      	ldr	r2, [pc, #380]	; (8003370 <DMA_SetConfig+0x270>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d009      	beq.n	800320a <DMA_SetConfig+0x10a>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a5e      	ldr	r2, [pc, #376]	; (8003374 <DMA_SetConfig+0x274>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d004      	beq.n	800320a <DMA_SetConfig+0x10a>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a5c      	ldr	r2, [pc, #368]	; (8003378 <DMA_SetConfig+0x278>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d101      	bne.n	800320e <DMA_SetConfig+0x10e>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <DMA_SetConfig+0x110>
 800320e:	2300      	movs	r3, #0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00d      	beq.n	8003230 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800321c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003222:	2b00      	cmp	r3, #0
 8003224:	d004      	beq.n	8003230 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800322e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a39      	ldr	r2, [pc, #228]	; (800331c <DMA_SetConfig+0x21c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d04a      	beq.n	80032d0 <DMA_SetConfig+0x1d0>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a38      	ldr	r2, [pc, #224]	; (8003320 <DMA_SetConfig+0x220>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d045      	beq.n	80032d0 <DMA_SetConfig+0x1d0>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a36      	ldr	r2, [pc, #216]	; (8003324 <DMA_SetConfig+0x224>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d040      	beq.n	80032d0 <DMA_SetConfig+0x1d0>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a35      	ldr	r2, [pc, #212]	; (8003328 <DMA_SetConfig+0x228>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d03b      	beq.n	80032d0 <DMA_SetConfig+0x1d0>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a33      	ldr	r2, [pc, #204]	; (800332c <DMA_SetConfig+0x22c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d036      	beq.n	80032d0 <DMA_SetConfig+0x1d0>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a32      	ldr	r2, [pc, #200]	; (8003330 <DMA_SetConfig+0x230>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d031      	beq.n	80032d0 <DMA_SetConfig+0x1d0>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a30      	ldr	r2, [pc, #192]	; (8003334 <DMA_SetConfig+0x234>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d02c      	beq.n	80032d0 <DMA_SetConfig+0x1d0>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a2f      	ldr	r2, [pc, #188]	; (8003338 <DMA_SetConfig+0x238>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d027      	beq.n	80032d0 <DMA_SetConfig+0x1d0>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a2d      	ldr	r2, [pc, #180]	; (800333c <DMA_SetConfig+0x23c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d022      	beq.n	80032d0 <DMA_SetConfig+0x1d0>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a2c      	ldr	r2, [pc, #176]	; (8003340 <DMA_SetConfig+0x240>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d01d      	beq.n	80032d0 <DMA_SetConfig+0x1d0>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a2a      	ldr	r2, [pc, #168]	; (8003344 <DMA_SetConfig+0x244>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d018      	beq.n	80032d0 <DMA_SetConfig+0x1d0>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a29      	ldr	r2, [pc, #164]	; (8003348 <DMA_SetConfig+0x248>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d013      	beq.n	80032d0 <DMA_SetConfig+0x1d0>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a27      	ldr	r2, [pc, #156]	; (800334c <DMA_SetConfig+0x24c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00e      	beq.n	80032d0 <DMA_SetConfig+0x1d0>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a26      	ldr	r2, [pc, #152]	; (8003350 <DMA_SetConfig+0x250>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d009      	beq.n	80032d0 <DMA_SetConfig+0x1d0>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a24      	ldr	r2, [pc, #144]	; (8003354 <DMA_SetConfig+0x254>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d004      	beq.n	80032d0 <DMA_SetConfig+0x1d0>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a23      	ldr	r2, [pc, #140]	; (8003358 <DMA_SetConfig+0x258>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d101      	bne.n	80032d4 <DMA_SetConfig+0x1d4>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <DMA_SetConfig+0x1d6>
 80032d4:	2300      	movs	r3, #0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d059      	beq.n	800338e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032de:	f003 031f 	and.w	r3, r3, #31
 80032e2:	223f      	movs	r2, #63	; 0x3f
 80032e4:	409a      	lsls	r2, r3
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032f8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b40      	cmp	r3, #64	; 0x40
 8003308:	d138      	bne.n	800337c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800331a:	e086      	b.n	800342a <DMA_SetConfig+0x32a>
 800331c:	40020010 	.word	0x40020010
 8003320:	40020028 	.word	0x40020028
 8003324:	40020040 	.word	0x40020040
 8003328:	40020058 	.word	0x40020058
 800332c:	40020070 	.word	0x40020070
 8003330:	40020088 	.word	0x40020088
 8003334:	400200a0 	.word	0x400200a0
 8003338:	400200b8 	.word	0x400200b8
 800333c:	40020410 	.word	0x40020410
 8003340:	40020428 	.word	0x40020428
 8003344:	40020440 	.word	0x40020440
 8003348:	40020458 	.word	0x40020458
 800334c:	40020470 	.word	0x40020470
 8003350:	40020488 	.word	0x40020488
 8003354:	400204a0 	.word	0x400204a0
 8003358:	400204b8 	.word	0x400204b8
 800335c:	58025408 	.word	0x58025408
 8003360:	5802541c 	.word	0x5802541c
 8003364:	58025430 	.word	0x58025430
 8003368:	58025444 	.word	0x58025444
 800336c:	58025458 	.word	0x58025458
 8003370:	5802546c 	.word	0x5802546c
 8003374:	58025480 	.word	0x58025480
 8003378:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	60da      	str	r2, [r3, #12]
}
 800338c:	e04d      	b.n	800342a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a29      	ldr	r2, [pc, #164]	; (8003438 <DMA_SetConfig+0x338>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d022      	beq.n	80033de <DMA_SetConfig+0x2de>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a27      	ldr	r2, [pc, #156]	; (800343c <DMA_SetConfig+0x33c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d01d      	beq.n	80033de <DMA_SetConfig+0x2de>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a26      	ldr	r2, [pc, #152]	; (8003440 <DMA_SetConfig+0x340>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d018      	beq.n	80033de <DMA_SetConfig+0x2de>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a24      	ldr	r2, [pc, #144]	; (8003444 <DMA_SetConfig+0x344>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d013      	beq.n	80033de <DMA_SetConfig+0x2de>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a23      	ldr	r2, [pc, #140]	; (8003448 <DMA_SetConfig+0x348>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00e      	beq.n	80033de <DMA_SetConfig+0x2de>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a21      	ldr	r2, [pc, #132]	; (800344c <DMA_SetConfig+0x34c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d009      	beq.n	80033de <DMA_SetConfig+0x2de>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a20      	ldr	r2, [pc, #128]	; (8003450 <DMA_SetConfig+0x350>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d004      	beq.n	80033de <DMA_SetConfig+0x2de>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a1e      	ldr	r2, [pc, #120]	; (8003454 <DMA_SetConfig+0x354>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d101      	bne.n	80033e2 <DMA_SetConfig+0x2e2>
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <DMA_SetConfig+0x2e4>
 80033e2:	2300      	movs	r3, #0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d020      	beq.n	800342a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	2201      	movs	r2, #1
 80033f2:	409a      	lsls	r2, r3
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b40      	cmp	r3, #64	; 0x40
 8003406:	d108      	bne.n	800341a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	60da      	str	r2, [r3, #12]
}
 8003418:	e007      	b.n	800342a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	60da      	str	r2, [r3, #12]
}
 800342a:	bf00      	nop
 800342c:	371c      	adds	r7, #28
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	58025408 	.word	0x58025408
 800343c:	5802541c 	.word	0x5802541c
 8003440:	58025430 	.word	0x58025430
 8003444:	58025444 	.word	0x58025444
 8003448:	58025458 	.word	0x58025458
 800344c:	5802546c 	.word	0x5802546c
 8003450:	58025480 	.word	0x58025480
 8003454:	58025494 	.word	0x58025494

08003458 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a42      	ldr	r2, [pc, #264]	; (8003570 <DMA_CalcBaseAndBitshift+0x118>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d04a      	beq.n	8003500 <DMA_CalcBaseAndBitshift+0xa8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a41      	ldr	r2, [pc, #260]	; (8003574 <DMA_CalcBaseAndBitshift+0x11c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d045      	beq.n	8003500 <DMA_CalcBaseAndBitshift+0xa8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a3f      	ldr	r2, [pc, #252]	; (8003578 <DMA_CalcBaseAndBitshift+0x120>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d040      	beq.n	8003500 <DMA_CalcBaseAndBitshift+0xa8>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a3e      	ldr	r2, [pc, #248]	; (800357c <DMA_CalcBaseAndBitshift+0x124>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d03b      	beq.n	8003500 <DMA_CalcBaseAndBitshift+0xa8>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a3c      	ldr	r2, [pc, #240]	; (8003580 <DMA_CalcBaseAndBitshift+0x128>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d036      	beq.n	8003500 <DMA_CalcBaseAndBitshift+0xa8>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a3b      	ldr	r2, [pc, #236]	; (8003584 <DMA_CalcBaseAndBitshift+0x12c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d031      	beq.n	8003500 <DMA_CalcBaseAndBitshift+0xa8>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a39      	ldr	r2, [pc, #228]	; (8003588 <DMA_CalcBaseAndBitshift+0x130>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d02c      	beq.n	8003500 <DMA_CalcBaseAndBitshift+0xa8>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a38      	ldr	r2, [pc, #224]	; (800358c <DMA_CalcBaseAndBitshift+0x134>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d027      	beq.n	8003500 <DMA_CalcBaseAndBitshift+0xa8>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a36      	ldr	r2, [pc, #216]	; (8003590 <DMA_CalcBaseAndBitshift+0x138>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d022      	beq.n	8003500 <DMA_CalcBaseAndBitshift+0xa8>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a35      	ldr	r2, [pc, #212]	; (8003594 <DMA_CalcBaseAndBitshift+0x13c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d01d      	beq.n	8003500 <DMA_CalcBaseAndBitshift+0xa8>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a33      	ldr	r2, [pc, #204]	; (8003598 <DMA_CalcBaseAndBitshift+0x140>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d018      	beq.n	8003500 <DMA_CalcBaseAndBitshift+0xa8>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a32      	ldr	r2, [pc, #200]	; (800359c <DMA_CalcBaseAndBitshift+0x144>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d013      	beq.n	8003500 <DMA_CalcBaseAndBitshift+0xa8>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a30      	ldr	r2, [pc, #192]	; (80035a0 <DMA_CalcBaseAndBitshift+0x148>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00e      	beq.n	8003500 <DMA_CalcBaseAndBitshift+0xa8>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a2f      	ldr	r2, [pc, #188]	; (80035a4 <DMA_CalcBaseAndBitshift+0x14c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d009      	beq.n	8003500 <DMA_CalcBaseAndBitshift+0xa8>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a2d      	ldr	r2, [pc, #180]	; (80035a8 <DMA_CalcBaseAndBitshift+0x150>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d004      	beq.n	8003500 <DMA_CalcBaseAndBitshift+0xa8>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a2c      	ldr	r2, [pc, #176]	; (80035ac <DMA_CalcBaseAndBitshift+0x154>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d101      	bne.n	8003504 <DMA_CalcBaseAndBitshift+0xac>
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <DMA_CalcBaseAndBitshift+0xae>
 8003504:	2300      	movs	r3, #0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d024      	beq.n	8003554 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	3b10      	subs	r3, #16
 8003512:	4a27      	ldr	r2, [pc, #156]	; (80035b0 <DMA_CalcBaseAndBitshift+0x158>)
 8003514:	fba2 2303 	umull	r2, r3, r2, r3
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	4a24      	ldr	r2, [pc, #144]	; (80035b4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003524:	5cd3      	ldrb	r3, [r2, r3]
 8003526:	461a      	mov	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b03      	cmp	r3, #3
 8003530:	d908      	bls.n	8003544 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	4b1f      	ldr	r3, [pc, #124]	; (80035b8 <DMA_CalcBaseAndBitshift+0x160>)
 800353a:	4013      	ands	r3, r2
 800353c:	1d1a      	adds	r2, r3, #4
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	659a      	str	r2, [r3, #88]	; 0x58
 8003542:	e00d      	b.n	8003560 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <DMA_CalcBaseAndBitshift+0x160>)
 800354c:	4013      	ands	r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6593      	str	r3, [r2, #88]	; 0x58
 8003552:	e005      	b.n	8003560 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	40020010 	.word	0x40020010
 8003574:	40020028 	.word	0x40020028
 8003578:	40020040 	.word	0x40020040
 800357c:	40020058 	.word	0x40020058
 8003580:	40020070 	.word	0x40020070
 8003584:	40020088 	.word	0x40020088
 8003588:	400200a0 	.word	0x400200a0
 800358c:	400200b8 	.word	0x400200b8
 8003590:	40020410 	.word	0x40020410
 8003594:	40020428 	.word	0x40020428
 8003598:	40020440 	.word	0x40020440
 800359c:	40020458 	.word	0x40020458
 80035a0:	40020470 	.word	0x40020470
 80035a4:	40020488 	.word	0x40020488
 80035a8:	400204a0 	.word	0x400204a0
 80035ac:	400204b8 	.word	0x400204b8
 80035b0:	aaaaaaab 	.word	0xaaaaaaab
 80035b4:	08009938 	.word	0x08009938
 80035b8:	fffffc00 	.word	0xfffffc00

080035bc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d120      	bne.n	8003612 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d858      	bhi.n	800368a <DMA_CheckFifoParam+0xce>
 80035d8:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <DMA_CheckFifoParam+0x24>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	080035f1 	.word	0x080035f1
 80035e4:	08003603 	.word	0x08003603
 80035e8:	080035f1 	.word	0x080035f1
 80035ec:	0800368b 	.word	0x0800368b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d048      	beq.n	800368e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003600:	e045      	b.n	800368e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800360a:	d142      	bne.n	8003692 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003610:	e03f      	b.n	8003692 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800361a:	d123      	bne.n	8003664 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003620:	2b03      	cmp	r3, #3
 8003622:	d838      	bhi.n	8003696 <DMA_CheckFifoParam+0xda>
 8003624:	a201      	add	r2, pc, #4	; (adr r2, 800362c <DMA_CheckFifoParam+0x70>)
 8003626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362a:	bf00      	nop
 800362c:	0800363d 	.word	0x0800363d
 8003630:	08003643 	.word	0x08003643
 8003634:	0800363d 	.word	0x0800363d
 8003638:	08003655 	.word	0x08003655
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
        break;
 8003640:	e030      	b.n	80036a4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d025      	beq.n	800369a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003652:	e022      	b.n	800369a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800365c:	d11f      	bne.n	800369e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003662:	e01c      	b.n	800369e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	2b02      	cmp	r3, #2
 800366a:	d902      	bls.n	8003672 <DMA_CheckFifoParam+0xb6>
 800366c:	2b03      	cmp	r3, #3
 800366e:	d003      	beq.n	8003678 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003670:	e018      	b.n	80036a4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	73fb      	strb	r3, [r7, #15]
        break;
 8003676:	e015      	b.n	80036a4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00e      	beq.n	80036a2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
    break;
 8003688:	e00b      	b.n	80036a2 <DMA_CheckFifoParam+0xe6>
        break;
 800368a:	bf00      	nop
 800368c:	e00a      	b.n	80036a4 <DMA_CheckFifoParam+0xe8>
        break;
 800368e:	bf00      	nop
 8003690:	e008      	b.n	80036a4 <DMA_CheckFifoParam+0xe8>
        break;
 8003692:	bf00      	nop
 8003694:	e006      	b.n	80036a4 <DMA_CheckFifoParam+0xe8>
        break;
 8003696:	bf00      	nop
 8003698:	e004      	b.n	80036a4 <DMA_CheckFifoParam+0xe8>
        break;
 800369a:	bf00      	nop
 800369c:	e002      	b.n	80036a4 <DMA_CheckFifoParam+0xe8>
        break;
 800369e:	bf00      	nop
 80036a0:	e000      	b.n	80036a4 <DMA_CheckFifoParam+0xe8>
    break;
 80036a2:	bf00      	nop
    }
  }

  return status;
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop

080036b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a38      	ldr	r2, [pc, #224]	; (80037a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d022      	beq.n	8003712 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a36      	ldr	r2, [pc, #216]	; (80037ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d01d      	beq.n	8003712 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a35      	ldr	r2, [pc, #212]	; (80037b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d018      	beq.n	8003712 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a33      	ldr	r2, [pc, #204]	; (80037b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d013      	beq.n	8003712 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a32      	ldr	r2, [pc, #200]	; (80037b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00e      	beq.n	8003712 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a30      	ldr	r2, [pc, #192]	; (80037bc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d009      	beq.n	8003712 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a2f      	ldr	r2, [pc, #188]	; (80037c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d004      	beq.n	8003712 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a2d      	ldr	r2, [pc, #180]	; (80037c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d101      	bne.n	8003716 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003716:	2300      	movs	r3, #0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d01a      	beq.n	8003752 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	3b08      	subs	r3, #8
 8003724:	4a28      	ldr	r2, [pc, #160]	; (80037c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	091b      	lsrs	r3, r3, #4
 800372c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4b26      	ldr	r3, [pc, #152]	; (80037cc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	461a      	mov	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a24      	ldr	r2, [pc, #144]	; (80037d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003740:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	2201      	movs	r2, #1
 800374a:	409a      	lsls	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003750:	e024      	b.n	800379c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	3b10      	subs	r3, #16
 800375a:	4a1e      	ldr	r2, [pc, #120]	; (80037d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800375c:	fba2 2303 	umull	r2, r3, r2, r3
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4a1c      	ldr	r2, [pc, #112]	; (80037d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d806      	bhi.n	800377a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4a1b      	ldr	r2, [pc, #108]	; (80037dc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d902      	bls.n	800377a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	3308      	adds	r3, #8
 8003778:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4b18      	ldr	r3, [pc, #96]	; (80037e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	461a      	mov	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a16      	ldr	r2, [pc, #88]	; (80037e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800378c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f003 031f 	and.w	r3, r3, #31
 8003794:	2201      	movs	r2, #1
 8003796:	409a      	lsls	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	58025408 	.word	0x58025408
 80037ac:	5802541c 	.word	0x5802541c
 80037b0:	58025430 	.word	0x58025430
 80037b4:	58025444 	.word	0x58025444
 80037b8:	58025458 	.word	0x58025458
 80037bc:	5802546c 	.word	0x5802546c
 80037c0:	58025480 	.word	0x58025480
 80037c4:	58025494 	.word	0x58025494
 80037c8:	cccccccd 	.word	0xcccccccd
 80037cc:	16009600 	.word	0x16009600
 80037d0:	58025880 	.word	0x58025880
 80037d4:	aaaaaaab 	.word	0xaaaaaaab
 80037d8:	400204b8 	.word	0x400204b8
 80037dc:	4002040f 	.word	0x4002040f
 80037e0:	10008200 	.word	0x10008200
 80037e4:	40020880 	.word	0x40020880

080037e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d04a      	beq.n	8003894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b08      	cmp	r3, #8
 8003802:	d847      	bhi.n	8003894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a25      	ldr	r2, [pc, #148]	; (80038a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d022      	beq.n	8003854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a24      	ldr	r2, [pc, #144]	; (80038a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d01d      	beq.n	8003854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a22      	ldr	r2, [pc, #136]	; (80038a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d018      	beq.n	8003854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a21      	ldr	r2, [pc, #132]	; (80038ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d013      	beq.n	8003854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1f      	ldr	r2, [pc, #124]	; (80038b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00e      	beq.n	8003854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1e      	ldr	r2, [pc, #120]	; (80038b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d009      	beq.n	8003854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a1c      	ldr	r2, [pc, #112]	; (80038b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d004      	beq.n	8003854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a1b      	ldr	r2, [pc, #108]	; (80038bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d101      	bne.n	8003858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003858:	2300      	movs	r3, #0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	461a      	mov	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a15      	ldr	r2, [pc, #84]	; (80038c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003870:	671a      	str	r2, [r3, #112]	; 0x70
 8003872:	e009      	b.n	8003888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	461a      	mov	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a11      	ldr	r2, [pc, #68]	; (80038cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003886:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3b01      	subs	r3, #1
 800388c:	2201      	movs	r2, #1
 800388e:	409a      	lsls	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003894:	bf00      	nop
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	58025408 	.word	0x58025408
 80038a4:	5802541c 	.word	0x5802541c
 80038a8:	58025430 	.word	0x58025430
 80038ac:	58025444 	.word	0x58025444
 80038b0:	58025458 	.word	0x58025458
 80038b4:	5802546c 	.word	0x5802546c
 80038b8:	58025480 	.word	0x58025480
 80038bc:	58025494 	.word	0x58025494
 80038c0:	1600963f 	.word	0x1600963f
 80038c4:	58025940 	.word	0x58025940
 80038c8:	1000823f 	.word	0x1000823f
 80038cc:	40020940 	.word	0x40020940

080038d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b089      	sub	sp, #36	; 0x24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80038de:	4b89      	ldr	r3, [pc, #548]	; (8003b04 <HAL_GPIO_Init+0x234>)
 80038e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038e2:	e194      	b.n	8003c0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	2101      	movs	r1, #1
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	fa01 f303 	lsl.w	r3, r1, r3
 80038f0:	4013      	ands	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 8186 	beq.w	8003c08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d005      	beq.n	8003914 <HAL_GPIO_Init+0x44>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d130      	bne.n	8003976 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	2203      	movs	r2, #3
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4013      	ands	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800394a:	2201      	movs	r2, #1
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	43db      	mvns	r3, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4013      	ands	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	091b      	lsrs	r3, r3, #4
 8003960:	f003 0201 	and.w	r2, r3, #1
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4313      	orrs	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	2b03      	cmp	r3, #3
 8003980:	d017      	beq.n	80039b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	2203      	movs	r2, #3
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4013      	ands	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d123      	bne.n	8003a06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	08da      	lsrs	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3208      	adds	r2, #8
 80039c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	220f      	movs	r2, #15
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4013      	ands	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	08da      	lsrs	r2, r3, #3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3208      	adds	r2, #8
 8003a00:	69b9      	ldr	r1, [r7, #24]
 8003a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	2203      	movs	r2, #3
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43db      	mvns	r3, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 0203 	and.w	r2, r3, #3
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 80e0 	beq.w	8003c08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a48:	4b2f      	ldr	r3, [pc, #188]	; (8003b08 <HAL_GPIO_Init+0x238>)
 8003a4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a4e:	4a2e      	ldr	r2, [pc, #184]	; (8003b08 <HAL_GPIO_Init+0x238>)
 8003a50:	f043 0302 	orr.w	r3, r3, #2
 8003a54:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a58:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <HAL_GPIO_Init+0x238>)
 8003a5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a66:	4a29      	ldr	r2, [pc, #164]	; (8003b0c <HAL_GPIO_Init+0x23c>)
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	089b      	lsrs	r3, r3, #2
 8003a6c:	3302      	adds	r3, #2
 8003a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	220f      	movs	r2, #15
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	43db      	mvns	r3, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4013      	ands	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a20      	ldr	r2, [pc, #128]	; (8003b10 <HAL_GPIO_Init+0x240>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d052      	beq.n	8003b38 <HAL_GPIO_Init+0x268>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a1f      	ldr	r2, [pc, #124]	; (8003b14 <HAL_GPIO_Init+0x244>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d031      	beq.n	8003afe <HAL_GPIO_Init+0x22e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a1e      	ldr	r2, [pc, #120]	; (8003b18 <HAL_GPIO_Init+0x248>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d02b      	beq.n	8003afa <HAL_GPIO_Init+0x22a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a1d      	ldr	r2, [pc, #116]	; (8003b1c <HAL_GPIO_Init+0x24c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d025      	beq.n	8003af6 <HAL_GPIO_Init+0x226>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a1c      	ldr	r2, [pc, #112]	; (8003b20 <HAL_GPIO_Init+0x250>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d01f      	beq.n	8003af2 <HAL_GPIO_Init+0x222>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a1b      	ldr	r2, [pc, #108]	; (8003b24 <HAL_GPIO_Init+0x254>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d019      	beq.n	8003aee <HAL_GPIO_Init+0x21e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a1a      	ldr	r2, [pc, #104]	; (8003b28 <HAL_GPIO_Init+0x258>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d013      	beq.n	8003aea <HAL_GPIO_Init+0x21a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a19      	ldr	r2, [pc, #100]	; (8003b2c <HAL_GPIO_Init+0x25c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00d      	beq.n	8003ae6 <HAL_GPIO_Init+0x216>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a18      	ldr	r2, [pc, #96]	; (8003b30 <HAL_GPIO_Init+0x260>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d007      	beq.n	8003ae2 <HAL_GPIO_Init+0x212>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a17      	ldr	r2, [pc, #92]	; (8003b34 <HAL_GPIO_Init+0x264>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d101      	bne.n	8003ade <HAL_GPIO_Init+0x20e>
 8003ada:	2309      	movs	r3, #9
 8003adc:	e02d      	b.n	8003b3a <HAL_GPIO_Init+0x26a>
 8003ade:	230a      	movs	r3, #10
 8003ae0:	e02b      	b.n	8003b3a <HAL_GPIO_Init+0x26a>
 8003ae2:	2308      	movs	r3, #8
 8003ae4:	e029      	b.n	8003b3a <HAL_GPIO_Init+0x26a>
 8003ae6:	2307      	movs	r3, #7
 8003ae8:	e027      	b.n	8003b3a <HAL_GPIO_Init+0x26a>
 8003aea:	2306      	movs	r3, #6
 8003aec:	e025      	b.n	8003b3a <HAL_GPIO_Init+0x26a>
 8003aee:	2305      	movs	r3, #5
 8003af0:	e023      	b.n	8003b3a <HAL_GPIO_Init+0x26a>
 8003af2:	2304      	movs	r3, #4
 8003af4:	e021      	b.n	8003b3a <HAL_GPIO_Init+0x26a>
 8003af6:	2303      	movs	r3, #3
 8003af8:	e01f      	b.n	8003b3a <HAL_GPIO_Init+0x26a>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e01d      	b.n	8003b3a <HAL_GPIO_Init+0x26a>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e01b      	b.n	8003b3a <HAL_GPIO_Init+0x26a>
 8003b02:	bf00      	nop
 8003b04:	58000080 	.word	0x58000080
 8003b08:	58024400 	.word	0x58024400
 8003b0c:	58000400 	.word	0x58000400
 8003b10:	58020000 	.word	0x58020000
 8003b14:	58020400 	.word	0x58020400
 8003b18:	58020800 	.word	0x58020800
 8003b1c:	58020c00 	.word	0x58020c00
 8003b20:	58021000 	.word	0x58021000
 8003b24:	58021400 	.word	0x58021400
 8003b28:	58021800 	.word	0x58021800
 8003b2c:	58021c00 	.word	0x58021c00
 8003b30:	58022000 	.word	0x58022000
 8003b34:	58022400 	.word	0x58022400
 8003b38:	2300      	movs	r3, #0
 8003b3a:	69fa      	ldr	r2, [r7, #28]
 8003b3c:	f002 0203 	and.w	r2, r2, #3
 8003b40:	0092      	lsls	r2, r2, #2
 8003b42:	4093      	lsls	r3, r2
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b4a:	4938      	ldr	r1, [pc, #224]	; (8003c2c <HAL_GPIO_Init+0x35c>)
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	089b      	lsrs	r3, r3, #2
 8003b50:	3302      	adds	r3, #2
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	43db      	mvns	r3, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4013      	ands	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003bac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	43db      	mvns	r3, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4013      	ands	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f47f ae63 	bne.w	80038e4 <HAL_GPIO_Init+0x14>
  }
}
 8003c1e:	bf00      	nop
 8003c20:	bf00      	nop
 8003c22:	3724      	adds	r7, #36	; 0x24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	58000400 	.word	0x58000400

08003c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	807b      	strh	r3, [r7, #2]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c40:	787b      	ldrb	r3, [r7, #1]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c46:	887a      	ldrh	r2, [r7, #2]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003c4c:	e003      	b.n	8003c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c4e:	887b      	ldrh	r3, [r7, #2]
 8003c50:	041a      	lsls	r2, r3, #16
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	619a      	str	r2, [r3, #24]
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
	...

08003c64 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003c6c:	4a08      	ldr	r2, [pc, #32]	; (8003c90 <HAL_HSEM_FastTake+0x2c>)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3320      	adds	r3, #32
 8003c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c76:	4a07      	ldr	r2, [pc, #28]	; (8003c94 <HAL_HSEM_FastTake+0x30>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d101      	bne.n	8003c80 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	e000      	b.n	8003c82 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	58026400 	.word	0x58026400
 8003c94:	80000300 	.word	0x80000300

08003c98 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003ca2:	4906      	ldr	r1, [pc, #24]	; (8003cbc <HAL_HSEM_Release+0x24>)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	58026400 	.word	0x58026400

08003cc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e0fe      	b.n	8003ed0 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fd fa54 	bl	8001194 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2203      	movs	r2, #3
 8003cf0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f005 fb47 	bl	800938c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	7c1a      	ldrb	r2, [r3, #16]
 8003d06:	f88d 2000 	strb.w	r2, [sp]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d0e:	f005 facb 	bl	80092a8 <USB_CoreInit>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0d5      	b.n	8003ed0 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2100      	movs	r1, #0
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f005 fb3f 	bl	80093ae <USB_SetCurrentMode>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d005      	beq.n	8003d42 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2202      	movs	r2, #2
 8003d3a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e0c6      	b.n	8003ed0 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d42:	2300      	movs	r3, #0
 8003d44:	73fb      	strb	r3, [r7, #15]
 8003d46:	e04a      	b.n	8003dde <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d48:	7bfa      	ldrb	r2, [r7, #15]
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	3315      	adds	r3, #21
 8003d58:	2201      	movs	r2, #1
 8003d5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d5c:	7bfa      	ldrb	r2, [r7, #15]
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4413      	add	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	3314      	adds	r3, #20
 8003d6c:	7bfa      	ldrb	r2, [r7, #15]
 8003d6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d70:	7bfa      	ldrb	r2, [r7, #15]
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	b298      	uxth	r0, r3
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	332e      	adds	r3, #46	; 0x2e
 8003d84:	4602      	mov	r2, r0
 8003d86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d88:	7bfa      	ldrb	r2, [r7, #15]
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	3318      	adds	r3, #24
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d9c:	7bfa      	ldrb	r2, [r7, #15]
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	331c      	adds	r3, #28
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003db0:	7bfa      	ldrb	r2, [r7, #15]
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4413      	add	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	3320      	adds	r3, #32
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003dc4:	7bfa      	ldrb	r2, [r7, #15]
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	3324      	adds	r3, #36	; 0x24
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	791b      	ldrb	r3, [r3, #4]
 8003de2:	7bfa      	ldrb	r2, [r7, #15]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d3af      	bcc.n	8003d48 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003de8:	2300      	movs	r3, #0
 8003dea:	73fb      	strb	r3, [r7, #15]
 8003dec:	e044      	b.n	8003e78 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003dee:	7bfa      	ldrb	r2, [r7, #15]
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	4613      	mov	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	4413      	add	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003e00:	2200      	movs	r2, #0
 8003e02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e04:	7bfa      	ldrb	r2, [r7, #15]
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003e16:	7bfa      	ldrb	r2, [r7, #15]
 8003e18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e1a:	7bfa      	ldrb	r2, [r7, #15]
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4413      	add	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e30:	7bfa      	ldrb	r2, [r7, #15]
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	4613      	mov	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e46:	7bfa      	ldrb	r2, [r7, #15]
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e5c:	7bfa      	ldrb	r2, [r7, #15]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	3301      	adds	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	791b      	ldrb	r3, [r3, #4]
 8003e7c:	7bfa      	ldrb	r2, [r7, #15]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d3b5      	bcc.n	8003dee <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	7c1a      	ldrb	r2, [r3, #16]
 8003e8a:	f88d 2000 	strb.w	r2, [sp]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e92:	f005 fad9 	bl	8009448 <USB_DevInit>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e013      	b.n	8003ed0 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	7b1b      	ldrb	r3, [r3, #12]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d102      	bne.n	8003ec4 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f80a 	bl	8003ed8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f005 fc94 	bl	80097f6 <USB_DevDisconnect>

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f06:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <HAL_PCDEx_ActivateLPM+0x44>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	10000003 	.word	0x10000003

08003f20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003f28:	4b29      	ldr	r3, [pc, #164]	; (8003fd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	2b06      	cmp	r3, #6
 8003f32:	d00a      	beq.n	8003f4a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003f34:	4b26      	ldr	r3, [pc, #152]	; (8003fd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d001      	beq.n	8003f46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e040      	b.n	8003fc8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	e03e      	b.n	8003fc8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003f4a:	4b21      	ldr	r3, [pc, #132]	; (8003fd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003f52:	491f      	ldr	r1, [pc, #124]	; (8003fd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003f5a:	f7fd fa95 	bl	8001488 <HAL_GetTick>
 8003f5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f60:	e009      	b.n	8003f76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f62:	f7fd fa91 	bl	8001488 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f70:	d901      	bls.n	8003f76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e028      	b.n	8003fc8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f76:	4b16      	ldr	r3, [pc, #88]	; (8003fd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f82:	d1ee      	bne.n	8003f62 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b1e      	cmp	r3, #30
 8003f88:	d008      	beq.n	8003f9c <HAL_PWREx_ConfigSupply+0x7c>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b2e      	cmp	r3, #46	; 0x2e
 8003f8e:	d005      	beq.n	8003f9c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b1d      	cmp	r3, #29
 8003f94:	d002      	beq.n	8003f9c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b2d      	cmp	r3, #45	; 0x2d
 8003f9a:	d114      	bne.n	8003fc6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003f9c:	f7fd fa74 	bl	8001488 <HAL_GetTick>
 8003fa0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003fa2:	e009      	b.n	8003fb8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003fa4:	f7fd fa70 	bl	8001488 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fb2:	d901      	bls.n	8003fb8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e007      	b.n	8003fc8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003fb8:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc4:	d1ee      	bne.n	8003fa4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	58024800 	.word	0x58024800

08003fd4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4a04      	ldr	r2, [pc, #16]	; (8003ff0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fe2:	60d3      	str	r3, [r2, #12]
}
 8003fe4:	bf00      	nop
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	58024800 	.word	0x58024800

08003ff4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08c      	sub	sp, #48	; 0x30
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d102      	bne.n	8004008 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	f000 bc48 	b.w	8004898 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8088 	beq.w	8004126 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004016:	4b99      	ldr	r3, [pc, #612]	; (800427c <HAL_RCC_OscConfig+0x288>)
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800401e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004020:	4b96      	ldr	r3, [pc, #600]	; (800427c <HAL_RCC_OscConfig+0x288>)
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004028:	2b10      	cmp	r3, #16
 800402a:	d007      	beq.n	800403c <HAL_RCC_OscConfig+0x48>
 800402c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402e:	2b18      	cmp	r3, #24
 8004030:	d111      	bne.n	8004056 <HAL_RCC_OscConfig+0x62>
 8004032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004034:	f003 0303 	and.w	r3, r3, #3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d10c      	bne.n	8004056 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800403c:	4b8f      	ldr	r3, [pc, #572]	; (800427c <HAL_RCC_OscConfig+0x288>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d06d      	beq.n	8004124 <HAL_RCC_OscConfig+0x130>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d169      	bne.n	8004124 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	f000 bc21 	b.w	8004898 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800405e:	d106      	bne.n	800406e <HAL_RCC_OscConfig+0x7a>
 8004060:	4b86      	ldr	r3, [pc, #536]	; (800427c <HAL_RCC_OscConfig+0x288>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a85      	ldr	r2, [pc, #532]	; (800427c <HAL_RCC_OscConfig+0x288>)
 8004066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	e02e      	b.n	80040cc <HAL_RCC_OscConfig+0xd8>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10c      	bne.n	8004090 <HAL_RCC_OscConfig+0x9c>
 8004076:	4b81      	ldr	r3, [pc, #516]	; (800427c <HAL_RCC_OscConfig+0x288>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a80      	ldr	r2, [pc, #512]	; (800427c <HAL_RCC_OscConfig+0x288>)
 800407c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	4b7e      	ldr	r3, [pc, #504]	; (800427c <HAL_RCC_OscConfig+0x288>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a7d      	ldr	r2, [pc, #500]	; (800427c <HAL_RCC_OscConfig+0x288>)
 8004088:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	e01d      	b.n	80040cc <HAL_RCC_OscConfig+0xd8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004098:	d10c      	bne.n	80040b4 <HAL_RCC_OscConfig+0xc0>
 800409a:	4b78      	ldr	r3, [pc, #480]	; (800427c <HAL_RCC_OscConfig+0x288>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a77      	ldr	r2, [pc, #476]	; (800427c <HAL_RCC_OscConfig+0x288>)
 80040a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	4b75      	ldr	r3, [pc, #468]	; (800427c <HAL_RCC_OscConfig+0x288>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a74      	ldr	r2, [pc, #464]	; (800427c <HAL_RCC_OscConfig+0x288>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	e00b      	b.n	80040cc <HAL_RCC_OscConfig+0xd8>
 80040b4:	4b71      	ldr	r3, [pc, #452]	; (800427c <HAL_RCC_OscConfig+0x288>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a70      	ldr	r2, [pc, #448]	; (800427c <HAL_RCC_OscConfig+0x288>)
 80040ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	4b6e      	ldr	r3, [pc, #440]	; (800427c <HAL_RCC_OscConfig+0x288>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a6d      	ldr	r2, [pc, #436]	; (800427c <HAL_RCC_OscConfig+0x288>)
 80040c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d013      	beq.n	80040fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fd f9d8 	bl	8001488 <HAL_GetTick>
 80040d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040dc:	f7fd f9d4 	bl	8001488 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	; 0x64
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e3d4      	b.n	8004898 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040ee:	4b63      	ldr	r3, [pc, #396]	; (800427c <HAL_RCC_OscConfig+0x288>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0xe8>
 80040fa:	e014      	b.n	8004126 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7fd f9c4 	bl	8001488 <HAL_GetTick>
 8004100:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004104:	f7fd f9c0 	bl	8001488 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b64      	cmp	r3, #100	; 0x64
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e3c0      	b.n	8004898 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004116:	4b59      	ldr	r3, [pc, #356]	; (800427c <HAL_RCC_OscConfig+0x288>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x110>
 8004122:	e000      	b.n	8004126 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 80ca 	beq.w	80042c8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004134:	4b51      	ldr	r3, [pc, #324]	; (800427c <HAL_RCC_OscConfig+0x288>)
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800413c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800413e:	4b4f      	ldr	r3, [pc, #316]	; (800427c <HAL_RCC_OscConfig+0x288>)
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <HAL_RCC_OscConfig+0x166>
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	2b18      	cmp	r3, #24
 800414e:	d156      	bne.n	80041fe <HAL_RCC_OscConfig+0x20a>
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d151      	bne.n	80041fe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800415a:	4b48      	ldr	r3, [pc, #288]	; (800427c <HAL_RCC_OscConfig+0x288>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d005      	beq.n	8004172 <HAL_RCC_OscConfig+0x17e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e392      	b.n	8004898 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004172:	4b42      	ldr	r3, [pc, #264]	; (800427c <HAL_RCC_OscConfig+0x288>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 0219 	bic.w	r2, r3, #25
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	493f      	ldr	r1, [pc, #252]	; (800427c <HAL_RCC_OscConfig+0x288>)
 8004180:	4313      	orrs	r3, r2
 8004182:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004184:	f7fd f980 	bl	8001488 <HAL_GetTick>
 8004188:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800418c:	f7fd f97c 	bl	8001488 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e37c      	b.n	8004898 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800419e:	4b37      	ldr	r3, [pc, #220]	; (800427c <HAL_RCC_OscConfig+0x288>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041aa:	f7fd f99d 	bl	80014e8 <HAL_GetREVID>
 80041ae:	4603      	mov	r3, r0
 80041b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d817      	bhi.n	80041e8 <HAL_RCC_OscConfig+0x1f4>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	2b40      	cmp	r3, #64	; 0x40
 80041be:	d108      	bne.n	80041d2 <HAL_RCC_OscConfig+0x1de>
 80041c0:	4b2e      	ldr	r3, [pc, #184]	; (800427c <HAL_RCC_OscConfig+0x288>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80041c8:	4a2c      	ldr	r2, [pc, #176]	; (800427c <HAL_RCC_OscConfig+0x288>)
 80041ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ce:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041d0:	e07a      	b.n	80042c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d2:	4b2a      	ldr	r3, [pc, #168]	; (800427c <HAL_RCC_OscConfig+0x288>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	031b      	lsls	r3, r3, #12
 80041e0:	4926      	ldr	r1, [pc, #152]	; (800427c <HAL_RCC_OscConfig+0x288>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041e6:	e06f      	b.n	80042c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e8:	4b24      	ldr	r3, [pc, #144]	; (800427c <HAL_RCC_OscConfig+0x288>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	061b      	lsls	r3, r3, #24
 80041f6:	4921      	ldr	r1, [pc, #132]	; (800427c <HAL_RCC_OscConfig+0x288>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041fc:	e064      	b.n	80042c8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d047      	beq.n	8004296 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004206:	4b1d      	ldr	r3, [pc, #116]	; (800427c <HAL_RCC_OscConfig+0x288>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f023 0219 	bic.w	r2, r3, #25
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	491a      	ldr	r1, [pc, #104]	; (800427c <HAL_RCC_OscConfig+0x288>)
 8004214:	4313      	orrs	r3, r2
 8004216:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004218:	f7fd f936 	bl	8001488 <HAL_GetTick>
 800421c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004220:	f7fd f932 	bl	8001488 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e332      	b.n	8004898 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004232:	4b12      	ldr	r3, [pc, #72]	; (800427c <HAL_RCC_OscConfig+0x288>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0304 	and.w	r3, r3, #4
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423e:	f7fd f953 	bl	80014e8 <HAL_GetREVID>
 8004242:	4603      	mov	r3, r0
 8004244:	f241 0203 	movw	r2, #4099	; 0x1003
 8004248:	4293      	cmp	r3, r2
 800424a:	d819      	bhi.n	8004280 <HAL_RCC_OscConfig+0x28c>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	2b40      	cmp	r3, #64	; 0x40
 8004252:	d108      	bne.n	8004266 <HAL_RCC_OscConfig+0x272>
 8004254:	4b09      	ldr	r3, [pc, #36]	; (800427c <HAL_RCC_OscConfig+0x288>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800425c:	4a07      	ldr	r2, [pc, #28]	; (800427c <HAL_RCC_OscConfig+0x288>)
 800425e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004262:	6053      	str	r3, [r2, #4]
 8004264:	e030      	b.n	80042c8 <HAL_RCC_OscConfig+0x2d4>
 8004266:	4b05      	ldr	r3, [pc, #20]	; (800427c <HAL_RCC_OscConfig+0x288>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	031b      	lsls	r3, r3, #12
 8004274:	4901      	ldr	r1, [pc, #4]	; (800427c <HAL_RCC_OscConfig+0x288>)
 8004276:	4313      	orrs	r3, r2
 8004278:	604b      	str	r3, [r1, #4]
 800427a:	e025      	b.n	80042c8 <HAL_RCC_OscConfig+0x2d4>
 800427c:	58024400 	.word	0x58024400
 8004280:	4b9a      	ldr	r3, [pc, #616]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	061b      	lsls	r3, r3, #24
 800428e:	4997      	ldr	r1, [pc, #604]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 8004290:	4313      	orrs	r3, r2
 8004292:	604b      	str	r3, [r1, #4]
 8004294:	e018      	b.n	80042c8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004296:	4b95      	ldr	r3, [pc, #596]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a94      	ldr	r2, [pc, #592]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a2:	f7fd f8f1 	bl	8001488 <HAL_GetTick>
 80042a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042aa:	f7fd f8ed 	bl	8001488 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e2ed      	b.n	8004898 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042bc:	4b8b      	ldr	r3, [pc, #556]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1f0      	bne.n	80042aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80a9 	beq.w	8004428 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d6:	4b85      	ldr	r3, [pc, #532]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042e0:	4b82      	ldr	r3, [pc, #520]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d007      	beq.n	80042fc <HAL_RCC_OscConfig+0x308>
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b18      	cmp	r3, #24
 80042f0:	d13a      	bne.n	8004368 <HAL_RCC_OscConfig+0x374>
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d135      	bne.n	8004368 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042fc:	4b7b      	ldr	r3, [pc, #492]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_RCC_OscConfig+0x320>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	2b80      	cmp	r3, #128	; 0x80
 800430e:	d001      	beq.n	8004314 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e2c1      	b.n	8004898 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004314:	f7fd f8e8 	bl	80014e8 <HAL_GetREVID>
 8004318:	4603      	mov	r3, r0
 800431a:	f241 0203 	movw	r2, #4099	; 0x1003
 800431e:	4293      	cmp	r3, r2
 8004320:	d817      	bhi.n	8004352 <HAL_RCC_OscConfig+0x35e>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	2b20      	cmp	r3, #32
 8004328:	d108      	bne.n	800433c <HAL_RCC_OscConfig+0x348>
 800432a:	4b70      	ldr	r3, [pc, #448]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004332:	4a6e      	ldr	r2, [pc, #440]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 8004334:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004338:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800433a:	e075      	b.n	8004428 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800433c:	4b6b      	ldr	r3, [pc, #428]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	069b      	lsls	r3, r3, #26
 800434a:	4968      	ldr	r1, [pc, #416]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 800434c:	4313      	orrs	r3, r2
 800434e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004350:	e06a      	b.n	8004428 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004352:	4b66      	ldr	r3, [pc, #408]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	061b      	lsls	r3, r3, #24
 8004360:	4962      	ldr	r1, [pc, #392]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 8004362:	4313      	orrs	r3, r2
 8004364:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004366:	e05f      	b.n	8004428 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d042      	beq.n	80043f6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004370:	4b5e      	ldr	r3, [pc, #376]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a5d      	ldr	r2, [pc, #372]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 8004376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800437a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fd f884 	bl	8001488 <HAL_GetTick>
 8004380:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004384:	f7fd f880 	bl	8001488 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e280      	b.n	8004898 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004396:	4b55      	ldr	r3, [pc, #340]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043a2:	f7fd f8a1 	bl	80014e8 <HAL_GetREVID>
 80043a6:	4603      	mov	r3, r0
 80043a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d817      	bhi.n	80043e0 <HAL_RCC_OscConfig+0x3ec>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d108      	bne.n	80043ca <HAL_RCC_OscConfig+0x3d6>
 80043b8:	4b4c      	ldr	r3, [pc, #304]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80043c0:	4a4a      	ldr	r2, [pc, #296]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 80043c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043c6:	6053      	str	r3, [r2, #4]
 80043c8:	e02e      	b.n	8004428 <HAL_RCC_OscConfig+0x434>
 80043ca:	4b48      	ldr	r3, [pc, #288]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	069b      	lsls	r3, r3, #26
 80043d8:	4944      	ldr	r1, [pc, #272]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	604b      	str	r3, [r1, #4]
 80043de:	e023      	b.n	8004428 <HAL_RCC_OscConfig+0x434>
 80043e0:	4b42      	ldr	r3, [pc, #264]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	061b      	lsls	r3, r3, #24
 80043ee:	493f      	ldr	r1, [pc, #252]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60cb      	str	r3, [r1, #12]
 80043f4:	e018      	b.n	8004428 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80043f6:	4b3d      	ldr	r3, [pc, #244]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a3c      	ldr	r2, [pc, #240]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 80043fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004402:	f7fd f841 	bl	8001488 <HAL_GetTick>
 8004406:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800440a:	f7fd f83d 	bl	8001488 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e23d      	b.n	8004898 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800441c:	4b33      	ldr	r3, [pc, #204]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1f0      	bne.n	800440a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b00      	cmp	r3, #0
 8004432:	d036      	beq.n	80044a2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d019      	beq.n	8004470 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800443c:	4b2b      	ldr	r3, [pc, #172]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 800443e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004440:	4a2a      	ldr	r2, [pc, #168]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004448:	f7fd f81e 	bl	8001488 <HAL_GetTick>
 800444c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004450:	f7fd f81a 	bl	8001488 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e21a      	b.n	8004898 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004462:	4b22      	ldr	r3, [pc, #136]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 8004464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCC_OscConfig+0x45c>
 800446e:	e018      	b.n	80044a2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004470:	4b1e      	ldr	r3, [pc, #120]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 8004472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004474:	4a1d      	ldr	r2, [pc, #116]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 8004476:	f023 0301 	bic.w	r3, r3, #1
 800447a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447c:	f7fd f804 	bl	8001488 <HAL_GetTick>
 8004480:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004484:	f7fd f800 	bl	8001488 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e200      	b.n	8004898 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004496:	4b15      	ldr	r3, [pc, #84]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 8004498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d039      	beq.n	8004522 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01c      	beq.n	80044f0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044b6:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a0c      	ldr	r2, [pc, #48]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 80044bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80044c2:	f7fc ffe1 	bl	8001488 <HAL_GetTick>
 80044c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044ca:	f7fc ffdd 	bl	8001488 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e1dd      	b.n	8004898 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044dc:	4b03      	ldr	r3, [pc, #12]	; (80044ec <HAL_RCC_OscConfig+0x4f8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f0      	beq.n	80044ca <HAL_RCC_OscConfig+0x4d6>
 80044e8:	e01b      	b.n	8004522 <HAL_RCC_OscConfig+0x52e>
 80044ea:	bf00      	nop
 80044ec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044f0:	4b9b      	ldr	r3, [pc, #620]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a9a      	ldr	r2, [pc, #616]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 80044f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80044fc:	f7fc ffc4 	bl	8001488 <HAL_GetTick>
 8004500:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004504:	f7fc ffc0 	bl	8001488 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e1c0      	b.n	8004898 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004516:	4b92      	ldr	r3, [pc, #584]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 8081 	beq.w	8004632 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004530:	4b8c      	ldr	r3, [pc, #560]	; (8004764 <HAL_RCC_OscConfig+0x770>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a8b      	ldr	r2, [pc, #556]	; (8004764 <HAL_RCC_OscConfig+0x770>)
 8004536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800453c:	f7fc ffa4 	bl	8001488 <HAL_GetTick>
 8004540:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004544:	f7fc ffa0 	bl	8001488 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b64      	cmp	r3, #100	; 0x64
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e1a0      	b.n	8004898 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004556:	4b83      	ldr	r3, [pc, #524]	; (8004764 <HAL_RCC_OscConfig+0x770>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0f0      	beq.n	8004544 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d106      	bne.n	8004578 <HAL_RCC_OscConfig+0x584>
 800456a:	4b7d      	ldr	r3, [pc, #500]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 800456c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456e:	4a7c      	ldr	r2, [pc, #496]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 8004570:	f043 0301 	orr.w	r3, r3, #1
 8004574:	6713      	str	r3, [r2, #112]	; 0x70
 8004576:	e02d      	b.n	80045d4 <HAL_RCC_OscConfig+0x5e0>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10c      	bne.n	800459a <HAL_RCC_OscConfig+0x5a6>
 8004580:	4b77      	ldr	r3, [pc, #476]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004584:	4a76      	ldr	r2, [pc, #472]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 8004586:	f023 0301 	bic.w	r3, r3, #1
 800458a:	6713      	str	r3, [r2, #112]	; 0x70
 800458c:	4b74      	ldr	r3, [pc, #464]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 800458e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004590:	4a73      	ldr	r2, [pc, #460]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 8004592:	f023 0304 	bic.w	r3, r3, #4
 8004596:	6713      	str	r3, [r2, #112]	; 0x70
 8004598:	e01c      	b.n	80045d4 <HAL_RCC_OscConfig+0x5e0>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2b05      	cmp	r3, #5
 80045a0:	d10c      	bne.n	80045bc <HAL_RCC_OscConfig+0x5c8>
 80045a2:	4b6f      	ldr	r3, [pc, #444]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	4a6e      	ldr	r2, [pc, #440]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 80045a8:	f043 0304 	orr.w	r3, r3, #4
 80045ac:	6713      	str	r3, [r2, #112]	; 0x70
 80045ae:	4b6c      	ldr	r3, [pc, #432]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b2:	4a6b      	ldr	r2, [pc, #428]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 80045b4:	f043 0301 	orr.w	r3, r3, #1
 80045b8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ba:	e00b      	b.n	80045d4 <HAL_RCC_OscConfig+0x5e0>
 80045bc:	4b68      	ldr	r3, [pc, #416]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c0:	4a67      	ldr	r2, [pc, #412]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 80045c2:	f023 0301 	bic.w	r3, r3, #1
 80045c6:	6713      	str	r3, [r2, #112]	; 0x70
 80045c8:	4b65      	ldr	r3, [pc, #404]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045cc:	4a64      	ldr	r2, [pc, #400]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 80045ce:	f023 0304 	bic.w	r3, r3, #4
 80045d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d015      	beq.n	8004608 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045dc:	f7fc ff54 	bl	8001488 <HAL_GetTick>
 80045e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045e2:	e00a      	b.n	80045fa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e4:	f7fc ff50 	bl	8001488 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e14e      	b.n	8004898 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045fa:	4b59      	ldr	r3, [pc, #356]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0ee      	beq.n	80045e4 <HAL_RCC_OscConfig+0x5f0>
 8004606:	e014      	b.n	8004632 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004608:	f7fc ff3e 	bl	8001488 <HAL_GetTick>
 800460c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800460e:	e00a      	b.n	8004626 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004610:	f7fc ff3a 	bl	8001488 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	f241 3288 	movw	r2, #5000	; 0x1388
 800461e:	4293      	cmp	r3, r2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e138      	b.n	8004898 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004626:	4b4e      	ldr	r3, [pc, #312]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 8004628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1ee      	bne.n	8004610 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 812d 	beq.w	8004896 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800463c:	4b48      	ldr	r3, [pc, #288]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004644:	2b18      	cmp	r3, #24
 8004646:	f000 80bd 	beq.w	80047c4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	2b02      	cmp	r3, #2
 8004650:	f040 809e 	bne.w	8004790 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004654:	4b42      	ldr	r3, [pc, #264]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a41      	ldr	r2, [pc, #260]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 800465a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800465e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004660:	f7fc ff12 	bl	8001488 <HAL_GetTick>
 8004664:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004668:	f7fc ff0e 	bl	8001488 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e10e      	b.n	8004898 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800467a:	4b39      	ldr	r3, [pc, #228]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f0      	bne.n	8004668 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004686:	4b36      	ldr	r3, [pc, #216]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 8004688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800468a:	4b37      	ldr	r3, [pc, #220]	; (8004768 <HAL_RCC_OscConfig+0x774>)
 800468c:	4013      	ands	r3, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004696:	0112      	lsls	r2, r2, #4
 8004698:	430a      	orrs	r2, r1
 800469a:	4931      	ldr	r1, [pc, #196]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 800469c:	4313      	orrs	r3, r2
 800469e:	628b      	str	r3, [r1, #40]	; 0x28
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	3b01      	subs	r3, #1
 80046a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ae:	3b01      	subs	r3, #1
 80046b0:	025b      	lsls	r3, r3, #9
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	431a      	orrs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	3b01      	subs	r3, #1
 80046bc:	041b      	lsls	r3, r3, #16
 80046be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c8:	3b01      	subs	r3, #1
 80046ca:	061b      	lsls	r3, r3, #24
 80046cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046d0:	4923      	ldr	r1, [pc, #140]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80046d6:	4b22      	ldr	r3, [pc, #136]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	4a21      	ldr	r2, [pc, #132]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046e2:	4b1f      	ldr	r3, [pc, #124]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 80046e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046e6:	4b21      	ldr	r3, [pc, #132]	; (800476c <HAL_RCC_OscConfig+0x778>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80046ee:	00d2      	lsls	r2, r2, #3
 80046f0:	491b      	ldr	r1, [pc, #108]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80046f6:	4b1a      	ldr	r3, [pc, #104]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	f023 020c 	bic.w	r2, r3, #12
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	4917      	ldr	r1, [pc, #92]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 8004704:	4313      	orrs	r3, r2
 8004706:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004708:	4b15      	ldr	r3, [pc, #84]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	f023 0202 	bic.w	r2, r3, #2
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004714:	4912      	ldr	r1, [pc, #72]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 8004716:	4313      	orrs	r3, r2
 8004718:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800471a:	4b11      	ldr	r3, [pc, #68]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	4a10      	ldr	r2, [pc, #64]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 8004720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004724:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004726:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	4a0d      	ldr	r2, [pc, #52]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 800472c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004730:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004732:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	4a0a      	ldr	r2, [pc, #40]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 8004738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800473c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800473e:	4b08      	ldr	r3, [pc, #32]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004742:	4a07      	ldr	r2, [pc, #28]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 8004744:	f043 0301 	orr.w	r3, r3, #1
 8004748:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800474a:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a04      	ldr	r2, [pc, #16]	; (8004760 <HAL_RCC_OscConfig+0x76c>)
 8004750:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004756:	f7fc fe97 	bl	8001488 <HAL_GetTick>
 800475a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800475c:	e011      	b.n	8004782 <HAL_RCC_OscConfig+0x78e>
 800475e:	bf00      	nop
 8004760:	58024400 	.word	0x58024400
 8004764:	58024800 	.word	0x58024800
 8004768:	fffffc0c 	.word	0xfffffc0c
 800476c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004770:	f7fc fe8a 	bl	8001488 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e08a      	b.n	8004898 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004782:	4b47      	ldr	r3, [pc, #284]	; (80048a0 <HAL_RCC_OscConfig+0x8ac>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0f0      	beq.n	8004770 <HAL_RCC_OscConfig+0x77c>
 800478e:	e082      	b.n	8004896 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004790:	4b43      	ldr	r3, [pc, #268]	; (80048a0 <HAL_RCC_OscConfig+0x8ac>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a42      	ldr	r2, [pc, #264]	; (80048a0 <HAL_RCC_OscConfig+0x8ac>)
 8004796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800479a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479c:	f7fc fe74 	bl	8001488 <HAL_GetTick>
 80047a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a4:	f7fc fe70 	bl	8001488 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e070      	b.n	8004898 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047b6:	4b3a      	ldr	r3, [pc, #232]	; (80048a0 <HAL_RCC_OscConfig+0x8ac>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f0      	bne.n	80047a4 <HAL_RCC_OscConfig+0x7b0>
 80047c2:	e068      	b.n	8004896 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80047c4:	4b36      	ldr	r3, [pc, #216]	; (80048a0 <HAL_RCC_OscConfig+0x8ac>)
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80047ca:	4b35      	ldr	r3, [pc, #212]	; (80048a0 <HAL_RCC_OscConfig+0x8ac>)
 80047cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d031      	beq.n	800483c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f003 0203 	and.w	r2, r3, #3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d12a      	bne.n	800483c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	091b      	lsrs	r3, r3, #4
 80047ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d122      	bne.n	800483c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004802:	429a      	cmp	r2, r3
 8004804:	d11a      	bne.n	800483c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	0a5b      	lsrs	r3, r3, #9
 800480a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004812:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004814:	429a      	cmp	r2, r3
 8004816:	d111      	bne.n	800483c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	0c1b      	lsrs	r3, r3, #16
 800481c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004826:	429a      	cmp	r2, r3
 8004828:	d108      	bne.n	800483c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	0e1b      	lsrs	r3, r3, #24
 800482e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004836:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e02b      	b.n	8004898 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004840:	4b17      	ldr	r3, [pc, #92]	; (80048a0 <HAL_RCC_OscConfig+0x8ac>)
 8004842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004844:	08db      	lsrs	r3, r3, #3
 8004846:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800484a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	429a      	cmp	r2, r3
 8004854:	d01f      	beq.n	8004896 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004856:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <HAL_RCC_OscConfig+0x8ac>)
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485a:	4a11      	ldr	r2, [pc, #68]	; (80048a0 <HAL_RCC_OscConfig+0x8ac>)
 800485c:	f023 0301 	bic.w	r3, r3, #1
 8004860:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004862:	f7fc fe11 	bl	8001488 <HAL_GetTick>
 8004866:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004868:	bf00      	nop
 800486a:	f7fc fe0d 	bl	8001488 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	4293      	cmp	r3, r2
 8004874:	d0f9      	beq.n	800486a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004876:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <HAL_RCC_OscConfig+0x8ac>)
 8004878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800487a:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <HAL_RCC_OscConfig+0x8b0>)
 800487c:	4013      	ands	r3, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004882:	00d2      	lsls	r2, r2, #3
 8004884:	4906      	ldr	r1, [pc, #24]	; (80048a0 <HAL_RCC_OscConfig+0x8ac>)
 8004886:	4313      	orrs	r3, r2
 8004888:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800488a:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <HAL_RCC_OscConfig+0x8ac>)
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	4a04      	ldr	r2, [pc, #16]	; (80048a0 <HAL_RCC_OscConfig+0x8ac>)
 8004890:	f043 0301 	orr.w	r3, r3, #1
 8004894:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3730      	adds	r7, #48	; 0x30
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	58024400 	.word	0x58024400
 80048a4:	ffff0007 	.word	0xffff0007

080048a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e19c      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048bc:	4b8a      	ldr	r3, [pc, #552]	; (8004ae8 <HAL_RCC_ClockConfig+0x240>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d910      	bls.n	80048ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ca:	4b87      	ldr	r3, [pc, #540]	; (8004ae8 <HAL_RCC_ClockConfig+0x240>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f023 020f 	bic.w	r2, r3, #15
 80048d2:	4985      	ldr	r1, [pc, #532]	; (8004ae8 <HAL_RCC_ClockConfig+0x240>)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048da:	4b83      	ldr	r3, [pc, #524]	; (8004ae8 <HAL_RCC_ClockConfig+0x240>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e184      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d010      	beq.n	800491a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	4b7b      	ldr	r3, [pc, #492]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004904:	429a      	cmp	r2, r3
 8004906:	d908      	bls.n	800491a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004908:	4b78      	ldr	r3, [pc, #480]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	4975      	ldr	r1, [pc, #468]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 8004916:	4313      	orrs	r3, r2
 8004918:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d010      	beq.n	8004948 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695a      	ldr	r2, [r3, #20]
 800492a:	4b70      	ldr	r3, [pc, #448]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004932:	429a      	cmp	r2, r3
 8004934:	d908      	bls.n	8004948 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004936:	4b6d      	ldr	r3, [pc, #436]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	496a      	ldr	r1, [pc, #424]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 8004944:	4313      	orrs	r3, r2
 8004946:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	2b00      	cmp	r3, #0
 8004952:	d010      	beq.n	8004976 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	699a      	ldr	r2, [r3, #24]
 8004958:	4b64      	ldr	r3, [pc, #400]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004960:	429a      	cmp	r2, r3
 8004962:	d908      	bls.n	8004976 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004964:	4b61      	ldr	r3, [pc, #388]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	495e      	ldr	r1, [pc, #376]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 8004972:	4313      	orrs	r3, r2
 8004974:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	d010      	beq.n	80049a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69da      	ldr	r2, [r3, #28]
 8004986:	4b59      	ldr	r3, [pc, #356]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800498e:	429a      	cmp	r2, r3
 8004990:	d908      	bls.n	80049a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004992:	4b56      	ldr	r3, [pc, #344]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	4953      	ldr	r1, [pc, #332]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d010      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	4b4d      	ldr	r3, [pc, #308]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	429a      	cmp	r2, r3
 80049be:	d908      	bls.n	80049d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c0:	4b4a      	ldr	r3, [pc, #296]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	f023 020f 	bic.w	r2, r3, #15
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	4947      	ldr	r1, [pc, #284]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d055      	beq.n	8004a8a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80049de:	4b43      	ldr	r3, [pc, #268]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	4940      	ldr	r1, [pc, #256]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d107      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049f8:	4b3c      	ldr	r3, [pc, #240]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d121      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0f6      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a10:	4b36      	ldr	r3, [pc, #216]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d115      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e0ea      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d107      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a28:	4b30      	ldr	r3, [pc, #192]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d109      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e0de      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a38:	4b2c      	ldr	r3, [pc, #176]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0d6      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a48:	4b28      	ldr	r3, [pc, #160]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f023 0207 	bic.w	r2, r3, #7
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	4925      	ldr	r1, [pc, #148]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a5a:	f7fc fd15 	bl	8001488 <HAL_GetTick>
 8004a5e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a60:	e00a      	b.n	8004a78 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a62:	f7fc fd11 	bl	8001488 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e0be      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a78:	4b1c      	ldr	r3, [pc, #112]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d1eb      	bne.n	8004a62 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d010      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	4b14      	ldr	r3, [pc, #80]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d208      	bcs.n	8004ab8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa6:	4b11      	ldr	r3, [pc, #68]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	f023 020f 	bic.w	r2, r3, #15
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	490e      	ldr	r1, [pc, #56]	; (8004aec <HAL_RCC_ClockConfig+0x244>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <HAL_RCC_ClockConfig+0x240>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 030f 	and.w	r3, r3, #15
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d214      	bcs.n	8004af0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac6:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <HAL_RCC_ClockConfig+0x240>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f023 020f 	bic.w	r2, r3, #15
 8004ace:	4906      	ldr	r1, [pc, #24]	; (8004ae8 <HAL_RCC_ClockConfig+0x240>)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad6:	4b04      	ldr	r3, [pc, #16]	; (8004ae8 <HAL_RCC_ClockConfig+0x240>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d005      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e086      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x34e>
 8004ae8:	52002000 	.word	0x52002000
 8004aec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d010      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	4b3f      	ldr	r3, [pc, #252]	; (8004c00 <HAL_RCC_ClockConfig+0x358>)
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d208      	bcs.n	8004b1e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b0c:	4b3c      	ldr	r3, [pc, #240]	; (8004c00 <HAL_RCC_ClockConfig+0x358>)
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	4939      	ldr	r1, [pc, #228]	; (8004c00 <HAL_RCC_ClockConfig+0x358>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d010      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695a      	ldr	r2, [r3, #20]
 8004b2e:	4b34      	ldr	r3, [pc, #208]	; (8004c00 <HAL_RCC_ClockConfig+0x358>)
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d208      	bcs.n	8004b4c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b3a:	4b31      	ldr	r3, [pc, #196]	; (8004c00 <HAL_RCC_ClockConfig+0x358>)
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	492e      	ldr	r1, [pc, #184]	; (8004c00 <HAL_RCC_ClockConfig+0x358>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0310 	and.w	r3, r3, #16
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d010      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699a      	ldr	r2, [r3, #24]
 8004b5c:	4b28      	ldr	r3, [pc, #160]	; (8004c00 <HAL_RCC_ClockConfig+0x358>)
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d208      	bcs.n	8004b7a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b68:	4b25      	ldr	r3, [pc, #148]	; (8004c00 <HAL_RCC_ClockConfig+0x358>)
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	4922      	ldr	r1, [pc, #136]	; (8004c00 <HAL_RCC_ClockConfig+0x358>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0320 	and.w	r3, r3, #32
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d010      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69da      	ldr	r2, [r3, #28]
 8004b8a:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <HAL_RCC_ClockConfig+0x358>)
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d208      	bcs.n	8004ba8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b96:	4b1a      	ldr	r3, [pc, #104]	; (8004c00 <HAL_RCC_ClockConfig+0x358>)
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	4917      	ldr	r1, [pc, #92]	; (8004c00 <HAL_RCC_ClockConfig+0x358>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ba8:	f000 f834 	bl	8004c14 <HAL_RCC_GetSysClockFreq>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <HAL_RCC_ClockConfig+0x358>)
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	0a1b      	lsrs	r3, r3, #8
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	4912      	ldr	r1, [pc, #72]	; (8004c04 <HAL_RCC_ClockConfig+0x35c>)
 8004bba:	5ccb      	ldrb	r3, [r1, r3]
 8004bbc:	f003 031f 	and.w	r3, r3, #31
 8004bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bc6:	4b0e      	ldr	r3, [pc, #56]	; (8004c00 <HAL_RCC_ClockConfig+0x358>)
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	4a0d      	ldr	r2, [pc, #52]	; (8004c04 <HAL_RCC_ClockConfig+0x35c>)
 8004bd0:	5cd3      	ldrb	r3, [r2, r3]
 8004bd2:	f003 031f 	and.w	r3, r3, #31
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bdc:	4a0a      	ldr	r2, [pc, #40]	; (8004c08 <HAL_RCC_ClockConfig+0x360>)
 8004bde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004be0:	4a0a      	ldr	r2, [pc, #40]	; (8004c0c <HAL_RCC_ClockConfig+0x364>)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004be6:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <HAL_RCC_ClockConfig+0x368>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fc fc02 	bl	80013f4 <HAL_InitTick>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	58024400 	.word	0x58024400
 8004c04:	08009928 	.word	0x08009928
 8004c08:	24000004 	.word	0x24000004
 8004c0c:	24000000 	.word	0x24000000
 8004c10:	24000028 	.word	0x24000028

08004c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b089      	sub	sp, #36	; 0x24
 8004c18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c1a:	4bb3      	ldr	r3, [pc, #716]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c22:	2b18      	cmp	r3, #24
 8004c24:	f200 8155 	bhi.w	8004ed2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004c28:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2e:	bf00      	nop
 8004c30:	08004c95 	.word	0x08004c95
 8004c34:	08004ed3 	.word	0x08004ed3
 8004c38:	08004ed3 	.word	0x08004ed3
 8004c3c:	08004ed3 	.word	0x08004ed3
 8004c40:	08004ed3 	.word	0x08004ed3
 8004c44:	08004ed3 	.word	0x08004ed3
 8004c48:	08004ed3 	.word	0x08004ed3
 8004c4c:	08004ed3 	.word	0x08004ed3
 8004c50:	08004cbb 	.word	0x08004cbb
 8004c54:	08004ed3 	.word	0x08004ed3
 8004c58:	08004ed3 	.word	0x08004ed3
 8004c5c:	08004ed3 	.word	0x08004ed3
 8004c60:	08004ed3 	.word	0x08004ed3
 8004c64:	08004ed3 	.word	0x08004ed3
 8004c68:	08004ed3 	.word	0x08004ed3
 8004c6c:	08004ed3 	.word	0x08004ed3
 8004c70:	08004cc1 	.word	0x08004cc1
 8004c74:	08004ed3 	.word	0x08004ed3
 8004c78:	08004ed3 	.word	0x08004ed3
 8004c7c:	08004ed3 	.word	0x08004ed3
 8004c80:	08004ed3 	.word	0x08004ed3
 8004c84:	08004ed3 	.word	0x08004ed3
 8004c88:	08004ed3 	.word	0x08004ed3
 8004c8c:	08004ed3 	.word	0x08004ed3
 8004c90:	08004cc7 	.word	0x08004cc7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c94:	4b94      	ldr	r3, [pc, #592]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d009      	beq.n	8004cb4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ca0:	4b91      	ldr	r3, [pc, #580]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	08db      	lsrs	r3, r3, #3
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	4a90      	ldr	r2, [pc, #576]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cac:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004cb2:	e111      	b.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004cb4:	4b8d      	ldr	r3, [pc, #564]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cb6:	61bb      	str	r3, [r7, #24]
      break;
 8004cb8:	e10e      	b.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004cba:	4b8d      	ldr	r3, [pc, #564]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004cbc:	61bb      	str	r3, [r7, #24]
      break;
 8004cbe:	e10b      	b.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004cc0:	4b8c      	ldr	r3, [pc, #560]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004cc2:	61bb      	str	r3, [r7, #24]
      break;
 8004cc4:	e108      	b.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cc6:	4b88      	ldr	r3, [pc, #544]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004cd0:	4b85      	ldr	r3, [pc, #532]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	091b      	lsrs	r3, r3, #4
 8004cd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cda:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004cdc:	4b82      	ldr	r3, [pc, #520]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004ce6:	4b80      	ldr	r3, [pc, #512]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cea:	08db      	lsrs	r3, r3, #3
 8004cec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	fb02 f303 	mul.w	r3, r2, r3
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 80e1 	beq.w	8004ecc <HAL_RCC_GetSysClockFreq+0x2b8>
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	f000 8083 	beq.w	8004e18 <HAL_RCC_GetSysClockFreq+0x204>
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	f200 80a1 	bhi.w	8004e5c <HAL_RCC_GetSysClockFreq+0x248>
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_RCC_GetSysClockFreq+0x114>
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d056      	beq.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d26:	e099      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d28:	4b6f      	ldr	r3, [pc, #444]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d02d      	beq.n	8004d90 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d34:	4b6c      	ldr	r3, [pc, #432]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	08db      	lsrs	r3, r3, #3
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	4a6b      	ldr	r2, [pc, #428]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d40:	fa22 f303 	lsr.w	r3, r2, r3
 8004d44:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	ee07 3a90 	vmov	s15, r3
 8004d4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	ee07 3a90 	vmov	s15, r3
 8004d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d5e:	4b62      	ldr	r3, [pc, #392]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d72:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004ef8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004d8e:	e087      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	ee07 3a90 	vmov	s15, r3
 8004d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d9a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004efc <HAL_RCC_GetSysClockFreq+0x2e8>
 8004d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004da2:	4b51      	ldr	r3, [pc, #324]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004daa:	ee07 3a90 	vmov	s15, r3
 8004dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004db2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004db6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004ef8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004dd2:	e065      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	ee07 3a90 	vmov	s15, r3
 8004dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dde:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004f00 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de6:	4b40      	ldr	r3, [pc, #256]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dfa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004ef8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e16:	e043      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e22:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004f04 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e2a:	4b2f      	ldr	r3, [pc, #188]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e32:	ee07 3a90 	vmov	s15, r3
 8004e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e3e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004ef8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e5a:	e021      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e66:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004f00 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e82:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004ef8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e9e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004ea0:	4b11      	ldr	r3, [pc, #68]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea4:	0a5b      	lsrs	r3, r3, #9
 8004ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eaa:	3301      	adds	r3, #1
 8004eac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	ee07 3a90 	vmov	s15, r3
 8004eb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004eb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ec4:	ee17 3a90 	vmov	r3, s15
 8004ec8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004eca:	e005      	b.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	61bb      	str	r3, [r7, #24]
      break;
 8004ed0:	e002      	b.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004ed2:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ed4:	61bb      	str	r3, [r7, #24]
      break;
 8004ed6:	bf00      	nop
  }

  return sysclockfreq;
 8004ed8:	69bb      	ldr	r3, [r7, #24]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3724      	adds	r7, #36	; 0x24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	58024400 	.word	0x58024400
 8004eec:	03d09000 	.word	0x03d09000
 8004ef0:	003d0900 	.word	0x003d0900
 8004ef4:	007a1200 	.word	0x007a1200
 8004ef8:	46000000 	.word	0x46000000
 8004efc:	4c742400 	.word	0x4c742400
 8004f00:	4a742400 	.word	0x4a742400
 8004f04:	4af42400 	.word	0x4af42400

08004f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f0e:	f7ff fe81 	bl	8004c14 <HAL_RCC_GetSysClockFreq>
 8004f12:	4602      	mov	r2, r0
 8004f14:	4b10      	ldr	r3, [pc, #64]	; (8004f58 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	0a1b      	lsrs	r3, r3, #8
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	490f      	ldr	r1, [pc, #60]	; (8004f5c <HAL_RCC_GetHCLKFreq+0x54>)
 8004f20:	5ccb      	ldrb	r3, [r1, r3]
 8004f22:	f003 031f 	and.w	r3, r3, #31
 8004f26:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f2c:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	4a09      	ldr	r2, [pc, #36]	; (8004f5c <HAL_RCC_GetHCLKFreq+0x54>)
 8004f36:	5cd3      	ldrb	r3, [r2, r3]
 8004f38:	f003 031f 	and.w	r3, r3, #31
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f42:	4a07      	ldr	r2, [pc, #28]	; (8004f60 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f44:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f46:	4a07      	ldr	r2, [pc, #28]	; (8004f64 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f4c:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	58024400 	.word	0x58024400
 8004f5c:	08009928 	.word	0x08009928
 8004f60:	24000004 	.word	0x24000004
 8004f64:	24000000 	.word	0x24000000

08004f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004f6c:	f7ff ffcc 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8004f70:	4602      	mov	r2, r0
 8004f72:	4b06      	ldr	r3, [pc, #24]	; (8004f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	091b      	lsrs	r3, r3, #4
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	4904      	ldr	r1, [pc, #16]	; (8004f90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f7e:	5ccb      	ldrb	r3, [r1, r3]
 8004f80:	f003 031f 	and.w	r3, r3, #31
 8004f84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	58024400 	.word	0x58024400
 8004f90:	08009928 	.word	0x08009928

08004f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004f98:	f7ff ffb6 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	0a1b      	lsrs	r3, r3, #8
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	4904      	ldr	r1, [pc, #16]	; (8004fbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004faa:	5ccb      	ldrb	r3, [r1, r3]
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	58024400 	.word	0x58024400
 8004fbc:	08009928 	.word	0x08009928

08004fc0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fc4:	b0ca      	sub	sp, #296	; 0x128
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004fe4:	2500      	movs	r5, #0
 8004fe6:	ea54 0305 	orrs.w	r3, r4, r5
 8004fea:	d049      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ff2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ff6:	d02f      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004ff8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ffc:	d828      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004ffe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005002:	d01a      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005004:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005008:	d822      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800500e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005012:	d007      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005014:	e01c      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005016:	4bb8      	ldr	r3, [pc, #736]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	4ab7      	ldr	r2, [pc, #732]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800501c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005020:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005022:	e01a      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005028:	3308      	adds	r3, #8
 800502a:	2102      	movs	r1, #2
 800502c:	4618      	mov	r0, r3
 800502e:	f001 fc8f 	bl	8006950 <RCCEx_PLL2_Config>
 8005032:	4603      	mov	r3, r0
 8005034:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005038:	e00f      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800503a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800503e:	3328      	adds	r3, #40	; 0x28
 8005040:	2102      	movs	r1, #2
 8005042:	4618      	mov	r0, r3
 8005044:	f001 fd36 	bl	8006ab4 <RCCEx_PLL3_Config>
 8005048:	4603      	mov	r3, r0
 800504a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800504e:	e004      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005056:	e000      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800505a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10a      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005062:	4ba5      	ldr	r3, [pc, #660]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005066:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800506a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800506e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005070:	4aa1      	ldr	r2, [pc, #644]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005072:	430b      	orrs	r3, r1
 8005074:	6513      	str	r3, [r2, #80]	; 0x50
 8005076:	e003      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005078:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800507c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800508c:	f04f 0900 	mov.w	r9, #0
 8005090:	ea58 0309 	orrs.w	r3, r8, r9
 8005094:	d047      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800509a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509c:	2b04      	cmp	r3, #4
 800509e:	d82a      	bhi.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80050a0:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80050a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a6:	bf00      	nop
 80050a8:	080050bd 	.word	0x080050bd
 80050ac:	080050cb 	.word	0x080050cb
 80050b0:	080050e1 	.word	0x080050e1
 80050b4:	080050ff 	.word	0x080050ff
 80050b8:	080050ff 	.word	0x080050ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050bc:	4b8e      	ldr	r3, [pc, #568]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	4a8d      	ldr	r2, [pc, #564]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050c8:	e01a      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ce:	3308      	adds	r3, #8
 80050d0:	2100      	movs	r1, #0
 80050d2:	4618      	mov	r0, r3
 80050d4:	f001 fc3c 	bl	8006950 <RCCEx_PLL2_Config>
 80050d8:	4603      	mov	r3, r0
 80050da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050de:	e00f      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e4:	3328      	adds	r3, #40	; 0x28
 80050e6:	2100      	movs	r1, #0
 80050e8:	4618      	mov	r0, r3
 80050ea:	f001 fce3 	bl	8006ab4 <RCCEx_PLL3_Config>
 80050ee:	4603      	mov	r3, r0
 80050f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050f4:	e004      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050fc:	e000      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80050fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005100:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005108:	4b7b      	ldr	r3, [pc, #492]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800510a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800510c:	f023 0107 	bic.w	r1, r3, #7
 8005110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005116:	4a78      	ldr	r2, [pc, #480]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005118:	430b      	orrs	r3, r1
 800511a:	6513      	str	r3, [r2, #80]	; 0x50
 800511c:	e003      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800511e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005122:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005132:	f04f 0b00 	mov.w	fp, #0
 8005136:	ea5a 030b 	orrs.w	r3, sl, fp
 800513a:	d04c      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800513c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005146:	d030      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800514c:	d829      	bhi.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800514e:	2bc0      	cmp	r3, #192	; 0xc0
 8005150:	d02d      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005152:	2bc0      	cmp	r3, #192	; 0xc0
 8005154:	d825      	bhi.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005156:	2b80      	cmp	r3, #128	; 0x80
 8005158:	d018      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800515a:	2b80      	cmp	r3, #128	; 0x80
 800515c:	d821      	bhi.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005162:	2b40      	cmp	r3, #64	; 0x40
 8005164:	d007      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005166:	e01c      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005168:	4b63      	ldr	r3, [pc, #396]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	4a62      	ldr	r2, [pc, #392]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800516e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005172:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005174:	e01c      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800517a:	3308      	adds	r3, #8
 800517c:	2100      	movs	r1, #0
 800517e:	4618      	mov	r0, r3
 8005180:	f001 fbe6 	bl	8006950 <RCCEx_PLL2_Config>
 8005184:	4603      	mov	r3, r0
 8005186:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800518a:	e011      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800518c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005190:	3328      	adds	r3, #40	; 0x28
 8005192:	2100      	movs	r1, #0
 8005194:	4618      	mov	r0, r3
 8005196:	f001 fc8d 	bl	8006ab4 <RCCEx_PLL3_Config>
 800519a:	4603      	mov	r3, r0
 800519c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80051a0:	e006      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051a8:	e002      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80051aa:	bf00      	nop
 80051ac:	e000      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80051ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10a      	bne.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80051b8:	4b4f      	ldr	r3, [pc, #316]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051bc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80051c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c6:	4a4c      	ldr	r2, [pc, #304]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051c8:	430b      	orrs	r3, r1
 80051ca:	6513      	str	r3, [r2, #80]	; 0x50
 80051cc:	e003      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80051d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80051e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80051e6:	2300      	movs	r3, #0
 80051e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80051ec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80051f0:	460b      	mov	r3, r1
 80051f2:	4313      	orrs	r3, r2
 80051f4:	d053      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80051f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80051fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005202:	d035      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005204:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005208:	d82e      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800520a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800520e:	d031      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005210:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005214:	d828      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800521a:	d01a      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800521c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005220:	d822      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005226:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800522a:	d007      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800522c:	e01c      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800522e:	4b32      	ldr	r3, [pc, #200]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	4a31      	ldr	r2, [pc, #196]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005238:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800523a:	e01c      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800523c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005240:	3308      	adds	r3, #8
 8005242:	2100      	movs	r1, #0
 8005244:	4618      	mov	r0, r3
 8005246:	f001 fb83 	bl	8006950 <RCCEx_PLL2_Config>
 800524a:	4603      	mov	r3, r0
 800524c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005250:	e011      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005256:	3328      	adds	r3, #40	; 0x28
 8005258:	2100      	movs	r1, #0
 800525a:	4618      	mov	r0, r3
 800525c:	f001 fc2a 	bl	8006ab4 <RCCEx_PLL3_Config>
 8005260:	4603      	mov	r3, r0
 8005262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005266:	e006      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800526e:	e002      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005270:	bf00      	nop
 8005272:	e000      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005276:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10b      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800527e:	4b1e      	ldr	r3, [pc, #120]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005282:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800528a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800528e:	4a1a      	ldr	r2, [pc, #104]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005290:	430b      	orrs	r3, r1
 8005292:	6593      	str	r3, [r2, #88]	; 0x58
 8005294:	e003      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800529a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800529e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80052aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052ae:	2300      	movs	r3, #0
 80052b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80052b4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80052b8:	460b      	mov	r3, r1
 80052ba:	4313      	orrs	r3, r2
 80052bc:	d056      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80052be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052ca:	d038      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80052cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052d0:	d831      	bhi.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80052d6:	d034      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80052d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80052dc:	d82b      	bhi.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052e2:	d01d      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80052e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052e8:	d825      	bhi.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d006      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80052ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052f2:	d00a      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80052f4:	e01f      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052f6:	bf00      	nop
 80052f8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052fc:	4ba2      	ldr	r3, [pc, #648]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005300:	4aa1      	ldr	r2, [pc, #644]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005306:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005308:	e01c      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800530a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800530e:	3308      	adds	r3, #8
 8005310:	2100      	movs	r1, #0
 8005312:	4618      	mov	r0, r3
 8005314:	f001 fb1c 	bl	8006950 <RCCEx_PLL2_Config>
 8005318:	4603      	mov	r3, r0
 800531a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800531e:	e011      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005324:	3328      	adds	r3, #40	; 0x28
 8005326:	2100      	movs	r1, #0
 8005328:	4618      	mov	r0, r3
 800532a:	f001 fbc3 	bl	8006ab4 <RCCEx_PLL3_Config>
 800532e:	4603      	mov	r3, r0
 8005330:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005334:	e006      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800533c:	e002      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800533e:	bf00      	nop
 8005340:	e000      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005344:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10b      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800534c:	4b8e      	ldr	r3, [pc, #568]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800534e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005350:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005358:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800535c:	4a8a      	ldr	r2, [pc, #552]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800535e:	430b      	orrs	r3, r1
 8005360:	6593      	str	r3, [r2, #88]	; 0x58
 8005362:	e003      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005364:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005368:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800536c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005378:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800537c:	2300      	movs	r3, #0
 800537e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005382:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005386:	460b      	mov	r3, r1
 8005388:	4313      	orrs	r3, r2
 800538a:	d03a      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800538c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005392:	2b30      	cmp	r3, #48	; 0x30
 8005394:	d01f      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005396:	2b30      	cmp	r3, #48	; 0x30
 8005398:	d819      	bhi.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800539a:	2b20      	cmp	r3, #32
 800539c:	d00c      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800539e:	2b20      	cmp	r3, #32
 80053a0:	d815      	bhi.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d019      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80053a6:	2b10      	cmp	r3, #16
 80053a8:	d111      	bne.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053aa:	4b77      	ldr	r3, [pc, #476]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ae:	4a76      	ldr	r2, [pc, #472]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80053b6:	e011      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053bc:	3308      	adds	r3, #8
 80053be:	2102      	movs	r1, #2
 80053c0:	4618      	mov	r0, r3
 80053c2:	f001 fac5 	bl	8006950 <RCCEx_PLL2_Config>
 80053c6:	4603      	mov	r3, r0
 80053c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80053cc:	e006      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053d4:	e002      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80053d6:	bf00      	nop
 80053d8:	e000      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80053da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10a      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80053e4:	4b68      	ldr	r3, [pc, #416]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80053ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f2:	4a65      	ldr	r2, [pc, #404]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053f4:	430b      	orrs	r3, r1
 80053f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053f8:	e003      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800540e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005412:	2300      	movs	r3, #0
 8005414:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005418:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800541c:	460b      	mov	r3, r1
 800541e:	4313      	orrs	r3, r2
 8005420:	d051      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005428:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800542c:	d035      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800542e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005432:	d82e      	bhi.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005434:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005438:	d031      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800543a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800543e:	d828      	bhi.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005444:	d01a      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800544a:	d822      	bhi.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005454:	d007      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005456:	e01c      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005458:	4b4b      	ldr	r3, [pc, #300]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	4a4a      	ldr	r2, [pc, #296]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800545e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005462:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005464:	e01c      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800546a:	3308      	adds	r3, #8
 800546c:	2100      	movs	r1, #0
 800546e:	4618      	mov	r0, r3
 8005470:	f001 fa6e 	bl	8006950 <RCCEx_PLL2_Config>
 8005474:	4603      	mov	r3, r0
 8005476:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800547a:	e011      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800547c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005480:	3328      	adds	r3, #40	; 0x28
 8005482:	2100      	movs	r1, #0
 8005484:	4618      	mov	r0, r3
 8005486:	f001 fb15 	bl	8006ab4 <RCCEx_PLL3_Config>
 800548a:	4603      	mov	r3, r0
 800548c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005490:	e006      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005498:	e002      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800549a:	bf00      	nop
 800549c:	e000      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800549e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10a      	bne.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80054a8:	4b37      	ldr	r3, [pc, #220]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80054b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b6:	4a34      	ldr	r2, [pc, #208]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054b8:	430b      	orrs	r3, r1
 80054ba:	6513      	str	r3, [r2, #80]	; 0x50
 80054bc:	e003      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80054c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ce:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80054d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054d6:	2300      	movs	r3, #0
 80054d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80054dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80054e0:	460b      	mov	r3, r1
 80054e2:	4313      	orrs	r3, r2
 80054e4:	d056      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80054e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054f0:	d033      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80054f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054f6:	d82c      	bhi.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80054f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054fc:	d02f      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80054fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005502:	d826      	bhi.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005504:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005508:	d02b      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800550a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800550e:	d820      	bhi.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005510:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005514:	d012      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005516:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800551a:	d81a      	bhi.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800551c:	2b00      	cmp	r3, #0
 800551e:	d022      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005524:	d115      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800552a:	3308      	adds	r3, #8
 800552c:	2101      	movs	r1, #1
 800552e:	4618      	mov	r0, r3
 8005530:	f001 fa0e 	bl	8006950 <RCCEx_PLL2_Config>
 8005534:	4603      	mov	r3, r0
 8005536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800553a:	e015      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800553c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005540:	3328      	adds	r3, #40	; 0x28
 8005542:	2101      	movs	r1, #1
 8005544:	4618      	mov	r0, r3
 8005546:	f001 fab5 	bl	8006ab4 <RCCEx_PLL3_Config>
 800554a:	4603      	mov	r3, r0
 800554c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005550:	e00a      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005558:	e006      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800555a:	bf00      	nop
 800555c:	e004      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800555e:	bf00      	nop
 8005560:	e002      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005562:	bf00      	nop
 8005564:	e000      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005566:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005568:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10d      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005574:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800557c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800557e:	4a02      	ldr	r2, [pc, #8]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005580:	430b      	orrs	r3, r1
 8005582:	6513      	str	r3, [r2, #80]	; 0x50
 8005584:	e006      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005586:	bf00      	nop
 8005588:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005590:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80055a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055a4:	2300      	movs	r3, #0
 80055a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055aa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4313      	orrs	r3, r2
 80055b2:	d055      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80055b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055c0:	d033      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80055c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055c6:	d82c      	bhi.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055cc:	d02f      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80055ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d2:	d826      	bhi.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055d8:	d02b      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80055da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055de:	d820      	bhi.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055e4:	d012      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80055e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ea:	d81a      	bhi.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d022      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80055f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055f4:	d115      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055fa:	3308      	adds	r3, #8
 80055fc:	2101      	movs	r1, #1
 80055fe:	4618      	mov	r0, r3
 8005600:	f001 f9a6 	bl	8006950 <RCCEx_PLL2_Config>
 8005604:	4603      	mov	r3, r0
 8005606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800560a:	e015      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800560c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005610:	3328      	adds	r3, #40	; 0x28
 8005612:	2101      	movs	r1, #1
 8005614:	4618      	mov	r0, r3
 8005616:	f001 fa4d 	bl	8006ab4 <RCCEx_PLL3_Config>
 800561a:	4603      	mov	r3, r0
 800561c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005620:	e00a      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005628:	e006      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800562a:	bf00      	nop
 800562c:	e004      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800562e:	bf00      	nop
 8005630:	e002      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005632:	bf00      	nop
 8005634:	e000      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005638:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10b      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005640:	4ba3      	ldr	r3, [pc, #652]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005644:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800564c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005650:	4a9f      	ldr	r2, [pc, #636]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005652:	430b      	orrs	r3, r1
 8005654:	6593      	str	r3, [r2, #88]	; 0x58
 8005656:	e003      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005658:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800565c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005668:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800566c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005670:	2300      	movs	r3, #0
 8005672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005676:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800567a:	460b      	mov	r3, r1
 800567c:	4313      	orrs	r3, r2
 800567e:	d037      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800568a:	d00e      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800568c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005690:	d816      	bhi.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005692:	2b00      	cmp	r3, #0
 8005694:	d018      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800569a:	d111      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800569c:	4b8c      	ldr	r3, [pc, #560]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	4a8b      	ldr	r2, [pc, #556]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80056a8:	e00f      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ae:	3308      	adds	r3, #8
 80056b0:	2101      	movs	r1, #1
 80056b2:	4618      	mov	r0, r3
 80056b4:	f001 f94c 	bl	8006950 <RCCEx_PLL2_Config>
 80056b8:	4603      	mov	r3, r0
 80056ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80056be:	e004      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056c6:	e000      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80056c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056d2:	4b7f      	ldr	r3, [pc, #508]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80056da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e0:	4a7b      	ldr	r2, [pc, #492]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056e2:	430b      	orrs	r3, r1
 80056e4:	6513      	str	r3, [r2, #80]	; 0x50
 80056e6:	e003      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80056f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80056fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005700:	2300      	movs	r3, #0
 8005702:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005706:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800570a:	460b      	mov	r3, r1
 800570c:	4313      	orrs	r3, r2
 800570e:	d039      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005716:	2b03      	cmp	r3, #3
 8005718:	d81c      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800571a:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800571c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005720:	0800575d 	.word	0x0800575d
 8005724:	08005731 	.word	0x08005731
 8005728:	0800573f 	.word	0x0800573f
 800572c:	0800575d 	.word	0x0800575d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005730:	4b67      	ldr	r3, [pc, #412]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005734:	4a66      	ldr	r2, [pc, #408]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800573a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800573c:	e00f      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800573e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005742:	3308      	adds	r3, #8
 8005744:	2102      	movs	r1, #2
 8005746:	4618      	mov	r0, r3
 8005748:	f001 f902 	bl	8006950 <RCCEx_PLL2_Config>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005752:	e004      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800575a:	e000      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800575c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800575e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10a      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005766:	4b5a      	ldr	r3, [pc, #360]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800576a:	f023 0103 	bic.w	r1, r3, #3
 800576e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005774:	4a56      	ldr	r2, [pc, #344]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005776:	430b      	orrs	r3, r1
 8005778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800577a:	e003      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005780:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005790:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005794:	2300      	movs	r3, #0
 8005796:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800579a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800579e:	460b      	mov	r3, r1
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f000 809f 	beq.w	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057a6:	4b4b      	ldr	r3, [pc, #300]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a4a      	ldr	r2, [pc, #296]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80057ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057b2:	f7fb fe69 	bl	8001488 <HAL_GetTick>
 80057b6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057ba:	e00b      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057bc:	f7fb fe64 	bl	8001488 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b64      	cmp	r3, #100	; 0x64
 80057ca:	d903      	bls.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057d2:	e005      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057d4:	4b3f      	ldr	r3, [pc, #252]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0ed      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80057e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d179      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80057e8:	4b39      	ldr	r3, [pc, #228]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80057f4:	4053      	eors	r3, r2
 80057f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d015      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057fe:	4b34      	ldr	r3, [pc, #208]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005806:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800580a:	4b31      	ldr	r3, [pc, #196]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	4a30      	ldr	r2, [pc, #192]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005814:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005816:	4b2e      	ldr	r3, [pc, #184]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581a:	4a2d      	ldr	r2, [pc, #180]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800581c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005820:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005822:	4a2b      	ldr	r2, [pc, #172]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005824:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005828:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800582a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800582e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005836:	d118      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005838:	f7fb fe26 	bl	8001488 <HAL_GetTick>
 800583c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005840:	e00d      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005842:	f7fb fe21 	bl	8001488 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800584c:	1ad2      	subs	r2, r2, r3
 800584e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005852:	429a      	cmp	r2, r3
 8005854:	d903      	bls.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800585c:	e005      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800585e:	4b1c      	ldr	r3, [pc, #112]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0eb      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800586a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800586e:	2b00      	cmp	r3, #0
 8005870:	d129      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005876:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800587a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800587e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005882:	d10e      	bne.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005884:	4b12      	ldr	r3, [pc, #72]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800588c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005890:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005894:	091a      	lsrs	r2, r3, #4
 8005896:	4b10      	ldr	r3, [pc, #64]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005898:	4013      	ands	r3, r2
 800589a:	4a0d      	ldr	r2, [pc, #52]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800589c:	430b      	orrs	r3, r1
 800589e:	6113      	str	r3, [r2, #16]
 80058a0:	e005      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80058a2:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	4a0a      	ldr	r2, [pc, #40]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80058ac:	6113      	str	r3, [r2, #16]
 80058ae:	4b08      	ldr	r3, [pc, #32]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80058b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80058ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058be:	4a04      	ldr	r2, [pc, #16]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058c0:	430b      	orrs	r3, r1
 80058c2:	6713      	str	r3, [r2, #112]	; 0x70
 80058c4:	e00e      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80058ce:	e009      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80058d0:	58024400 	.word	0x58024400
 80058d4:	58024800 	.word	0x58024800
 80058d8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80058e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ec:	f002 0301 	and.w	r3, r2, #1
 80058f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058f4:	2300      	movs	r3, #0
 80058f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80058fe:	460b      	mov	r3, r1
 8005900:	4313      	orrs	r3, r2
 8005902:	f000 8089 	beq.w	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800590a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800590c:	2b28      	cmp	r3, #40	; 0x28
 800590e:	d86b      	bhi.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005910:	a201      	add	r2, pc, #4	; (adr r2, 8005918 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005916:	bf00      	nop
 8005918:	080059f1 	.word	0x080059f1
 800591c:	080059e9 	.word	0x080059e9
 8005920:	080059e9 	.word	0x080059e9
 8005924:	080059e9 	.word	0x080059e9
 8005928:	080059e9 	.word	0x080059e9
 800592c:	080059e9 	.word	0x080059e9
 8005930:	080059e9 	.word	0x080059e9
 8005934:	080059e9 	.word	0x080059e9
 8005938:	080059bd 	.word	0x080059bd
 800593c:	080059e9 	.word	0x080059e9
 8005940:	080059e9 	.word	0x080059e9
 8005944:	080059e9 	.word	0x080059e9
 8005948:	080059e9 	.word	0x080059e9
 800594c:	080059e9 	.word	0x080059e9
 8005950:	080059e9 	.word	0x080059e9
 8005954:	080059e9 	.word	0x080059e9
 8005958:	080059d3 	.word	0x080059d3
 800595c:	080059e9 	.word	0x080059e9
 8005960:	080059e9 	.word	0x080059e9
 8005964:	080059e9 	.word	0x080059e9
 8005968:	080059e9 	.word	0x080059e9
 800596c:	080059e9 	.word	0x080059e9
 8005970:	080059e9 	.word	0x080059e9
 8005974:	080059e9 	.word	0x080059e9
 8005978:	080059f1 	.word	0x080059f1
 800597c:	080059e9 	.word	0x080059e9
 8005980:	080059e9 	.word	0x080059e9
 8005984:	080059e9 	.word	0x080059e9
 8005988:	080059e9 	.word	0x080059e9
 800598c:	080059e9 	.word	0x080059e9
 8005990:	080059e9 	.word	0x080059e9
 8005994:	080059e9 	.word	0x080059e9
 8005998:	080059f1 	.word	0x080059f1
 800599c:	080059e9 	.word	0x080059e9
 80059a0:	080059e9 	.word	0x080059e9
 80059a4:	080059e9 	.word	0x080059e9
 80059a8:	080059e9 	.word	0x080059e9
 80059ac:	080059e9 	.word	0x080059e9
 80059b0:	080059e9 	.word	0x080059e9
 80059b4:	080059e9 	.word	0x080059e9
 80059b8:	080059f1 	.word	0x080059f1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c0:	3308      	adds	r3, #8
 80059c2:	2101      	movs	r1, #1
 80059c4:	4618      	mov	r0, r3
 80059c6:	f000 ffc3 	bl	8006950 <RCCEx_PLL2_Config>
 80059ca:	4603      	mov	r3, r0
 80059cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80059d0:	e00f      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059d6:	3328      	adds	r3, #40	; 0x28
 80059d8:	2101      	movs	r1, #1
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 f86a 	bl	8006ab4 <RCCEx_PLL3_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80059e6:	e004      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059ee:	e000      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80059f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10a      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80059fa:	4bbf      	ldr	r3, [pc, #764]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a08:	4abb      	ldr	r2, [pc, #748]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a0a:	430b      	orrs	r3, r1
 8005a0c:	6553      	str	r3, [r2, #84]	; 0x54
 8005a0e:	e003      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a20:	f002 0302 	and.w	r3, r2, #2
 8005a24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005a2e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005a32:	460b      	mov	r3, r1
 8005a34:	4313      	orrs	r3, r2
 8005a36:	d041      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a3e:	2b05      	cmp	r3, #5
 8005a40:	d824      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005a42:	a201      	add	r2, pc, #4	; (adr r2, 8005a48 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a48:	08005a95 	.word	0x08005a95
 8005a4c:	08005a61 	.word	0x08005a61
 8005a50:	08005a77 	.word	0x08005a77
 8005a54:	08005a95 	.word	0x08005a95
 8005a58:	08005a95 	.word	0x08005a95
 8005a5c:	08005a95 	.word	0x08005a95
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a64:	3308      	adds	r3, #8
 8005a66:	2101      	movs	r1, #1
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 ff71 	bl	8006950 <RCCEx_PLL2_Config>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a74:	e00f      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a7a:	3328      	adds	r3, #40	; 0x28
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f001 f818 	bl	8006ab4 <RCCEx_PLL3_Config>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a8a:	e004      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a92:	e000      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10a      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005a9e:	4b96      	ldr	r3, [pc, #600]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa2:	f023 0107 	bic.w	r1, r3, #7
 8005aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aac:	4a92      	ldr	r2, [pc, #584]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005aae:	430b      	orrs	r3, r1
 8005ab0:	6553      	str	r3, [r2, #84]	; 0x54
 8005ab2:	e003      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ab8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	f002 0304 	and.w	r3, r2, #4
 8005ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005acc:	2300      	movs	r3, #0
 8005ace:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ad2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	d044      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ae4:	2b05      	cmp	r3, #5
 8005ae6:	d825      	bhi.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005ae8:	a201      	add	r2, pc, #4	; (adr r2, 8005af0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aee:	bf00      	nop
 8005af0:	08005b3d 	.word	0x08005b3d
 8005af4:	08005b09 	.word	0x08005b09
 8005af8:	08005b1f 	.word	0x08005b1f
 8005afc:	08005b3d 	.word	0x08005b3d
 8005b00:	08005b3d 	.word	0x08005b3d
 8005b04:	08005b3d 	.word	0x08005b3d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b0c:	3308      	adds	r3, #8
 8005b0e:	2101      	movs	r1, #1
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 ff1d 	bl	8006950 <RCCEx_PLL2_Config>
 8005b16:	4603      	mov	r3, r0
 8005b18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b1c:	e00f      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b22:	3328      	adds	r3, #40	; 0x28
 8005b24:	2101      	movs	r1, #1
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 ffc4 	bl	8006ab4 <RCCEx_PLL3_Config>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b32:	e004      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b3a:	e000      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10b      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b46:	4b6c      	ldr	r3, [pc, #432]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b4a:	f023 0107 	bic.w	r1, r3, #7
 8005b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b56:	4a68      	ldr	r2, [pc, #416]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b58:	430b      	orrs	r3, r1
 8005b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8005b5c:	e003      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6e:	f002 0320 	and.w	r3, r2, #32
 8005b72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b76:	2300      	movs	r3, #0
 8005b78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b80:	460b      	mov	r3, r1
 8005b82:	4313      	orrs	r3, r2
 8005b84:	d055      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b92:	d033      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b98:	d82c      	bhi.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b9e:	d02f      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba4:	d826      	bhi.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ba6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005baa:	d02b      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005bac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bb0:	d820      	bhi.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bb6:	d012      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bbc:	d81a      	bhi.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d022      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005bc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bc6:	d115      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bcc:	3308      	adds	r3, #8
 8005bce:	2100      	movs	r1, #0
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 febd 	bl	8006950 <RCCEx_PLL2_Config>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005bdc:	e015      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005be2:	3328      	adds	r3, #40	; 0x28
 8005be4:	2102      	movs	r1, #2
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 ff64 	bl	8006ab4 <RCCEx_PLL3_Config>
 8005bec:	4603      	mov	r3, r0
 8005bee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005bf2:	e00a      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005bfa:	e006      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005bfc:	bf00      	nop
 8005bfe:	e004      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c00:	bf00      	nop
 8005c02:	e002      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c04:	bf00      	nop
 8005c06:	e000      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10b      	bne.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c12:	4b39      	ldr	r3, [pc, #228]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c16:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c22:	4a35      	ldr	r2, [pc, #212]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c24:	430b      	orrs	r3, r1
 8005c26:	6553      	str	r3, [r2, #84]	; 0x54
 8005c28:	e003      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c42:	2300      	movs	r3, #0
 8005c44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c48:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	d058      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c5a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c5e:	d033      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005c60:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c64:	d82c      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6a:	d02f      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c70:	d826      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c76:	d02b      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005c78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c7c:	d820      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c82:	d012      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c88:	d81a      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d022      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c92:	d115      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c98:	3308      	adds	r3, #8
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fe57 	bl	8006950 <RCCEx_PLL2_Config>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005ca8:	e015      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cae:	3328      	adds	r3, #40	; 0x28
 8005cb0:	2102      	movs	r1, #2
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fefe 	bl	8006ab4 <RCCEx_PLL3_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005cbe:	e00a      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005cc6:	e006      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005cc8:	bf00      	nop
 8005cca:	e004      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005ccc:	bf00      	nop
 8005cce:	e002      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005cd0:	bf00      	nop
 8005cd2:	e000      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10e      	bne.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cde:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cee:	4a02      	ldr	r2, [pc, #8]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8005cf4:	e006      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005cf6:	bf00      	nop
 8005cf8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005d10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d14:	2300      	movs	r3, #0
 8005d16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d1a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4313      	orrs	r3, r2
 8005d22:	d055      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d2c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005d30:	d033      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005d32:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005d36:	d82c      	bhi.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d3c:	d02f      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d42:	d826      	bhi.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d44:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005d48:	d02b      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005d4a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005d4e:	d820      	bhi.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d54:	d012      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005d56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d5a:	d81a      	bhi.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d022      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d64:	d115      	bne.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d6a:	3308      	adds	r3, #8
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 fdee 	bl	8006950 <RCCEx_PLL2_Config>
 8005d74:	4603      	mov	r3, r0
 8005d76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d7a:	e015      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d80:	3328      	adds	r3, #40	; 0x28
 8005d82:	2102      	movs	r1, #2
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 fe95 	bl	8006ab4 <RCCEx_PLL3_Config>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d90:	e00a      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d98:	e006      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005d9a:	bf00      	nop
 8005d9c:	e004      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005d9e:	bf00      	nop
 8005da0:	e002      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005da2:	bf00      	nop
 8005da4:	e000      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10b      	bne.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005db0:	4ba1      	ldr	r3, [pc, #644]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005dc0:	4a9d      	ldr	r2, [pc, #628]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dc2:	430b      	orrs	r3, r1
 8005dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8005dc6:	e003      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd8:	f002 0308 	and.w	r3, r2, #8
 8005ddc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005de0:	2300      	movs	r3, #0
 8005de2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005de6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005dea:	460b      	mov	r3, r1
 8005dec:	4313      	orrs	r3, r2
 8005dee:	d01e      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dfc:	d10c      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e02:	3328      	adds	r3, #40	; 0x28
 8005e04:	2102      	movs	r1, #2
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 fe54 	bl	8006ab4 <RCCEx_PLL3_Config>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d002      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005e18:	4b87      	ldr	r3, [pc, #540]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e28:	4a83      	ldr	r2, [pc, #524]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e2a:	430b      	orrs	r3, r1
 8005e2c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e36:	f002 0310 	and.w	r3, r2, #16
 8005e3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e44:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	d01e      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5a:	d10c      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e60:	3328      	adds	r3, #40	; 0x28
 8005e62:	2102      	movs	r1, #2
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 fe25 	bl	8006ab4 <RCCEx_PLL3_Config>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e76:	4b70      	ldr	r3, [pc, #448]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e86:	4a6c      	ldr	r2, [pc, #432]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005e98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ea2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	d03e      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005eb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eb8:	d022      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005eba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ebe:	d81b      	bhi.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec8:	d00b      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005eca:	e015      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 fd3b 	bl	8006950 <RCCEx_PLL2_Config>
 8005eda:	4603      	mov	r3, r0
 8005edc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005ee0:	e00f      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ee6:	3328      	adds	r3, #40	; 0x28
 8005ee8:	2102      	movs	r1, #2
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fde2 	bl	8006ab4 <RCCEx_PLL3_Config>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005ef6:	e004      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005efe:	e000      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10b      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f0a:	4b4b      	ldr	r3, [pc, #300]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f1a:	4a47      	ldr	r2, [pc, #284]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f1c:	430b      	orrs	r3, r1
 8005f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8005f20:	e003      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f32:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005f36:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f38:	2300      	movs	r3, #0
 8005f3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f3c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005f40:	460b      	mov	r3, r1
 8005f42:	4313      	orrs	r3, r2
 8005f44:	d03b      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f52:	d01f      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005f54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f58:	d818      	bhi.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f5e:	d003      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005f60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f64:	d007      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005f66:	e011      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f68:	4b33      	ldr	r3, [pc, #204]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	4a32      	ldr	r2, [pc, #200]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f74:	e00f      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f7a:	3328      	adds	r3, #40	; 0x28
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 fd98 	bl	8006ab4 <RCCEx_PLL3_Config>
 8005f84:	4603      	mov	r3, r0
 8005f86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f8a:	e004      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f92:	e000      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005f94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10b      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f9e:	4b26      	ldr	r3, [pc, #152]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fae:	4a22      	ldr	r2, [pc, #136]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	6553      	str	r3, [r2, #84]	; 0x54
 8005fb4:	e003      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005fca:	673b      	str	r3, [r7, #112]	; 0x70
 8005fcc:	2300      	movs	r3, #0
 8005fce:	677b      	str	r3, [r7, #116]	; 0x74
 8005fd0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	d034      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe8:	d007      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005fea:	e011      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fec:	4b12      	ldr	r3, [pc, #72]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff0:	4a11      	ldr	r2, [pc, #68]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005ff8:	e00e      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ffe:	3308      	adds	r3, #8
 8006000:	2102      	movs	r1, #2
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fca4 	bl	8006950 <RCCEx_PLL2_Config>
 8006008:	4603      	mov	r3, r0
 800600a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800600e:	e003      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006016:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006018:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10d      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006024:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800602c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800602e:	4a02      	ldr	r2, [pc, #8]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006030:	430b      	orrs	r3, r1
 8006032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006034:	e006      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006036:	bf00      	nop
 8006038:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006040:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006050:	66bb      	str	r3, [r7, #104]	; 0x68
 8006052:	2300      	movs	r3, #0
 8006054:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006056:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800605a:	460b      	mov	r3, r1
 800605c:	4313      	orrs	r3, r2
 800605e:	d00c      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006064:	3328      	adds	r3, #40	; 0x28
 8006066:	2102      	movs	r1, #2
 8006068:	4618      	mov	r0, r3
 800606a:	f000 fd23 	bl	8006ab4 <RCCEx_PLL3_Config>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800607a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800607e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006082:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006086:	663b      	str	r3, [r7, #96]	; 0x60
 8006088:	2300      	movs	r3, #0
 800608a:	667b      	str	r3, [r7, #100]	; 0x64
 800608c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006090:	460b      	mov	r3, r1
 8006092:	4313      	orrs	r3, r2
 8006094:	d038      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800609a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800609e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060a2:	d018      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80060a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060a8:	d811      	bhi.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80060aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060ae:	d014      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80060b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b4:	d80b      	bhi.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d011      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80060ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060be:	d106      	bne.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060c0:	4bc3      	ldr	r3, [pc, #780]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	4ac2      	ldr	r2, [pc, #776]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80060cc:	e008      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060d4:	e004      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80060d6:	bf00      	nop
 80060d8:	e002      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80060da:	bf00      	nop
 80060dc:	e000      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80060de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10b      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060e8:	4bb9      	ldr	r3, [pc, #740]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060f8:	4ab5      	ldr	r2, [pc, #724]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060fa:	430b      	orrs	r3, r1
 80060fc:	6553      	str	r3, [r2, #84]	; 0x54
 80060fe:	e003      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006100:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006104:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006114:	65bb      	str	r3, [r7, #88]	; 0x58
 8006116:	2300      	movs	r3, #0
 8006118:	65fb      	str	r3, [r7, #92]	; 0x5c
 800611a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800611e:	460b      	mov	r3, r1
 8006120:	4313      	orrs	r3, r2
 8006122:	d009      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006124:	4baa      	ldr	r3, [pc, #680]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006128:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800612c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006132:	4aa7      	ldr	r2, [pc, #668]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006134:	430b      	orrs	r3, r1
 8006136:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800613c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006140:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006144:	653b      	str	r3, [r7, #80]	; 0x50
 8006146:	2300      	movs	r3, #0
 8006148:	657b      	str	r3, [r7, #84]	; 0x54
 800614a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800614e:	460b      	mov	r3, r1
 8006150:	4313      	orrs	r3, r2
 8006152:	d00a      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006154:	4b9e      	ldr	r3, [pc, #632]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800615c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006160:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006164:	4a9a      	ldr	r2, [pc, #616]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006166:	430b      	orrs	r3, r1
 8006168:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800616a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006172:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006176:	64bb      	str	r3, [r7, #72]	; 0x48
 8006178:	2300      	movs	r3, #0
 800617a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800617c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006180:	460b      	mov	r3, r1
 8006182:	4313      	orrs	r3, r2
 8006184:	d009      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006186:	4b92      	ldr	r3, [pc, #584]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800618a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800618e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006194:	4a8e      	ldr	r2, [pc, #568]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006196:	430b      	orrs	r3, r1
 8006198:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800619a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80061a6:	643b      	str	r3, [r7, #64]	; 0x40
 80061a8:	2300      	movs	r3, #0
 80061aa:	647b      	str	r3, [r7, #68]	; 0x44
 80061ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80061b0:	460b      	mov	r3, r1
 80061b2:	4313      	orrs	r3, r2
 80061b4:	d00e      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061b6:	4b86      	ldr	r3, [pc, #536]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	4a85      	ldr	r2, [pc, #532]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061c0:	6113      	str	r3, [r2, #16]
 80061c2:	4b83      	ldr	r3, [pc, #524]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061c4:	6919      	ldr	r1, [r3, #16]
 80061c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80061ce:	4a80      	ldr	r2, [pc, #512]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061d0:	430b      	orrs	r3, r1
 80061d2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80061d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80061e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80061e2:	2300      	movs	r3, #0
 80061e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80061ea:	460b      	mov	r3, r1
 80061ec:	4313      	orrs	r3, r2
 80061ee:	d009      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80061f0:	4b77      	ldr	r3, [pc, #476]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80061f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fe:	4a74      	ldr	r2, [pc, #464]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006200:	430b      	orrs	r3, r1
 8006202:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006210:	633b      	str	r3, [r7, #48]	; 0x30
 8006212:	2300      	movs	r3, #0
 8006214:	637b      	str	r3, [r7, #52]	; 0x34
 8006216:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800621a:	460b      	mov	r3, r1
 800621c:	4313      	orrs	r3, r2
 800621e:	d00a      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006220:	4b6b      	ldr	r3, [pc, #428]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006224:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800622c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006230:	4a67      	ldr	r2, [pc, #412]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006232:	430b      	orrs	r3, r1
 8006234:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	2100      	movs	r1, #0
 8006240:	62b9      	str	r1, [r7, #40]	; 0x28
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006248:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800624c:	460b      	mov	r3, r1
 800624e:	4313      	orrs	r3, r2
 8006250:	d011      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006256:	3308      	adds	r3, #8
 8006258:	2100      	movs	r1, #0
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fb78 	bl	8006950 <RCCEx_PLL2_Config>
 8006260:	4603      	mov	r3, r0
 8006262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006266:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006272:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627e:	2100      	movs	r1, #0
 8006280:	6239      	str	r1, [r7, #32]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	627b      	str	r3, [r7, #36]	; 0x24
 8006288:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800628c:	460b      	mov	r3, r1
 800628e:	4313      	orrs	r3, r2
 8006290:	d011      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006296:	3308      	adds	r3, #8
 8006298:	2101      	movs	r1, #1
 800629a:	4618      	mov	r0, r3
 800629c:	f000 fb58 	bl	8006950 <RCCEx_PLL2_Config>
 80062a0:	4603      	mov	r3, r0
 80062a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80062a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80062b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062be:	2100      	movs	r1, #0
 80062c0:	61b9      	str	r1, [r7, #24]
 80062c2:	f003 0304 	and.w	r3, r3, #4
 80062c6:	61fb      	str	r3, [r7, #28]
 80062c8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80062cc:	460b      	mov	r3, r1
 80062ce:	4313      	orrs	r3, r2
 80062d0:	d011      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d6:	3308      	adds	r3, #8
 80062d8:	2102      	movs	r1, #2
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 fb38 	bl	8006950 <RCCEx_PLL2_Config>
 80062e0:	4603      	mov	r3, r0
 80062e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80062e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80062f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fe:	2100      	movs	r1, #0
 8006300:	6139      	str	r1, [r7, #16]
 8006302:	f003 0308 	and.w	r3, r3, #8
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800630c:	460b      	mov	r3, r1
 800630e:	4313      	orrs	r3, r2
 8006310:	d011      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006316:	3328      	adds	r3, #40	; 0x28
 8006318:	2100      	movs	r1, #0
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fbca 	bl	8006ab4 <RCCEx_PLL3_Config>
 8006320:	4603      	mov	r3, r0
 8006322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800632e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006332:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633e:	2100      	movs	r1, #0
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	f003 0310 	and.w	r3, r3, #16
 8006346:	60fb      	str	r3, [r7, #12]
 8006348:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800634c:	460b      	mov	r3, r1
 800634e:	4313      	orrs	r3, r2
 8006350:	d011      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006356:	3328      	adds	r3, #40	; 0x28
 8006358:	2101      	movs	r1, #1
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fbaa 	bl	8006ab4 <RCCEx_PLL3_Config>
 8006360:	4603      	mov	r3, r0
 8006362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006372:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637e:	2100      	movs	r1, #0
 8006380:	6039      	str	r1, [r7, #0]
 8006382:	f003 0320 	and.w	r3, r3, #32
 8006386:	607b      	str	r3, [r7, #4]
 8006388:	e9d7 1200 	ldrd	r1, r2, [r7]
 800638c:	460b      	mov	r3, r1
 800638e:	4313      	orrs	r3, r2
 8006390:	d011      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006396:	3328      	adds	r3, #40	; 0x28
 8006398:	2102      	movs	r1, #2
 800639a:	4618      	mov	r0, r3
 800639c:	f000 fb8a 	bl	8006ab4 <RCCEx_PLL3_Config>
 80063a0:	4603      	mov	r3, r0
 80063a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80063a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80063b6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	e000      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80063ca:	46bd      	mov	sp, r7
 80063cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063d0:	58024400 	.word	0x58024400

080063d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80063d8:	f7fe fd96 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 80063dc:	4602      	mov	r2, r0
 80063de:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	091b      	lsrs	r3, r3, #4
 80063e4:	f003 0307 	and.w	r3, r3, #7
 80063e8:	4904      	ldr	r1, [pc, #16]	; (80063fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80063ea:	5ccb      	ldrb	r3, [r1, r3]
 80063ec:	f003 031f 	and.w	r3, r3, #31
 80063f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	58024400 	.word	0x58024400
 80063fc:	08009928 	.word	0x08009928

08006400 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006400:	b480      	push	{r7}
 8006402:	b089      	sub	sp, #36	; 0x24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006408:	4ba1      	ldr	r3, [pc, #644]	; (8006690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640c:	f003 0303 	and.w	r3, r3, #3
 8006410:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006412:	4b9f      	ldr	r3, [pc, #636]	; (8006690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006416:	0b1b      	lsrs	r3, r3, #12
 8006418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800641c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800641e:	4b9c      	ldr	r3, [pc, #624]	; (8006690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006422:	091b      	lsrs	r3, r3, #4
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800642a:	4b99      	ldr	r3, [pc, #612]	; (8006690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800642c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642e:	08db      	lsrs	r3, r3, #3
 8006430:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	fb02 f303 	mul.w	r3, r2, r3
 800643a:	ee07 3a90 	vmov	s15, r3
 800643e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006442:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 8111 	beq.w	8006670 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2b02      	cmp	r3, #2
 8006452:	f000 8083 	beq.w	800655c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	2b02      	cmp	r3, #2
 800645a:	f200 80a1 	bhi.w	80065a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d056      	beq.n	8006518 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800646a:	e099      	b.n	80065a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800646c:	4b88      	ldr	r3, [pc, #544]	; (8006690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0320 	and.w	r3, r3, #32
 8006474:	2b00      	cmp	r3, #0
 8006476:	d02d      	beq.n	80064d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006478:	4b85      	ldr	r3, [pc, #532]	; (8006690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	08db      	lsrs	r3, r3, #3
 800647e:	f003 0303 	and.w	r3, r3, #3
 8006482:	4a84      	ldr	r2, [pc, #528]	; (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006484:	fa22 f303 	lsr.w	r3, r2, r3
 8006488:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	ee07 3a90 	vmov	s15, r3
 8006490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	ee07 3a90 	vmov	s15, r3
 800649a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800649e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064a2:	4b7b      	ldr	r3, [pc, #492]	; (8006690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064aa:	ee07 3a90 	vmov	s15, r3
 80064ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80064b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80064d2:	e087      	b.n	80065e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	ee07 3a90 	vmov	s15, r3
 80064da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800669c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80064e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e6:	4b6a      	ldr	r3, [pc, #424]	; (8006690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ee:	ee07 3a90 	vmov	s15, r3
 80064f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80064fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800650a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800650e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006512:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006516:	e065      	b.n	80065e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	ee07 3a90 	vmov	s15, r3
 800651e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006522:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80066a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800652a:	4b59      	ldr	r3, [pc, #356]	; (8006690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800652c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006532:	ee07 3a90 	vmov	s15, r3
 8006536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800653a:	ed97 6a03 	vldr	s12, [r7, #12]
 800653e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800654a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800654e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800655a:	e043      	b.n	80065e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	ee07 3a90 	vmov	s15, r3
 8006562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006566:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800656a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800656e:	4b48      	ldr	r3, [pc, #288]	; (8006690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006576:	ee07 3a90 	vmov	s15, r3
 800657a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800657e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006582:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800658a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800658e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800659a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800659e:	e021      	b.n	80065e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80066a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80065ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065b2:	4b37      	ldr	r3, [pc, #220]	; (8006690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ba:	ee07 3a90 	vmov	s15, r3
 80065be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80065c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80065ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80065e4:	4b2a      	ldr	r3, [pc, #168]	; (8006690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e8:	0a5b      	lsrs	r3, r3, #9
 80065ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065ee:	ee07 3a90 	vmov	s15, r3
 80065f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800660a:	ee17 2a90 	vmov	r2, s15
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006612:	4b1f      	ldr	r3, [pc, #124]	; (8006690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006616:	0c1b      	lsrs	r3, r3, #16
 8006618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800661c:	ee07 3a90 	vmov	s15, r3
 8006620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006624:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006628:	ee37 7a87 	vadd.f32	s14, s15, s14
 800662c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006638:	ee17 2a90 	vmov	r2, s15
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006640:	4b13      	ldr	r3, [pc, #76]	; (8006690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006644:	0e1b      	lsrs	r3, r3, #24
 8006646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800664a:	ee07 3a90 	vmov	s15, r3
 800664e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006652:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006656:	ee37 7a87 	vadd.f32	s14, s15, s14
 800665a:	edd7 6a07 	vldr	s13, [r7, #28]
 800665e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006666:	ee17 2a90 	vmov	r2, s15
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800666e:	e008      	b.n	8006682 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	609a      	str	r2, [r3, #8]
}
 8006682:	bf00      	nop
 8006684:	3724      	adds	r7, #36	; 0x24
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	58024400 	.word	0x58024400
 8006694:	03d09000 	.word	0x03d09000
 8006698:	46000000 	.word	0x46000000
 800669c:	4c742400 	.word	0x4c742400
 80066a0:	4a742400 	.word	0x4a742400
 80066a4:	4af42400 	.word	0x4af42400

080066a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b089      	sub	sp, #36	; 0x24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066b0:	4ba1      	ldr	r3, [pc, #644]	; (8006938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b4:	f003 0303 	and.w	r3, r3, #3
 80066b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80066ba:	4b9f      	ldr	r3, [pc, #636]	; (8006938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066be:	0d1b      	lsrs	r3, r3, #20
 80066c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80066c6:	4b9c      	ldr	r3, [pc, #624]	; (8006938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ca:	0a1b      	lsrs	r3, r3, #8
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80066d2:	4b99      	ldr	r3, [pc, #612]	; (8006938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d6:	08db      	lsrs	r3, r3, #3
 80066d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	fb02 f303 	mul.w	r3, r2, r3
 80066e2:	ee07 3a90 	vmov	s15, r3
 80066e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 8111 	beq.w	8006918 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	f000 8083 	beq.w	8006804 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	2b02      	cmp	r3, #2
 8006702:	f200 80a1 	bhi.w	8006848 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d056      	beq.n	80067c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006712:	e099      	b.n	8006848 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006714:	4b88      	ldr	r3, [pc, #544]	; (8006938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0320 	and.w	r3, r3, #32
 800671c:	2b00      	cmp	r3, #0
 800671e:	d02d      	beq.n	800677c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006720:	4b85      	ldr	r3, [pc, #532]	; (8006938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	08db      	lsrs	r3, r3, #3
 8006726:	f003 0303 	and.w	r3, r3, #3
 800672a:	4a84      	ldr	r2, [pc, #528]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800672c:	fa22 f303 	lsr.w	r3, r2, r3
 8006730:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	ee07 3a90 	vmov	s15, r3
 8006738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	ee07 3a90 	vmov	s15, r3
 8006742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800674a:	4b7b      	ldr	r3, [pc, #492]	; (8006938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800674c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006752:	ee07 3a90 	vmov	s15, r3
 8006756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800675a:	ed97 6a03 	vldr	s12, [r7, #12]
 800675e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800676a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800676e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006776:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800677a:	e087      	b.n	800688c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	ee07 3a90 	vmov	s15, r3
 8006782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006786:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800678a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800678e:	4b6a      	ldr	r3, [pc, #424]	; (8006938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006796:	ee07 3a90 	vmov	s15, r3
 800679a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800679e:	ed97 6a03 	vldr	s12, [r7, #12]
 80067a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067be:	e065      	b.n	800688c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	ee07 3a90 	vmov	s15, r3
 80067c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80067ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067d2:	4b59      	ldr	r3, [pc, #356]	; (8006938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067da:	ee07 3a90 	vmov	s15, r3
 80067de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80067e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006802:	e043      	b.n	800688c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	ee07 3a90 	vmov	s15, r3
 800680a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800694c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006816:	4b48      	ldr	r3, [pc, #288]	; (8006938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800681e:	ee07 3a90 	vmov	s15, r3
 8006822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006826:	ed97 6a03 	vldr	s12, [r7, #12]
 800682a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800682e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800683a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800683e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006846:	e021      	b.n	800688c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	ee07 3a90 	vmov	s15, r3
 800684e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006852:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800685a:	4b37      	ldr	r3, [pc, #220]	; (8006938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006862:	ee07 3a90 	vmov	s15, r3
 8006866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800686a:	ed97 6a03 	vldr	s12, [r7, #12]
 800686e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800687a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800687e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006886:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800688a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800688c:	4b2a      	ldr	r3, [pc, #168]	; (8006938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	0a5b      	lsrs	r3, r3, #9
 8006892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006896:	ee07 3a90 	vmov	s15, r3
 800689a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80068aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068b2:	ee17 2a90 	vmov	r2, s15
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80068ba:	4b1f      	ldr	r3, [pc, #124]	; (8006938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	0c1b      	lsrs	r3, r3, #16
 80068c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c4:	ee07 3a90 	vmov	s15, r3
 80068c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80068d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068e0:	ee17 2a90 	vmov	r2, s15
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80068e8:	4b13      	ldr	r3, [pc, #76]	; (8006938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ec:	0e1b      	lsrs	r3, r3, #24
 80068ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f2:	ee07 3a90 	vmov	s15, r3
 80068f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006902:	edd7 6a07 	vldr	s13, [r7, #28]
 8006906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800690a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800690e:	ee17 2a90 	vmov	r2, s15
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006916:	e008      	b.n	800692a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	609a      	str	r2, [r3, #8]
}
 800692a:	bf00      	nop
 800692c:	3724      	adds	r7, #36	; 0x24
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	58024400 	.word	0x58024400
 800693c:	03d09000 	.word	0x03d09000
 8006940:	46000000 	.word	0x46000000
 8006944:	4c742400 	.word	0x4c742400
 8006948:	4a742400 	.word	0x4a742400
 800694c:	4af42400 	.word	0x4af42400

08006950 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800695e:	4b53      	ldr	r3, [pc, #332]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 8006960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006962:	f003 0303 	and.w	r3, r3, #3
 8006966:	2b03      	cmp	r3, #3
 8006968:	d101      	bne.n	800696e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e099      	b.n	8006aa2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800696e:	4b4f      	ldr	r3, [pc, #316]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a4e      	ldr	r2, [pc, #312]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 8006974:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006978:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800697a:	f7fa fd85 	bl	8001488 <HAL_GetTick>
 800697e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006980:	e008      	b.n	8006994 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006982:	f7fa fd81 	bl	8001488 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	2b02      	cmp	r3, #2
 800698e:	d901      	bls.n	8006994 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e086      	b.n	8006aa2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006994:	4b45      	ldr	r3, [pc, #276]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1f0      	bne.n	8006982 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80069a0:	4b42      	ldr	r3, [pc, #264]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 80069a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	031b      	lsls	r3, r3, #12
 80069ae:	493f      	ldr	r1, [pc, #252]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	628b      	str	r3, [r1, #40]	; 0x28
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	3b01      	subs	r3, #1
 80069c4:	025b      	lsls	r3, r3, #9
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	431a      	orrs	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	3b01      	subs	r3, #1
 80069d0:	041b      	lsls	r3, r3, #16
 80069d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80069d6:	431a      	orrs	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	3b01      	subs	r3, #1
 80069de:	061b      	lsls	r3, r3, #24
 80069e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80069e4:	4931      	ldr	r1, [pc, #196]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80069ea:	4b30      	ldr	r3, [pc, #192]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 80069ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	492d      	ldr	r1, [pc, #180]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80069fc:	4b2b      	ldr	r3, [pc, #172]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 80069fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a00:	f023 0220 	bic.w	r2, r3, #32
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	4928      	ldr	r1, [pc, #160]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006a0e:	4b27      	ldr	r3, [pc, #156]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 8006a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a12:	4a26      	ldr	r2, [pc, #152]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 8006a14:	f023 0310 	bic.w	r3, r3, #16
 8006a18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a1a:	4b24      	ldr	r3, [pc, #144]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 8006a1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a1e:	4b24      	ldr	r3, [pc, #144]	; (8006ab0 <RCCEx_PLL2_Config+0x160>)
 8006a20:	4013      	ands	r3, r2
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	69d2      	ldr	r2, [r2, #28]
 8006a26:	00d2      	lsls	r2, r2, #3
 8006a28:	4920      	ldr	r1, [pc, #128]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006a2e:	4b1f      	ldr	r3, [pc, #124]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 8006a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a32:	4a1e      	ldr	r2, [pc, #120]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 8006a34:	f043 0310 	orr.w	r3, r3, #16
 8006a38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d106      	bne.n	8006a4e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006a40:	4b1a      	ldr	r3, [pc, #104]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	4a19      	ldr	r2, [pc, #100]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 8006a46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a4c:	e00f      	b.n	8006a6e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d106      	bne.n	8006a62 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006a54:	4b15      	ldr	r3, [pc, #84]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 8006a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a58:	4a14      	ldr	r2, [pc, #80]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 8006a5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a60:	e005      	b.n	8006a6e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a62:	4b12      	ldr	r3, [pc, #72]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 8006a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a66:	4a11      	ldr	r2, [pc, #68]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 8006a68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a6e:	4b0f      	ldr	r3, [pc, #60]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a0e      	ldr	r2, [pc, #56]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 8006a74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a7a:	f7fa fd05 	bl	8001488 <HAL_GetTick>
 8006a7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a80:	e008      	b.n	8006a94 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a82:	f7fa fd01 	bl	8001488 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d901      	bls.n	8006a94 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e006      	b.n	8006aa2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a94:	4b05      	ldr	r3, [pc, #20]	; (8006aac <RCCEx_PLL2_Config+0x15c>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d0f0      	beq.n	8006a82 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	58024400 	.word	0x58024400
 8006ab0:	ffff0007 	.word	0xffff0007

08006ab4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ac2:	4b53      	ldr	r3, [pc, #332]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac6:	f003 0303 	and.w	r3, r3, #3
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d101      	bne.n	8006ad2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e099      	b.n	8006c06 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006ad2:	4b4f      	ldr	r3, [pc, #316]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a4e      	ldr	r2, [pc, #312]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006adc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ade:	f7fa fcd3 	bl	8001488 <HAL_GetTick>
 8006ae2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ae4:	e008      	b.n	8006af8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006ae6:	f7fa fccf 	bl	8001488 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d901      	bls.n	8006af8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e086      	b.n	8006c06 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006af8:	4b45      	ldr	r3, [pc, #276]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1f0      	bne.n	8006ae6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006b04:	4b42      	ldr	r3, [pc, #264]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b08:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	051b      	lsls	r3, r3, #20
 8006b12:	493f      	ldr	r1, [pc, #252]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	628b      	str	r3, [r1, #40]	; 0x28
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	025b      	lsls	r3, r3, #9
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	041b      	lsls	r3, r3, #16
 8006b36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	3b01      	subs	r3, #1
 8006b42:	061b      	lsls	r3, r3, #24
 8006b44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b48:	4931      	ldr	r1, [pc, #196]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006b4e:	4b30      	ldr	r3, [pc, #192]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	492d      	ldr	r1, [pc, #180]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006b60:	4b2b      	ldr	r3, [pc, #172]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b64:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	4928      	ldr	r1, [pc, #160]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b72:	4b27      	ldr	r3, [pc, #156]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b76:	4a26      	ldr	r2, [pc, #152]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b7e:	4b24      	ldr	r3, [pc, #144]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b82:	4b24      	ldr	r3, [pc, #144]	; (8006c14 <RCCEx_PLL3_Config+0x160>)
 8006b84:	4013      	ands	r3, r2
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	69d2      	ldr	r2, [r2, #28]
 8006b8a:	00d2      	lsls	r2, r2, #3
 8006b8c:	4920      	ldr	r1, [pc, #128]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006b92:	4b1f      	ldr	r3, [pc, #124]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b96:	4a1e      	ldr	r2, [pc, #120]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d106      	bne.n	8006bb2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ba4:	4b1a      	ldr	r3, [pc, #104]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba8:	4a19      	ldr	r2, [pc, #100]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006baa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006bae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006bb0:	e00f      	b.n	8006bd2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d106      	bne.n	8006bc6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006bb8:	4b15      	ldr	r3, [pc, #84]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	4a14      	ldr	r2, [pc, #80]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006bbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006bc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006bc4:	e005      	b.n	8006bd2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006bc6:	4b12      	ldr	r3, [pc, #72]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bca:	4a11      	ldr	r2, [pc, #68]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006bcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006bd2:	4b0f      	ldr	r3, [pc, #60]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a0e      	ldr	r2, [pc, #56]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bde:	f7fa fc53 	bl	8001488 <HAL_GetTick>
 8006be2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006be4:	e008      	b.n	8006bf8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006be6:	f7fa fc4f 	bl	8001488 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d901      	bls.n	8006bf8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e006      	b.n	8006c06 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bf8:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <RCCEx_PLL3_Config+0x15c>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d0f0      	beq.n	8006be6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	58024400 	.word	0x58024400
 8006c14:	ffff0007 	.word	0xffff0007

08006c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e049      	b.n	8006cbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d106      	bne.n	8006c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7fa f9cc 	bl	8000fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	3304      	adds	r3, #4
 8006c54:	4619      	mov	r1, r3
 8006c56:	4610      	mov	r0, r2
 8006c58:	f000 fd5e 	bl	8007718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d001      	beq.n	8006ce0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e04c      	b.n	8006d7a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a26      	ldr	r2, [pc, #152]	; (8006d88 <HAL_TIM_Base_Start+0xc0>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d022      	beq.n	8006d38 <HAL_TIM_Base_Start+0x70>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cfa:	d01d      	beq.n	8006d38 <HAL_TIM_Base_Start+0x70>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a22      	ldr	r2, [pc, #136]	; (8006d8c <HAL_TIM_Base_Start+0xc4>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d018      	beq.n	8006d38 <HAL_TIM_Base_Start+0x70>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a21      	ldr	r2, [pc, #132]	; (8006d90 <HAL_TIM_Base_Start+0xc8>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d013      	beq.n	8006d38 <HAL_TIM_Base_Start+0x70>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a1f      	ldr	r2, [pc, #124]	; (8006d94 <HAL_TIM_Base_Start+0xcc>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00e      	beq.n	8006d38 <HAL_TIM_Base_Start+0x70>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a1e      	ldr	r2, [pc, #120]	; (8006d98 <HAL_TIM_Base_Start+0xd0>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d009      	beq.n	8006d38 <HAL_TIM_Base_Start+0x70>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a1c      	ldr	r2, [pc, #112]	; (8006d9c <HAL_TIM_Base_Start+0xd4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d004      	beq.n	8006d38 <HAL_TIM_Base_Start+0x70>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a1b      	ldr	r2, [pc, #108]	; (8006da0 <HAL_TIM_Base_Start+0xd8>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d115      	bne.n	8006d64 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	4b19      	ldr	r3, [pc, #100]	; (8006da4 <HAL_TIM_Base_Start+0xdc>)
 8006d40:	4013      	ands	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b06      	cmp	r3, #6
 8006d48:	d015      	beq.n	8006d76 <HAL_TIM_Base_Start+0xae>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d50:	d011      	beq.n	8006d76 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f042 0201 	orr.w	r2, r2, #1
 8006d60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d62:	e008      	b.n	8006d76 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0201 	orr.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	e000      	b.n	8006d78 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	40010000 	.word	0x40010000
 8006d8c:	40000400 	.word	0x40000400
 8006d90:	40000800 	.word	0x40000800
 8006d94:	40000c00 	.word	0x40000c00
 8006d98:	40010400 	.word	0x40010400
 8006d9c:	40001800 	.word	0x40001800
 8006da0:	40014000 	.word	0x40014000
 8006da4:	00010007 	.word	0x00010007

08006da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d001      	beq.n	8006dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e054      	b.n	8006e6a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a26      	ldr	r2, [pc, #152]	; (8006e78 <HAL_TIM_Base_Start_IT+0xd0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d022      	beq.n	8006e28 <HAL_TIM_Base_Start_IT+0x80>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dea:	d01d      	beq.n	8006e28 <HAL_TIM_Base_Start_IT+0x80>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a22      	ldr	r2, [pc, #136]	; (8006e7c <HAL_TIM_Base_Start_IT+0xd4>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d018      	beq.n	8006e28 <HAL_TIM_Base_Start_IT+0x80>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a21      	ldr	r2, [pc, #132]	; (8006e80 <HAL_TIM_Base_Start_IT+0xd8>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d013      	beq.n	8006e28 <HAL_TIM_Base_Start_IT+0x80>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a1f      	ldr	r2, [pc, #124]	; (8006e84 <HAL_TIM_Base_Start_IT+0xdc>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d00e      	beq.n	8006e28 <HAL_TIM_Base_Start_IT+0x80>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a1e      	ldr	r2, [pc, #120]	; (8006e88 <HAL_TIM_Base_Start_IT+0xe0>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d009      	beq.n	8006e28 <HAL_TIM_Base_Start_IT+0x80>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a1c      	ldr	r2, [pc, #112]	; (8006e8c <HAL_TIM_Base_Start_IT+0xe4>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d004      	beq.n	8006e28 <HAL_TIM_Base_Start_IT+0x80>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a1b      	ldr	r2, [pc, #108]	; (8006e90 <HAL_TIM_Base_Start_IT+0xe8>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d115      	bne.n	8006e54 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689a      	ldr	r2, [r3, #8]
 8006e2e:	4b19      	ldr	r3, [pc, #100]	; (8006e94 <HAL_TIM_Base_Start_IT+0xec>)
 8006e30:	4013      	ands	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2b06      	cmp	r3, #6
 8006e38:	d015      	beq.n	8006e66 <HAL_TIM_Base_Start_IT+0xbe>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e40:	d011      	beq.n	8006e66 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f042 0201 	orr.w	r2, r2, #1
 8006e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e52:	e008      	b.n	8006e66 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f042 0201 	orr.w	r2, r2, #1
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	e000      	b.n	8006e68 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	40010000 	.word	0x40010000
 8006e7c:	40000400 	.word	0x40000400
 8006e80:	40000800 	.word	0x40000800
 8006e84:	40000c00 	.word	0x40000c00
 8006e88:	40010400 	.word	0x40010400
 8006e8c:	40001800 	.word	0x40001800
 8006e90:	40014000 	.word	0x40014000
 8006e94:	00010007 	.word	0x00010007

08006e98 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68da      	ldr	r2, [r3, #12]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0201 	bic.w	r2, r2, #1
 8006eae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6a1a      	ldr	r2, [r3, #32]
 8006eb6:	f241 1311 	movw	r3, #4369	; 0x1111
 8006eba:	4013      	ands	r3, r2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10f      	bne.n	8006ee0 <HAL_TIM_Base_Stop_IT+0x48>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6a1a      	ldr	r2, [r3, #32]
 8006ec6:	f240 4344 	movw	r3, #1092	; 0x444
 8006eca:	4013      	ands	r3, r2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d107      	bne.n	8006ee0 <HAL_TIM_Base_Stop_IT+0x48>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 0201 	bic.w	r2, r2, #1
 8006ede:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b082      	sub	sp, #8
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e049      	b.n	8006f9c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d106      	bne.n	8006f22 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f841 	bl	8006fa4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2202      	movs	r2, #2
 8006f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	3304      	adds	r3, #4
 8006f32:	4619      	mov	r1, r3
 8006f34:	4610      	mov	r0, r2
 8006f36:	f000 fbef 	bl	8007718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d109      	bne.n	8006fdc <HAL_TIM_OC_Start+0x24>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	bf14      	ite	ne
 8006fd4:	2301      	movne	r3, #1
 8006fd6:	2300      	moveq	r3, #0
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	e03c      	b.n	8007056 <HAL_TIM_OC_Start+0x9e>
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d109      	bne.n	8006ff6 <HAL_TIM_OC_Start+0x3e>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	bf14      	ite	ne
 8006fee:	2301      	movne	r3, #1
 8006ff0:	2300      	moveq	r3, #0
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	e02f      	b.n	8007056 <HAL_TIM_OC_Start+0x9e>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d109      	bne.n	8007010 <HAL_TIM_OC_Start+0x58>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b01      	cmp	r3, #1
 8007006:	bf14      	ite	ne
 8007008:	2301      	movne	r3, #1
 800700a:	2300      	moveq	r3, #0
 800700c:	b2db      	uxtb	r3, r3
 800700e:	e022      	b.n	8007056 <HAL_TIM_OC_Start+0x9e>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2b0c      	cmp	r3, #12
 8007014:	d109      	bne.n	800702a <HAL_TIM_OC_Start+0x72>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b01      	cmp	r3, #1
 8007020:	bf14      	ite	ne
 8007022:	2301      	movne	r3, #1
 8007024:	2300      	moveq	r3, #0
 8007026:	b2db      	uxtb	r3, r3
 8007028:	e015      	b.n	8007056 <HAL_TIM_OC_Start+0x9e>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b10      	cmp	r3, #16
 800702e:	d109      	bne.n	8007044 <HAL_TIM_OC_Start+0x8c>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007036:	b2db      	uxtb	r3, r3
 8007038:	2b01      	cmp	r3, #1
 800703a:	bf14      	ite	ne
 800703c:	2301      	movne	r3, #1
 800703e:	2300      	moveq	r3, #0
 8007040:	b2db      	uxtb	r3, r3
 8007042:	e008      	b.n	8007056 <HAL_TIM_OC_Start+0x9e>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b01      	cmp	r3, #1
 800704e:	bf14      	ite	ne
 8007050:	2301      	movne	r3, #1
 8007052:	2300      	moveq	r3, #0
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e0a1      	b.n	80071a2 <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d104      	bne.n	800706e <HAL_TIM_OC_Start+0xb6>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800706c:	e023      	b.n	80070b6 <HAL_TIM_OC_Start+0xfe>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b04      	cmp	r3, #4
 8007072:	d104      	bne.n	800707e <HAL_TIM_OC_Start+0xc6>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800707c:	e01b      	b.n	80070b6 <HAL_TIM_OC_Start+0xfe>
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2b08      	cmp	r3, #8
 8007082:	d104      	bne.n	800708e <HAL_TIM_OC_Start+0xd6>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800708c:	e013      	b.n	80070b6 <HAL_TIM_OC_Start+0xfe>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2b0c      	cmp	r3, #12
 8007092:	d104      	bne.n	800709e <HAL_TIM_OC_Start+0xe6>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800709c:	e00b      	b.n	80070b6 <HAL_TIM_OC_Start+0xfe>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b10      	cmp	r3, #16
 80070a2:	d104      	bne.n	80070ae <HAL_TIM_OC_Start+0xf6>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2202      	movs	r2, #2
 80070a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070ac:	e003      	b.n	80070b6 <HAL_TIM_OC_Start+0xfe>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2202      	movs	r2, #2
 80070b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2201      	movs	r2, #1
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 ff44 	bl	8007f4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a38      	ldr	r2, [pc, #224]	; (80071ac <HAL_TIM_OC_Start+0x1f4>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d013      	beq.n	80070f6 <HAL_TIM_OC_Start+0x13e>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a37      	ldr	r2, [pc, #220]	; (80071b0 <HAL_TIM_OC_Start+0x1f8>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d00e      	beq.n	80070f6 <HAL_TIM_OC_Start+0x13e>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a35      	ldr	r2, [pc, #212]	; (80071b4 <HAL_TIM_OC_Start+0x1fc>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d009      	beq.n	80070f6 <HAL_TIM_OC_Start+0x13e>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a34      	ldr	r2, [pc, #208]	; (80071b8 <HAL_TIM_OC_Start+0x200>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d004      	beq.n	80070f6 <HAL_TIM_OC_Start+0x13e>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a32      	ldr	r2, [pc, #200]	; (80071bc <HAL_TIM_OC_Start+0x204>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d101      	bne.n	80070fa <HAL_TIM_OC_Start+0x142>
 80070f6:	2301      	movs	r3, #1
 80070f8:	e000      	b.n	80070fc <HAL_TIM_OC_Start+0x144>
 80070fa:	2300      	movs	r3, #0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d007      	beq.n	8007110 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800710e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a25      	ldr	r2, [pc, #148]	; (80071ac <HAL_TIM_OC_Start+0x1f4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d022      	beq.n	8007160 <HAL_TIM_OC_Start+0x1a8>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007122:	d01d      	beq.n	8007160 <HAL_TIM_OC_Start+0x1a8>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a25      	ldr	r2, [pc, #148]	; (80071c0 <HAL_TIM_OC_Start+0x208>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d018      	beq.n	8007160 <HAL_TIM_OC_Start+0x1a8>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a24      	ldr	r2, [pc, #144]	; (80071c4 <HAL_TIM_OC_Start+0x20c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d013      	beq.n	8007160 <HAL_TIM_OC_Start+0x1a8>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a22      	ldr	r2, [pc, #136]	; (80071c8 <HAL_TIM_OC_Start+0x210>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d00e      	beq.n	8007160 <HAL_TIM_OC_Start+0x1a8>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a1a      	ldr	r2, [pc, #104]	; (80071b0 <HAL_TIM_OC_Start+0x1f8>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d009      	beq.n	8007160 <HAL_TIM_OC_Start+0x1a8>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a1e      	ldr	r2, [pc, #120]	; (80071cc <HAL_TIM_OC_Start+0x214>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d004      	beq.n	8007160 <HAL_TIM_OC_Start+0x1a8>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a16      	ldr	r2, [pc, #88]	; (80071b4 <HAL_TIM_OC_Start+0x1fc>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d115      	bne.n	800718c <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689a      	ldr	r2, [r3, #8]
 8007166:	4b1a      	ldr	r3, [pc, #104]	; (80071d0 <HAL_TIM_OC_Start+0x218>)
 8007168:	4013      	ands	r3, r2
 800716a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b06      	cmp	r3, #6
 8007170:	d015      	beq.n	800719e <HAL_TIM_OC_Start+0x1e6>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007178:	d011      	beq.n	800719e <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f042 0201 	orr.w	r2, r2, #1
 8007188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800718a:	e008      	b.n	800719e <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f042 0201 	orr.w	r2, r2, #1
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	e000      	b.n	80071a0 <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800719e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	40010000 	.word	0x40010000
 80071b0:	40010400 	.word	0x40010400
 80071b4:	40014000 	.word	0x40014000
 80071b8:	40014400 	.word	0x40014400
 80071bc:	40014800 	.word	0x40014800
 80071c0:	40000400 	.word	0x40000400
 80071c4:	40000800 	.word	0x40000800
 80071c8:	40000c00 	.word	0x40000c00
 80071cc:	40001800 	.word	0x40001800
 80071d0:	00010007 	.word	0x00010007

080071d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d020      	beq.n	8007238 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01b      	beq.n	8007238 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f06f 0202 	mvn.w	r2, #2
 8007208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	f003 0303 	and.w	r3, r3, #3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fa5c 	bl	80076dc <HAL_TIM_IC_CaptureCallback>
 8007224:	e005      	b.n	8007232 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fa4e 	bl	80076c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fa5f 	bl	80076f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	f003 0304 	and.w	r3, r3, #4
 800723e:	2b00      	cmp	r3, #0
 8007240:	d020      	beq.n	8007284 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f003 0304 	and.w	r3, r3, #4
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01b      	beq.n	8007284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f06f 0204 	mvn.w	r2, #4
 8007254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2202      	movs	r2, #2
 800725a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fa36 	bl	80076dc <HAL_TIM_IC_CaptureCallback>
 8007270:	e005      	b.n	800727e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fa28 	bl	80076c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fa39 	bl	80076f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f003 0308 	and.w	r3, r3, #8
 800728a:	2b00      	cmp	r3, #0
 800728c:	d020      	beq.n	80072d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f003 0308 	and.w	r3, r3, #8
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01b      	beq.n	80072d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f06f 0208 	mvn.w	r2, #8
 80072a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2204      	movs	r2, #4
 80072a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	f003 0303 	and.w	r3, r3, #3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d003      	beq.n	80072be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fa10 	bl	80076dc <HAL_TIM_IC_CaptureCallback>
 80072bc:	e005      	b.n	80072ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fa02 	bl	80076c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fa13 	bl	80076f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f003 0310 	and.w	r3, r3, #16
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d020      	beq.n	800731c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f003 0310 	and.w	r3, r3, #16
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d01b      	beq.n	800731c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f06f 0210 	mvn.w	r2, #16
 80072ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2208      	movs	r2, #8
 80072f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f9ea 	bl	80076dc <HAL_TIM_IC_CaptureCallback>
 8007308:	e005      	b.n	8007316 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f9dc 	bl	80076c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f9ed 	bl	80076f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00c      	beq.n	8007340 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	2b00      	cmp	r3, #0
 800732e:	d007      	beq.n	8007340 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f06f 0201 	mvn.w	r2, #1
 8007338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7f9 fda2 	bl	8000e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007346:	2b00      	cmp	r3, #0
 8007348:	d104      	bne.n	8007354 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00c      	beq.n	800736e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800735a:	2b00      	cmp	r3, #0
 800735c:	d007      	beq.n	800736e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8007366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fead 	bl	80080c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00c      	beq.n	8007392 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800737e:	2b00      	cmp	r3, #0
 8007380:	d007      	beq.n	8007392 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800738a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fea5 	bl	80080dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00c      	beq.n	80073b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d007      	beq.n	80073b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f9a7 	bl	8007704 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	f003 0320 	and.w	r3, r3, #32
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00c      	beq.n	80073da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f003 0320 	and.w	r3, r3, #32
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d007      	beq.n	80073da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f06f 0220 	mvn.w	r2, #32
 80073d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fe6d 	bl	80080b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073da:	bf00      	nop
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
	...

080073e4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d101      	bne.n	8007402 <HAL_TIM_OC_ConfigChannel+0x1e>
 80073fe:	2302      	movs	r3, #2
 8007400:	e066      	b.n	80074d0 <HAL_TIM_OC_ConfigChannel+0xec>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b14      	cmp	r3, #20
 800740e:	d857      	bhi.n	80074c0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007410:	a201      	add	r2, pc, #4	; (adr r2, 8007418 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007416:	bf00      	nop
 8007418:	0800746d 	.word	0x0800746d
 800741c:	080074c1 	.word	0x080074c1
 8007420:	080074c1 	.word	0x080074c1
 8007424:	080074c1 	.word	0x080074c1
 8007428:	0800747b 	.word	0x0800747b
 800742c:	080074c1 	.word	0x080074c1
 8007430:	080074c1 	.word	0x080074c1
 8007434:	080074c1 	.word	0x080074c1
 8007438:	08007489 	.word	0x08007489
 800743c:	080074c1 	.word	0x080074c1
 8007440:	080074c1 	.word	0x080074c1
 8007444:	080074c1 	.word	0x080074c1
 8007448:	08007497 	.word	0x08007497
 800744c:	080074c1 	.word	0x080074c1
 8007450:	080074c1 	.word	0x080074c1
 8007454:	080074c1 	.word	0x080074c1
 8007458:	080074a5 	.word	0x080074a5
 800745c:	080074c1 	.word	0x080074c1
 8007460:	080074c1 	.word	0x080074c1
 8007464:	080074c1 	.word	0x080074c1
 8007468:	080074b3 	.word	0x080074b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68b9      	ldr	r1, [r7, #8]
 8007472:	4618      	mov	r0, r3
 8007474:	f000 f9f6 	bl	8007864 <TIM_OC1_SetConfig>
      break;
 8007478:	e025      	b.n	80074c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68b9      	ldr	r1, [r7, #8]
 8007480:	4618      	mov	r0, r3
 8007482:	f000 fa7f 	bl	8007984 <TIM_OC2_SetConfig>
      break;
 8007486:	e01e      	b.n	80074c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68b9      	ldr	r1, [r7, #8]
 800748e:	4618      	mov	r0, r3
 8007490:	f000 fb02 	bl	8007a98 <TIM_OC3_SetConfig>
      break;
 8007494:	e017      	b.n	80074c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68b9      	ldr	r1, [r7, #8]
 800749c:	4618      	mov	r0, r3
 800749e:	f000 fb83 	bl	8007ba8 <TIM_OC4_SetConfig>
      break;
 80074a2:	e010      	b.n	80074c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68b9      	ldr	r1, [r7, #8]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fbe6 	bl	8007c7c <TIM_OC5_SetConfig>
      break;
 80074b0:	e009      	b.n	80074c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68b9      	ldr	r1, [r7, #8]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f000 fc43 	bl	8007d44 <TIM_OC6_SetConfig>
      break;
 80074be:	e002      	b.n	80074c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	75fb      	strb	r3, [r7, #23]
      break;
 80074c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3718      	adds	r7, #24
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d101      	bne.n	80074f4 <HAL_TIM_ConfigClockSource+0x1c>
 80074f0:	2302      	movs	r3, #2
 80074f2:	e0dc      	b.n	80076ae <HAL_TIM_ConfigClockSource+0x1d6>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	4b6a      	ldr	r3, [pc, #424]	; (80076b8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007510:	4013      	ands	r3, r2
 8007512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800751a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a64      	ldr	r2, [pc, #400]	; (80076bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800752a:	4293      	cmp	r3, r2
 800752c:	f000 80a9 	beq.w	8007682 <HAL_TIM_ConfigClockSource+0x1aa>
 8007530:	4a62      	ldr	r2, [pc, #392]	; (80076bc <HAL_TIM_ConfigClockSource+0x1e4>)
 8007532:	4293      	cmp	r3, r2
 8007534:	f200 80ae 	bhi.w	8007694 <HAL_TIM_ConfigClockSource+0x1bc>
 8007538:	4a61      	ldr	r2, [pc, #388]	; (80076c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800753a:	4293      	cmp	r3, r2
 800753c:	f000 80a1 	beq.w	8007682 <HAL_TIM_ConfigClockSource+0x1aa>
 8007540:	4a5f      	ldr	r2, [pc, #380]	; (80076c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007542:	4293      	cmp	r3, r2
 8007544:	f200 80a6 	bhi.w	8007694 <HAL_TIM_ConfigClockSource+0x1bc>
 8007548:	4a5e      	ldr	r2, [pc, #376]	; (80076c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800754a:	4293      	cmp	r3, r2
 800754c:	f000 8099 	beq.w	8007682 <HAL_TIM_ConfigClockSource+0x1aa>
 8007550:	4a5c      	ldr	r2, [pc, #368]	; (80076c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007552:	4293      	cmp	r3, r2
 8007554:	f200 809e 	bhi.w	8007694 <HAL_TIM_ConfigClockSource+0x1bc>
 8007558:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800755c:	f000 8091 	beq.w	8007682 <HAL_TIM_ConfigClockSource+0x1aa>
 8007560:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007564:	f200 8096 	bhi.w	8007694 <HAL_TIM_ConfigClockSource+0x1bc>
 8007568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800756c:	f000 8089 	beq.w	8007682 <HAL_TIM_ConfigClockSource+0x1aa>
 8007570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007574:	f200 808e 	bhi.w	8007694 <HAL_TIM_ConfigClockSource+0x1bc>
 8007578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800757c:	d03e      	beq.n	80075fc <HAL_TIM_ConfigClockSource+0x124>
 800757e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007582:	f200 8087 	bhi.w	8007694 <HAL_TIM_ConfigClockSource+0x1bc>
 8007586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800758a:	f000 8086 	beq.w	800769a <HAL_TIM_ConfigClockSource+0x1c2>
 800758e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007592:	d87f      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x1bc>
 8007594:	2b70      	cmp	r3, #112	; 0x70
 8007596:	d01a      	beq.n	80075ce <HAL_TIM_ConfigClockSource+0xf6>
 8007598:	2b70      	cmp	r3, #112	; 0x70
 800759a:	d87b      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x1bc>
 800759c:	2b60      	cmp	r3, #96	; 0x60
 800759e:	d050      	beq.n	8007642 <HAL_TIM_ConfigClockSource+0x16a>
 80075a0:	2b60      	cmp	r3, #96	; 0x60
 80075a2:	d877      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x1bc>
 80075a4:	2b50      	cmp	r3, #80	; 0x50
 80075a6:	d03c      	beq.n	8007622 <HAL_TIM_ConfigClockSource+0x14a>
 80075a8:	2b50      	cmp	r3, #80	; 0x50
 80075aa:	d873      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x1bc>
 80075ac:	2b40      	cmp	r3, #64	; 0x40
 80075ae:	d058      	beq.n	8007662 <HAL_TIM_ConfigClockSource+0x18a>
 80075b0:	2b40      	cmp	r3, #64	; 0x40
 80075b2:	d86f      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x1bc>
 80075b4:	2b30      	cmp	r3, #48	; 0x30
 80075b6:	d064      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x1aa>
 80075b8:	2b30      	cmp	r3, #48	; 0x30
 80075ba:	d86b      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x1bc>
 80075bc:	2b20      	cmp	r3, #32
 80075be:	d060      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x1aa>
 80075c0:	2b20      	cmp	r3, #32
 80075c2:	d867      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x1bc>
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d05c      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x1aa>
 80075c8:	2b10      	cmp	r3, #16
 80075ca:	d05a      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x1aa>
 80075cc:	e062      	b.n	8007694 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075de:	f000 fc95 	bl	8007f0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	609a      	str	r2, [r3, #8]
      break;
 80075fa:	e04f      	b.n	800769c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800760c:	f000 fc7e 	bl	8007f0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800761e:	609a      	str	r2, [r3, #8]
      break;
 8007620:	e03c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800762e:	461a      	mov	r2, r3
 8007630:	f000 fbee 	bl	8007e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2150      	movs	r1, #80	; 0x50
 800763a:	4618      	mov	r0, r3
 800763c:	f000 fc48 	bl	8007ed0 <TIM_ITRx_SetConfig>
      break;
 8007640:	e02c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800764e:	461a      	mov	r2, r3
 8007650:	f000 fc0d 	bl	8007e6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2160      	movs	r1, #96	; 0x60
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fc38 	bl	8007ed0 <TIM_ITRx_SetConfig>
      break;
 8007660:	e01c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800766e:	461a      	mov	r2, r3
 8007670:	f000 fbce 	bl	8007e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2140      	movs	r1, #64	; 0x40
 800767a:	4618      	mov	r0, r3
 800767c:	f000 fc28 	bl	8007ed0 <TIM_ITRx_SetConfig>
      break;
 8007680:	e00c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4619      	mov	r1, r3
 800768c:	4610      	mov	r0, r2
 800768e:	f000 fc1f 	bl	8007ed0 <TIM_ITRx_SetConfig>
      break;
 8007692:	e003      	b.n	800769c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	73fb      	strb	r3, [r7, #15]
      break;
 8007698:	e000      	b.n	800769c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800769a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	ffceff88 	.word	0xffceff88
 80076bc:	00100040 	.word	0x00100040
 80076c0:	00100030 	.word	0x00100030
 80076c4:	00100020 	.word	0x00100020

080076c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a46      	ldr	r2, [pc, #280]	; (8007844 <TIM_Base_SetConfig+0x12c>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d013      	beq.n	8007758 <TIM_Base_SetConfig+0x40>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007736:	d00f      	beq.n	8007758 <TIM_Base_SetConfig+0x40>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a43      	ldr	r2, [pc, #268]	; (8007848 <TIM_Base_SetConfig+0x130>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d00b      	beq.n	8007758 <TIM_Base_SetConfig+0x40>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a42      	ldr	r2, [pc, #264]	; (800784c <TIM_Base_SetConfig+0x134>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d007      	beq.n	8007758 <TIM_Base_SetConfig+0x40>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a41      	ldr	r2, [pc, #260]	; (8007850 <TIM_Base_SetConfig+0x138>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d003      	beq.n	8007758 <TIM_Base_SetConfig+0x40>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a40      	ldr	r2, [pc, #256]	; (8007854 <TIM_Base_SetConfig+0x13c>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d108      	bne.n	800776a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800775e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	4313      	orrs	r3, r2
 8007768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a35      	ldr	r2, [pc, #212]	; (8007844 <TIM_Base_SetConfig+0x12c>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d01f      	beq.n	80077b2 <TIM_Base_SetConfig+0x9a>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007778:	d01b      	beq.n	80077b2 <TIM_Base_SetConfig+0x9a>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a32      	ldr	r2, [pc, #200]	; (8007848 <TIM_Base_SetConfig+0x130>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d017      	beq.n	80077b2 <TIM_Base_SetConfig+0x9a>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a31      	ldr	r2, [pc, #196]	; (800784c <TIM_Base_SetConfig+0x134>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d013      	beq.n	80077b2 <TIM_Base_SetConfig+0x9a>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a30      	ldr	r2, [pc, #192]	; (8007850 <TIM_Base_SetConfig+0x138>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d00f      	beq.n	80077b2 <TIM_Base_SetConfig+0x9a>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a2f      	ldr	r2, [pc, #188]	; (8007854 <TIM_Base_SetConfig+0x13c>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d00b      	beq.n	80077b2 <TIM_Base_SetConfig+0x9a>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a2e      	ldr	r2, [pc, #184]	; (8007858 <TIM_Base_SetConfig+0x140>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d007      	beq.n	80077b2 <TIM_Base_SetConfig+0x9a>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a2d      	ldr	r2, [pc, #180]	; (800785c <TIM_Base_SetConfig+0x144>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d003      	beq.n	80077b2 <TIM_Base_SetConfig+0x9a>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a2c      	ldr	r2, [pc, #176]	; (8007860 <TIM_Base_SetConfig+0x148>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d108      	bne.n	80077c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	689a      	ldr	r2, [r3, #8]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a16      	ldr	r2, [pc, #88]	; (8007844 <TIM_Base_SetConfig+0x12c>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d00f      	beq.n	8007810 <TIM_Base_SetConfig+0xf8>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a18      	ldr	r2, [pc, #96]	; (8007854 <TIM_Base_SetConfig+0x13c>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d00b      	beq.n	8007810 <TIM_Base_SetConfig+0xf8>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a17      	ldr	r2, [pc, #92]	; (8007858 <TIM_Base_SetConfig+0x140>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d007      	beq.n	8007810 <TIM_Base_SetConfig+0xf8>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a16      	ldr	r2, [pc, #88]	; (800785c <TIM_Base_SetConfig+0x144>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d003      	beq.n	8007810 <TIM_Base_SetConfig+0xf8>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a15      	ldr	r2, [pc, #84]	; (8007860 <TIM_Base_SetConfig+0x148>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d103      	bne.n	8007818 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	691a      	ldr	r2, [r3, #16]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b01      	cmp	r3, #1
 8007828:	d105      	bne.n	8007836 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	f023 0201 	bic.w	r2, r3, #1
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	611a      	str	r2, [r3, #16]
  }
}
 8007836:	bf00      	nop
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	40010000 	.word	0x40010000
 8007848:	40000400 	.word	0x40000400
 800784c:	40000800 	.word	0x40000800
 8007850:	40000c00 	.word	0x40000c00
 8007854:	40010400 	.word	0x40010400
 8007858:	40014000 	.word	0x40014000
 800785c:	40014400 	.word	0x40014400
 8007860:	40014800 	.word	0x40014800

08007864 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a1b      	ldr	r3, [r3, #32]
 8007878:	f023 0201 	bic.w	r2, r3, #1
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4b37      	ldr	r3, [pc, #220]	; (800796c <TIM_OC1_SetConfig+0x108>)
 8007890:	4013      	ands	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f023 0303 	bic.w	r3, r3, #3
 800789a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f023 0302 	bic.w	r3, r3, #2
 80078ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a2d      	ldr	r2, [pc, #180]	; (8007970 <TIM_OC1_SetConfig+0x10c>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d00f      	beq.n	80078e0 <TIM_OC1_SetConfig+0x7c>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a2c      	ldr	r2, [pc, #176]	; (8007974 <TIM_OC1_SetConfig+0x110>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d00b      	beq.n	80078e0 <TIM_OC1_SetConfig+0x7c>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a2b      	ldr	r2, [pc, #172]	; (8007978 <TIM_OC1_SetConfig+0x114>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d007      	beq.n	80078e0 <TIM_OC1_SetConfig+0x7c>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a2a      	ldr	r2, [pc, #168]	; (800797c <TIM_OC1_SetConfig+0x118>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d003      	beq.n	80078e0 <TIM_OC1_SetConfig+0x7c>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a29      	ldr	r2, [pc, #164]	; (8007980 <TIM_OC1_SetConfig+0x11c>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d10c      	bne.n	80078fa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f023 0308 	bic.w	r3, r3, #8
 80078e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f023 0304 	bic.w	r3, r3, #4
 80078f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a1c      	ldr	r2, [pc, #112]	; (8007970 <TIM_OC1_SetConfig+0x10c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d00f      	beq.n	8007922 <TIM_OC1_SetConfig+0xbe>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a1b      	ldr	r2, [pc, #108]	; (8007974 <TIM_OC1_SetConfig+0x110>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00b      	beq.n	8007922 <TIM_OC1_SetConfig+0xbe>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a1a      	ldr	r2, [pc, #104]	; (8007978 <TIM_OC1_SetConfig+0x114>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d007      	beq.n	8007922 <TIM_OC1_SetConfig+0xbe>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a19      	ldr	r2, [pc, #100]	; (800797c <TIM_OC1_SetConfig+0x118>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d003      	beq.n	8007922 <TIM_OC1_SetConfig+0xbe>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a18      	ldr	r2, [pc, #96]	; (8007980 <TIM_OC1_SetConfig+0x11c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d111      	bne.n	8007946 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	4313      	orrs	r3, r2
 800793a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	4313      	orrs	r3, r2
 8007944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	621a      	str	r2, [r3, #32]
}
 8007960:	bf00      	nop
 8007962:	371c      	adds	r7, #28
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	fffeff8f 	.word	0xfffeff8f
 8007970:	40010000 	.word	0x40010000
 8007974:	40010400 	.word	0x40010400
 8007978:	40014000 	.word	0x40014000
 800797c:	40014400 	.word	0x40014400
 8007980:	40014800 	.word	0x40014800

08007984 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007984:	b480      	push	{r7}
 8007986:	b087      	sub	sp, #28
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	f023 0210 	bic.w	r2, r3, #16
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	4b34      	ldr	r3, [pc, #208]	; (8007a80 <TIM_OC2_SetConfig+0xfc>)
 80079b0:	4013      	ands	r3, r2
 80079b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	021b      	lsls	r3, r3, #8
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f023 0320 	bic.w	r3, r3, #32
 80079ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	011b      	lsls	r3, r3, #4
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	4313      	orrs	r3, r2
 80079da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a29      	ldr	r2, [pc, #164]	; (8007a84 <TIM_OC2_SetConfig+0x100>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d003      	beq.n	80079ec <TIM_OC2_SetConfig+0x68>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a28      	ldr	r2, [pc, #160]	; (8007a88 <TIM_OC2_SetConfig+0x104>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d10d      	bne.n	8007a08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a1e      	ldr	r2, [pc, #120]	; (8007a84 <TIM_OC2_SetConfig+0x100>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d00f      	beq.n	8007a30 <TIM_OC2_SetConfig+0xac>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a1d      	ldr	r2, [pc, #116]	; (8007a88 <TIM_OC2_SetConfig+0x104>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d00b      	beq.n	8007a30 <TIM_OC2_SetConfig+0xac>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a1c      	ldr	r2, [pc, #112]	; (8007a8c <TIM_OC2_SetConfig+0x108>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d007      	beq.n	8007a30 <TIM_OC2_SetConfig+0xac>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a1b      	ldr	r2, [pc, #108]	; (8007a90 <TIM_OC2_SetConfig+0x10c>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d003      	beq.n	8007a30 <TIM_OC2_SetConfig+0xac>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a1a      	ldr	r2, [pc, #104]	; (8007a94 <TIM_OC2_SetConfig+0x110>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d113      	bne.n	8007a58 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	621a      	str	r2, [r3, #32]
}
 8007a72:	bf00      	nop
 8007a74:	371c      	adds	r7, #28
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	feff8fff 	.word	0xfeff8fff
 8007a84:	40010000 	.word	0x40010000
 8007a88:	40010400 	.word	0x40010400
 8007a8c:	40014000 	.word	0x40014000
 8007a90:	40014400 	.word	0x40014400
 8007a94:	40014800 	.word	0x40014800

08007a98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a1b      	ldr	r3, [r3, #32]
 8007aac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	4b33      	ldr	r3, [pc, #204]	; (8007b90 <TIM_OC3_SetConfig+0xf8>)
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f023 0303 	bic.w	r3, r3, #3
 8007ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	021b      	lsls	r3, r3, #8
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a28      	ldr	r2, [pc, #160]	; (8007b94 <TIM_OC3_SetConfig+0xfc>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d003      	beq.n	8007afe <TIM_OC3_SetConfig+0x66>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a27      	ldr	r2, [pc, #156]	; (8007b98 <TIM_OC3_SetConfig+0x100>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d10d      	bne.n	8007b1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	021b      	lsls	r3, r3, #8
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a1d      	ldr	r2, [pc, #116]	; (8007b94 <TIM_OC3_SetConfig+0xfc>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d00f      	beq.n	8007b42 <TIM_OC3_SetConfig+0xaa>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a1c      	ldr	r2, [pc, #112]	; (8007b98 <TIM_OC3_SetConfig+0x100>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d00b      	beq.n	8007b42 <TIM_OC3_SetConfig+0xaa>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a1b      	ldr	r2, [pc, #108]	; (8007b9c <TIM_OC3_SetConfig+0x104>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d007      	beq.n	8007b42 <TIM_OC3_SetConfig+0xaa>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a1a      	ldr	r2, [pc, #104]	; (8007ba0 <TIM_OC3_SetConfig+0x108>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d003      	beq.n	8007b42 <TIM_OC3_SetConfig+0xaa>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a19      	ldr	r2, [pc, #100]	; (8007ba4 <TIM_OC3_SetConfig+0x10c>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d113      	bne.n	8007b6a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	011b      	lsls	r3, r3, #4
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	011b      	lsls	r3, r3, #4
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	621a      	str	r2, [r3, #32]
}
 8007b84:	bf00      	nop
 8007b86:	371c      	adds	r7, #28
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	fffeff8f 	.word	0xfffeff8f
 8007b94:	40010000 	.word	0x40010000
 8007b98:	40010400 	.word	0x40010400
 8007b9c:	40014000 	.word	0x40014000
 8007ba0:	40014400 	.word	0x40014400
 8007ba4:	40014800 	.word	0x40014800

08007ba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b087      	sub	sp, #28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	4b24      	ldr	r3, [pc, #144]	; (8007c64 <TIM_OC4_SetConfig+0xbc>)
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	021b      	lsls	r3, r3, #8
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	031b      	lsls	r3, r3, #12
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a19      	ldr	r2, [pc, #100]	; (8007c68 <TIM_OC4_SetConfig+0xc0>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d00f      	beq.n	8007c28 <TIM_OC4_SetConfig+0x80>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a18      	ldr	r2, [pc, #96]	; (8007c6c <TIM_OC4_SetConfig+0xc4>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d00b      	beq.n	8007c28 <TIM_OC4_SetConfig+0x80>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a17      	ldr	r2, [pc, #92]	; (8007c70 <TIM_OC4_SetConfig+0xc8>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d007      	beq.n	8007c28 <TIM_OC4_SetConfig+0x80>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a16      	ldr	r2, [pc, #88]	; (8007c74 <TIM_OC4_SetConfig+0xcc>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d003      	beq.n	8007c28 <TIM_OC4_SetConfig+0x80>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a15      	ldr	r2, [pc, #84]	; (8007c78 <TIM_OC4_SetConfig+0xd0>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d109      	bne.n	8007c3c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	019b      	lsls	r3, r3, #6
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	697a      	ldr	r2, [r7, #20]
 8007c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	621a      	str	r2, [r3, #32]
}
 8007c56:	bf00      	nop
 8007c58:	371c      	adds	r7, #28
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	feff8fff 	.word	0xfeff8fff
 8007c68:	40010000 	.word	0x40010000
 8007c6c:	40010400 	.word	0x40010400
 8007c70:	40014000 	.word	0x40014000
 8007c74:	40014400 	.word	0x40014400
 8007c78:	40014800 	.word	0x40014800

08007c7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	4b21      	ldr	r3, [pc, #132]	; (8007d2c <TIM_OC5_SetConfig+0xb0>)
 8007ca8:	4013      	ands	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007cbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	041b      	lsls	r3, r3, #16
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a18      	ldr	r2, [pc, #96]	; (8007d30 <TIM_OC5_SetConfig+0xb4>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d00f      	beq.n	8007cf2 <TIM_OC5_SetConfig+0x76>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a17      	ldr	r2, [pc, #92]	; (8007d34 <TIM_OC5_SetConfig+0xb8>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d00b      	beq.n	8007cf2 <TIM_OC5_SetConfig+0x76>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a16      	ldr	r2, [pc, #88]	; (8007d38 <TIM_OC5_SetConfig+0xbc>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d007      	beq.n	8007cf2 <TIM_OC5_SetConfig+0x76>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a15      	ldr	r2, [pc, #84]	; (8007d3c <TIM_OC5_SetConfig+0xc0>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d003      	beq.n	8007cf2 <TIM_OC5_SetConfig+0x76>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a14      	ldr	r2, [pc, #80]	; (8007d40 <TIM_OC5_SetConfig+0xc4>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d109      	bne.n	8007d06 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	021b      	lsls	r3, r3, #8
 8007d00:	697a      	ldr	r2, [r7, #20]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	621a      	str	r2, [r3, #32]
}
 8007d20:	bf00      	nop
 8007d22:	371c      	adds	r7, #28
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	fffeff8f 	.word	0xfffeff8f
 8007d30:	40010000 	.word	0x40010000
 8007d34:	40010400 	.word	0x40010400
 8007d38:	40014000 	.word	0x40014000
 8007d3c:	40014400 	.word	0x40014400
 8007d40:	40014800 	.word	0x40014800

08007d44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a1b      	ldr	r3, [r3, #32]
 8007d58:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	4b22      	ldr	r3, [pc, #136]	; (8007df8 <TIM_OC6_SetConfig+0xb4>)
 8007d70:	4013      	ands	r3, r2
 8007d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	021b      	lsls	r3, r3, #8
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	051b      	lsls	r3, r3, #20
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a19      	ldr	r2, [pc, #100]	; (8007dfc <TIM_OC6_SetConfig+0xb8>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d00f      	beq.n	8007dbc <TIM_OC6_SetConfig+0x78>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a18      	ldr	r2, [pc, #96]	; (8007e00 <TIM_OC6_SetConfig+0xbc>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d00b      	beq.n	8007dbc <TIM_OC6_SetConfig+0x78>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a17      	ldr	r2, [pc, #92]	; (8007e04 <TIM_OC6_SetConfig+0xc0>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d007      	beq.n	8007dbc <TIM_OC6_SetConfig+0x78>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a16      	ldr	r2, [pc, #88]	; (8007e08 <TIM_OC6_SetConfig+0xc4>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d003      	beq.n	8007dbc <TIM_OC6_SetConfig+0x78>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a15      	ldr	r2, [pc, #84]	; (8007e0c <TIM_OC6_SetConfig+0xc8>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d109      	bne.n	8007dd0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	029b      	lsls	r3, r3, #10
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	621a      	str	r2, [r3, #32]
}
 8007dea:	bf00      	nop
 8007dec:	371c      	adds	r7, #28
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	feff8fff 	.word	0xfeff8fff
 8007dfc:	40010000 	.word	0x40010000
 8007e00:	40010400 	.word	0x40010400
 8007e04:	40014000 	.word	0x40014000
 8007e08:	40014400 	.word	0x40014400
 8007e0c:	40014800 	.word	0x40014800

08007e10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	f023 0201 	bic.w	r2, r3, #1
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	011b      	lsls	r3, r3, #4
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f023 030a 	bic.w	r3, r3, #10
 8007e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	621a      	str	r2, [r3, #32]
}
 8007e62:	bf00      	nop
 8007e64:	371c      	adds	r7, #28
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b087      	sub	sp, #28
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	60f8      	str	r0, [r7, #12]
 8007e76:	60b9      	str	r1, [r7, #8]
 8007e78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6a1b      	ldr	r3, [r3, #32]
 8007e84:	f023 0210 	bic.w	r2, r3, #16
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	031b      	lsls	r3, r3, #12
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007eaa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	011b      	lsls	r3, r3, #4
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	621a      	str	r2, [r3, #32]
}
 8007ec2:	bf00      	nop
 8007ec4:	371c      	adds	r7, #28
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
	...

08007ed0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	4b09      	ldr	r3, [pc, #36]	; (8007f08 <TIM_ITRx_SetConfig+0x38>)
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	f043 0307 	orr.w	r3, r3, #7
 8007ef2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	609a      	str	r2, [r3, #8]
}
 8007efa:	bf00      	nop
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	ffcfff8f 	.word	0xffcfff8f

08007f0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	021a      	lsls	r2, r3, #8
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	431a      	orrs	r2, r3
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	609a      	str	r2, [r3, #8]
}
 8007f40:	bf00      	nop
 8007f42:	371c      	adds	r7, #28
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	f003 031f 	and.w	r3, r3, #31
 8007f5e:	2201      	movs	r2, #1
 8007f60:	fa02 f303 	lsl.w	r3, r2, r3
 8007f64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6a1a      	ldr	r2, [r3, #32]
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	43db      	mvns	r3, r3
 8007f6e:	401a      	ands	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6a1a      	ldr	r2, [r3, #32]
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	f003 031f 	and.w	r3, r3, #31
 8007f7e:	6879      	ldr	r1, [r7, #4]
 8007f80:	fa01 f303 	lsl.w	r3, r1, r3
 8007f84:	431a      	orrs	r2, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	621a      	str	r2, [r3, #32]
}
 8007f8a:	bf00      	nop
 8007f8c:	371c      	adds	r7, #28
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
	...

08007f98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d101      	bne.n	8007fb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fac:	2302      	movs	r3, #2
 8007fae:	e06d      	b.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a30      	ldr	r2, [pc, #192]	; (8008098 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d004      	beq.n	8007fe4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a2f      	ldr	r2, [pc, #188]	; (800809c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d108      	bne.n	8007ff6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007fea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ffc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	4313      	orrs	r3, r2
 8008006:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a20      	ldr	r2, [pc, #128]	; (8008098 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d022      	beq.n	8008060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008022:	d01d      	beq.n	8008060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a1d      	ldr	r2, [pc, #116]	; (80080a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d018      	beq.n	8008060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a1c      	ldr	r2, [pc, #112]	; (80080a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d013      	beq.n	8008060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a1a      	ldr	r2, [pc, #104]	; (80080a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d00e      	beq.n	8008060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a15      	ldr	r2, [pc, #84]	; (800809c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d009      	beq.n	8008060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a16      	ldr	r2, [pc, #88]	; (80080ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d004      	beq.n	8008060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a15      	ldr	r2, [pc, #84]	; (80080b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d10c      	bne.n	800807a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008066:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	4313      	orrs	r3, r2
 8008070:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr
 8008098:	40010000 	.word	0x40010000
 800809c:	40010400 	.word	0x40010400
 80080a0:	40000400 	.word	0x40000400
 80080a4:	40000800 	.word	0x40000800
 80080a8:	40000c00 	.word	0x40000c00
 80080ac:	40001800 	.word	0x40001800
 80080b0:	40014000 	.word	0x40014000

080080b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e042      	b.n	8008188 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008108:	2b00      	cmp	r3, #0
 800810a:	d106      	bne.n	800811a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7f8 ffd3 	bl	80010c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2224      	movs	r2, #36	; 0x24
 800811e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f022 0201 	bic.w	r2, r2, #1
 8008130:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008136:	2b00      	cmp	r3, #0
 8008138:	d002      	beq.n	8008140 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fd90 	bl	8008c60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f825 	bl	8008190 <UART_SetConfig>
 8008146:	4603      	mov	r3, r0
 8008148:	2b01      	cmp	r3, #1
 800814a:	d101      	bne.n	8008150 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e01b      	b.n	8008188 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800815e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	689a      	ldr	r2, [r3, #8]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800816e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f042 0201 	orr.w	r2, r2, #1
 800817e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fe0f 	bl	8008da4 <UART_CheckIdleState>
 8008186:	4603      	mov	r3, r0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008194:	b092      	sub	sp, #72	; 0x48
 8008196:	af00      	add	r7, sp, #0
 8008198:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	431a      	orrs	r2, r3
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	431a      	orrs	r2, r3
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	4bbe      	ldr	r3, [pc, #760]	; (80084b8 <UART_SetConfig+0x328>)
 80081c0:	4013      	ands	r3, r2
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	6812      	ldr	r2, [r2, #0]
 80081c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081c8:	430b      	orrs	r3, r1
 80081ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	68da      	ldr	r2, [r3, #12]
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	430a      	orrs	r2, r1
 80081e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4ab3      	ldr	r2, [pc, #716]	; (80084bc <UART_SetConfig+0x32c>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d004      	beq.n	80081fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081f8:	4313      	orrs	r3, r2
 80081fa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689a      	ldr	r2, [r3, #8]
 8008202:	4baf      	ldr	r3, [pc, #700]	; (80084c0 <UART_SetConfig+0x330>)
 8008204:	4013      	ands	r3, r2
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	6812      	ldr	r2, [r2, #0]
 800820a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800820c:	430b      	orrs	r3, r1
 800820e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008216:	f023 010f 	bic.w	r1, r3, #15
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4aa6      	ldr	r2, [pc, #664]	; (80084c4 <UART_SetConfig+0x334>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d177      	bne.n	8008320 <UART_SetConfig+0x190>
 8008230:	4ba5      	ldr	r3, [pc, #660]	; (80084c8 <UART_SetConfig+0x338>)
 8008232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008234:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008238:	2b28      	cmp	r3, #40	; 0x28
 800823a:	d86d      	bhi.n	8008318 <UART_SetConfig+0x188>
 800823c:	a201      	add	r2, pc, #4	; (adr r2, 8008244 <UART_SetConfig+0xb4>)
 800823e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008242:	bf00      	nop
 8008244:	080082e9 	.word	0x080082e9
 8008248:	08008319 	.word	0x08008319
 800824c:	08008319 	.word	0x08008319
 8008250:	08008319 	.word	0x08008319
 8008254:	08008319 	.word	0x08008319
 8008258:	08008319 	.word	0x08008319
 800825c:	08008319 	.word	0x08008319
 8008260:	08008319 	.word	0x08008319
 8008264:	080082f1 	.word	0x080082f1
 8008268:	08008319 	.word	0x08008319
 800826c:	08008319 	.word	0x08008319
 8008270:	08008319 	.word	0x08008319
 8008274:	08008319 	.word	0x08008319
 8008278:	08008319 	.word	0x08008319
 800827c:	08008319 	.word	0x08008319
 8008280:	08008319 	.word	0x08008319
 8008284:	080082f9 	.word	0x080082f9
 8008288:	08008319 	.word	0x08008319
 800828c:	08008319 	.word	0x08008319
 8008290:	08008319 	.word	0x08008319
 8008294:	08008319 	.word	0x08008319
 8008298:	08008319 	.word	0x08008319
 800829c:	08008319 	.word	0x08008319
 80082a0:	08008319 	.word	0x08008319
 80082a4:	08008301 	.word	0x08008301
 80082a8:	08008319 	.word	0x08008319
 80082ac:	08008319 	.word	0x08008319
 80082b0:	08008319 	.word	0x08008319
 80082b4:	08008319 	.word	0x08008319
 80082b8:	08008319 	.word	0x08008319
 80082bc:	08008319 	.word	0x08008319
 80082c0:	08008319 	.word	0x08008319
 80082c4:	08008309 	.word	0x08008309
 80082c8:	08008319 	.word	0x08008319
 80082cc:	08008319 	.word	0x08008319
 80082d0:	08008319 	.word	0x08008319
 80082d4:	08008319 	.word	0x08008319
 80082d8:	08008319 	.word	0x08008319
 80082dc:	08008319 	.word	0x08008319
 80082e0:	08008319 	.word	0x08008319
 80082e4:	08008311 	.word	0x08008311
 80082e8:	2301      	movs	r3, #1
 80082ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ee:	e222      	b.n	8008736 <UART_SetConfig+0x5a6>
 80082f0:	2304      	movs	r3, #4
 80082f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082f6:	e21e      	b.n	8008736 <UART_SetConfig+0x5a6>
 80082f8:	2308      	movs	r3, #8
 80082fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082fe:	e21a      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008300:	2310      	movs	r3, #16
 8008302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008306:	e216      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008308:	2320      	movs	r3, #32
 800830a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800830e:	e212      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008310:	2340      	movs	r3, #64	; 0x40
 8008312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008316:	e20e      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008318:	2380      	movs	r3, #128	; 0x80
 800831a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800831e:	e20a      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a69      	ldr	r2, [pc, #420]	; (80084cc <UART_SetConfig+0x33c>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d130      	bne.n	800838c <UART_SetConfig+0x1fc>
 800832a:	4b67      	ldr	r3, [pc, #412]	; (80084c8 <UART_SetConfig+0x338>)
 800832c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800832e:	f003 0307 	and.w	r3, r3, #7
 8008332:	2b05      	cmp	r3, #5
 8008334:	d826      	bhi.n	8008384 <UART_SetConfig+0x1f4>
 8008336:	a201      	add	r2, pc, #4	; (adr r2, 800833c <UART_SetConfig+0x1ac>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	08008355 	.word	0x08008355
 8008340:	0800835d 	.word	0x0800835d
 8008344:	08008365 	.word	0x08008365
 8008348:	0800836d 	.word	0x0800836d
 800834c:	08008375 	.word	0x08008375
 8008350:	0800837d 	.word	0x0800837d
 8008354:	2300      	movs	r3, #0
 8008356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835a:	e1ec      	b.n	8008736 <UART_SetConfig+0x5a6>
 800835c:	2304      	movs	r3, #4
 800835e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008362:	e1e8      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008364:	2308      	movs	r3, #8
 8008366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836a:	e1e4      	b.n	8008736 <UART_SetConfig+0x5a6>
 800836c:	2310      	movs	r3, #16
 800836e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008372:	e1e0      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008374:	2320      	movs	r3, #32
 8008376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800837a:	e1dc      	b.n	8008736 <UART_SetConfig+0x5a6>
 800837c:	2340      	movs	r3, #64	; 0x40
 800837e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008382:	e1d8      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008384:	2380      	movs	r3, #128	; 0x80
 8008386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800838a:	e1d4      	b.n	8008736 <UART_SetConfig+0x5a6>
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a4f      	ldr	r2, [pc, #316]	; (80084d0 <UART_SetConfig+0x340>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d130      	bne.n	80083f8 <UART_SetConfig+0x268>
 8008396:	4b4c      	ldr	r3, [pc, #304]	; (80084c8 <UART_SetConfig+0x338>)
 8008398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800839a:	f003 0307 	and.w	r3, r3, #7
 800839e:	2b05      	cmp	r3, #5
 80083a0:	d826      	bhi.n	80083f0 <UART_SetConfig+0x260>
 80083a2:	a201      	add	r2, pc, #4	; (adr r2, 80083a8 <UART_SetConfig+0x218>)
 80083a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a8:	080083c1 	.word	0x080083c1
 80083ac:	080083c9 	.word	0x080083c9
 80083b0:	080083d1 	.word	0x080083d1
 80083b4:	080083d9 	.word	0x080083d9
 80083b8:	080083e1 	.word	0x080083e1
 80083bc:	080083e9 	.word	0x080083e9
 80083c0:	2300      	movs	r3, #0
 80083c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c6:	e1b6      	b.n	8008736 <UART_SetConfig+0x5a6>
 80083c8:	2304      	movs	r3, #4
 80083ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ce:	e1b2      	b.n	8008736 <UART_SetConfig+0x5a6>
 80083d0:	2308      	movs	r3, #8
 80083d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083d6:	e1ae      	b.n	8008736 <UART_SetConfig+0x5a6>
 80083d8:	2310      	movs	r3, #16
 80083da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083de:	e1aa      	b.n	8008736 <UART_SetConfig+0x5a6>
 80083e0:	2320      	movs	r3, #32
 80083e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083e6:	e1a6      	b.n	8008736 <UART_SetConfig+0x5a6>
 80083e8:	2340      	movs	r3, #64	; 0x40
 80083ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ee:	e1a2      	b.n	8008736 <UART_SetConfig+0x5a6>
 80083f0:	2380      	movs	r3, #128	; 0x80
 80083f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083f6:	e19e      	b.n	8008736 <UART_SetConfig+0x5a6>
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a35      	ldr	r2, [pc, #212]	; (80084d4 <UART_SetConfig+0x344>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d130      	bne.n	8008464 <UART_SetConfig+0x2d4>
 8008402:	4b31      	ldr	r3, [pc, #196]	; (80084c8 <UART_SetConfig+0x338>)
 8008404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008406:	f003 0307 	and.w	r3, r3, #7
 800840a:	2b05      	cmp	r3, #5
 800840c:	d826      	bhi.n	800845c <UART_SetConfig+0x2cc>
 800840e:	a201      	add	r2, pc, #4	; (adr r2, 8008414 <UART_SetConfig+0x284>)
 8008410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008414:	0800842d 	.word	0x0800842d
 8008418:	08008435 	.word	0x08008435
 800841c:	0800843d 	.word	0x0800843d
 8008420:	08008445 	.word	0x08008445
 8008424:	0800844d 	.word	0x0800844d
 8008428:	08008455 	.word	0x08008455
 800842c:	2300      	movs	r3, #0
 800842e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008432:	e180      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008434:	2304      	movs	r3, #4
 8008436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800843a:	e17c      	b.n	8008736 <UART_SetConfig+0x5a6>
 800843c:	2308      	movs	r3, #8
 800843e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008442:	e178      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008444:	2310      	movs	r3, #16
 8008446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800844a:	e174      	b.n	8008736 <UART_SetConfig+0x5a6>
 800844c:	2320      	movs	r3, #32
 800844e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008452:	e170      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008454:	2340      	movs	r3, #64	; 0x40
 8008456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800845a:	e16c      	b.n	8008736 <UART_SetConfig+0x5a6>
 800845c:	2380      	movs	r3, #128	; 0x80
 800845e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008462:	e168      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a1b      	ldr	r2, [pc, #108]	; (80084d8 <UART_SetConfig+0x348>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d142      	bne.n	80084f4 <UART_SetConfig+0x364>
 800846e:	4b16      	ldr	r3, [pc, #88]	; (80084c8 <UART_SetConfig+0x338>)
 8008470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008472:	f003 0307 	and.w	r3, r3, #7
 8008476:	2b05      	cmp	r3, #5
 8008478:	d838      	bhi.n	80084ec <UART_SetConfig+0x35c>
 800847a:	a201      	add	r2, pc, #4	; (adr r2, 8008480 <UART_SetConfig+0x2f0>)
 800847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008480:	08008499 	.word	0x08008499
 8008484:	080084a1 	.word	0x080084a1
 8008488:	080084a9 	.word	0x080084a9
 800848c:	080084b1 	.word	0x080084b1
 8008490:	080084dd 	.word	0x080084dd
 8008494:	080084e5 	.word	0x080084e5
 8008498:	2300      	movs	r3, #0
 800849a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800849e:	e14a      	b.n	8008736 <UART_SetConfig+0x5a6>
 80084a0:	2304      	movs	r3, #4
 80084a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084a6:	e146      	b.n	8008736 <UART_SetConfig+0x5a6>
 80084a8:	2308      	movs	r3, #8
 80084aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ae:	e142      	b.n	8008736 <UART_SetConfig+0x5a6>
 80084b0:	2310      	movs	r3, #16
 80084b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084b6:	e13e      	b.n	8008736 <UART_SetConfig+0x5a6>
 80084b8:	cfff69f3 	.word	0xcfff69f3
 80084bc:	58000c00 	.word	0x58000c00
 80084c0:	11fff4ff 	.word	0x11fff4ff
 80084c4:	40011000 	.word	0x40011000
 80084c8:	58024400 	.word	0x58024400
 80084cc:	40004400 	.word	0x40004400
 80084d0:	40004800 	.word	0x40004800
 80084d4:	40004c00 	.word	0x40004c00
 80084d8:	40005000 	.word	0x40005000
 80084dc:	2320      	movs	r3, #32
 80084de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084e2:	e128      	b.n	8008736 <UART_SetConfig+0x5a6>
 80084e4:	2340      	movs	r3, #64	; 0x40
 80084e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ea:	e124      	b.n	8008736 <UART_SetConfig+0x5a6>
 80084ec:	2380      	movs	r3, #128	; 0x80
 80084ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084f2:	e120      	b.n	8008736 <UART_SetConfig+0x5a6>
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4acb      	ldr	r2, [pc, #812]	; (8008828 <UART_SetConfig+0x698>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d176      	bne.n	80085ec <UART_SetConfig+0x45c>
 80084fe:	4bcb      	ldr	r3, [pc, #812]	; (800882c <UART_SetConfig+0x69c>)
 8008500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008506:	2b28      	cmp	r3, #40	; 0x28
 8008508:	d86c      	bhi.n	80085e4 <UART_SetConfig+0x454>
 800850a:	a201      	add	r2, pc, #4	; (adr r2, 8008510 <UART_SetConfig+0x380>)
 800850c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008510:	080085b5 	.word	0x080085b5
 8008514:	080085e5 	.word	0x080085e5
 8008518:	080085e5 	.word	0x080085e5
 800851c:	080085e5 	.word	0x080085e5
 8008520:	080085e5 	.word	0x080085e5
 8008524:	080085e5 	.word	0x080085e5
 8008528:	080085e5 	.word	0x080085e5
 800852c:	080085e5 	.word	0x080085e5
 8008530:	080085bd 	.word	0x080085bd
 8008534:	080085e5 	.word	0x080085e5
 8008538:	080085e5 	.word	0x080085e5
 800853c:	080085e5 	.word	0x080085e5
 8008540:	080085e5 	.word	0x080085e5
 8008544:	080085e5 	.word	0x080085e5
 8008548:	080085e5 	.word	0x080085e5
 800854c:	080085e5 	.word	0x080085e5
 8008550:	080085c5 	.word	0x080085c5
 8008554:	080085e5 	.word	0x080085e5
 8008558:	080085e5 	.word	0x080085e5
 800855c:	080085e5 	.word	0x080085e5
 8008560:	080085e5 	.word	0x080085e5
 8008564:	080085e5 	.word	0x080085e5
 8008568:	080085e5 	.word	0x080085e5
 800856c:	080085e5 	.word	0x080085e5
 8008570:	080085cd 	.word	0x080085cd
 8008574:	080085e5 	.word	0x080085e5
 8008578:	080085e5 	.word	0x080085e5
 800857c:	080085e5 	.word	0x080085e5
 8008580:	080085e5 	.word	0x080085e5
 8008584:	080085e5 	.word	0x080085e5
 8008588:	080085e5 	.word	0x080085e5
 800858c:	080085e5 	.word	0x080085e5
 8008590:	080085d5 	.word	0x080085d5
 8008594:	080085e5 	.word	0x080085e5
 8008598:	080085e5 	.word	0x080085e5
 800859c:	080085e5 	.word	0x080085e5
 80085a0:	080085e5 	.word	0x080085e5
 80085a4:	080085e5 	.word	0x080085e5
 80085a8:	080085e5 	.word	0x080085e5
 80085ac:	080085e5 	.word	0x080085e5
 80085b0:	080085dd 	.word	0x080085dd
 80085b4:	2301      	movs	r3, #1
 80085b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ba:	e0bc      	b.n	8008736 <UART_SetConfig+0x5a6>
 80085bc:	2304      	movs	r3, #4
 80085be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085c2:	e0b8      	b.n	8008736 <UART_SetConfig+0x5a6>
 80085c4:	2308      	movs	r3, #8
 80085c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ca:	e0b4      	b.n	8008736 <UART_SetConfig+0x5a6>
 80085cc:	2310      	movs	r3, #16
 80085ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085d2:	e0b0      	b.n	8008736 <UART_SetConfig+0x5a6>
 80085d4:	2320      	movs	r3, #32
 80085d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085da:	e0ac      	b.n	8008736 <UART_SetConfig+0x5a6>
 80085dc:	2340      	movs	r3, #64	; 0x40
 80085de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085e2:	e0a8      	b.n	8008736 <UART_SetConfig+0x5a6>
 80085e4:	2380      	movs	r3, #128	; 0x80
 80085e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ea:	e0a4      	b.n	8008736 <UART_SetConfig+0x5a6>
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a8f      	ldr	r2, [pc, #572]	; (8008830 <UART_SetConfig+0x6a0>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d130      	bne.n	8008658 <UART_SetConfig+0x4c8>
 80085f6:	4b8d      	ldr	r3, [pc, #564]	; (800882c <UART_SetConfig+0x69c>)
 80085f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085fa:	f003 0307 	and.w	r3, r3, #7
 80085fe:	2b05      	cmp	r3, #5
 8008600:	d826      	bhi.n	8008650 <UART_SetConfig+0x4c0>
 8008602:	a201      	add	r2, pc, #4	; (adr r2, 8008608 <UART_SetConfig+0x478>)
 8008604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008608:	08008621 	.word	0x08008621
 800860c:	08008629 	.word	0x08008629
 8008610:	08008631 	.word	0x08008631
 8008614:	08008639 	.word	0x08008639
 8008618:	08008641 	.word	0x08008641
 800861c:	08008649 	.word	0x08008649
 8008620:	2300      	movs	r3, #0
 8008622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008626:	e086      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008628:	2304      	movs	r3, #4
 800862a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800862e:	e082      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008630:	2308      	movs	r3, #8
 8008632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008636:	e07e      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008638:	2310      	movs	r3, #16
 800863a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800863e:	e07a      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008640:	2320      	movs	r3, #32
 8008642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008646:	e076      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008648:	2340      	movs	r3, #64	; 0x40
 800864a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800864e:	e072      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008650:	2380      	movs	r3, #128	; 0x80
 8008652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008656:	e06e      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a75      	ldr	r2, [pc, #468]	; (8008834 <UART_SetConfig+0x6a4>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d130      	bne.n	80086c4 <UART_SetConfig+0x534>
 8008662:	4b72      	ldr	r3, [pc, #456]	; (800882c <UART_SetConfig+0x69c>)
 8008664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008666:	f003 0307 	and.w	r3, r3, #7
 800866a:	2b05      	cmp	r3, #5
 800866c:	d826      	bhi.n	80086bc <UART_SetConfig+0x52c>
 800866e:	a201      	add	r2, pc, #4	; (adr r2, 8008674 <UART_SetConfig+0x4e4>)
 8008670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008674:	0800868d 	.word	0x0800868d
 8008678:	08008695 	.word	0x08008695
 800867c:	0800869d 	.word	0x0800869d
 8008680:	080086a5 	.word	0x080086a5
 8008684:	080086ad 	.word	0x080086ad
 8008688:	080086b5 	.word	0x080086b5
 800868c:	2300      	movs	r3, #0
 800868e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008692:	e050      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008694:	2304      	movs	r3, #4
 8008696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800869a:	e04c      	b.n	8008736 <UART_SetConfig+0x5a6>
 800869c:	2308      	movs	r3, #8
 800869e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086a2:	e048      	b.n	8008736 <UART_SetConfig+0x5a6>
 80086a4:	2310      	movs	r3, #16
 80086a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086aa:	e044      	b.n	8008736 <UART_SetConfig+0x5a6>
 80086ac:	2320      	movs	r3, #32
 80086ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086b2:	e040      	b.n	8008736 <UART_SetConfig+0x5a6>
 80086b4:	2340      	movs	r3, #64	; 0x40
 80086b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ba:	e03c      	b.n	8008736 <UART_SetConfig+0x5a6>
 80086bc:	2380      	movs	r3, #128	; 0x80
 80086be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086c2:	e038      	b.n	8008736 <UART_SetConfig+0x5a6>
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a5b      	ldr	r2, [pc, #364]	; (8008838 <UART_SetConfig+0x6a8>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d130      	bne.n	8008730 <UART_SetConfig+0x5a0>
 80086ce:	4b57      	ldr	r3, [pc, #348]	; (800882c <UART_SetConfig+0x69c>)
 80086d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086d2:	f003 0307 	and.w	r3, r3, #7
 80086d6:	2b05      	cmp	r3, #5
 80086d8:	d826      	bhi.n	8008728 <UART_SetConfig+0x598>
 80086da:	a201      	add	r2, pc, #4	; (adr r2, 80086e0 <UART_SetConfig+0x550>)
 80086dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e0:	080086f9 	.word	0x080086f9
 80086e4:	08008701 	.word	0x08008701
 80086e8:	08008709 	.word	0x08008709
 80086ec:	08008711 	.word	0x08008711
 80086f0:	08008719 	.word	0x08008719
 80086f4:	08008721 	.word	0x08008721
 80086f8:	2302      	movs	r3, #2
 80086fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086fe:	e01a      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008700:	2304      	movs	r3, #4
 8008702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008706:	e016      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008708:	2308      	movs	r3, #8
 800870a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800870e:	e012      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008710:	2310      	movs	r3, #16
 8008712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008716:	e00e      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008718:	2320      	movs	r3, #32
 800871a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800871e:	e00a      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008720:	2340      	movs	r3, #64	; 0x40
 8008722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008726:	e006      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008728:	2380      	movs	r3, #128	; 0x80
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800872e:	e002      	b.n	8008736 <UART_SetConfig+0x5a6>
 8008730:	2380      	movs	r3, #128	; 0x80
 8008732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a3f      	ldr	r2, [pc, #252]	; (8008838 <UART_SetConfig+0x6a8>)
 800873c:	4293      	cmp	r3, r2
 800873e:	f040 80f8 	bne.w	8008932 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008742:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008746:	2b20      	cmp	r3, #32
 8008748:	dc46      	bgt.n	80087d8 <UART_SetConfig+0x648>
 800874a:	2b02      	cmp	r3, #2
 800874c:	f2c0 8082 	blt.w	8008854 <UART_SetConfig+0x6c4>
 8008750:	3b02      	subs	r3, #2
 8008752:	2b1e      	cmp	r3, #30
 8008754:	d87e      	bhi.n	8008854 <UART_SetConfig+0x6c4>
 8008756:	a201      	add	r2, pc, #4	; (adr r2, 800875c <UART_SetConfig+0x5cc>)
 8008758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875c:	080087df 	.word	0x080087df
 8008760:	08008855 	.word	0x08008855
 8008764:	080087e7 	.word	0x080087e7
 8008768:	08008855 	.word	0x08008855
 800876c:	08008855 	.word	0x08008855
 8008770:	08008855 	.word	0x08008855
 8008774:	080087f7 	.word	0x080087f7
 8008778:	08008855 	.word	0x08008855
 800877c:	08008855 	.word	0x08008855
 8008780:	08008855 	.word	0x08008855
 8008784:	08008855 	.word	0x08008855
 8008788:	08008855 	.word	0x08008855
 800878c:	08008855 	.word	0x08008855
 8008790:	08008855 	.word	0x08008855
 8008794:	08008807 	.word	0x08008807
 8008798:	08008855 	.word	0x08008855
 800879c:	08008855 	.word	0x08008855
 80087a0:	08008855 	.word	0x08008855
 80087a4:	08008855 	.word	0x08008855
 80087a8:	08008855 	.word	0x08008855
 80087ac:	08008855 	.word	0x08008855
 80087b0:	08008855 	.word	0x08008855
 80087b4:	08008855 	.word	0x08008855
 80087b8:	08008855 	.word	0x08008855
 80087bc:	08008855 	.word	0x08008855
 80087c0:	08008855 	.word	0x08008855
 80087c4:	08008855 	.word	0x08008855
 80087c8:	08008855 	.word	0x08008855
 80087cc:	08008855 	.word	0x08008855
 80087d0:	08008855 	.word	0x08008855
 80087d4:	08008847 	.word	0x08008847
 80087d8:	2b40      	cmp	r3, #64	; 0x40
 80087da:	d037      	beq.n	800884c <UART_SetConfig+0x6bc>
 80087dc:	e03a      	b.n	8008854 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80087de:	f7fd fdf9 	bl	80063d4 <HAL_RCCEx_GetD3PCLK1Freq>
 80087e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80087e4:	e03c      	b.n	8008860 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fd fe08 	bl	8006400 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087f4:	e034      	b.n	8008860 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087f6:	f107 0318 	add.w	r3, r7, #24
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fd ff54 	bl	80066a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008804:	e02c      	b.n	8008860 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008806:	4b09      	ldr	r3, [pc, #36]	; (800882c <UART_SetConfig+0x69c>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0320 	and.w	r3, r3, #32
 800880e:	2b00      	cmp	r3, #0
 8008810:	d016      	beq.n	8008840 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008812:	4b06      	ldr	r3, [pc, #24]	; (800882c <UART_SetConfig+0x69c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	08db      	lsrs	r3, r3, #3
 8008818:	f003 0303 	and.w	r3, r3, #3
 800881c:	4a07      	ldr	r2, [pc, #28]	; (800883c <UART_SetConfig+0x6ac>)
 800881e:	fa22 f303 	lsr.w	r3, r2, r3
 8008822:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008824:	e01c      	b.n	8008860 <UART_SetConfig+0x6d0>
 8008826:	bf00      	nop
 8008828:	40011400 	.word	0x40011400
 800882c:	58024400 	.word	0x58024400
 8008830:	40007800 	.word	0x40007800
 8008834:	40007c00 	.word	0x40007c00
 8008838:	58000c00 	.word	0x58000c00
 800883c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008840:	4b9d      	ldr	r3, [pc, #628]	; (8008ab8 <UART_SetConfig+0x928>)
 8008842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008844:	e00c      	b.n	8008860 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008846:	4b9d      	ldr	r3, [pc, #628]	; (8008abc <UART_SetConfig+0x92c>)
 8008848:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800884a:	e009      	b.n	8008860 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800884c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008852:	e005      	b.n	8008860 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008854:	2300      	movs	r3, #0
 8008856:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800885e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008862:	2b00      	cmp	r3, #0
 8008864:	f000 81de 	beq.w	8008c24 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886c:	4a94      	ldr	r2, [pc, #592]	; (8008ac0 <UART_SetConfig+0x930>)
 800886e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008872:	461a      	mov	r2, r3
 8008874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008876:	fbb3 f3f2 	udiv	r3, r3, r2
 800887a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	685a      	ldr	r2, [r3, #4]
 8008880:	4613      	mov	r3, r2
 8008882:	005b      	lsls	r3, r3, #1
 8008884:	4413      	add	r3, r2
 8008886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008888:	429a      	cmp	r2, r3
 800888a:	d305      	bcc.n	8008898 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008894:	429a      	cmp	r2, r3
 8008896:	d903      	bls.n	80088a0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800889e:	e1c1      	b.n	8008c24 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a2:	2200      	movs	r2, #0
 80088a4:	60bb      	str	r3, [r7, #8]
 80088a6:	60fa      	str	r2, [r7, #12]
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ac:	4a84      	ldr	r2, [pc, #528]	; (8008ac0 <UART_SetConfig+0x930>)
 80088ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	2200      	movs	r2, #0
 80088b6:	603b      	str	r3, [r7, #0]
 80088b8:	607a      	str	r2, [r7, #4]
 80088ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088c2:	f7f7 fd09 	bl	80002d8 <__aeabi_uldivmod>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	4610      	mov	r0, r2
 80088cc:	4619      	mov	r1, r3
 80088ce:	f04f 0200 	mov.w	r2, #0
 80088d2:	f04f 0300 	mov.w	r3, #0
 80088d6:	020b      	lsls	r3, r1, #8
 80088d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80088dc:	0202      	lsls	r2, r0, #8
 80088de:	6979      	ldr	r1, [r7, #20]
 80088e0:	6849      	ldr	r1, [r1, #4]
 80088e2:	0849      	lsrs	r1, r1, #1
 80088e4:	2000      	movs	r0, #0
 80088e6:	460c      	mov	r4, r1
 80088e8:	4605      	mov	r5, r0
 80088ea:	eb12 0804 	adds.w	r8, r2, r4
 80088ee:	eb43 0905 	adc.w	r9, r3, r5
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	469a      	mov	sl, r3
 80088fa:	4693      	mov	fp, r2
 80088fc:	4652      	mov	r2, sl
 80088fe:	465b      	mov	r3, fp
 8008900:	4640      	mov	r0, r8
 8008902:	4649      	mov	r1, r9
 8008904:	f7f7 fce8 	bl	80002d8 <__aeabi_uldivmod>
 8008908:	4602      	mov	r2, r0
 800890a:	460b      	mov	r3, r1
 800890c:	4613      	mov	r3, r2
 800890e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008916:	d308      	bcc.n	800892a <UART_SetConfig+0x79a>
 8008918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800891e:	d204      	bcs.n	800892a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008926:	60da      	str	r2, [r3, #12]
 8008928:	e17c      	b.n	8008c24 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008930:	e178      	b.n	8008c24 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	69db      	ldr	r3, [r3, #28]
 8008936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800893a:	f040 80c5 	bne.w	8008ac8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800893e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008942:	2b20      	cmp	r3, #32
 8008944:	dc48      	bgt.n	80089d8 <UART_SetConfig+0x848>
 8008946:	2b00      	cmp	r3, #0
 8008948:	db7b      	blt.n	8008a42 <UART_SetConfig+0x8b2>
 800894a:	2b20      	cmp	r3, #32
 800894c:	d879      	bhi.n	8008a42 <UART_SetConfig+0x8b2>
 800894e:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <UART_SetConfig+0x7c4>)
 8008950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008954:	080089df 	.word	0x080089df
 8008958:	080089e7 	.word	0x080089e7
 800895c:	08008a43 	.word	0x08008a43
 8008960:	08008a43 	.word	0x08008a43
 8008964:	080089ef 	.word	0x080089ef
 8008968:	08008a43 	.word	0x08008a43
 800896c:	08008a43 	.word	0x08008a43
 8008970:	08008a43 	.word	0x08008a43
 8008974:	080089ff 	.word	0x080089ff
 8008978:	08008a43 	.word	0x08008a43
 800897c:	08008a43 	.word	0x08008a43
 8008980:	08008a43 	.word	0x08008a43
 8008984:	08008a43 	.word	0x08008a43
 8008988:	08008a43 	.word	0x08008a43
 800898c:	08008a43 	.word	0x08008a43
 8008990:	08008a43 	.word	0x08008a43
 8008994:	08008a0f 	.word	0x08008a0f
 8008998:	08008a43 	.word	0x08008a43
 800899c:	08008a43 	.word	0x08008a43
 80089a0:	08008a43 	.word	0x08008a43
 80089a4:	08008a43 	.word	0x08008a43
 80089a8:	08008a43 	.word	0x08008a43
 80089ac:	08008a43 	.word	0x08008a43
 80089b0:	08008a43 	.word	0x08008a43
 80089b4:	08008a43 	.word	0x08008a43
 80089b8:	08008a43 	.word	0x08008a43
 80089bc:	08008a43 	.word	0x08008a43
 80089c0:	08008a43 	.word	0x08008a43
 80089c4:	08008a43 	.word	0x08008a43
 80089c8:	08008a43 	.word	0x08008a43
 80089cc:	08008a43 	.word	0x08008a43
 80089d0:	08008a43 	.word	0x08008a43
 80089d4:	08008a35 	.word	0x08008a35
 80089d8:	2b40      	cmp	r3, #64	; 0x40
 80089da:	d02e      	beq.n	8008a3a <UART_SetConfig+0x8aa>
 80089dc:	e031      	b.n	8008a42 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089de:	f7fc fac3 	bl	8004f68 <HAL_RCC_GetPCLK1Freq>
 80089e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80089e4:	e033      	b.n	8008a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089e6:	f7fc fad5 	bl	8004f94 <HAL_RCC_GetPCLK2Freq>
 80089ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80089ec:	e02f      	b.n	8008a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fd fd04 	bl	8006400 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089fc:	e027      	b.n	8008a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089fe:	f107 0318 	add.w	r3, r7, #24
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fd fe50 	bl	80066a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a0c:	e01f      	b.n	8008a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a0e:	4b2d      	ldr	r3, [pc, #180]	; (8008ac4 <UART_SetConfig+0x934>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 0320 	and.w	r3, r3, #32
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d009      	beq.n	8008a2e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a1a:	4b2a      	ldr	r3, [pc, #168]	; (8008ac4 <UART_SetConfig+0x934>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	08db      	lsrs	r3, r3, #3
 8008a20:	f003 0303 	and.w	r3, r3, #3
 8008a24:	4a24      	ldr	r2, [pc, #144]	; (8008ab8 <UART_SetConfig+0x928>)
 8008a26:	fa22 f303 	lsr.w	r3, r2, r3
 8008a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a2c:	e00f      	b.n	8008a4e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008a2e:	4b22      	ldr	r3, [pc, #136]	; (8008ab8 <UART_SetConfig+0x928>)
 8008a30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a32:	e00c      	b.n	8008a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a34:	4b21      	ldr	r3, [pc, #132]	; (8008abc <UART_SetConfig+0x92c>)
 8008a36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a38:	e009      	b.n	8008a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a40:	e005      	b.n	8008a4e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008a4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f000 80e7 	beq.w	8008c24 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5a:	4a19      	ldr	r2, [pc, #100]	; (8008ac0 <UART_SetConfig+0x930>)
 8008a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a60:	461a      	mov	r2, r3
 8008a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a64:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a68:	005a      	lsls	r2, r3, #1
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	085b      	lsrs	r3, r3, #1
 8008a70:	441a      	add	r2, r3
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a7a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7e:	2b0f      	cmp	r3, #15
 8008a80:	d916      	bls.n	8008ab0 <UART_SetConfig+0x920>
 8008a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a88:	d212      	bcs.n	8008ab0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	f023 030f 	bic.w	r3, r3, #15
 8008a92:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a96:	085b      	lsrs	r3, r3, #1
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	f003 0307 	and.w	r3, r3, #7
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008aac:	60da      	str	r2, [r3, #12]
 8008aae:	e0b9      	b.n	8008c24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008ab6:	e0b5      	b.n	8008c24 <UART_SetConfig+0xa94>
 8008ab8:	03d09000 	.word	0x03d09000
 8008abc:	003d0900 	.word	0x003d0900
 8008ac0:	08009940 	.word	0x08009940
 8008ac4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ac8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008acc:	2b20      	cmp	r3, #32
 8008ace:	dc49      	bgt.n	8008b64 <UART_SetConfig+0x9d4>
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	db7c      	blt.n	8008bce <UART_SetConfig+0xa3e>
 8008ad4:	2b20      	cmp	r3, #32
 8008ad6:	d87a      	bhi.n	8008bce <UART_SetConfig+0xa3e>
 8008ad8:	a201      	add	r2, pc, #4	; (adr r2, 8008ae0 <UART_SetConfig+0x950>)
 8008ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ade:	bf00      	nop
 8008ae0:	08008b6b 	.word	0x08008b6b
 8008ae4:	08008b73 	.word	0x08008b73
 8008ae8:	08008bcf 	.word	0x08008bcf
 8008aec:	08008bcf 	.word	0x08008bcf
 8008af0:	08008b7b 	.word	0x08008b7b
 8008af4:	08008bcf 	.word	0x08008bcf
 8008af8:	08008bcf 	.word	0x08008bcf
 8008afc:	08008bcf 	.word	0x08008bcf
 8008b00:	08008b8b 	.word	0x08008b8b
 8008b04:	08008bcf 	.word	0x08008bcf
 8008b08:	08008bcf 	.word	0x08008bcf
 8008b0c:	08008bcf 	.word	0x08008bcf
 8008b10:	08008bcf 	.word	0x08008bcf
 8008b14:	08008bcf 	.word	0x08008bcf
 8008b18:	08008bcf 	.word	0x08008bcf
 8008b1c:	08008bcf 	.word	0x08008bcf
 8008b20:	08008b9b 	.word	0x08008b9b
 8008b24:	08008bcf 	.word	0x08008bcf
 8008b28:	08008bcf 	.word	0x08008bcf
 8008b2c:	08008bcf 	.word	0x08008bcf
 8008b30:	08008bcf 	.word	0x08008bcf
 8008b34:	08008bcf 	.word	0x08008bcf
 8008b38:	08008bcf 	.word	0x08008bcf
 8008b3c:	08008bcf 	.word	0x08008bcf
 8008b40:	08008bcf 	.word	0x08008bcf
 8008b44:	08008bcf 	.word	0x08008bcf
 8008b48:	08008bcf 	.word	0x08008bcf
 8008b4c:	08008bcf 	.word	0x08008bcf
 8008b50:	08008bcf 	.word	0x08008bcf
 8008b54:	08008bcf 	.word	0x08008bcf
 8008b58:	08008bcf 	.word	0x08008bcf
 8008b5c:	08008bcf 	.word	0x08008bcf
 8008b60:	08008bc1 	.word	0x08008bc1
 8008b64:	2b40      	cmp	r3, #64	; 0x40
 8008b66:	d02e      	beq.n	8008bc6 <UART_SetConfig+0xa36>
 8008b68:	e031      	b.n	8008bce <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b6a:	f7fc f9fd 	bl	8004f68 <HAL_RCC_GetPCLK1Freq>
 8008b6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b70:	e033      	b.n	8008bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b72:	f7fc fa0f 	bl	8004f94 <HAL_RCC_GetPCLK2Freq>
 8008b76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b78:	e02f      	b.n	8008bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fd fc3e 	bl	8006400 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b88:	e027      	b.n	8008bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b8a:	f107 0318 	add.w	r3, r7, #24
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fd fd8a 	bl	80066a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b98:	e01f      	b.n	8008bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b9a:	4b2d      	ldr	r3, [pc, #180]	; (8008c50 <UART_SetConfig+0xac0>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 0320 	and.w	r3, r3, #32
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d009      	beq.n	8008bba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ba6:	4b2a      	ldr	r3, [pc, #168]	; (8008c50 <UART_SetConfig+0xac0>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	08db      	lsrs	r3, r3, #3
 8008bac:	f003 0303 	and.w	r3, r3, #3
 8008bb0:	4a28      	ldr	r2, [pc, #160]	; (8008c54 <UART_SetConfig+0xac4>)
 8008bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8008bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008bb8:	e00f      	b.n	8008bda <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008bba:	4b26      	ldr	r3, [pc, #152]	; (8008c54 <UART_SetConfig+0xac4>)
 8008bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bbe:	e00c      	b.n	8008bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008bc0:	4b25      	ldr	r3, [pc, #148]	; (8008c58 <UART_SetConfig+0xac8>)
 8008bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bc4:	e009      	b.n	8008bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bcc:	e005      	b.n	8008bda <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008bd8:	bf00      	nop
    }

    if (pclk != 0U)
 8008bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d021      	beq.n	8008c24 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be4:	4a1d      	ldr	r2, [pc, #116]	; (8008c5c <UART_SetConfig+0xacc>)
 8008be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bea:	461a      	mov	r2, r3
 8008bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bee:	fbb3 f2f2 	udiv	r2, r3, r2
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	085b      	lsrs	r3, r3, #1
 8008bf8:	441a      	add	r2, r3
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c02:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c06:	2b0f      	cmp	r3, #15
 8008c08:	d909      	bls.n	8008c1e <UART_SetConfig+0xa8e>
 8008c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c10:	d205      	bcs.n	8008c1e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	60da      	str	r2, [r3, #12]
 8008c1c:	e002      	b.n	8008c24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	2200      	movs	r2, #0
 8008c38:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008c40:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3748      	adds	r7, #72	; 0x48
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c4e:	bf00      	nop
 8008c50:	58024400 	.word	0x58024400
 8008c54:	03d09000 	.word	0x03d09000
 8008c58:	003d0900 	.word	0x003d0900
 8008c5c:	08009940 	.word	0x08009940

08008c60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6c:	f003 0308 	and.w	r3, r3, #8
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00a      	beq.n	8008c8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	430a      	orrs	r2, r1
 8008c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8e:	f003 0301 	and.w	r3, r3, #1
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00a      	beq.n	8008cac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	430a      	orrs	r2, r1
 8008caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb0:	f003 0302 	and.w	r3, r3, #2
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00a      	beq.n	8008cce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	430a      	orrs	r2, r1
 8008ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd2:	f003 0304 	and.w	r3, r3, #4
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00a      	beq.n	8008cf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	430a      	orrs	r2, r1
 8008cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf4:	f003 0310 	and.w	r3, r3, #16
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00a      	beq.n	8008d12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d16:	f003 0320 	and.w	r3, r3, #32
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00a      	beq.n	8008d34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	430a      	orrs	r2, r1
 8008d32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d01a      	beq.n	8008d76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	430a      	orrs	r2, r1
 8008d54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d5e:	d10a      	bne.n	8008d76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	430a      	orrs	r2, r1
 8008d74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00a      	beq.n	8008d98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	430a      	orrs	r2, r1
 8008d96:	605a      	str	r2, [r3, #4]
  }
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b098      	sub	sp, #96	; 0x60
 8008da8:	af02      	add	r7, sp, #8
 8008daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008db4:	f7f8 fb68 	bl	8001488 <HAL_GetTick>
 8008db8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 0308 	and.w	r3, r3, #8
 8008dc4:	2b08      	cmp	r3, #8
 8008dc6:	d12f      	bne.n	8008e28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008dcc:	9300      	str	r3, [sp, #0]
 8008dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f88e 	bl	8008ef8 <UART_WaitOnFlagUntilTimeout>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d022      	beq.n	8008e28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dea:	e853 3f00 	ldrex	r3, [r3]
 8008dee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008df6:	653b      	str	r3, [r7, #80]	; 0x50
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e00:	647b      	str	r3, [r7, #68]	; 0x44
 8008e02:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e08:	e841 2300 	strex	r3, r2, [r1]
 8008e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d1e6      	bne.n	8008de2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2220      	movs	r2, #32
 8008e18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e063      	b.n	8008ef0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 0304 	and.w	r3, r3, #4
 8008e32:	2b04      	cmp	r3, #4
 8008e34:	d149      	bne.n	8008eca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 f857 	bl	8008ef8 <UART_WaitOnFlagUntilTimeout>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d03c      	beq.n	8008eca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e58:	e853 3f00 	ldrex	r3, [r3]
 8008e5c:	623b      	str	r3, [r7, #32]
   return(result);
 8008e5e:	6a3b      	ldr	r3, [r7, #32]
 8008e60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8008e70:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e76:	e841 2300 	strex	r3, r2, [r1]
 8008e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1e6      	bne.n	8008e50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	3308      	adds	r3, #8
 8008e88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	e853 3f00 	ldrex	r3, [r3]
 8008e90:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f023 0301 	bic.w	r3, r3, #1
 8008e98:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	3308      	adds	r3, #8
 8008ea0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ea2:	61fa      	str	r2, [r7, #28]
 8008ea4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea6:	69b9      	ldr	r1, [r7, #24]
 8008ea8:	69fa      	ldr	r2, [r7, #28]
 8008eaa:	e841 2300 	strex	r3, r2, [r1]
 8008eae:	617b      	str	r3, [r7, #20]
   return(result);
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1e5      	bne.n	8008e82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2220      	movs	r2, #32
 8008eba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e012      	b.n	8008ef0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2220      	movs	r2, #32
 8008ece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2220      	movs	r2, #32
 8008ed6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3758      	adds	r7, #88	; 0x58
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	603b      	str	r3, [r7, #0]
 8008f04:	4613      	mov	r3, r2
 8008f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f08:	e04f      	b.n	8008faa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f10:	d04b      	beq.n	8008faa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f12:	f7f8 fab9 	bl	8001488 <HAL_GetTick>
 8008f16:	4602      	mov	r2, r0
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	1ad3      	subs	r3, r2, r3
 8008f1c:	69ba      	ldr	r2, [r7, #24]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d302      	bcc.n	8008f28 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d101      	bne.n	8008f2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	e04e      	b.n	8008fca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 0304 	and.w	r3, r3, #4
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d037      	beq.n	8008faa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	2b80      	cmp	r3, #128	; 0x80
 8008f3e:	d034      	beq.n	8008faa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	2b40      	cmp	r3, #64	; 0x40
 8008f44:	d031      	beq.n	8008faa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	f003 0308 	and.w	r3, r3, #8
 8008f50:	2b08      	cmp	r3, #8
 8008f52:	d110      	bne.n	8008f76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2208      	movs	r2, #8
 8008f5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f000 f839 	bl	8008fd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2208      	movs	r2, #8
 8008f66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	e029      	b.n	8008fca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	69db      	ldr	r3, [r3, #28]
 8008f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f84:	d111      	bne.n	8008faa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f000 f81f 	bl	8008fd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2220      	movs	r2, #32
 8008f9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	e00f      	b.n	8008fca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	69da      	ldr	r2, [r3, #28]
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	bf0c      	ite	eq
 8008fba:	2301      	moveq	r3, #1
 8008fbc:	2300      	movne	r3, #0
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	79fb      	ldrb	r3, [r7, #7]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d0a0      	beq.n	8008f0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
	...

08008fd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b095      	sub	sp, #84	; 0x54
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe4:	e853 3f00 	ldrex	r3, [r3]
 8008fe8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ffa:	643b      	str	r3, [r7, #64]	; 0x40
 8008ffc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009000:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009002:	e841 2300 	strex	r3, r2, [r1]
 8009006:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1e6      	bne.n	8008fdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3308      	adds	r3, #8
 8009014:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009016:	6a3b      	ldr	r3, [r7, #32]
 8009018:	e853 3f00 	ldrex	r3, [r3]
 800901c:	61fb      	str	r3, [r7, #28]
   return(result);
 800901e:	69fa      	ldr	r2, [r7, #28]
 8009020:	4b1e      	ldr	r3, [pc, #120]	; (800909c <UART_EndRxTransfer+0xc8>)
 8009022:	4013      	ands	r3, r2
 8009024:	64bb      	str	r3, [r7, #72]	; 0x48
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3308      	adds	r3, #8
 800902c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800902e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009030:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009032:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009036:	e841 2300 	strex	r3, r2, [r1]
 800903a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800903c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1e5      	bne.n	800900e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009046:	2b01      	cmp	r3, #1
 8009048:	d118      	bne.n	800907c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	e853 3f00 	ldrex	r3, [r3]
 8009056:	60bb      	str	r3, [r7, #8]
   return(result);
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	f023 0310 	bic.w	r3, r3, #16
 800905e:	647b      	str	r3, [r7, #68]	; 0x44
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	461a      	mov	r2, r3
 8009066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009068:	61bb      	str	r3, [r7, #24]
 800906a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906c:	6979      	ldr	r1, [r7, #20]
 800906e:	69ba      	ldr	r2, [r7, #24]
 8009070:	e841 2300 	strex	r3, r2, [r1]
 8009074:	613b      	str	r3, [r7, #16]
   return(result);
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1e6      	bne.n	800904a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2220      	movs	r2, #32
 8009080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009090:	bf00      	nop
 8009092:	3754      	adds	r7, #84	; 0x54
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr
 800909c:	effffffe 	.word	0xeffffffe

080090a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d101      	bne.n	80090b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80090b2:	2302      	movs	r3, #2
 80090b4:	e027      	b.n	8009106 <HAL_UARTEx_DisableFifoMode+0x66>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2224      	movs	r2, #36	; 0x24
 80090c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f022 0201 	bic.w	r2, r2, #1
 80090dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80090e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2220      	movs	r2, #32
 80090f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3714      	adds	r7, #20
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
 800911a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009122:	2b01      	cmp	r3, #1
 8009124:	d101      	bne.n	800912a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009126:	2302      	movs	r3, #2
 8009128:	e02d      	b.n	8009186 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2201      	movs	r2, #1
 800912e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2224      	movs	r2, #36	; 0x24
 8009136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f022 0201 	bic.w	r2, r2, #1
 8009150:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	683a      	ldr	r2, [r7, #0]
 8009162:	430a      	orrs	r2, r1
 8009164:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f850 	bl	800920c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2220      	movs	r2, #32
 8009178:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b084      	sub	sp, #16
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d101      	bne.n	80091a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80091a2:	2302      	movs	r3, #2
 80091a4:	e02d      	b.n	8009202 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2224      	movs	r2, #36	; 0x24
 80091b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f022 0201 	bic.w	r2, r2, #1
 80091cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	430a      	orrs	r2, r1
 80091e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f812 	bl	800920c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2220      	movs	r2, #32
 80091f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
	...

0800920c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009218:	2b00      	cmp	r3, #0
 800921a:	d108      	bne.n	800922e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800922c:	e031      	b.n	8009292 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800922e:	2310      	movs	r3, #16
 8009230:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009232:	2310      	movs	r3, #16
 8009234:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	0e5b      	lsrs	r3, r3, #25
 800923e:	b2db      	uxtb	r3, r3
 8009240:	f003 0307 	and.w	r3, r3, #7
 8009244:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	0f5b      	lsrs	r3, r3, #29
 800924e:	b2db      	uxtb	r3, r3
 8009250:	f003 0307 	and.w	r3, r3, #7
 8009254:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009256:	7bbb      	ldrb	r3, [r7, #14]
 8009258:	7b3a      	ldrb	r2, [r7, #12]
 800925a:	4911      	ldr	r1, [pc, #68]	; (80092a0 <UARTEx_SetNbDataToProcess+0x94>)
 800925c:	5c8a      	ldrb	r2, [r1, r2]
 800925e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009262:	7b3a      	ldrb	r2, [r7, #12]
 8009264:	490f      	ldr	r1, [pc, #60]	; (80092a4 <UARTEx_SetNbDataToProcess+0x98>)
 8009266:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009268:	fb93 f3f2 	sdiv	r3, r3, r2
 800926c:	b29a      	uxth	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009274:	7bfb      	ldrb	r3, [r7, #15]
 8009276:	7b7a      	ldrb	r2, [r7, #13]
 8009278:	4909      	ldr	r1, [pc, #36]	; (80092a0 <UARTEx_SetNbDataToProcess+0x94>)
 800927a:	5c8a      	ldrb	r2, [r1, r2]
 800927c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009280:	7b7a      	ldrb	r2, [r7, #13]
 8009282:	4908      	ldr	r1, [pc, #32]	; (80092a4 <UARTEx_SetNbDataToProcess+0x98>)
 8009284:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009286:	fb93 f3f2 	sdiv	r3, r3, r2
 800928a:	b29a      	uxth	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009292:	bf00      	nop
 8009294:	3714      	adds	r7, #20
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	08009958 	.word	0x08009958
 80092a4:	08009960 	.word	0x08009960

080092a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092a8:	b084      	sub	sp, #16
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b084      	sub	sp, #16
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
 80092b2:	f107 001c 	add.w	r0, r7, #28
 80092b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092ba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d121      	bne.n	8009306 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	68da      	ldr	r2, [r3, #12]
 80092d2:	4b2c      	ldr	r3, [pc, #176]	; (8009384 <USB_CoreInit+0xdc>)
 80092d4:	4013      	ands	r3, r2
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80092e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d105      	bne.n	80092fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 faaa 	bl	8009854 <USB_CoreReset>
 8009300:	4603      	mov	r3, r0
 8009302:	73fb      	strb	r3, [r7, #15]
 8009304:	e01b      	b.n	800933e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fa9e 	bl	8009854 <USB_CoreReset>
 8009318:	4603      	mov	r3, r0
 800931a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800931c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009320:	2b00      	cmp	r3, #0
 8009322:	d106      	bne.n	8009332 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009328:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	639a      	str	r2, [r3, #56]	; 0x38
 8009330:	e005      	b.n	800933e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009336:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800933e:	7fbb      	ldrb	r3, [r7, #30]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d116      	bne.n	8009372 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009348:	b29a      	uxth	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009352:	4b0d      	ldr	r3, [pc, #52]	; (8009388 <USB_CoreInit+0xe0>)
 8009354:	4313      	orrs	r3, r2
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	f043 0206 	orr.w	r2, r3, #6
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	f043 0220 	orr.w	r2, r3, #32
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009372:	7bfb      	ldrb	r3, [r7, #15]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800937e:	b004      	add	sp, #16
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	ffbdffbf 	.word	0xffbdffbf
 8009388:	03ee0000 	.word	0x03ee0000

0800938c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	f023 0201 	bic.w	r2, r3, #1
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	370c      	adds	r7, #12
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr

080093ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b084      	sub	sp, #16
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	460b      	mov	r3, r1
 80093b8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80093ba:	2300      	movs	r3, #0
 80093bc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80093ca:	78fb      	ldrb	r3, [r7, #3]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d115      	bne.n	80093fc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80093dc:	200a      	movs	r0, #10
 80093de:	f7f8 f85f 	bl	80014a0 <HAL_Delay>
      ms += 10U;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	330a      	adds	r3, #10
 80093e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fa25 	bl	8009838 <USB_GetMode>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d01e      	beq.n	8009432 <USB_SetCurrentMode+0x84>
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2bc7      	cmp	r3, #199	; 0xc7
 80093f8:	d9f0      	bls.n	80093dc <USB_SetCurrentMode+0x2e>
 80093fa:	e01a      	b.n	8009432 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80093fc:	78fb      	ldrb	r3, [r7, #3]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d115      	bne.n	800942e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800940e:	200a      	movs	r0, #10
 8009410:	f7f8 f846 	bl	80014a0 <HAL_Delay>
      ms += 10U;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	330a      	adds	r3, #10
 8009418:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fa0c 	bl	8009838 <USB_GetMode>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d005      	beq.n	8009432 <USB_SetCurrentMode+0x84>
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2bc7      	cmp	r3, #199	; 0xc7
 800942a:	d9f0      	bls.n	800940e <USB_SetCurrentMode+0x60>
 800942c:	e001      	b.n	8009432 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e005      	b.n	800943e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2bc8      	cmp	r3, #200	; 0xc8
 8009436:	d101      	bne.n	800943c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	e000      	b.n	800943e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
	...

08009448 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009448:	b084      	sub	sp, #16
 800944a:	b580      	push	{r7, lr}
 800944c:	b086      	sub	sp, #24
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009462:	2300      	movs	r3, #0
 8009464:	613b      	str	r3, [r7, #16]
 8009466:	e009      	b.n	800947c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	3340      	adds	r3, #64	; 0x40
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	2200      	movs	r2, #0
 8009474:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	3301      	adds	r3, #1
 800947a:	613b      	str	r3, [r7, #16]
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	2b0e      	cmp	r3, #14
 8009480:	d9f2      	bls.n	8009468 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009482:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009486:	2b00      	cmp	r3, #0
 8009488:	d11c      	bne.n	80094c4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009498:	f043 0302 	orr.w	r3, r3, #2
 800949c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	601a      	str	r2, [r3, #0]
 80094c2:	e005      	b.n	80094d0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094d6:	461a      	mov	r2, r3
 80094d8:	2300      	movs	r3, #0
 80094da:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094dc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d10d      	bne.n	8009500 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80094e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d104      	bne.n	80094f6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80094ec:	2100      	movs	r1, #0
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f968 	bl	80097c4 <USB_SetDevSpeed>
 80094f4:	e008      	b.n	8009508 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80094f6:	2101      	movs	r1, #1
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f963 	bl	80097c4 <USB_SetDevSpeed>
 80094fe:	e003      	b.n	8009508 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009500:	2103      	movs	r1, #3
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f95e 	bl	80097c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009508:	2110      	movs	r1, #16
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f8fa 	bl	8009704 <USB_FlushTxFifo>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f924 	bl	8009768 <USB_FlushRxFifo>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009530:	461a      	mov	r2, r3
 8009532:	2300      	movs	r3, #0
 8009534:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800953c:	461a      	mov	r2, r3
 800953e:	2300      	movs	r3, #0
 8009540:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009548:	461a      	mov	r2, r3
 800954a:	2300      	movs	r3, #0
 800954c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800954e:	2300      	movs	r3, #0
 8009550:	613b      	str	r3, [r7, #16]
 8009552:	e043      	b.n	80095dc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	4413      	add	r3, r2
 800955c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009566:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800956a:	d118      	bne.n	800959e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10a      	bne.n	8009588 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	015a      	lsls	r2, r3, #5
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	4413      	add	r3, r2
 800957a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800957e:	461a      	mov	r2, r3
 8009580:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009584:	6013      	str	r3, [r2, #0]
 8009586:	e013      	b.n	80095b0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	4413      	add	r3, r2
 8009590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009594:	461a      	mov	r2, r3
 8009596:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800959a:	6013      	str	r3, [r2, #0]
 800959c:	e008      	b.n	80095b0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	015a      	lsls	r2, r3, #5
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	4413      	add	r3, r2
 80095a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095aa:	461a      	mov	r2, r3
 80095ac:	2300      	movs	r3, #0
 80095ae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	015a      	lsls	r2, r3, #5
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	4413      	add	r3, r2
 80095b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095bc:	461a      	mov	r2, r3
 80095be:	2300      	movs	r3, #0
 80095c0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	015a      	lsls	r2, r3, #5
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	4413      	add	r3, r2
 80095ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ce:	461a      	mov	r2, r3
 80095d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80095d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	3301      	adds	r3, #1
 80095da:	613b      	str	r3, [r7, #16]
 80095dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80095e0:	461a      	mov	r2, r3
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d3b5      	bcc.n	8009554 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095e8:	2300      	movs	r3, #0
 80095ea:	613b      	str	r3, [r7, #16]
 80095ec:	e043      	b.n	8009676 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	015a      	lsls	r2, r3, #5
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	4413      	add	r3, r2
 80095f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009600:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009604:	d118      	bne.n	8009638 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10a      	bne.n	8009622 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	015a      	lsls	r2, r3, #5
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	4413      	add	r3, r2
 8009614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009618:	461a      	mov	r2, r3
 800961a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800961e:	6013      	str	r3, [r2, #0]
 8009620:	e013      	b.n	800964a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	015a      	lsls	r2, r3, #5
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	4413      	add	r3, r2
 800962a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800962e:	461a      	mov	r2, r3
 8009630:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009634:	6013      	str	r3, [r2, #0]
 8009636:	e008      	b.n	800964a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	015a      	lsls	r2, r3, #5
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	4413      	add	r3, r2
 8009640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009644:	461a      	mov	r2, r3
 8009646:	2300      	movs	r3, #0
 8009648:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	015a      	lsls	r2, r3, #5
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	4413      	add	r3, r2
 8009652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009656:	461a      	mov	r2, r3
 8009658:	2300      	movs	r3, #0
 800965a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	015a      	lsls	r2, r3, #5
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	4413      	add	r3, r2
 8009664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009668:	461a      	mov	r2, r3
 800966a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800966e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	3301      	adds	r3, #1
 8009674:	613b      	str	r3, [r7, #16]
 8009676:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800967a:	461a      	mov	r2, r3
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	4293      	cmp	r3, r2
 8009680:	d3b5      	bcc.n	80095ee <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009694:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80096a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80096a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d105      	bne.n	80096b8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	f043 0210 	orr.w	r2, r3, #16
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	699a      	ldr	r2, [r3, #24]
 80096bc:	4b0f      	ldr	r3, [pc, #60]	; (80096fc <USB_DevInit+0x2b4>)
 80096be:	4313      	orrs	r3, r2
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80096c4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d005      	beq.n	80096d8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	f043 0208 	orr.w	r2, r3, #8
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80096d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d105      	bne.n	80096ec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	699a      	ldr	r2, [r3, #24]
 80096e4:	4b06      	ldr	r3, [pc, #24]	; (8009700 <USB_DevInit+0x2b8>)
 80096e6:	4313      	orrs	r3, r2
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80096ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3718      	adds	r7, #24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096f8:	b004      	add	sp, #16
 80096fa:	4770      	bx	lr
 80096fc:	803c3800 	.word	0x803c3800
 8009700:	40000004 	.word	0x40000004

08009704 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800970e:	2300      	movs	r3, #0
 8009710:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	3301      	adds	r3, #1
 8009716:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800971e:	d901      	bls.n	8009724 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009720:	2303      	movs	r3, #3
 8009722:	e01b      	b.n	800975c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	2b00      	cmp	r3, #0
 800972a:	daf2      	bge.n	8009712 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800972c:	2300      	movs	r3, #0
 800972e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	019b      	lsls	r3, r3, #6
 8009734:	f043 0220 	orr.w	r2, r3, #32
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	3301      	adds	r3, #1
 8009740:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009748:	d901      	bls.n	800974e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800974a:	2303      	movs	r3, #3
 800974c:	e006      	b.n	800975c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	f003 0320 	and.w	r3, r3, #32
 8009756:	2b20      	cmp	r3, #32
 8009758:	d0f0      	beq.n	800973c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3714      	adds	r7, #20
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009768:	b480      	push	{r7}
 800976a:	b085      	sub	sp, #20
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009770:	2300      	movs	r3, #0
 8009772:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	3301      	adds	r3, #1
 8009778:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009780:	d901      	bls.n	8009786 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009782:	2303      	movs	r3, #3
 8009784:	e018      	b.n	80097b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	2b00      	cmp	r3, #0
 800978c:	daf2      	bge.n	8009774 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800978e:	2300      	movs	r3, #0
 8009790:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2210      	movs	r2, #16
 8009796:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	3301      	adds	r3, #1
 800979c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80097a4:	d901      	bls.n	80097aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e006      	b.n	80097b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	f003 0310 	and.w	r3, r3, #16
 80097b2:	2b10      	cmp	r3, #16
 80097b4:	d0f0      	beq.n	8009798 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	460b      	mov	r3, r1
 80097ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	78fb      	ldrb	r3, [r7, #3]
 80097de:	68f9      	ldr	r1, [r7, #12]
 80097e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097e4:	4313      	orrs	r3, r2
 80097e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3714      	adds	r7, #20
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80097f6:	b480      	push	{r7}
 80097f8:	b085      	sub	sp, #20
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009810:	f023 0303 	bic.w	r3, r3, #3
 8009814:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009824:	f043 0302 	orr.w	r3, r3, #2
 8009828:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3714      	adds	r7, #20
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	695b      	ldr	r3, [r3, #20]
 8009844:	f003 0301 	and.w	r3, r3, #1
}
 8009848:	4618      	mov	r0, r3
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009854:	b480      	push	{r7}
 8009856:	b085      	sub	sp, #20
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800985c:	2300      	movs	r3, #0
 800985e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	3301      	adds	r3, #1
 8009864:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800986c:	d901      	bls.n	8009872 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800986e:	2303      	movs	r3, #3
 8009870:	e01b      	b.n	80098aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	691b      	ldr	r3, [r3, #16]
 8009876:	2b00      	cmp	r3, #0
 8009878:	daf2      	bge.n	8009860 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800987a:	2300      	movs	r3, #0
 800987c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	f043 0201 	orr.w	r2, r3, #1
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	3301      	adds	r3, #1
 800988e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009896:	d901      	bls.n	800989c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009898:	2303      	movs	r3, #3
 800989a:	e006      	b.n	80098aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d0f0      	beq.n	800988a <USB_CoreReset+0x36>

  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3714      	adds	r7, #20
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr

080098b6 <memset>:
 80098b6:	4402      	add	r2, r0
 80098b8:	4603      	mov	r3, r0
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d100      	bne.n	80098c0 <memset+0xa>
 80098be:	4770      	bx	lr
 80098c0:	f803 1b01 	strb.w	r1, [r3], #1
 80098c4:	e7f9      	b.n	80098ba <memset+0x4>
	...

080098c8 <__libc_init_array>:
 80098c8:	b570      	push	{r4, r5, r6, lr}
 80098ca:	4d0d      	ldr	r5, [pc, #52]	; (8009900 <__libc_init_array+0x38>)
 80098cc:	4c0d      	ldr	r4, [pc, #52]	; (8009904 <__libc_init_array+0x3c>)
 80098ce:	1b64      	subs	r4, r4, r5
 80098d0:	10a4      	asrs	r4, r4, #2
 80098d2:	2600      	movs	r6, #0
 80098d4:	42a6      	cmp	r6, r4
 80098d6:	d109      	bne.n	80098ec <__libc_init_array+0x24>
 80098d8:	4d0b      	ldr	r5, [pc, #44]	; (8009908 <__libc_init_array+0x40>)
 80098da:	4c0c      	ldr	r4, [pc, #48]	; (800990c <__libc_init_array+0x44>)
 80098dc:	f000 f818 	bl	8009910 <_init>
 80098e0:	1b64      	subs	r4, r4, r5
 80098e2:	10a4      	asrs	r4, r4, #2
 80098e4:	2600      	movs	r6, #0
 80098e6:	42a6      	cmp	r6, r4
 80098e8:	d105      	bne.n	80098f6 <__libc_init_array+0x2e>
 80098ea:	bd70      	pop	{r4, r5, r6, pc}
 80098ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80098f0:	4798      	blx	r3
 80098f2:	3601      	adds	r6, #1
 80098f4:	e7ee      	b.n	80098d4 <__libc_init_array+0xc>
 80098f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80098fa:	4798      	blx	r3
 80098fc:	3601      	adds	r6, #1
 80098fe:	e7f2      	b.n	80098e6 <__libc_init_array+0x1e>
 8009900:	08009970 	.word	0x08009970
 8009904:	08009970 	.word	0x08009970
 8009908:	08009970 	.word	0x08009970
 800990c:	08009974 	.word	0x08009974

08009910 <_init>:
 8009910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009912:	bf00      	nop
 8009914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009916:	bc08      	pop	{r3}
 8009918:	469e      	mov	lr, r3
 800991a:	4770      	bx	lr

0800991c <_fini>:
 800991c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991e:	bf00      	nop
 8009920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009922:	bc08      	pop	{r3}
 8009924:	469e      	mov	lr, r3
 8009926:	4770      	bx	lr
