
Code_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008da0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009038  08009038  00019038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009078  08009078  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009078  08009078  00019078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009080  08009080  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009080  08009080  00019080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009084  08009084  00019084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08009088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  24000010  08009098  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240006c8  08009098  000206c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a957  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fdd  00000000  00000000  0003a9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  0003d9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001035  00000000  00000000  0003ee70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003abbc  00000000  00000000  0003fea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c2a4  00000000  00000000  0007aa61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00186233  00000000  00000000  00096d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005948  00000000  00000000  0021cf38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00222880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009020 	.word	0x08009020

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08009020 	.word	0x08009020

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <main+0xcc>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 fbd5 	bl	8000ed8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fdc3 	bl	80012b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f855 	bl	80007e0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000736:	4b25      	ldr	r3, [pc, #148]	; (80007cc <main+0xcc>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a23      	ldr	r2, [pc, #140]	; (80007cc <main+0xcc>)
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <main+0xcc>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000754:	2000      	movs	r0, #0
 8000756:	f002 fe0d 	bl	8003374 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f002 fe23 	bl	80033a8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000766:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <main+0xcc>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x80>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x6a>
if ( timeout < 0 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x8a>
{
Error_Handler();
 8000786:	f000 fba7 	bl	8000ed8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 fa05 	bl	8000b98 <MX_GPIO_Init>
  MX_DMA_Init();
 800078e:	f000 f9e3 	bl	8000b58 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000792:	f000 f9af 	bl	8000af4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000796:	f000 f8ed 	bl	8000974 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800079a:	f000 f95f 	bl	8000a5c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800079e:	f000 f89d 	bl	80008dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  GPIOB->ODR = 0x00;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <main+0xd0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  HAL_Delay(500);
 80007a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ac:	f000 fe16 	bl	80013dc <HAL_Delay>
  HAL_TIM_Base_Start(&htim3);
 80007b0:	4808      	ldr	r0, [pc, #32]	; (80007d4 <main+0xd4>)
 80007b2:	f005 fe11 	bl	80063d8 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 80007b6:	2100      	movs	r1, #0
 80007b8:	4806      	ldr	r0, [pc, #24]	; (80007d4 <main+0xd4>)
 80007ba:	f005 ff85 	bl	80066c8 <HAL_TIM_OC_Start>
  hdma_tim3_ch1.XferCpltCallback = endof_scan_line;
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <main+0xd8>)
 80007c0:	4a06      	ldr	r2, [pc, #24]	; (80007dc <main+0xdc>)
 80007c2:	63da      	str	r2, [r3, #60]	; 0x3c
//
//  HAL_Delay(2000);
//
//  HAL_DMA_Start_IT(&hdma_tim3_ch1, (uint32_t)test_frame, (uint32_t) &GPIOB->ODR, 16);
//  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC1);
  start_Vsync_Sequence();
 80007c4:	f000 fb12 	bl	8000dec <start_Vsync_Sequence>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <main+0xc8>
 80007ca:	bf00      	nop
 80007cc:	58024400 	.word	0x58024400
 80007d0:	58020400 	.word	0x58020400
 80007d4:	24000078 	.word	0x24000078
 80007d8:	240000c4 	.word	0x240000c4
 80007dc:	08000d59 	.word	0x08000d59

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b09c      	sub	sp, #112	; 0x70
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ea:	224c      	movs	r2, #76	; 0x4c
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f008 fbe9 	bl	8008fc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2220      	movs	r2, #32
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f008 fbe3 	bl	8008fc6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000800:	2004      	movs	r0, #4
 8000802:	f002 ff15 	bl	8003630 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b32      	ldr	r3, [pc, #200]	; (80008d4 <SystemClock_Config+0xf4>)
 800080c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080e:	4a31      	ldr	r2, [pc, #196]	; (80008d4 <SystemClock_Config+0xf4>)
 8000810:	f023 0301 	bic.w	r3, r3, #1
 8000814:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000816:	4b2f      	ldr	r3, [pc, #188]	; (80008d4 <SystemClock_Config+0xf4>)
 8000818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	4b2d      	ldr	r3, [pc, #180]	; (80008d8 <SystemClock_Config+0xf8>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000828:	4a2b      	ldr	r2, [pc, #172]	; (80008d8 <SystemClock_Config+0xf8>)
 800082a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <SystemClock_Config+0xf8>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800083c:	bf00      	nop
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <SystemClock_Config+0xf8>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800084a:	d1f8      	bne.n	800083e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084c:	2301      	movs	r3, #1
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000850:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000856:	2302      	movs	r3, #2
 8000858:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085a:	2302      	movs	r3, #2
 800085c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800085e:	2301      	movs	r3, #1
 8000860:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000862:	2312      	movs	r3, #18
 8000864:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000866:	2302      	movs	r3, #2
 8000868:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800086a:	2302      	movs	r3, #2
 800086c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800086e:	2302      	movs	r3, #2
 8000870:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000872:	230c      	movs	r3, #12
 8000874:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000876:	2302      	movs	r3, #2
 8000878:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800087a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800087e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000884:	4618      	mov	r0, r3
 8000886:	f002 ff3d 	bl	8003704 <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000890:	f000 fb22 	bl	8000ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	233f      	movs	r3, #63	; 0x3f
 8000896:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	2303      	movs	r3, #3
 800089a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008a4:	2340      	movs	r3, #64	; 0x40
 80008a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008a8:	2340      	movs	r3, #64	; 0x40
 80008aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2101      	movs	r1, #1
 80008ba:	4618      	mov	r0, r3
 80008bc:	f003 fb7c 	bl	8003fb8 <HAL_RCC_ClockConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0xea>
  {
    Error_Handler();
 80008c6:	f000 fb07 	bl	8000ed8 <Error_Handler>
  }
}
 80008ca:	bf00      	nop
 80008cc:	3770      	adds	r7, #112	; 0x70
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	58000400 	.word	0x58000400
 80008d8:	58024800 	.word	0x58024800

080008dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e2:	f107 0310 	add.w	r3, r7, #16
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008fa:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_TIM2_Init+0x94>)
 80008fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000900:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000902:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_TIM2_Init+0x94>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_TIM2_Init+0x94>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 44;
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <MX_TIM2_Init+0x94>)
 8000910:	222c      	movs	r2, #44	; 0x2c
 8000912:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000914:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_TIM2_Init+0x94>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <MX_TIM2_Init+0x94>)
 800091c:	2280      	movs	r2, #128	; 0x80
 800091e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000920:	4813      	ldr	r0, [pc, #76]	; (8000970 <MX_TIM2_Init+0x94>)
 8000922:	f005 fd01 	bl	8006328 <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800092c:	f000 fad4 	bl	8000ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000934:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	4619      	mov	r1, r3
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <MX_TIM2_Init+0x94>)
 800093e:	f006 f953 	bl	8006be8 <HAL_TIM_ConfigClockSource>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000948:	f000 fac6 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094c:	2300      	movs	r3, #0
 800094e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_TIM2_Init+0x94>)
 800095a:	f006 fea5 	bl	80076a8 <HAL_TIMEx_MasterConfigSynchronization>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000964:	f000 fab8 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	2400002c 	.word	0x2400002c

08000974 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	; 0x38
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000994:	463b      	mov	r3, r7
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
 80009a2:	615a      	str	r2, [r3, #20]
 80009a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009a6:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <MX_TIM3_Init+0xe0>)
 80009a8:	4a2b      	ldr	r2, [pc, #172]	; (8000a58 <MX_TIM3_Init+0xe4>)
 80009aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80009ac:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <MX_TIM3_Init+0xe0>)
 80009ae:	2263      	movs	r2, #99	; 0x63
 80009b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b2:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <MX_TIM3_Init+0xe0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5;
 80009b8:	4b26      	ldr	r3, [pc, #152]	; (8000a54 <MX_TIM3_Init+0xe0>)
 80009ba:	2205      	movs	r2, #5
 80009bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009be:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <MX_TIM3_Init+0xe0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009c4:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <MX_TIM3_Init+0xe0>)
 80009c6:	2280      	movs	r2, #128	; 0x80
 80009c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009ca:	4822      	ldr	r0, [pc, #136]	; (8000a54 <MX_TIM3_Init+0xe0>)
 80009cc:	f005 fcac 	bl	8006328 <HAL_TIM_Base_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80009d6:	f000 fa7f 	bl	8000ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009e4:	4619      	mov	r1, r3
 80009e6:	481b      	ldr	r0, [pc, #108]	; (8000a54 <MX_TIM3_Init+0xe0>)
 80009e8:	f006 f8fe 	bl	8006be8 <HAL_TIM_ConfigClockSource>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80009f2:	f000 fa71 	bl	8000ed8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80009f6:	4817      	ldr	r0, [pc, #92]	; (8000a54 <MX_TIM3_Init+0xe0>)
 80009f8:	f005 fe05 	bl	8006606 <HAL_TIM_OC_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a02:	f000 fa69 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	480f      	ldr	r0, [pc, #60]	; (8000a54 <MX_TIM3_Init+0xe0>)
 8000a16:	f006 fe47 	bl	80076a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a20:	f000 fa5a 	bl	8000ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a24:	2300      	movs	r3, #0
 8000a26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a34:	463b      	mov	r3, r7
 8000a36:	2200      	movs	r2, #0
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4806      	ldr	r0, [pc, #24]	; (8000a54 <MX_TIM3_Init+0xe0>)
 8000a3c:	f006 f85a 	bl	8006af4 <HAL_TIM_OC_ConfigChannel>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000a46:	f000 fa47 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	3738      	adds	r7, #56	; 0x38
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	24000078 	.word	0x24000078
 8000a58:	40000400 	.word	0x40000400

08000a5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a60:	4b22      	ldr	r3, [pc, #136]	; (8000aec <MX_USART3_UART_Init+0x90>)
 8000a62:	4a23      	ldr	r2, [pc, #140]	; (8000af0 <MX_USART3_UART_Init+0x94>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a66:	4b21      	ldr	r3, [pc, #132]	; (8000aec <MX_USART3_UART_Init+0x90>)
 8000a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <MX_USART3_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <MX_USART3_UART_Init+0x90>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <MX_USART3_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <MX_USART3_UART_Init+0x90>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <MX_USART3_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b17      	ldr	r3, [pc, #92]	; (8000aec <MX_USART3_UART_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <MX_USART3_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_USART3_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <MX_USART3_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aa4:	4811      	ldr	r0, [pc, #68]	; (8000aec <MX_USART3_UART_Init+0x90>)
 8000aa6:	f006 feab 	bl	8007800 <HAL_UART_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ab0:	f000 fa12 	bl	8000ed8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	480d      	ldr	r0, [pc, #52]	; (8000aec <MX_USART3_UART_Init+0x90>)
 8000ab8:	f007 feb3 	bl	8008822 <HAL_UARTEx_SetTxFifoThreshold>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ac2:	f000 fa09 	bl	8000ed8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4808      	ldr	r0, [pc, #32]	; (8000aec <MX_USART3_UART_Init+0x90>)
 8000aca:	f007 fee8 	bl	800889e <HAL_UARTEx_SetRxFifoThreshold>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ad4:	f000 fa00 	bl	8000ed8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <MX_USART3_UART_Init+0x90>)
 8000ada:	f007 fe69 	bl	80087b0 <HAL_UARTEx_DisableFifoMode>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ae4:	f000 f9f8 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	2400013c 	.word	0x2400013c
 8000af0:	40004800 	.word	0x40004800

08000af4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000afa:	4a16      	ldr	r2, [pc, #88]	; (8000b54 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000afc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b00:	2209      	movs	r2, #9
 8000b02:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b06:	2202      	movs	r2, #2
 8000b08:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b12:	2202      	movs	r2, #2
 8000b14:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b3c:	f002 fc48 	bl	80033d0 <HAL_PCD_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b46:	f000 f9c7 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	240001d0 	.word	0x240001d0
 8000b54:	40080000 	.word	0x40080000

08000b58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <MX_DMA_Init+0x3c>)
 8000b60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b64:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <MX_DMA_Init+0x3c>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_DMA_Init+0x3c>)
 8000b70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	200b      	movs	r0, #11
 8000b82:	f000 fd36 	bl	80015f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b86:	200b      	movs	r0, #11
 8000b88:	f000 fd4d 	bl	8001626 <HAL_NVIC_EnableIRQ>

}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	58024400 	.word	0x58024400

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08c      	sub	sp, #48	; 0x30
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	4b64      	ldr	r3, [pc, #400]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	4a62      	ldr	r2, [pc, #392]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bbe:	4b60      	ldr	r3, [pc, #384]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc4:	f003 0304 	and.w	r3, r3, #4
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bcc:	4b5c      	ldr	r3, [pc, #368]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd2:	4a5b      	ldr	r2, [pc, #364]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bdc:	4b58      	ldr	r3, [pc, #352]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b55      	ldr	r3, [pc, #340]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	4a53      	ldr	r2, [pc, #332]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfa:	4b51      	ldr	r3, [pc, #324]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c08:	4b4d      	ldr	r3, [pc, #308]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0e:	4a4c      	ldr	r2, [pc, #304]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c18:	4b49      	ldr	r3, [pc, #292]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c26:	4b46      	ldr	r3, [pc, #280]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	4a44      	ldr	r2, [pc, #272]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c2e:	f043 0310 	orr.w	r3, r3, #16
 8000c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c36:	4b42      	ldr	r3, [pc, #264]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	f003 0310 	and.w	r3, r3, #16
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c44:	4b3e      	ldr	r3, [pc, #248]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	4a3d      	ldr	r2, [pc, #244]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c4c:	f043 0308 	orr.w	r3, r3, #8
 8000c50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c54:	4b3a      	ldr	r3, [pc, #232]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c62:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	4a35      	ldr	r2, [pc, #212]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c72:	4b33      	ldr	r3, [pc, #204]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000c80:	2201      	movs	r2, #1
 8000c82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c86:	482f      	ldr	r0, [pc, #188]	; (8000d44 <MX_GPIO_Init+0x1ac>)
 8000c88:	f002 fb5a 	bl	8003340 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f248 0103 	movw	r1, #32771	; 0x8003
 8000c92:	482d      	ldr	r0, [pc, #180]	; (8000d48 <MX_GPIO_Init+0x1b0>)
 8000c94:	f002 fb54 	bl	8003340 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c98:	2332      	movs	r3, #50	; 0x32
 8000c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca8:	230b      	movs	r3, #11
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4826      	ldr	r0, [pc, #152]	; (8000d4c <MX_GPIO_Init+0x1b4>)
 8000cb4:	f002 f994 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000cb8:	2386      	movs	r3, #134	; 0x86
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc8:	230b      	movs	r3, #11
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	481f      	ldr	r0, [pc, #124]	; (8000d50 <MX_GPIO_Init+0x1b8>)
 8000cd4:	f002 f984 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cdc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4814      	ldr	r0, [pc, #80]	; (8000d44 <MX_GPIO_Init+0x1ac>)
 8000cf2:	f002 f975 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8000cf6:	f248 0303 	movw	r3, #32771	; 0x8003
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480e      	ldr	r0, [pc, #56]	; (8000d48 <MX_GPIO_Init+0x1b0>)
 8000d10:	f002 f966 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d26:	230b      	movs	r3, #11
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4808      	ldr	r0, [pc, #32]	; (8000d54 <MX_GPIO_Init+0x1bc>)
 8000d32:	f002 f955 	bl	8002fe0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d36:	bf00      	nop
 8000d38:	3730      	adds	r7, #48	; 0x30
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	58024400 	.word	0x58024400
 8000d44:	58020400 	.word	0x58020400
 8000d48:	58021000 	.word	0x58021000
 8000d4c:	58020800 	.word	0x58020800
 8000d50:	58020000 	.word	0x58020000
 8000d54:	58021800 	.word	0x58021800

08000d58 <endof_scan_line>:

/* USER CODE BEGIN 4 */
void endof_scan_line(DMA_HandleTypeDef* _hdma){
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

	GPIOB->ODR = 0x00;
 8000d60:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <endof_scan_line+0x70>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	615a      	str	r2, [r3, #20]
	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <endof_scan_line+0x74>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <endof_scan_line+0x78>)
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d903      	bls.n	8000d7a <endof_scan_line+0x22>
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <endof_scan_line+0x7c>)
 8000d74:	2220      	movs	r2, #32
 8000d76:	605a      	str	r2, [r3, #4]

	// Setup for Hsync sequence

	return;
 8000d78:	e021      	b.n	8000dbe <endof_scan_line+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <endof_scan_line+0x74>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <endof_scan_line+0x80>)
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d903      	bls.n	8000d8e <endof_scan_line+0x36>
 8000d86:	4a15      	ldr	r2, [pc, #84]	; (8000ddc <endof_scan_line+0x84>)
 8000d88:	2320      	movs	r3, #32
 8000d8a:	60d3      	str	r3, [r2, #12]
	return;
 8000d8c:	e017      	b.n	8000dbe <endof_scan_line+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <endof_scan_line+0x74>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <endof_scan_line+0x88>)
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d903      	bls.n	8000da2 <endof_scan_line+0x4a>
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <endof_scan_line+0x84>)
 8000d9c:	2320      	movs	r3, #32
 8000d9e:	6093      	str	r3, [r2, #8]
	return;
 8000da0:	e00d      	b.n	8000dbe <endof_scan_line+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <endof_scan_line+0x74>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <endof_scan_line+0x8c>)
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d903      	bls.n	8000db6 <endof_scan_line+0x5e>
 8000dae:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <endof_scan_line+0x90>)
 8000db0:	2320      	movs	r3, #32
 8000db2:	60d3      	str	r3, [r2, #12]
	return;
 8000db4:	e003      	b.n	8000dbe <endof_scan_line+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000db6:	4a0c      	ldr	r2, [pc, #48]	; (8000de8 <endof_scan_line+0x90>)
 8000db8:	2320      	movs	r3, #32
 8000dba:	6093      	str	r3, [r2, #8]
	return;
 8000dbc:	bf00      	nop
}
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	58020400 	.word	0x58020400
 8000dcc:	240000c4 	.word	0x240000c4
 8000dd0:	400204b8 	.word	0x400204b8
 8000dd4:	58025400 	.word	0x58025400
 8000dd8:	40020458 	.word	0x40020458
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	400200b8 	.word	0x400200b8
 8000de4:	40020058 	.word	0x40020058
 8000de8:	40020000 	.word	0x40020000

08000dec <start_Vsync_Sequence>:
	HAL_TIM_Base_Start_IT(&htim2);
	GPIOB->ODR = 0xffff;
}


void start_Vsync_Sequence(){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0


	// Setup presecaler
	TIM2->PSC = 0;
 8000df0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df4:	2200      	movs	r2, #0
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28

	// Setup first sequence


	// Setup pulse sequence
	pulse_iter = 0;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <start_Vsync_Sequence+0x4c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	801a      	strh	r2, [r3, #0]

	pulse_sequence[0] = 4751;
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <start_Vsync_Sequence+0x50>)
 8000e00:	f241 228f 	movw	r2, #4751	; 0x128f
 8000e04:	601a      	str	r2, [r3, #0]
	pulse_sequence[1] = 78675;
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <start_Vsync_Sequence+0x50>)
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <start_Vsync_Sequence+0x54>)
 8000e0a:	605a      	str	r2, [r3, #4]
	pulse_sequence[2] = 0;
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <start_Vsync_Sequence+0x50>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]

	TIM2->ARR = 23827;
 8000e12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e16:	f645 5213 	movw	r2, #23827	; 0x5d13
 8000e1a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0;
 8000e1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e20:	2200      	movs	r2, #0
 8000e22:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim2);
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <start_Vsync_Sequence+0x58>)
 8000e26:	f005 fb47 	bl	80064b8 <HAL_TIM_Base_Start_IT>
	GPIOB->ODR = 0xffff;
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <start_Vsync_Sequence+0x5c>)
 8000e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e30:	615a      	str	r2, [r3, #20]
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	240006c0 	.word	0x240006c0
 8000e3c:	240006b4 	.word	0x240006b4
 8000e40:	00013353 	.word	0x00013353
 8000e44:	2400002c 	.word	0x2400002c
 8000e48:	58020400 	.word	0x58020400

08000e4c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

	if(htim == &htim2){
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a1b      	ldr	r2, [pc, #108]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d12e      	bne.n	8000eba <HAL_TIM_PeriodElapsedCallback+0x6e>

		if (pulse_iter == 0){
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d104      	bne.n	8000e6e <HAL_TIM_PeriodElapsedCallback+0x22>

			GPIOE->ODR = 0x8001;
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e66:	f248 0201 	movw	r2, #32769	; 0x8001
 8000e6a:	615a      	str	r2, [r3, #20]
 8000e6c:	e016      	b.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x50>
		}
		else if (pulse_iter == 1){
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d103      	bne.n	8000e7e <HAL_TIM_PeriodElapsedCallback+0x32>

			GPIOE->ODR = 0x0001;
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	615a      	str	r2, [r3, #20]
 8000e7c:	e00e      	b.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x50>
		}
		else if (pulse_iter == 2){
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d104      	bne.n	8000e90 <HAL_TIM_PeriodElapsedCallback+0x44>

			GPIOE->ODR = 0x8001;
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e88:	f248 0201 	movw	r2, #32769	; 0x8001
 8000e8c:	615a      	str	r2, [r3, #20]
 8000e8e:	e005      	b.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x50>
		}



		else{
			GPIOB->ODR = 0x0000;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	615a      	str	r2, [r3, #20]
			HAL_TIM_Base_Stop_IT(&htim2);
 8000e96:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000e98:	f005 fb86 	bl	80065a8 <HAL_TIM_Base_Stop_IT>

		}

		TIM2->ARR = pulse_sequence[pulse_iter];
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ea8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000eac:	62d3      	str	r3, [r2, #44]	; 0x2c
		pulse_iter++;
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000eb8:	801a      	strh	r2, [r3, #0]


	}

}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2400002c 	.word	0x2400002c
 8000ec8:	240006c0 	.word	0x240006c0
 8000ecc:	58021000 	.word	0x58021000
 8000ed0:	58020400 	.word	0x58020400
 8000ed4:	240006b4 	.word	0x240006b4

08000ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <Error_Handler+0x8>
	...

08000ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_MspInit+0x30>)
 8000eec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ef0:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <HAL_MspInit+0x30>)
 8000ef2:	f043 0302 	orr.w	r3, r3, #2
 8000ef6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_MspInit+0x30>)
 8000efc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	58024400 	.word	0x58024400

08000f18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f28:	d117      	bne.n	8000f5a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f2a:	4b30      	ldr	r3, [pc, #192]	; (8000fec <HAL_TIM_Base_MspInit+0xd4>)
 8000f2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f30:	4a2e      	ldr	r2, [pc, #184]	; (8000fec <HAL_TIM_Base_MspInit+0xd4>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f3a:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <HAL_TIM_Base_MspInit+0xd4>)
 8000f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	201c      	movs	r0, #28
 8000f4e:	f000 fb50 	bl	80015f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f52:	201c      	movs	r0, #28
 8000f54:	f000 fb67 	bl	8001626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f58:	e043      	b.n	8000fe2 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a24      	ldr	r2, [pc, #144]	; (8000ff0 <HAL_TIM_Base_MspInit+0xd8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d13e      	bne.n	8000fe2 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f64:	4b21      	ldr	r3, [pc, #132]	; (8000fec <HAL_TIM_Base_MspInit+0xd4>)
 8000f66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f6a:	4a20      	ldr	r2, [pc, #128]	; (8000fec <HAL_TIM_Base_MspInit+0xd4>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <HAL_TIM_Base_MspInit+0xd4>)
 8000f76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1.Instance = DMA1_Stream0;
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <HAL_TIM_Base_MspInit+0xdc>)
 8000f84:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <HAL_TIM_Base_MspInit+0xe0>)
 8000f86:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8000f88:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <HAL_TIM_Base_MspInit+0xdc>)
 8000f8a:	2217      	movs	r2, #23
 8000f8c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <HAL_TIM_Base_MspInit+0xdc>)
 8000f90:	2240      	movs	r2, #64	; 0x40
 8000f92:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <HAL_TIM_Base_MspInit+0xdc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <HAL_TIM_Base_MspInit+0xdc>)
 8000f9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HAL_TIM_Base_MspInit+0xdc>)
 8000fa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fa8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_TIM_Base_MspInit+0xdc>)
 8000fac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_TIM_Base_MspInit+0xdc>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_TIM_Base_MspInit+0xdc>)
 8000fba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fbe:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_TIM_Base_MspInit+0xdc>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8000fc6:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <HAL_TIM_Base_MspInit+0xdc>)
 8000fc8:	f000 fb48 	bl	800165c <HAL_DMA_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_TIM_Base_MspInit+0xbe>
      Error_Handler();
 8000fd2:	f7ff ff81 	bl	8000ed8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_TIM_Base_MspInit+0xdc>)
 8000fda:	625a      	str	r2, [r3, #36]	; 0x24
 8000fdc:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <HAL_TIM_Base_MspInit+0xdc>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	58024400 	.word	0x58024400
 8000ff0:	40000400 	.word	0x40000400
 8000ff4:	240000c4 	.word	0x240000c4
 8000ff8:	40020010 	.word	0x40020010

08000ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b0ba      	sub	sp, #232	; 0xe8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	22c0      	movs	r2, #192	; 0xc0
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f007 ffd2 	bl	8008fc6 <memset>
  if(huart->Instance==USART3)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <HAL_UART_MspInit+0xc8>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d146      	bne.n	80010ba <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800102c:	f04f 0202 	mov.w	r2, #2
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001038:	2300      	movs	r3, #0
 800103a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103e:	f107 0310 	add.w	r3, r7, #16
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fb44 	bl	80046d0 <HAL_RCCEx_PeriphCLKConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800104e:	f7ff ff43 	bl	8000ed8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001052:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <HAL_UART_MspInit+0xcc>)
 8001054:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001058:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <HAL_UART_MspInit+0xcc>)
 800105a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800105e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001062:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <HAL_UART_MspInit+0xcc>)
 8001064:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_UART_MspInit+0xcc>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001076:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <HAL_UART_MspInit+0xcc>)
 8001078:	f043 0308 	orr.w	r3, r3, #8
 800107c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_UART_MspInit+0xcc>)
 8001082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800108e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001092:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010a8:	2307      	movs	r3, #7
 80010aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <HAL_UART_MspInit+0xd0>)
 80010b6:	f001 ff93 	bl	8002fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010ba:	bf00      	nop
 80010bc:	37e8      	adds	r7, #232	; 0xe8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40004800 	.word	0x40004800
 80010c8:	58024400 	.word	0x58024400
 80010cc:	58020c00 	.word	0x58020c00

080010d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0ba      	sub	sp, #232	; 0xe8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	22c0      	movs	r2, #192	; 0xc0
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f007 ff68 	bl	8008fc6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a38      	ldr	r2, [pc, #224]	; (80011dc <HAL_PCD_MspInit+0x10c>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d169      	bne.n	80011d4 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001100:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800110c:	2301      	movs	r3, #1
 800110e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001110:	2312      	movs	r3, #18
 8001112:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001114:	2302      	movs	r3, #2
 8001116:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001118:	2303      	movs	r3, #3
 800111a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800111c:	2302      	movs	r3, #2
 800111e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001120:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001124:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001126:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800112a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800112c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	4618      	mov	r0, r3
 800113a:	f003 fac9 	bl	80046d0 <HAL_RCCEx_PeriphCLKConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8001144:	f7ff fec8 	bl	8000ed8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001148:	f002 facc 	bl	80036e4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <HAL_PCD_MspInit+0x110>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001152:	4a23      	ldr	r2, [pc, #140]	; (80011e0 <HAL_PCD_MspInit+0x110>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115c:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <HAL_PCD_MspInit+0x110>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800116a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800116e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001184:	230a      	movs	r3, #10
 8001186:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800118e:	4619      	mov	r1, r3
 8001190:	4814      	ldr	r0, [pc, #80]	; (80011e4 <HAL_PCD_MspInit+0x114>)
 8001192:	f001 ff25 	bl	8002fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800119a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011ae:	4619      	mov	r1, r3
 80011b0:	480c      	ldr	r0, [pc, #48]	; (80011e4 <HAL_PCD_MspInit+0x114>)
 80011b2:	f001 ff15 	bl	8002fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_PCD_MspInit+0x110>)
 80011b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011bc:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <HAL_PCD_MspInit+0x110>)
 80011be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_PCD_MspInit+0x110>)
 80011c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80011d4:	bf00      	nop
 80011d6:	37e8      	adds	r7, #232	; 0xe8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40080000 	.word	0x40080000
 80011e0:	58024400 	.word	0x58024400
 80011e4:	58020000 	.word	0x58020000

080011e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <NMI_Handler+0x4>

080011ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <HardFault_Handler+0x4>

080011f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <MemManage_Handler+0x4>

080011fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <UsageFault_Handler+0x4>

08001206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001234:	f000 f8b2 	bl	800139c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <DMA1_Stream0_IRQHandler+0x10>)
 8001242:	f000 fd67 	bl	8001d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	240000c4 	.word	0x240000c4

08001250 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <TIM2_IRQHandler+0x10>)
 8001256:	f005 fb45 	bl	80068e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2400002c 	.word	0x2400002c

08001264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800129c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001268:	f7ff f9b4 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800126e:	490d      	ldr	r1, [pc, #52]	; (80012a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001270:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001274:	e002      	b.n	800127c <LoopCopyDataInit>

08001276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127a:	3304      	adds	r3, #4

0800127c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800127c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001280:	d3f9      	bcc.n	8001276 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001284:	4c0a      	ldr	r4, [pc, #40]	; (80012b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001288:	e001      	b.n	800128e <LoopFillZerobss>

0800128a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800128c:	3204      	adds	r2, #4

0800128e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001290:	d3fb      	bcc.n	800128a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001292:	f007 fea1 	bl	8008fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001296:	f7ff fa33 	bl	8000700 <main>
  bx  lr
 800129a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800129c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012a4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80012a8:	08009088 	.word	0x08009088
  ldr r2, =_sbss
 80012ac:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80012b0:	240006c8 	.word	0x240006c8

080012b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b4:	e7fe      	b.n	80012b4 <ADC3_IRQHandler>
	...

080012b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012be:	2003      	movs	r0, #3
 80012c0:	f000 f98c 	bl	80015dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012c4:	f003 f82e 	bl	8004324 <HAL_RCC_GetSysClockFreq>
 80012c8:	4602      	mov	r2, r0
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_Init+0x68>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	0a1b      	lsrs	r3, r3, #8
 80012d0:	f003 030f 	and.w	r3, r3, #15
 80012d4:	4913      	ldr	r1, [pc, #76]	; (8001324 <HAL_Init+0x6c>)
 80012d6:	5ccb      	ldrb	r3, [r1, r3]
 80012d8:	f003 031f 	and.w	r3, r3, #31
 80012dc:	fa22 f303 	lsr.w	r3, r2, r3
 80012e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <HAL_Init+0x68>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <HAL_Init+0x6c>)
 80012ec:	5cd3      	ldrb	r3, [r2, r3]
 80012ee:	f003 031f 	and.w	r3, r3, #31
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	fa22 f303 	lsr.w	r3, r2, r3
 80012f8:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <HAL_Init+0x70>)
 80012fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012fc:	4a0b      	ldr	r2, [pc, #44]	; (800132c <HAL_Init+0x74>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001302:	2000      	movs	r0, #0
 8001304:	f000 f814 	bl	8001330 <HAL_InitTick>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e002      	b.n	8001318 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001312:	f7ff fde7 	bl	8000ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	58024400 	.word	0x58024400
 8001324:	08009038 	.word	0x08009038
 8001328:	24000004 	.word	0x24000004
 800132c:	24000000 	.word	0x24000000

08001330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_InitTick+0x60>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e021      	b.n	8001388 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_InitTick+0x64>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <HAL_InitTick+0x60>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	fbb3 f3f1 	udiv	r3, r3, r1
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f971 	bl	8001642 <HAL_SYSTICK_Config>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e00e      	b.n	8001388 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b0f      	cmp	r3, #15
 800136e:	d80a      	bhi.n	8001386 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001370:	2200      	movs	r2, #0
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f000 f93b 	bl	80015f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800137c:	4a06      	ldr	r2, [pc, #24]	; (8001398 <HAL_InitTick+0x68>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e000      	b.n	8001388 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	2400000c 	.word	0x2400000c
 8001394:	24000000 	.word	0x24000000
 8001398:	24000008 	.word	0x24000008

0800139c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_IncTick+0x20>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_IncTick+0x24>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <HAL_IncTick+0x24>)
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	2400000c 	.word	0x2400000c
 80013c0:	240006c4 	.word	0x240006c4

080013c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return uwTick;
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <HAL_GetTick+0x14>)
 80013ca:	681b      	ldr	r3, [r3, #0]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	240006c4 	.word	0x240006c4

080013dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e4:	f7ff ffee 	bl	80013c4 <HAL_GetTick>
 80013e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f4:	d005      	beq.n	8001402 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_Delay+0x44>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4413      	add	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001402:	bf00      	nop
 8001404:	f7ff ffde 	bl	80013c4 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	429a      	cmp	r2, r3
 8001412:	d8f7      	bhi.n	8001404 <HAL_Delay+0x28>
  {
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2400000c 	.word	0x2400000c

08001424 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001428:	4b03      	ldr	r3, [pc, #12]	; (8001438 <HAL_GetREVID+0x14>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	0c1b      	lsrs	r3, r3, #16
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	5c001000 	.word	0x5c001000

0800143c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <__NVIC_SetPriorityGrouping+0x40>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001458:	4013      	ands	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <__NVIC_SetPriorityGrouping+0x44>)
 8001466:	4313      	orrs	r3, r2
 8001468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146a:	4a04      	ldr	r2, [pc, #16]	; (800147c <__NVIC_SetPriorityGrouping+0x40>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60d3      	str	r3, [r2, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00
 8001480:	05fa0000 	.word	0x05fa0000

08001484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <__NVIC_GetPriorityGrouping+0x18>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	0a1b      	lsrs	r3, r3, #8
 800148e:	f003 0307 	and.w	r3, r3, #7
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	db0b      	blt.n	80014ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	f003 021f 	and.w	r2, r3, #31
 80014b8:	4907      	ldr	r1, [pc, #28]	; (80014d8 <__NVIC_EnableIRQ+0x38>)
 80014ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014be:	095b      	lsrs	r3, r3, #5
 80014c0:	2001      	movs	r0, #1
 80014c2:	fa00 f202 	lsl.w	r2, r0, r2
 80014c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000e100 	.word	0xe000e100

080014dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	db0a      	blt.n	8001506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	490c      	ldr	r1, [pc, #48]	; (8001528 <__NVIC_SetPriority+0x4c>)
 80014f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014fa:	0112      	lsls	r2, r2, #4
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	440b      	add	r3, r1
 8001500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001504:	e00a      	b.n	800151c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4908      	ldr	r1, [pc, #32]	; (800152c <__NVIC_SetPriority+0x50>)
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	3b04      	subs	r3, #4
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	440b      	add	r3, r1
 800151a:	761a      	strb	r2, [r3, #24]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000e100 	.word	0xe000e100
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f1c3 0307 	rsb	r3, r3, #7
 800154a:	2b04      	cmp	r3, #4
 800154c:	bf28      	it	cs
 800154e:	2304      	movcs	r3, #4
 8001550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3304      	adds	r3, #4
 8001556:	2b06      	cmp	r3, #6
 8001558:	d902      	bls.n	8001560 <NVIC_EncodePriority+0x30>
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3b03      	subs	r3, #3
 800155e:	e000      	b.n	8001562 <NVIC_EncodePriority+0x32>
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	f04f 32ff 	mov.w	r2, #4294967295
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	401a      	ands	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001578:	f04f 31ff 	mov.w	r1, #4294967295
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43d9      	mvns	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	4313      	orrs	r3, r2
         );
}
 800158a:	4618      	mov	r0, r3
 800158c:	3724      	adds	r7, #36	; 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a8:	d301      	bcc.n	80015ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00f      	b.n	80015ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <SysTick_Config+0x40>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b6:	210f      	movs	r1, #15
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f7ff ff8e 	bl	80014dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <SysTick_Config+0x40>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c6:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <SysTick_Config+0x40>)
 80015c8:	2207      	movs	r2, #7
 80015ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	e000e010 	.word	0xe000e010

080015dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ff29 	bl	800143c <__NVIC_SetPriorityGrouping>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001600:	f7ff ff40 	bl	8001484 <__NVIC_GetPriorityGrouping>
 8001604:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	6978      	ldr	r0, [r7, #20]
 800160c:	f7ff ff90 	bl	8001530 <NVIC_EncodePriority>
 8001610:	4602      	mov	r2, r0
 8001612:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5f 	bl	80014dc <__NVIC_SetPriority>
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001630:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff33 	bl	80014a0 <__NVIC_EnableIRQ>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffa4 	bl	8001598 <SysTick_Config>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001664:	f7ff feae 	bl	80013c4 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e316      	b.n	8001ca2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a66      	ldr	r2, [pc, #408]	; (8001814 <HAL_DMA_Init+0x1b8>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d04a      	beq.n	8001714 <HAL_DMA_Init+0xb8>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a65      	ldr	r2, [pc, #404]	; (8001818 <HAL_DMA_Init+0x1bc>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d045      	beq.n	8001714 <HAL_DMA_Init+0xb8>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a63      	ldr	r2, [pc, #396]	; (800181c <HAL_DMA_Init+0x1c0>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d040      	beq.n	8001714 <HAL_DMA_Init+0xb8>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a62      	ldr	r2, [pc, #392]	; (8001820 <HAL_DMA_Init+0x1c4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d03b      	beq.n	8001714 <HAL_DMA_Init+0xb8>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a60      	ldr	r2, [pc, #384]	; (8001824 <HAL_DMA_Init+0x1c8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d036      	beq.n	8001714 <HAL_DMA_Init+0xb8>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a5f      	ldr	r2, [pc, #380]	; (8001828 <HAL_DMA_Init+0x1cc>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d031      	beq.n	8001714 <HAL_DMA_Init+0xb8>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a5d      	ldr	r2, [pc, #372]	; (800182c <HAL_DMA_Init+0x1d0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d02c      	beq.n	8001714 <HAL_DMA_Init+0xb8>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a5c      	ldr	r2, [pc, #368]	; (8001830 <HAL_DMA_Init+0x1d4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d027      	beq.n	8001714 <HAL_DMA_Init+0xb8>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a5a      	ldr	r2, [pc, #360]	; (8001834 <HAL_DMA_Init+0x1d8>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d022      	beq.n	8001714 <HAL_DMA_Init+0xb8>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a59      	ldr	r2, [pc, #356]	; (8001838 <HAL_DMA_Init+0x1dc>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d01d      	beq.n	8001714 <HAL_DMA_Init+0xb8>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a57      	ldr	r2, [pc, #348]	; (800183c <HAL_DMA_Init+0x1e0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d018      	beq.n	8001714 <HAL_DMA_Init+0xb8>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a56      	ldr	r2, [pc, #344]	; (8001840 <HAL_DMA_Init+0x1e4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d013      	beq.n	8001714 <HAL_DMA_Init+0xb8>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a54      	ldr	r2, [pc, #336]	; (8001844 <HAL_DMA_Init+0x1e8>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d00e      	beq.n	8001714 <HAL_DMA_Init+0xb8>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a53      	ldr	r2, [pc, #332]	; (8001848 <HAL_DMA_Init+0x1ec>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d009      	beq.n	8001714 <HAL_DMA_Init+0xb8>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a51      	ldr	r2, [pc, #324]	; (800184c <HAL_DMA_Init+0x1f0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d004      	beq.n	8001714 <HAL_DMA_Init+0xb8>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a50      	ldr	r2, [pc, #320]	; (8001850 <HAL_DMA_Init+0x1f4>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d101      	bne.n	8001718 <HAL_DMA_Init+0xbc>
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <HAL_DMA_Init+0xbe>
 8001718:	2300      	movs	r3, #0
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 813b 	beq.w	8001996 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2202      	movs	r2, #2
 8001724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a37      	ldr	r2, [pc, #220]	; (8001814 <HAL_DMA_Init+0x1b8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d04a      	beq.n	80017d0 <HAL_DMA_Init+0x174>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a36      	ldr	r2, [pc, #216]	; (8001818 <HAL_DMA_Init+0x1bc>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d045      	beq.n	80017d0 <HAL_DMA_Init+0x174>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a34      	ldr	r2, [pc, #208]	; (800181c <HAL_DMA_Init+0x1c0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d040      	beq.n	80017d0 <HAL_DMA_Init+0x174>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a33      	ldr	r2, [pc, #204]	; (8001820 <HAL_DMA_Init+0x1c4>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d03b      	beq.n	80017d0 <HAL_DMA_Init+0x174>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a31      	ldr	r2, [pc, #196]	; (8001824 <HAL_DMA_Init+0x1c8>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d036      	beq.n	80017d0 <HAL_DMA_Init+0x174>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a30      	ldr	r2, [pc, #192]	; (8001828 <HAL_DMA_Init+0x1cc>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d031      	beq.n	80017d0 <HAL_DMA_Init+0x174>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a2e      	ldr	r2, [pc, #184]	; (800182c <HAL_DMA_Init+0x1d0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d02c      	beq.n	80017d0 <HAL_DMA_Init+0x174>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a2d      	ldr	r2, [pc, #180]	; (8001830 <HAL_DMA_Init+0x1d4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d027      	beq.n	80017d0 <HAL_DMA_Init+0x174>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a2b      	ldr	r2, [pc, #172]	; (8001834 <HAL_DMA_Init+0x1d8>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d022      	beq.n	80017d0 <HAL_DMA_Init+0x174>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a2a      	ldr	r2, [pc, #168]	; (8001838 <HAL_DMA_Init+0x1dc>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d01d      	beq.n	80017d0 <HAL_DMA_Init+0x174>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a28      	ldr	r2, [pc, #160]	; (800183c <HAL_DMA_Init+0x1e0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d018      	beq.n	80017d0 <HAL_DMA_Init+0x174>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a27      	ldr	r2, [pc, #156]	; (8001840 <HAL_DMA_Init+0x1e4>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d013      	beq.n	80017d0 <HAL_DMA_Init+0x174>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a25      	ldr	r2, [pc, #148]	; (8001844 <HAL_DMA_Init+0x1e8>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00e      	beq.n	80017d0 <HAL_DMA_Init+0x174>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a24      	ldr	r2, [pc, #144]	; (8001848 <HAL_DMA_Init+0x1ec>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d009      	beq.n	80017d0 <HAL_DMA_Init+0x174>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a22      	ldr	r2, [pc, #136]	; (800184c <HAL_DMA_Init+0x1f0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d004      	beq.n	80017d0 <HAL_DMA_Init+0x174>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a21      	ldr	r2, [pc, #132]	; (8001850 <HAL_DMA_Init+0x1f4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d108      	bne.n	80017e2 <HAL_DMA_Init+0x186>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0201 	bic.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	e007      	b.n	80017f2 <HAL_DMA_Init+0x196>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0201 	bic.w	r2, r2, #1
 80017f0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80017f2:	e02f      	b.n	8001854 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017f4:	f7ff fde6 	bl	80013c4 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b05      	cmp	r3, #5
 8001800:	d928      	bls.n	8001854 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2220      	movs	r2, #32
 8001806:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2203      	movs	r2, #3
 800180c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e246      	b.n	8001ca2 <HAL_DMA_Init+0x646>
 8001814:	40020010 	.word	0x40020010
 8001818:	40020028 	.word	0x40020028
 800181c:	40020040 	.word	0x40020040
 8001820:	40020058 	.word	0x40020058
 8001824:	40020070 	.word	0x40020070
 8001828:	40020088 	.word	0x40020088
 800182c:	400200a0 	.word	0x400200a0
 8001830:	400200b8 	.word	0x400200b8
 8001834:	40020410 	.word	0x40020410
 8001838:	40020428 	.word	0x40020428
 800183c:	40020440 	.word	0x40020440
 8001840:	40020458 	.word	0x40020458
 8001844:	40020470 	.word	0x40020470
 8001848:	40020488 	.word	0x40020488
 800184c:	400204a0 	.word	0x400204a0
 8001850:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1c8      	bne.n	80017f4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	4b83      	ldr	r3, [pc, #524]	; (8001a7c <HAL_DMA_Init+0x420>)
 800186e:	4013      	ands	r3, r2
 8001870:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800187a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001886:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001892:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	4313      	orrs	r3, r2
 800189e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d107      	bne.n	80018b8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	4313      	orrs	r3, r2
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80018b8:	4b71      	ldr	r3, [pc, #452]	; (8001a80 <HAL_DMA_Init+0x424>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b71      	ldr	r3, [pc, #452]	; (8001a84 <HAL_DMA_Init+0x428>)
 80018be:	4013      	ands	r3, r2
 80018c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018c4:	d328      	bcc.n	8001918 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b28      	cmp	r3, #40	; 0x28
 80018cc:	d903      	bls.n	80018d6 <HAL_DMA_Init+0x27a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b2e      	cmp	r3, #46	; 0x2e
 80018d4:	d917      	bls.n	8001906 <HAL_DMA_Init+0x2aa>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b3e      	cmp	r3, #62	; 0x3e
 80018dc:	d903      	bls.n	80018e6 <HAL_DMA_Init+0x28a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b42      	cmp	r3, #66	; 0x42
 80018e4:	d90f      	bls.n	8001906 <HAL_DMA_Init+0x2aa>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b46      	cmp	r3, #70	; 0x46
 80018ec:	d903      	bls.n	80018f6 <HAL_DMA_Init+0x29a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b48      	cmp	r3, #72	; 0x48
 80018f4:	d907      	bls.n	8001906 <HAL_DMA_Init+0x2aa>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b4e      	cmp	r3, #78	; 0x4e
 80018fc:	d905      	bls.n	800190a <HAL_DMA_Init+0x2ae>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b52      	cmp	r3, #82	; 0x52
 8001904:	d801      	bhi.n	800190a <HAL_DMA_Init+0x2ae>
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <HAL_DMA_Init+0x2b0>
 800190a:	2300      	movs	r3, #0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001916:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f023 0307 	bic.w	r3, r3, #7
 800192e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	4313      	orrs	r3, r2
 8001938:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	2b04      	cmp	r3, #4
 8001940:	d117      	bne.n	8001972 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	4313      	orrs	r3, r2
 800194a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00e      	beq.n	8001972 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f001 f9b9 	bl	8002ccc <DMA_CheckFifoParam>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2240      	movs	r2, #64	; 0x40
 8001964:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e197      	b.n	8001ca2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f001 f8f4 	bl	8002b68 <DMA_CalcBaseAndBitshift>
 8001980:	4603      	mov	r3, r0
 8001982:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001988:	f003 031f 	and.w	r3, r3, #31
 800198c:	223f      	movs	r2, #63	; 0x3f
 800198e:	409a      	lsls	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	e0cd      	b.n	8001b32 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a3b      	ldr	r2, [pc, #236]	; (8001a88 <HAL_DMA_Init+0x42c>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d022      	beq.n	80019e6 <HAL_DMA_Init+0x38a>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a39      	ldr	r2, [pc, #228]	; (8001a8c <HAL_DMA_Init+0x430>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d01d      	beq.n	80019e6 <HAL_DMA_Init+0x38a>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a38      	ldr	r2, [pc, #224]	; (8001a90 <HAL_DMA_Init+0x434>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d018      	beq.n	80019e6 <HAL_DMA_Init+0x38a>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a36      	ldr	r2, [pc, #216]	; (8001a94 <HAL_DMA_Init+0x438>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d013      	beq.n	80019e6 <HAL_DMA_Init+0x38a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a35      	ldr	r2, [pc, #212]	; (8001a98 <HAL_DMA_Init+0x43c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d00e      	beq.n	80019e6 <HAL_DMA_Init+0x38a>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a33      	ldr	r2, [pc, #204]	; (8001a9c <HAL_DMA_Init+0x440>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d009      	beq.n	80019e6 <HAL_DMA_Init+0x38a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a32      	ldr	r2, [pc, #200]	; (8001aa0 <HAL_DMA_Init+0x444>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d004      	beq.n	80019e6 <HAL_DMA_Init+0x38a>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a30      	ldr	r2, [pc, #192]	; (8001aa4 <HAL_DMA_Init+0x448>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d101      	bne.n	80019ea <HAL_DMA_Init+0x38e>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_DMA_Init+0x390>
 80019ea:	2300      	movs	r3, #0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 8097 	beq.w	8001b20 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a24      	ldr	r2, [pc, #144]	; (8001a88 <HAL_DMA_Init+0x42c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d021      	beq.n	8001a40 <HAL_DMA_Init+0x3e4>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a22      	ldr	r2, [pc, #136]	; (8001a8c <HAL_DMA_Init+0x430>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d01c      	beq.n	8001a40 <HAL_DMA_Init+0x3e4>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a21      	ldr	r2, [pc, #132]	; (8001a90 <HAL_DMA_Init+0x434>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d017      	beq.n	8001a40 <HAL_DMA_Init+0x3e4>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a1f      	ldr	r2, [pc, #124]	; (8001a94 <HAL_DMA_Init+0x438>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d012      	beq.n	8001a40 <HAL_DMA_Init+0x3e4>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a1e      	ldr	r2, [pc, #120]	; (8001a98 <HAL_DMA_Init+0x43c>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d00d      	beq.n	8001a40 <HAL_DMA_Init+0x3e4>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1c      	ldr	r2, [pc, #112]	; (8001a9c <HAL_DMA_Init+0x440>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d008      	beq.n	8001a40 <HAL_DMA_Init+0x3e4>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a1b      	ldr	r2, [pc, #108]	; (8001aa0 <HAL_DMA_Init+0x444>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d003      	beq.n	8001a40 <HAL_DMA_Init+0x3e4>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a19      	ldr	r2, [pc, #100]	; (8001aa4 <HAL_DMA_Init+0x448>)
 8001a3e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2202      	movs	r2, #2
 8001a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <HAL_DMA_Init+0x44c>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2b40      	cmp	r3, #64	; 0x40
 8001a66:	d021      	beq.n	8001aac <HAL_DMA_Init+0x450>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b80      	cmp	r3, #128	; 0x80
 8001a6e:	d102      	bne.n	8001a76 <HAL_DMA_Init+0x41a>
 8001a70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a74:	e01b      	b.n	8001aae <HAL_DMA_Init+0x452>
 8001a76:	2300      	movs	r3, #0
 8001a78:	e019      	b.n	8001aae <HAL_DMA_Init+0x452>
 8001a7a:	bf00      	nop
 8001a7c:	fe10803f 	.word	0xfe10803f
 8001a80:	5c001000 	.word	0x5c001000
 8001a84:	ffff0000 	.word	0xffff0000
 8001a88:	58025408 	.word	0x58025408
 8001a8c:	5802541c 	.word	0x5802541c
 8001a90:	58025430 	.word	0x58025430
 8001a94:	58025444 	.word	0x58025444
 8001a98:	58025458 	.word	0x58025458
 8001a9c:	5802546c 	.word	0x5802546c
 8001aa0:	58025480 	.word	0x58025480
 8001aa4:	58025494 	.word	0x58025494
 8001aa8:	fffe000f 	.word	0xfffe000f
 8001aac:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68d2      	ldr	r2, [r2, #12]
 8001ab2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ab4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001abc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ac4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001acc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ad4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001adc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b6e      	ldr	r3, [pc, #440]	; (8001cac <HAL_DMA_Init+0x650>)
 8001af4:	4413      	add	r3, r2
 8001af6:	4a6e      	ldr	r2, [pc, #440]	; (8001cb0 <HAL_DMA_Init+0x654>)
 8001af8:	fba2 2303 	umull	r2, r3, r2, r3
 8001afc:	091b      	lsrs	r3, r3, #4
 8001afe:	009a      	lsls	r2, r3, #2
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f001 f82f 	bl	8002b68 <DMA_CalcBaseAndBitshift>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b12:	f003 031f 	and.w	r3, r3, #31
 8001b16:	2201      	movs	r2, #1
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	e008      	b.n	8001b32 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2240      	movs	r2, #64	; 0x40
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2203      	movs	r2, #3
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0b7      	b.n	8001ca2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a5f      	ldr	r2, [pc, #380]	; (8001cb4 <HAL_DMA_Init+0x658>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d072      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a5d      	ldr	r2, [pc, #372]	; (8001cb8 <HAL_DMA_Init+0x65c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d06d      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a5c      	ldr	r2, [pc, #368]	; (8001cbc <HAL_DMA_Init+0x660>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d068      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a5a      	ldr	r2, [pc, #360]	; (8001cc0 <HAL_DMA_Init+0x664>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d063      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a59      	ldr	r2, [pc, #356]	; (8001cc4 <HAL_DMA_Init+0x668>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d05e      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a57      	ldr	r2, [pc, #348]	; (8001cc8 <HAL_DMA_Init+0x66c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d059      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a56      	ldr	r2, [pc, #344]	; (8001ccc <HAL_DMA_Init+0x670>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d054      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a54      	ldr	r2, [pc, #336]	; (8001cd0 <HAL_DMA_Init+0x674>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d04f      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a53      	ldr	r2, [pc, #332]	; (8001cd4 <HAL_DMA_Init+0x678>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d04a      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a51      	ldr	r2, [pc, #324]	; (8001cd8 <HAL_DMA_Init+0x67c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d045      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a50      	ldr	r2, [pc, #320]	; (8001cdc <HAL_DMA_Init+0x680>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d040      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a4e      	ldr	r2, [pc, #312]	; (8001ce0 <HAL_DMA_Init+0x684>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d03b      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a4d      	ldr	r2, [pc, #308]	; (8001ce4 <HAL_DMA_Init+0x688>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d036      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a4b      	ldr	r2, [pc, #300]	; (8001ce8 <HAL_DMA_Init+0x68c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d031      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a4a      	ldr	r2, [pc, #296]	; (8001cec <HAL_DMA_Init+0x690>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d02c      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a48      	ldr	r2, [pc, #288]	; (8001cf0 <HAL_DMA_Init+0x694>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d027      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a47      	ldr	r2, [pc, #284]	; (8001cf4 <HAL_DMA_Init+0x698>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d022      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a45      	ldr	r2, [pc, #276]	; (8001cf8 <HAL_DMA_Init+0x69c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d01d      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a44      	ldr	r2, [pc, #272]	; (8001cfc <HAL_DMA_Init+0x6a0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d018      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a42      	ldr	r2, [pc, #264]	; (8001d00 <HAL_DMA_Init+0x6a4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d013      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a41      	ldr	r2, [pc, #260]	; (8001d04 <HAL_DMA_Init+0x6a8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d00e      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a3f      	ldr	r2, [pc, #252]	; (8001d08 <HAL_DMA_Init+0x6ac>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d009      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a3e      	ldr	r2, [pc, #248]	; (8001d0c <HAL_DMA_Init+0x6b0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d004      	beq.n	8001c22 <HAL_DMA_Init+0x5c6>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a3c      	ldr	r2, [pc, #240]	; (8001d10 <HAL_DMA_Init+0x6b4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_DMA_Init+0x5ca>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_DMA_Init+0x5cc>
 8001c26:	2300      	movs	r3, #0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d032      	beq.n	8001c92 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f001 f8c9 	bl	8002dc4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2b80      	cmp	r3, #128	; 0x80
 8001c38:	d102      	bne.n	8001c40 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001c54:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d010      	beq.n	8001c80 <HAL_DMA_Init+0x624>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d80c      	bhi.n	8001c80 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f001 f946 	bl	8002ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	e008      	b.n	8001c92 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	a7fdabf8 	.word	0xa7fdabf8
 8001cb0:	cccccccd 	.word	0xcccccccd
 8001cb4:	40020010 	.word	0x40020010
 8001cb8:	40020028 	.word	0x40020028
 8001cbc:	40020040 	.word	0x40020040
 8001cc0:	40020058 	.word	0x40020058
 8001cc4:	40020070 	.word	0x40020070
 8001cc8:	40020088 	.word	0x40020088
 8001ccc:	400200a0 	.word	0x400200a0
 8001cd0:	400200b8 	.word	0x400200b8
 8001cd4:	40020410 	.word	0x40020410
 8001cd8:	40020428 	.word	0x40020428
 8001cdc:	40020440 	.word	0x40020440
 8001ce0:	40020458 	.word	0x40020458
 8001ce4:	40020470 	.word	0x40020470
 8001ce8:	40020488 	.word	0x40020488
 8001cec:	400204a0 	.word	0x400204a0
 8001cf0:	400204b8 	.word	0x400204b8
 8001cf4:	58025408 	.word	0x58025408
 8001cf8:	5802541c 	.word	0x5802541c
 8001cfc:	58025430 	.word	0x58025430
 8001d00:	58025444 	.word	0x58025444
 8001d04:	58025458 	.word	0x58025458
 8001d08:	5802546c 	.word	0x5802546c
 8001d0c:	58025480 	.word	0x58025480
 8001d10:	58025494 	.word	0x58025494

08001d14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	; 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d20:	4b67      	ldr	r3, [pc, #412]	; (8001ec0 <HAL_DMA_IRQHandler+0x1ac>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a67      	ldr	r2, [pc, #412]	; (8001ec4 <HAL_DMA_IRQHandler+0x1b0>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	0a9b      	lsrs	r3, r3, #10
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a5f      	ldr	r2, [pc, #380]	; (8001ec8 <HAL_DMA_IRQHandler+0x1b4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d04a      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xd2>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a5d      	ldr	r2, [pc, #372]	; (8001ecc <HAL_DMA_IRQHandler+0x1b8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d045      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xd2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a5c      	ldr	r2, [pc, #368]	; (8001ed0 <HAL_DMA_IRQHandler+0x1bc>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d040      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xd2>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a5a      	ldr	r2, [pc, #360]	; (8001ed4 <HAL_DMA_IRQHandler+0x1c0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d03b      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xd2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a59      	ldr	r2, [pc, #356]	; (8001ed8 <HAL_DMA_IRQHandler+0x1c4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d036      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xd2>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a57      	ldr	r2, [pc, #348]	; (8001edc <HAL_DMA_IRQHandler+0x1c8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d031      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xd2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a56      	ldr	r2, [pc, #344]	; (8001ee0 <HAL_DMA_IRQHandler+0x1cc>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d02c      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xd2>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a54      	ldr	r2, [pc, #336]	; (8001ee4 <HAL_DMA_IRQHandler+0x1d0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d027      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xd2>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a53      	ldr	r2, [pc, #332]	; (8001ee8 <HAL_DMA_IRQHandler+0x1d4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d022      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xd2>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a51      	ldr	r2, [pc, #324]	; (8001eec <HAL_DMA_IRQHandler+0x1d8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d01d      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xd2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a50      	ldr	r2, [pc, #320]	; (8001ef0 <HAL_DMA_IRQHandler+0x1dc>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d018      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xd2>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a4e      	ldr	r2, [pc, #312]	; (8001ef4 <HAL_DMA_IRQHandler+0x1e0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d013      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xd2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a4d      	ldr	r2, [pc, #308]	; (8001ef8 <HAL_DMA_IRQHandler+0x1e4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00e      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xd2>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a4b      	ldr	r2, [pc, #300]	; (8001efc <HAL_DMA_IRQHandler+0x1e8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d009      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xd2>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a4a      	ldr	r2, [pc, #296]	; (8001f00 <HAL_DMA_IRQHandler+0x1ec>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d004      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xd2>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a48      	ldr	r2, [pc, #288]	; (8001f04 <HAL_DMA_IRQHandler+0x1f0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d101      	bne.n	8001dea <HAL_DMA_IRQHandler+0xd6>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <HAL_DMA_IRQHandler+0xd8>
 8001dea:	2300      	movs	r3, #0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 842b 	beq.w	8002648 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df6:	f003 031f 	and.w	r3, r3, #31
 8001dfa:	2208      	movs	r2, #8
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80a2 	beq.w	8001f4c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a2e      	ldr	r2, [pc, #184]	; (8001ec8 <HAL_DMA_IRQHandler+0x1b4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d04a      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x194>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a2d      	ldr	r2, [pc, #180]	; (8001ecc <HAL_DMA_IRQHandler+0x1b8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d045      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x194>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a2b      	ldr	r2, [pc, #172]	; (8001ed0 <HAL_DMA_IRQHandler+0x1bc>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d040      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x194>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a2a      	ldr	r2, [pc, #168]	; (8001ed4 <HAL_DMA_IRQHandler+0x1c0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d03b      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x194>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a28      	ldr	r2, [pc, #160]	; (8001ed8 <HAL_DMA_IRQHandler+0x1c4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d036      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x194>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a27      	ldr	r2, [pc, #156]	; (8001edc <HAL_DMA_IRQHandler+0x1c8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d031      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x194>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a25      	ldr	r2, [pc, #148]	; (8001ee0 <HAL_DMA_IRQHandler+0x1cc>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d02c      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x194>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a24      	ldr	r2, [pc, #144]	; (8001ee4 <HAL_DMA_IRQHandler+0x1d0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d027      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x194>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a22      	ldr	r2, [pc, #136]	; (8001ee8 <HAL_DMA_IRQHandler+0x1d4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d022      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x194>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a21      	ldr	r2, [pc, #132]	; (8001eec <HAL_DMA_IRQHandler+0x1d8>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d01d      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x194>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a1f      	ldr	r2, [pc, #124]	; (8001ef0 <HAL_DMA_IRQHandler+0x1dc>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d018      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x194>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1e      	ldr	r2, [pc, #120]	; (8001ef4 <HAL_DMA_IRQHandler+0x1e0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d013      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x194>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1c      	ldr	r2, [pc, #112]	; (8001ef8 <HAL_DMA_IRQHandler+0x1e4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00e      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x194>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1b      	ldr	r2, [pc, #108]	; (8001efc <HAL_DMA_IRQHandler+0x1e8>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d009      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x194>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a19      	ldr	r2, [pc, #100]	; (8001f00 <HAL_DMA_IRQHandler+0x1ec>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d004      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x194>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a18      	ldr	r2, [pc, #96]	; (8001f04 <HAL_DMA_IRQHandler+0x1f0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d12f      	bne.n	8001f08 <HAL_DMA_IRQHandler+0x1f4>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	bf14      	ite	ne
 8001eb6:	2301      	movne	r3, #1
 8001eb8:	2300      	moveq	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	e02e      	b.n	8001f1c <HAL_DMA_IRQHandler+0x208>
 8001ebe:	bf00      	nop
 8001ec0:	24000000 	.word	0x24000000
 8001ec4:	1b4e81b5 	.word	0x1b4e81b5
 8001ec8:	40020010 	.word	0x40020010
 8001ecc:	40020028 	.word	0x40020028
 8001ed0:	40020040 	.word	0x40020040
 8001ed4:	40020058 	.word	0x40020058
 8001ed8:	40020070 	.word	0x40020070
 8001edc:	40020088 	.word	0x40020088
 8001ee0:	400200a0 	.word	0x400200a0
 8001ee4:	400200b8 	.word	0x400200b8
 8001ee8:	40020410 	.word	0x40020410
 8001eec:	40020428 	.word	0x40020428
 8001ef0:	40020440 	.word	0x40020440
 8001ef4:	40020458 	.word	0x40020458
 8001ef8:	40020470 	.word	0x40020470
 8001efc:	40020488 	.word	0x40020488
 8001f00:	400204a0 	.word	0x400204a0
 8001f04:	400204b8 	.word	0x400204b8
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	bf14      	ite	ne
 8001f16:	2301      	movne	r3, #1
 8001f18:	2300      	moveq	r3, #0
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d015      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0204 	bic.w	r2, r2, #4
 8001f2e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	2208      	movs	r2, #8
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f44:	f043 0201 	orr.w	r2, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d06e      	beq.n	8002040 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a69      	ldr	r2, [pc, #420]	; (800210c <HAL_DMA_IRQHandler+0x3f8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d04a      	beq.n	8002002 <HAL_DMA_IRQHandler+0x2ee>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a67      	ldr	r2, [pc, #412]	; (8002110 <HAL_DMA_IRQHandler+0x3fc>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d045      	beq.n	8002002 <HAL_DMA_IRQHandler+0x2ee>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a66      	ldr	r2, [pc, #408]	; (8002114 <HAL_DMA_IRQHandler+0x400>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d040      	beq.n	8002002 <HAL_DMA_IRQHandler+0x2ee>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a64      	ldr	r2, [pc, #400]	; (8002118 <HAL_DMA_IRQHandler+0x404>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d03b      	beq.n	8002002 <HAL_DMA_IRQHandler+0x2ee>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a63      	ldr	r2, [pc, #396]	; (800211c <HAL_DMA_IRQHandler+0x408>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d036      	beq.n	8002002 <HAL_DMA_IRQHandler+0x2ee>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a61      	ldr	r2, [pc, #388]	; (8002120 <HAL_DMA_IRQHandler+0x40c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d031      	beq.n	8002002 <HAL_DMA_IRQHandler+0x2ee>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a60      	ldr	r2, [pc, #384]	; (8002124 <HAL_DMA_IRQHandler+0x410>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d02c      	beq.n	8002002 <HAL_DMA_IRQHandler+0x2ee>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a5e      	ldr	r2, [pc, #376]	; (8002128 <HAL_DMA_IRQHandler+0x414>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d027      	beq.n	8002002 <HAL_DMA_IRQHandler+0x2ee>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a5d      	ldr	r2, [pc, #372]	; (800212c <HAL_DMA_IRQHandler+0x418>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d022      	beq.n	8002002 <HAL_DMA_IRQHandler+0x2ee>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a5b      	ldr	r2, [pc, #364]	; (8002130 <HAL_DMA_IRQHandler+0x41c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d01d      	beq.n	8002002 <HAL_DMA_IRQHandler+0x2ee>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a5a      	ldr	r2, [pc, #360]	; (8002134 <HAL_DMA_IRQHandler+0x420>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d018      	beq.n	8002002 <HAL_DMA_IRQHandler+0x2ee>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a58      	ldr	r2, [pc, #352]	; (8002138 <HAL_DMA_IRQHandler+0x424>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <HAL_DMA_IRQHandler+0x2ee>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a57      	ldr	r2, [pc, #348]	; (800213c <HAL_DMA_IRQHandler+0x428>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d00e      	beq.n	8002002 <HAL_DMA_IRQHandler+0x2ee>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a55      	ldr	r2, [pc, #340]	; (8002140 <HAL_DMA_IRQHandler+0x42c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d009      	beq.n	8002002 <HAL_DMA_IRQHandler+0x2ee>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a54      	ldr	r2, [pc, #336]	; (8002144 <HAL_DMA_IRQHandler+0x430>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d004      	beq.n	8002002 <HAL_DMA_IRQHandler+0x2ee>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a52      	ldr	r2, [pc, #328]	; (8002148 <HAL_DMA_IRQHandler+0x434>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d10a      	bne.n	8002018 <HAL_DMA_IRQHandler+0x304>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf14      	ite	ne
 8002010:	2301      	movne	r3, #1
 8002012:	2300      	moveq	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	e003      	b.n	8002020 <HAL_DMA_IRQHandler+0x30c>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2300      	movs	r3, #0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00d      	beq.n	8002040 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	2201      	movs	r2, #1
 800202e:	409a      	lsls	r2, r3
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002038:	f043 0202 	orr.w	r2, r3, #2
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	2204      	movs	r2, #4
 800204a:	409a      	lsls	r2, r3
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 808f 	beq.w	8002174 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a2c      	ldr	r2, [pc, #176]	; (800210c <HAL_DMA_IRQHandler+0x3f8>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d04a      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x3e2>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a2a      	ldr	r2, [pc, #168]	; (8002110 <HAL_DMA_IRQHandler+0x3fc>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d045      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x3e2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a29      	ldr	r2, [pc, #164]	; (8002114 <HAL_DMA_IRQHandler+0x400>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d040      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x3e2>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a27      	ldr	r2, [pc, #156]	; (8002118 <HAL_DMA_IRQHandler+0x404>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d03b      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x3e2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a26      	ldr	r2, [pc, #152]	; (800211c <HAL_DMA_IRQHandler+0x408>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d036      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x3e2>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a24      	ldr	r2, [pc, #144]	; (8002120 <HAL_DMA_IRQHandler+0x40c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d031      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x3e2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a23      	ldr	r2, [pc, #140]	; (8002124 <HAL_DMA_IRQHandler+0x410>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d02c      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x3e2>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a21      	ldr	r2, [pc, #132]	; (8002128 <HAL_DMA_IRQHandler+0x414>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d027      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x3e2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a20      	ldr	r2, [pc, #128]	; (800212c <HAL_DMA_IRQHandler+0x418>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d022      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x3e2>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1e      	ldr	r2, [pc, #120]	; (8002130 <HAL_DMA_IRQHandler+0x41c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01d      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x3e2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a1d      	ldr	r2, [pc, #116]	; (8002134 <HAL_DMA_IRQHandler+0x420>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d018      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x3e2>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1b      	ldr	r2, [pc, #108]	; (8002138 <HAL_DMA_IRQHandler+0x424>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d013      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x3e2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1a      	ldr	r2, [pc, #104]	; (800213c <HAL_DMA_IRQHandler+0x428>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d00e      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x3e2>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a18      	ldr	r2, [pc, #96]	; (8002140 <HAL_DMA_IRQHandler+0x42c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d009      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x3e2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a17      	ldr	r2, [pc, #92]	; (8002144 <HAL_DMA_IRQHandler+0x430>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d004      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x3e2>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a15      	ldr	r2, [pc, #84]	; (8002148 <HAL_DMA_IRQHandler+0x434>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d12a      	bne.n	800214c <HAL_DMA_IRQHandler+0x438>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf14      	ite	ne
 8002104:	2301      	movne	r3, #1
 8002106:	2300      	moveq	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	e023      	b.n	8002154 <HAL_DMA_IRQHandler+0x440>
 800210c:	40020010 	.word	0x40020010
 8002110:	40020028 	.word	0x40020028
 8002114:	40020040 	.word	0x40020040
 8002118:	40020058 	.word	0x40020058
 800211c:	40020070 	.word	0x40020070
 8002120:	40020088 	.word	0x40020088
 8002124:	400200a0 	.word	0x400200a0
 8002128:	400200b8 	.word	0x400200b8
 800212c:	40020410 	.word	0x40020410
 8002130:	40020428 	.word	0x40020428
 8002134:	40020440 	.word	0x40020440
 8002138:	40020458 	.word	0x40020458
 800213c:	40020470 	.word	0x40020470
 8002140:	40020488 	.word	0x40020488
 8002144:	400204a0 	.word	0x400204a0
 8002148:	400204b8 	.word	0x400204b8
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2300      	movs	r3, #0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00d      	beq.n	8002174 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	2204      	movs	r2, #4
 8002162:	409a      	lsls	r2, r3
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	f043 0204 	orr.w	r2, r3, #4
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	2210      	movs	r2, #16
 800217e:	409a      	lsls	r2, r3
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80a6 	beq.w	80022d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a85      	ldr	r2, [pc, #532]	; (80023a4 <HAL_DMA_IRQHandler+0x690>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d04a      	beq.n	800222a <HAL_DMA_IRQHandler+0x516>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a83      	ldr	r2, [pc, #524]	; (80023a8 <HAL_DMA_IRQHandler+0x694>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d045      	beq.n	800222a <HAL_DMA_IRQHandler+0x516>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a82      	ldr	r2, [pc, #520]	; (80023ac <HAL_DMA_IRQHandler+0x698>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d040      	beq.n	800222a <HAL_DMA_IRQHandler+0x516>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a80      	ldr	r2, [pc, #512]	; (80023b0 <HAL_DMA_IRQHandler+0x69c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d03b      	beq.n	800222a <HAL_DMA_IRQHandler+0x516>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a7f      	ldr	r2, [pc, #508]	; (80023b4 <HAL_DMA_IRQHandler+0x6a0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d036      	beq.n	800222a <HAL_DMA_IRQHandler+0x516>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a7d      	ldr	r2, [pc, #500]	; (80023b8 <HAL_DMA_IRQHandler+0x6a4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d031      	beq.n	800222a <HAL_DMA_IRQHandler+0x516>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a7c      	ldr	r2, [pc, #496]	; (80023bc <HAL_DMA_IRQHandler+0x6a8>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d02c      	beq.n	800222a <HAL_DMA_IRQHandler+0x516>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a7a      	ldr	r2, [pc, #488]	; (80023c0 <HAL_DMA_IRQHandler+0x6ac>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d027      	beq.n	800222a <HAL_DMA_IRQHandler+0x516>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a79      	ldr	r2, [pc, #484]	; (80023c4 <HAL_DMA_IRQHandler+0x6b0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d022      	beq.n	800222a <HAL_DMA_IRQHandler+0x516>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a77      	ldr	r2, [pc, #476]	; (80023c8 <HAL_DMA_IRQHandler+0x6b4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d01d      	beq.n	800222a <HAL_DMA_IRQHandler+0x516>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a76      	ldr	r2, [pc, #472]	; (80023cc <HAL_DMA_IRQHandler+0x6b8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d018      	beq.n	800222a <HAL_DMA_IRQHandler+0x516>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a74      	ldr	r2, [pc, #464]	; (80023d0 <HAL_DMA_IRQHandler+0x6bc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <HAL_DMA_IRQHandler+0x516>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a73      	ldr	r2, [pc, #460]	; (80023d4 <HAL_DMA_IRQHandler+0x6c0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d00e      	beq.n	800222a <HAL_DMA_IRQHandler+0x516>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a71      	ldr	r2, [pc, #452]	; (80023d8 <HAL_DMA_IRQHandler+0x6c4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d009      	beq.n	800222a <HAL_DMA_IRQHandler+0x516>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a70      	ldr	r2, [pc, #448]	; (80023dc <HAL_DMA_IRQHandler+0x6c8>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d004      	beq.n	800222a <HAL_DMA_IRQHandler+0x516>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a6e      	ldr	r2, [pc, #440]	; (80023e0 <HAL_DMA_IRQHandler+0x6cc>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d10a      	bne.n	8002240 <HAL_DMA_IRQHandler+0x52c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	bf14      	ite	ne
 8002238:	2301      	movne	r3, #1
 800223a:	2300      	moveq	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	e009      	b.n	8002254 <HAL_DMA_IRQHandler+0x540>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b00      	cmp	r3, #0
 800224c:	bf14      	ite	ne
 800224e:	2301      	movne	r3, #1
 8002250:	2300      	moveq	r3, #0
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d03e      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225c:	f003 031f 	and.w	r3, r3, #31
 8002260:	2210      	movs	r2, #16
 8002262:	409a      	lsls	r2, r3
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d018      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d108      	bne.n	8002296 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	2b00      	cmp	r3, #0
 800228a:	d024      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	4798      	blx	r3
 8002294:	e01f      	b.n	80022d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800229a:	2b00      	cmp	r3, #0
 800229c:	d01b      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4798      	blx	r3
 80022a6:	e016      	b.n	80022d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d107      	bne.n	80022c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0208 	bic.w	r2, r2, #8
 80022c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	2220      	movs	r2, #32
 80022e0:	409a      	lsls	r2, r3
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 8110 	beq.w	800250c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a2c      	ldr	r2, [pc, #176]	; (80023a4 <HAL_DMA_IRQHandler+0x690>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d04a      	beq.n	800238c <HAL_DMA_IRQHandler+0x678>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a2b      	ldr	r2, [pc, #172]	; (80023a8 <HAL_DMA_IRQHandler+0x694>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d045      	beq.n	800238c <HAL_DMA_IRQHandler+0x678>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a29      	ldr	r2, [pc, #164]	; (80023ac <HAL_DMA_IRQHandler+0x698>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d040      	beq.n	800238c <HAL_DMA_IRQHandler+0x678>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a28      	ldr	r2, [pc, #160]	; (80023b0 <HAL_DMA_IRQHandler+0x69c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d03b      	beq.n	800238c <HAL_DMA_IRQHandler+0x678>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a26      	ldr	r2, [pc, #152]	; (80023b4 <HAL_DMA_IRQHandler+0x6a0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d036      	beq.n	800238c <HAL_DMA_IRQHandler+0x678>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a25      	ldr	r2, [pc, #148]	; (80023b8 <HAL_DMA_IRQHandler+0x6a4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d031      	beq.n	800238c <HAL_DMA_IRQHandler+0x678>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a23      	ldr	r2, [pc, #140]	; (80023bc <HAL_DMA_IRQHandler+0x6a8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d02c      	beq.n	800238c <HAL_DMA_IRQHandler+0x678>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a22      	ldr	r2, [pc, #136]	; (80023c0 <HAL_DMA_IRQHandler+0x6ac>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d027      	beq.n	800238c <HAL_DMA_IRQHandler+0x678>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a20      	ldr	r2, [pc, #128]	; (80023c4 <HAL_DMA_IRQHandler+0x6b0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d022      	beq.n	800238c <HAL_DMA_IRQHandler+0x678>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1f      	ldr	r2, [pc, #124]	; (80023c8 <HAL_DMA_IRQHandler+0x6b4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d01d      	beq.n	800238c <HAL_DMA_IRQHandler+0x678>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a1d      	ldr	r2, [pc, #116]	; (80023cc <HAL_DMA_IRQHandler+0x6b8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d018      	beq.n	800238c <HAL_DMA_IRQHandler+0x678>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a1c      	ldr	r2, [pc, #112]	; (80023d0 <HAL_DMA_IRQHandler+0x6bc>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d013      	beq.n	800238c <HAL_DMA_IRQHandler+0x678>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a1a      	ldr	r2, [pc, #104]	; (80023d4 <HAL_DMA_IRQHandler+0x6c0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00e      	beq.n	800238c <HAL_DMA_IRQHandler+0x678>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a19      	ldr	r2, [pc, #100]	; (80023d8 <HAL_DMA_IRQHandler+0x6c4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d009      	beq.n	800238c <HAL_DMA_IRQHandler+0x678>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a17      	ldr	r2, [pc, #92]	; (80023dc <HAL_DMA_IRQHandler+0x6c8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d004      	beq.n	800238c <HAL_DMA_IRQHandler+0x678>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a16      	ldr	r2, [pc, #88]	; (80023e0 <HAL_DMA_IRQHandler+0x6cc>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d12b      	bne.n	80023e4 <HAL_DMA_IRQHandler+0x6d0>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	2b00      	cmp	r3, #0
 8002398:	bf14      	ite	ne
 800239a:	2301      	movne	r3, #1
 800239c:	2300      	moveq	r3, #0
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	e02a      	b.n	80023f8 <HAL_DMA_IRQHandler+0x6e4>
 80023a2:	bf00      	nop
 80023a4:	40020010 	.word	0x40020010
 80023a8:	40020028 	.word	0x40020028
 80023ac:	40020040 	.word	0x40020040
 80023b0:	40020058 	.word	0x40020058
 80023b4:	40020070 	.word	0x40020070
 80023b8:	40020088 	.word	0x40020088
 80023bc:	400200a0 	.word	0x400200a0
 80023c0:	400200b8 	.word	0x400200b8
 80023c4:	40020410 	.word	0x40020410
 80023c8:	40020428 	.word	0x40020428
 80023cc:	40020440 	.word	0x40020440
 80023d0:	40020458 	.word	0x40020458
 80023d4:	40020470 	.word	0x40020470
 80023d8:	40020488 	.word	0x40020488
 80023dc:	400204a0 	.word	0x400204a0
 80023e0:	400204b8 	.word	0x400204b8
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf14      	ite	ne
 80023f2:	2301      	movne	r3, #1
 80023f4:	2300      	moveq	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 8087 	beq.w	800250c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002402:	f003 031f 	and.w	r3, r3, #31
 8002406:	2220      	movs	r2, #32
 8002408:	409a      	lsls	r2, r3
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b04      	cmp	r3, #4
 8002418:	d139      	bne.n	800248e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0216 	bic.w	r2, r2, #22
 8002428:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695a      	ldr	r2, [r3, #20]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002438:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	2b00      	cmp	r3, #0
 8002440:	d103      	bne.n	800244a <HAL_DMA_IRQHandler+0x736>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002446:	2b00      	cmp	r3, #0
 8002448:	d007      	beq.n	800245a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0208 	bic.w	r2, r2, #8
 8002458:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	223f      	movs	r2, #63	; 0x3f
 8002464:	409a      	lsls	r2, r3
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 834a 	beq.w	8002b18 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	4798      	blx	r3
          }
          return;
 800248c:	e344      	b.n	8002b18 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d018      	beq.n	80024ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d108      	bne.n	80024bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d02c      	beq.n	800250c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	4798      	blx	r3
 80024ba:	e027      	b.n	800250c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d023      	beq.n	800250c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	4798      	blx	r3
 80024cc:	e01e      	b.n	800250c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10f      	bne.n	80024fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0210 	bic.w	r2, r2, #16
 80024ea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 8306 	beq.w	8002b22 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8088 	beq.w	8002634 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2204      	movs	r2, #4
 8002528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a7a      	ldr	r2, [pc, #488]	; (800271c <HAL_DMA_IRQHandler+0xa08>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d04a      	beq.n	80025cc <HAL_DMA_IRQHandler+0x8b8>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a79      	ldr	r2, [pc, #484]	; (8002720 <HAL_DMA_IRQHandler+0xa0c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d045      	beq.n	80025cc <HAL_DMA_IRQHandler+0x8b8>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a77      	ldr	r2, [pc, #476]	; (8002724 <HAL_DMA_IRQHandler+0xa10>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d040      	beq.n	80025cc <HAL_DMA_IRQHandler+0x8b8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a76      	ldr	r2, [pc, #472]	; (8002728 <HAL_DMA_IRQHandler+0xa14>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d03b      	beq.n	80025cc <HAL_DMA_IRQHandler+0x8b8>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a74      	ldr	r2, [pc, #464]	; (800272c <HAL_DMA_IRQHandler+0xa18>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d036      	beq.n	80025cc <HAL_DMA_IRQHandler+0x8b8>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a73      	ldr	r2, [pc, #460]	; (8002730 <HAL_DMA_IRQHandler+0xa1c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d031      	beq.n	80025cc <HAL_DMA_IRQHandler+0x8b8>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a71      	ldr	r2, [pc, #452]	; (8002734 <HAL_DMA_IRQHandler+0xa20>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d02c      	beq.n	80025cc <HAL_DMA_IRQHandler+0x8b8>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a70      	ldr	r2, [pc, #448]	; (8002738 <HAL_DMA_IRQHandler+0xa24>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d027      	beq.n	80025cc <HAL_DMA_IRQHandler+0x8b8>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a6e      	ldr	r2, [pc, #440]	; (800273c <HAL_DMA_IRQHandler+0xa28>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d022      	beq.n	80025cc <HAL_DMA_IRQHandler+0x8b8>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a6d      	ldr	r2, [pc, #436]	; (8002740 <HAL_DMA_IRQHandler+0xa2c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d01d      	beq.n	80025cc <HAL_DMA_IRQHandler+0x8b8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a6b      	ldr	r2, [pc, #428]	; (8002744 <HAL_DMA_IRQHandler+0xa30>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d018      	beq.n	80025cc <HAL_DMA_IRQHandler+0x8b8>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a6a      	ldr	r2, [pc, #424]	; (8002748 <HAL_DMA_IRQHandler+0xa34>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d013      	beq.n	80025cc <HAL_DMA_IRQHandler+0x8b8>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a68      	ldr	r2, [pc, #416]	; (800274c <HAL_DMA_IRQHandler+0xa38>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00e      	beq.n	80025cc <HAL_DMA_IRQHandler+0x8b8>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a67      	ldr	r2, [pc, #412]	; (8002750 <HAL_DMA_IRQHandler+0xa3c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d009      	beq.n	80025cc <HAL_DMA_IRQHandler+0x8b8>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a65      	ldr	r2, [pc, #404]	; (8002754 <HAL_DMA_IRQHandler+0xa40>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d004      	beq.n	80025cc <HAL_DMA_IRQHandler+0x8b8>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a64      	ldr	r2, [pc, #400]	; (8002758 <HAL_DMA_IRQHandler+0xa44>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d108      	bne.n	80025de <HAL_DMA_IRQHandler+0x8ca>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0201 	bic.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	e007      	b.n	80025ee <HAL_DMA_IRQHandler+0x8da>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0201 	bic.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3301      	adds	r3, #1
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d307      	bcc.n	800260a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f2      	bne.n	80025ee <HAL_DMA_IRQHandler+0x8da>
 8002608:	e000      	b.n	800260c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800260a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d004      	beq.n	8002624 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2203      	movs	r2, #3
 800261e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002622:	e003      	b.n	800262c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 8272 	beq.w	8002b22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	4798      	blx	r3
 8002646:	e26c      	b.n	8002b22 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a43      	ldr	r2, [pc, #268]	; (800275c <HAL_DMA_IRQHandler+0xa48>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d022      	beq.n	8002698 <HAL_DMA_IRQHandler+0x984>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a42      	ldr	r2, [pc, #264]	; (8002760 <HAL_DMA_IRQHandler+0xa4c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d01d      	beq.n	8002698 <HAL_DMA_IRQHandler+0x984>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a40      	ldr	r2, [pc, #256]	; (8002764 <HAL_DMA_IRQHandler+0xa50>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d018      	beq.n	8002698 <HAL_DMA_IRQHandler+0x984>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a3f      	ldr	r2, [pc, #252]	; (8002768 <HAL_DMA_IRQHandler+0xa54>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d013      	beq.n	8002698 <HAL_DMA_IRQHandler+0x984>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a3d      	ldr	r2, [pc, #244]	; (800276c <HAL_DMA_IRQHandler+0xa58>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00e      	beq.n	8002698 <HAL_DMA_IRQHandler+0x984>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a3c      	ldr	r2, [pc, #240]	; (8002770 <HAL_DMA_IRQHandler+0xa5c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d009      	beq.n	8002698 <HAL_DMA_IRQHandler+0x984>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a3a      	ldr	r2, [pc, #232]	; (8002774 <HAL_DMA_IRQHandler+0xa60>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d004      	beq.n	8002698 <HAL_DMA_IRQHandler+0x984>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a39      	ldr	r2, [pc, #228]	; (8002778 <HAL_DMA_IRQHandler+0xa64>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_DMA_IRQHandler+0x988>
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <HAL_DMA_IRQHandler+0x98a>
 800269c:	2300      	movs	r3, #0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 823f 	beq.w	8002b22 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	2204      	movs	r2, #4
 80026b6:	409a      	lsls	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80cd 	beq.w	800285c <HAL_DMA_IRQHandler+0xb48>
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 80c7 	beq.w	800285c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	2204      	movs	r2, #4
 80026d8:	409a      	lsls	r2, r3
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d049      	beq.n	800277c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 8210 	beq.w	8002b1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002704:	e20a      	b.n	8002b1c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 8206 	beq.w	8002b1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002718:	e200      	b.n	8002b1c <HAL_DMA_IRQHandler+0xe08>
 800271a:	bf00      	nop
 800271c:	40020010 	.word	0x40020010
 8002720:	40020028 	.word	0x40020028
 8002724:	40020040 	.word	0x40020040
 8002728:	40020058 	.word	0x40020058
 800272c:	40020070 	.word	0x40020070
 8002730:	40020088 	.word	0x40020088
 8002734:	400200a0 	.word	0x400200a0
 8002738:	400200b8 	.word	0x400200b8
 800273c:	40020410 	.word	0x40020410
 8002740:	40020428 	.word	0x40020428
 8002744:	40020440 	.word	0x40020440
 8002748:	40020458 	.word	0x40020458
 800274c:	40020470 	.word	0x40020470
 8002750:	40020488 	.word	0x40020488
 8002754:	400204a0 	.word	0x400204a0
 8002758:	400204b8 	.word	0x400204b8
 800275c:	58025408 	.word	0x58025408
 8002760:	5802541c 	.word	0x5802541c
 8002764:	58025430 	.word	0x58025430
 8002768:	58025444 	.word	0x58025444
 800276c:	58025458 	.word	0x58025458
 8002770:	5802546c 	.word	0x5802546c
 8002774:	58025480 	.word	0x58025480
 8002778:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f003 0320 	and.w	r3, r3, #32
 8002782:	2b00      	cmp	r3, #0
 8002784:	d160      	bne.n	8002848 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a7f      	ldr	r2, [pc, #508]	; (8002988 <HAL_DMA_IRQHandler+0xc74>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d04a      	beq.n	8002826 <HAL_DMA_IRQHandler+0xb12>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a7d      	ldr	r2, [pc, #500]	; (800298c <HAL_DMA_IRQHandler+0xc78>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d045      	beq.n	8002826 <HAL_DMA_IRQHandler+0xb12>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a7c      	ldr	r2, [pc, #496]	; (8002990 <HAL_DMA_IRQHandler+0xc7c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d040      	beq.n	8002826 <HAL_DMA_IRQHandler+0xb12>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a7a      	ldr	r2, [pc, #488]	; (8002994 <HAL_DMA_IRQHandler+0xc80>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d03b      	beq.n	8002826 <HAL_DMA_IRQHandler+0xb12>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a79      	ldr	r2, [pc, #484]	; (8002998 <HAL_DMA_IRQHandler+0xc84>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d036      	beq.n	8002826 <HAL_DMA_IRQHandler+0xb12>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a77      	ldr	r2, [pc, #476]	; (800299c <HAL_DMA_IRQHandler+0xc88>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d031      	beq.n	8002826 <HAL_DMA_IRQHandler+0xb12>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a76      	ldr	r2, [pc, #472]	; (80029a0 <HAL_DMA_IRQHandler+0xc8c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d02c      	beq.n	8002826 <HAL_DMA_IRQHandler+0xb12>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a74      	ldr	r2, [pc, #464]	; (80029a4 <HAL_DMA_IRQHandler+0xc90>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d027      	beq.n	8002826 <HAL_DMA_IRQHandler+0xb12>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a73      	ldr	r2, [pc, #460]	; (80029a8 <HAL_DMA_IRQHandler+0xc94>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d022      	beq.n	8002826 <HAL_DMA_IRQHandler+0xb12>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a71      	ldr	r2, [pc, #452]	; (80029ac <HAL_DMA_IRQHandler+0xc98>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d01d      	beq.n	8002826 <HAL_DMA_IRQHandler+0xb12>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a70      	ldr	r2, [pc, #448]	; (80029b0 <HAL_DMA_IRQHandler+0xc9c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d018      	beq.n	8002826 <HAL_DMA_IRQHandler+0xb12>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a6e      	ldr	r2, [pc, #440]	; (80029b4 <HAL_DMA_IRQHandler+0xca0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_DMA_IRQHandler+0xb12>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a6d      	ldr	r2, [pc, #436]	; (80029b8 <HAL_DMA_IRQHandler+0xca4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00e      	beq.n	8002826 <HAL_DMA_IRQHandler+0xb12>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a6b      	ldr	r2, [pc, #428]	; (80029bc <HAL_DMA_IRQHandler+0xca8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d009      	beq.n	8002826 <HAL_DMA_IRQHandler+0xb12>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a6a      	ldr	r2, [pc, #424]	; (80029c0 <HAL_DMA_IRQHandler+0xcac>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_DMA_IRQHandler+0xb12>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a68      	ldr	r2, [pc, #416]	; (80029c4 <HAL_DMA_IRQHandler+0xcb0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d108      	bne.n	8002838 <HAL_DMA_IRQHandler+0xb24>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0208 	bic.w	r2, r2, #8
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	e007      	b.n	8002848 <HAL_DMA_IRQHandler+0xb34>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0204 	bic.w	r2, r2, #4
 8002846:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 8165 	beq.w	8002b1c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800285a:	e15f      	b.n	8002b1c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	2202      	movs	r2, #2
 8002866:	409a      	lsls	r2, r3
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80c5 	beq.w	80029fc <HAL_DMA_IRQHandler+0xce8>
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80bf 	beq.w	80029fc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	2202      	movs	r2, #2
 8002888:	409a      	lsls	r2, r3
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d018      	beq.n	80028ca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 813a 	beq.w	8002b20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028b4:	e134      	b.n	8002b20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8130 	beq.w	8002b20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028c8:	e12a      	b.n	8002b20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f040 8089 	bne.w	80029e8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a2b      	ldr	r2, [pc, #172]	; (8002988 <HAL_DMA_IRQHandler+0xc74>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d04a      	beq.n	8002976 <HAL_DMA_IRQHandler+0xc62>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a29      	ldr	r2, [pc, #164]	; (800298c <HAL_DMA_IRQHandler+0xc78>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d045      	beq.n	8002976 <HAL_DMA_IRQHandler+0xc62>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a28      	ldr	r2, [pc, #160]	; (8002990 <HAL_DMA_IRQHandler+0xc7c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d040      	beq.n	8002976 <HAL_DMA_IRQHandler+0xc62>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a26      	ldr	r2, [pc, #152]	; (8002994 <HAL_DMA_IRQHandler+0xc80>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d03b      	beq.n	8002976 <HAL_DMA_IRQHandler+0xc62>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a25      	ldr	r2, [pc, #148]	; (8002998 <HAL_DMA_IRQHandler+0xc84>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d036      	beq.n	8002976 <HAL_DMA_IRQHandler+0xc62>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a23      	ldr	r2, [pc, #140]	; (800299c <HAL_DMA_IRQHandler+0xc88>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d031      	beq.n	8002976 <HAL_DMA_IRQHandler+0xc62>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a22      	ldr	r2, [pc, #136]	; (80029a0 <HAL_DMA_IRQHandler+0xc8c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d02c      	beq.n	8002976 <HAL_DMA_IRQHandler+0xc62>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a20      	ldr	r2, [pc, #128]	; (80029a4 <HAL_DMA_IRQHandler+0xc90>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d027      	beq.n	8002976 <HAL_DMA_IRQHandler+0xc62>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1f      	ldr	r2, [pc, #124]	; (80029a8 <HAL_DMA_IRQHandler+0xc94>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d022      	beq.n	8002976 <HAL_DMA_IRQHandler+0xc62>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a1d      	ldr	r2, [pc, #116]	; (80029ac <HAL_DMA_IRQHandler+0xc98>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d01d      	beq.n	8002976 <HAL_DMA_IRQHandler+0xc62>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a1c      	ldr	r2, [pc, #112]	; (80029b0 <HAL_DMA_IRQHandler+0xc9c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d018      	beq.n	8002976 <HAL_DMA_IRQHandler+0xc62>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a1a      	ldr	r2, [pc, #104]	; (80029b4 <HAL_DMA_IRQHandler+0xca0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_DMA_IRQHandler+0xc62>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a19      	ldr	r2, [pc, #100]	; (80029b8 <HAL_DMA_IRQHandler+0xca4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d00e      	beq.n	8002976 <HAL_DMA_IRQHandler+0xc62>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a17      	ldr	r2, [pc, #92]	; (80029bc <HAL_DMA_IRQHandler+0xca8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d009      	beq.n	8002976 <HAL_DMA_IRQHandler+0xc62>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a16      	ldr	r2, [pc, #88]	; (80029c0 <HAL_DMA_IRQHandler+0xcac>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d004      	beq.n	8002976 <HAL_DMA_IRQHandler+0xc62>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a14      	ldr	r2, [pc, #80]	; (80029c4 <HAL_DMA_IRQHandler+0xcb0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d128      	bne.n	80029c8 <HAL_DMA_IRQHandler+0xcb4>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0214 	bic.w	r2, r2, #20
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e027      	b.n	80029d8 <HAL_DMA_IRQHandler+0xcc4>
 8002988:	40020010 	.word	0x40020010
 800298c:	40020028 	.word	0x40020028
 8002990:	40020040 	.word	0x40020040
 8002994:	40020058 	.word	0x40020058
 8002998:	40020070 	.word	0x40020070
 800299c:	40020088 	.word	0x40020088
 80029a0:	400200a0 	.word	0x400200a0
 80029a4:	400200b8 	.word	0x400200b8
 80029a8:	40020410 	.word	0x40020410
 80029ac:	40020428 	.word	0x40020428
 80029b0:	40020440 	.word	0x40020440
 80029b4:	40020458 	.word	0x40020458
 80029b8:	40020470 	.word	0x40020470
 80029bc:	40020488 	.word	0x40020488
 80029c0:	400204a0 	.word	0x400204a0
 80029c4:	400204b8 	.word	0x400204b8
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 020a 	bic.w	r2, r2, #10
 80029d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 8097 	beq.w	8002b20 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029fa:	e091      	b.n	8002b20 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	2208      	movs	r2, #8
 8002a06:	409a      	lsls	r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 8088 	beq.w	8002b22 <HAL_DMA_IRQHandler+0xe0e>
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 8082 	beq.w	8002b22 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a41      	ldr	r2, [pc, #260]	; (8002b28 <HAL_DMA_IRQHandler+0xe14>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d04a      	beq.n	8002abe <HAL_DMA_IRQHandler+0xdaa>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a3f      	ldr	r2, [pc, #252]	; (8002b2c <HAL_DMA_IRQHandler+0xe18>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d045      	beq.n	8002abe <HAL_DMA_IRQHandler+0xdaa>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a3e      	ldr	r2, [pc, #248]	; (8002b30 <HAL_DMA_IRQHandler+0xe1c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d040      	beq.n	8002abe <HAL_DMA_IRQHandler+0xdaa>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a3c      	ldr	r2, [pc, #240]	; (8002b34 <HAL_DMA_IRQHandler+0xe20>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d03b      	beq.n	8002abe <HAL_DMA_IRQHandler+0xdaa>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a3b      	ldr	r2, [pc, #236]	; (8002b38 <HAL_DMA_IRQHandler+0xe24>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d036      	beq.n	8002abe <HAL_DMA_IRQHandler+0xdaa>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a39      	ldr	r2, [pc, #228]	; (8002b3c <HAL_DMA_IRQHandler+0xe28>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d031      	beq.n	8002abe <HAL_DMA_IRQHandler+0xdaa>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a38      	ldr	r2, [pc, #224]	; (8002b40 <HAL_DMA_IRQHandler+0xe2c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d02c      	beq.n	8002abe <HAL_DMA_IRQHandler+0xdaa>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a36      	ldr	r2, [pc, #216]	; (8002b44 <HAL_DMA_IRQHandler+0xe30>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d027      	beq.n	8002abe <HAL_DMA_IRQHandler+0xdaa>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a35      	ldr	r2, [pc, #212]	; (8002b48 <HAL_DMA_IRQHandler+0xe34>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d022      	beq.n	8002abe <HAL_DMA_IRQHandler+0xdaa>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a33      	ldr	r2, [pc, #204]	; (8002b4c <HAL_DMA_IRQHandler+0xe38>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d01d      	beq.n	8002abe <HAL_DMA_IRQHandler+0xdaa>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a32      	ldr	r2, [pc, #200]	; (8002b50 <HAL_DMA_IRQHandler+0xe3c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d018      	beq.n	8002abe <HAL_DMA_IRQHandler+0xdaa>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a30      	ldr	r2, [pc, #192]	; (8002b54 <HAL_DMA_IRQHandler+0xe40>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d013      	beq.n	8002abe <HAL_DMA_IRQHandler+0xdaa>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a2f      	ldr	r2, [pc, #188]	; (8002b58 <HAL_DMA_IRQHandler+0xe44>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00e      	beq.n	8002abe <HAL_DMA_IRQHandler+0xdaa>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a2d      	ldr	r2, [pc, #180]	; (8002b5c <HAL_DMA_IRQHandler+0xe48>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d009      	beq.n	8002abe <HAL_DMA_IRQHandler+0xdaa>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a2c      	ldr	r2, [pc, #176]	; (8002b60 <HAL_DMA_IRQHandler+0xe4c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d004      	beq.n	8002abe <HAL_DMA_IRQHandler+0xdaa>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a2a      	ldr	r2, [pc, #168]	; (8002b64 <HAL_DMA_IRQHandler+0xe50>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d108      	bne.n	8002ad0 <HAL_DMA_IRQHandler+0xdbc>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 021c 	bic.w	r2, r2, #28
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	e007      	b.n	8002ae0 <HAL_DMA_IRQHandler+0xdcc>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 020e 	bic.w	r2, r2, #14
 8002ade:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	2201      	movs	r2, #1
 8002aea:	409a      	lsls	r2, r3
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	4798      	blx	r3
 8002b16:	e004      	b.n	8002b22 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002b18:	bf00      	nop
 8002b1a:	e002      	b.n	8002b22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b1c:	bf00      	nop
 8002b1e:	e000      	b.n	8002b22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b20:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002b22:	3728      	adds	r7, #40	; 0x28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40020010 	.word	0x40020010
 8002b2c:	40020028 	.word	0x40020028
 8002b30:	40020040 	.word	0x40020040
 8002b34:	40020058 	.word	0x40020058
 8002b38:	40020070 	.word	0x40020070
 8002b3c:	40020088 	.word	0x40020088
 8002b40:	400200a0 	.word	0x400200a0
 8002b44:	400200b8 	.word	0x400200b8
 8002b48:	40020410 	.word	0x40020410
 8002b4c:	40020428 	.word	0x40020428
 8002b50:	40020440 	.word	0x40020440
 8002b54:	40020458 	.word	0x40020458
 8002b58:	40020470 	.word	0x40020470
 8002b5c:	40020488 	.word	0x40020488
 8002b60:	400204a0 	.word	0x400204a0
 8002b64:	400204b8 	.word	0x400204b8

08002b68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a42      	ldr	r2, [pc, #264]	; (8002c80 <DMA_CalcBaseAndBitshift+0x118>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d04a      	beq.n	8002c10 <DMA_CalcBaseAndBitshift+0xa8>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a41      	ldr	r2, [pc, #260]	; (8002c84 <DMA_CalcBaseAndBitshift+0x11c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d045      	beq.n	8002c10 <DMA_CalcBaseAndBitshift+0xa8>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a3f      	ldr	r2, [pc, #252]	; (8002c88 <DMA_CalcBaseAndBitshift+0x120>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d040      	beq.n	8002c10 <DMA_CalcBaseAndBitshift+0xa8>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a3e      	ldr	r2, [pc, #248]	; (8002c8c <DMA_CalcBaseAndBitshift+0x124>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d03b      	beq.n	8002c10 <DMA_CalcBaseAndBitshift+0xa8>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a3c      	ldr	r2, [pc, #240]	; (8002c90 <DMA_CalcBaseAndBitshift+0x128>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d036      	beq.n	8002c10 <DMA_CalcBaseAndBitshift+0xa8>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a3b      	ldr	r2, [pc, #236]	; (8002c94 <DMA_CalcBaseAndBitshift+0x12c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d031      	beq.n	8002c10 <DMA_CalcBaseAndBitshift+0xa8>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a39      	ldr	r2, [pc, #228]	; (8002c98 <DMA_CalcBaseAndBitshift+0x130>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d02c      	beq.n	8002c10 <DMA_CalcBaseAndBitshift+0xa8>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a38      	ldr	r2, [pc, #224]	; (8002c9c <DMA_CalcBaseAndBitshift+0x134>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d027      	beq.n	8002c10 <DMA_CalcBaseAndBitshift+0xa8>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a36      	ldr	r2, [pc, #216]	; (8002ca0 <DMA_CalcBaseAndBitshift+0x138>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d022      	beq.n	8002c10 <DMA_CalcBaseAndBitshift+0xa8>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a35      	ldr	r2, [pc, #212]	; (8002ca4 <DMA_CalcBaseAndBitshift+0x13c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d01d      	beq.n	8002c10 <DMA_CalcBaseAndBitshift+0xa8>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a33      	ldr	r2, [pc, #204]	; (8002ca8 <DMA_CalcBaseAndBitshift+0x140>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d018      	beq.n	8002c10 <DMA_CalcBaseAndBitshift+0xa8>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a32      	ldr	r2, [pc, #200]	; (8002cac <DMA_CalcBaseAndBitshift+0x144>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d013      	beq.n	8002c10 <DMA_CalcBaseAndBitshift+0xa8>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a30      	ldr	r2, [pc, #192]	; (8002cb0 <DMA_CalcBaseAndBitshift+0x148>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00e      	beq.n	8002c10 <DMA_CalcBaseAndBitshift+0xa8>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a2f      	ldr	r2, [pc, #188]	; (8002cb4 <DMA_CalcBaseAndBitshift+0x14c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d009      	beq.n	8002c10 <DMA_CalcBaseAndBitshift+0xa8>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a2d      	ldr	r2, [pc, #180]	; (8002cb8 <DMA_CalcBaseAndBitshift+0x150>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d004      	beq.n	8002c10 <DMA_CalcBaseAndBitshift+0xa8>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a2c      	ldr	r2, [pc, #176]	; (8002cbc <DMA_CalcBaseAndBitshift+0x154>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d101      	bne.n	8002c14 <DMA_CalcBaseAndBitshift+0xac>
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <DMA_CalcBaseAndBitshift+0xae>
 8002c14:	2300      	movs	r3, #0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d024      	beq.n	8002c64 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	3b10      	subs	r3, #16
 8002c22:	4a27      	ldr	r2, [pc, #156]	; (8002cc0 <DMA_CalcBaseAndBitshift+0x158>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	4a24      	ldr	r2, [pc, #144]	; (8002cc4 <DMA_CalcBaseAndBitshift+0x15c>)
 8002c34:	5cd3      	ldrb	r3, [r2, r3]
 8002c36:	461a      	mov	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d908      	bls.n	8002c54 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	4b1f      	ldr	r3, [pc, #124]	; (8002cc8 <DMA_CalcBaseAndBitshift+0x160>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	1d1a      	adds	r2, r3, #4
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	659a      	str	r2, [r3, #88]	; 0x58
 8002c52:	e00d      	b.n	8002c70 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <DMA_CalcBaseAndBitshift+0x160>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6593      	str	r3, [r2, #88]	; 0x58
 8002c62:	e005      	b.n	8002c70 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	40020010 	.word	0x40020010
 8002c84:	40020028 	.word	0x40020028
 8002c88:	40020040 	.word	0x40020040
 8002c8c:	40020058 	.word	0x40020058
 8002c90:	40020070 	.word	0x40020070
 8002c94:	40020088 	.word	0x40020088
 8002c98:	400200a0 	.word	0x400200a0
 8002c9c:	400200b8 	.word	0x400200b8
 8002ca0:	40020410 	.word	0x40020410
 8002ca4:	40020428 	.word	0x40020428
 8002ca8:	40020440 	.word	0x40020440
 8002cac:	40020458 	.word	0x40020458
 8002cb0:	40020470 	.word	0x40020470
 8002cb4:	40020488 	.word	0x40020488
 8002cb8:	400204a0 	.word	0x400204a0
 8002cbc:	400204b8 	.word	0x400204b8
 8002cc0:	aaaaaaab 	.word	0xaaaaaaab
 8002cc4:	08009048 	.word	0x08009048
 8002cc8:	fffffc00 	.word	0xfffffc00

08002ccc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d120      	bne.n	8002d22 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d858      	bhi.n	8002d9a <DMA_CheckFifoParam+0xce>
 8002ce8:	a201      	add	r2, pc, #4	; (adr r2, 8002cf0 <DMA_CheckFifoParam+0x24>)
 8002cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cee:	bf00      	nop
 8002cf0:	08002d01 	.word	0x08002d01
 8002cf4:	08002d13 	.word	0x08002d13
 8002cf8:	08002d01 	.word	0x08002d01
 8002cfc:	08002d9b 	.word	0x08002d9b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d048      	beq.n	8002d9e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d10:	e045      	b.n	8002d9e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d1a:	d142      	bne.n	8002da2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d20:	e03f      	b.n	8002da2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d2a:	d123      	bne.n	8002d74 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d838      	bhi.n	8002da6 <DMA_CheckFifoParam+0xda>
 8002d34:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <DMA_CheckFifoParam+0x70>)
 8002d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3a:	bf00      	nop
 8002d3c:	08002d4d 	.word	0x08002d4d
 8002d40:	08002d53 	.word	0x08002d53
 8002d44:	08002d4d 	.word	0x08002d4d
 8002d48:	08002d65 	.word	0x08002d65
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
        break;
 8002d50:	e030      	b.n	8002db4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d025      	beq.n	8002daa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d62:	e022      	b.n	8002daa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d6c:	d11f      	bne.n	8002dae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d72:	e01c      	b.n	8002dae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d902      	bls.n	8002d82 <DMA_CheckFifoParam+0xb6>
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d003      	beq.n	8002d88 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002d80:	e018      	b.n	8002db4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
        break;
 8002d86:	e015      	b.n	8002db4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00e      	beq.n	8002db2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
    break;
 8002d98:	e00b      	b.n	8002db2 <DMA_CheckFifoParam+0xe6>
        break;
 8002d9a:	bf00      	nop
 8002d9c:	e00a      	b.n	8002db4 <DMA_CheckFifoParam+0xe8>
        break;
 8002d9e:	bf00      	nop
 8002da0:	e008      	b.n	8002db4 <DMA_CheckFifoParam+0xe8>
        break;
 8002da2:	bf00      	nop
 8002da4:	e006      	b.n	8002db4 <DMA_CheckFifoParam+0xe8>
        break;
 8002da6:	bf00      	nop
 8002da8:	e004      	b.n	8002db4 <DMA_CheckFifoParam+0xe8>
        break;
 8002daa:	bf00      	nop
 8002dac:	e002      	b.n	8002db4 <DMA_CheckFifoParam+0xe8>
        break;
 8002dae:	bf00      	nop
 8002db0:	e000      	b.n	8002db4 <DMA_CheckFifoParam+0xe8>
    break;
 8002db2:	bf00      	nop
    }
  }

  return status;
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop

08002dc4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a38      	ldr	r2, [pc, #224]	; (8002eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d022      	beq.n	8002e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a36      	ldr	r2, [pc, #216]	; (8002ebc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d01d      	beq.n	8002e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a35      	ldr	r2, [pc, #212]	; (8002ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d018      	beq.n	8002e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a33      	ldr	r2, [pc, #204]	; (8002ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d013      	beq.n	8002e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a32      	ldr	r2, [pc, #200]	; (8002ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00e      	beq.n	8002e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a30      	ldr	r2, [pc, #192]	; (8002ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d009      	beq.n	8002e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a2f      	ldr	r2, [pc, #188]	; (8002ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d004      	beq.n	8002e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a2d      	ldr	r2, [pc, #180]	; (8002ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d101      	bne.n	8002e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002e26:	2300      	movs	r3, #0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d01a      	beq.n	8002e62 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	3b08      	subs	r3, #8
 8002e34:	4a28      	ldr	r2, [pc, #160]	; (8002ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	091b      	lsrs	r3, r3, #4
 8002e3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4b26      	ldr	r3, [pc, #152]	; (8002edc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	461a      	mov	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a24      	ldr	r2, [pc, #144]	; (8002ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002e50:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	2201      	movs	r2, #1
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002e60:	e024      	b.n	8002eac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	3b10      	subs	r3, #16
 8002e6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4a1c      	ldr	r2, [pc, #112]	; (8002ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d806      	bhi.n	8002e8a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4a1b      	ldr	r2, [pc, #108]	; (8002eec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d902      	bls.n	8002e8a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	3308      	adds	r3, #8
 8002e88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4b18      	ldr	r3, [pc, #96]	; (8002ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	461a      	mov	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a16      	ldr	r2, [pc, #88]	; (8002ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002e9c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f003 031f 	and.w	r3, r3, #31
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	58025408 	.word	0x58025408
 8002ebc:	5802541c 	.word	0x5802541c
 8002ec0:	58025430 	.word	0x58025430
 8002ec4:	58025444 	.word	0x58025444
 8002ec8:	58025458 	.word	0x58025458
 8002ecc:	5802546c 	.word	0x5802546c
 8002ed0:	58025480 	.word	0x58025480
 8002ed4:	58025494 	.word	0x58025494
 8002ed8:	cccccccd 	.word	0xcccccccd
 8002edc:	16009600 	.word	0x16009600
 8002ee0:	58025880 	.word	0x58025880
 8002ee4:	aaaaaaab 	.word	0xaaaaaaab
 8002ee8:	400204b8 	.word	0x400204b8
 8002eec:	4002040f 	.word	0x4002040f
 8002ef0:	10008200 	.word	0x10008200
 8002ef4:	40020880 	.word	0x40020880

08002ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d04a      	beq.n	8002fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d847      	bhi.n	8002fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a25      	ldr	r2, [pc, #148]	; (8002fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d022      	beq.n	8002f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a24      	ldr	r2, [pc, #144]	; (8002fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d01d      	beq.n	8002f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a22      	ldr	r2, [pc, #136]	; (8002fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d018      	beq.n	8002f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a21      	ldr	r2, [pc, #132]	; (8002fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d013      	beq.n	8002f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1f      	ldr	r2, [pc, #124]	; (8002fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00e      	beq.n	8002f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1e      	ldr	r2, [pc, #120]	; (8002fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d009      	beq.n	8002f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1c      	ldr	r2, [pc, #112]	; (8002fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d004      	beq.n	8002f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a1b      	ldr	r2, [pc, #108]	; (8002fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d101      	bne.n	8002f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	461a      	mov	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a15      	ldr	r2, [pc, #84]	; (8002fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002f80:	671a      	str	r2, [r3, #112]	; 0x70
 8002f82:	e009      	b.n	8002f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a11      	ldr	r2, [pc, #68]	; (8002fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002f96:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	58025408 	.word	0x58025408
 8002fb4:	5802541c 	.word	0x5802541c
 8002fb8:	58025430 	.word	0x58025430
 8002fbc:	58025444 	.word	0x58025444
 8002fc0:	58025458 	.word	0x58025458
 8002fc4:	5802546c 	.word	0x5802546c
 8002fc8:	58025480 	.word	0x58025480
 8002fcc:	58025494 	.word	0x58025494
 8002fd0:	1600963f 	.word	0x1600963f
 8002fd4:	58025940 	.word	0x58025940
 8002fd8:	1000823f 	.word	0x1000823f
 8002fdc:	40020940 	.word	0x40020940

08002fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	; 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002fee:	4b89      	ldr	r3, [pc, #548]	; (8003214 <HAL_GPIO_Init+0x234>)
 8002ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ff2:	e194      	b.n	800331e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8003000:	4013      	ands	r3, r2
 8003002:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 8186 	beq.w	8003318 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2b01      	cmp	r3, #1
 8003016:	d005      	beq.n	8003024 <HAL_GPIO_Init+0x44>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d130      	bne.n	8003086 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	2203      	movs	r2, #3
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800305a:	2201      	movs	r2, #1
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	091b      	lsrs	r3, r3, #4
 8003070:	f003 0201 	and.w	r2, r3, #1
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4313      	orrs	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b03      	cmp	r3, #3
 8003090:	d017      	beq.n	80030c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	2203      	movs	r2, #3
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d123      	bne.n	8003116 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	08da      	lsrs	r2, r3, #3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3208      	adds	r2, #8
 80030d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	220f      	movs	r2, #15
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	691a      	ldr	r2, [r3, #16]
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	08da      	lsrs	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3208      	adds	r2, #8
 8003110:	69b9      	ldr	r1, [r7, #24]
 8003112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	2203      	movs	r2, #3
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 0203 	and.w	r2, r3, #3
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4313      	orrs	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80e0 	beq.w	8003318 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003158:	4b2f      	ldr	r3, [pc, #188]	; (8003218 <HAL_GPIO_Init+0x238>)
 800315a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800315e:	4a2e      	ldr	r2, [pc, #184]	; (8003218 <HAL_GPIO_Init+0x238>)
 8003160:	f043 0302 	orr.w	r3, r3, #2
 8003164:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003168:	4b2b      	ldr	r3, [pc, #172]	; (8003218 <HAL_GPIO_Init+0x238>)
 800316a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003176:	4a29      	ldr	r2, [pc, #164]	; (800321c <HAL_GPIO_Init+0x23c>)
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	089b      	lsrs	r3, r3, #2
 800317c:	3302      	adds	r3, #2
 800317e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	220f      	movs	r2, #15
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43db      	mvns	r3, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a20      	ldr	r2, [pc, #128]	; (8003220 <HAL_GPIO_Init+0x240>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d052      	beq.n	8003248 <HAL_GPIO_Init+0x268>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a1f      	ldr	r2, [pc, #124]	; (8003224 <HAL_GPIO_Init+0x244>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d031      	beq.n	800320e <HAL_GPIO_Init+0x22e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a1e      	ldr	r2, [pc, #120]	; (8003228 <HAL_GPIO_Init+0x248>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d02b      	beq.n	800320a <HAL_GPIO_Init+0x22a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a1d      	ldr	r2, [pc, #116]	; (800322c <HAL_GPIO_Init+0x24c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d025      	beq.n	8003206 <HAL_GPIO_Init+0x226>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a1c      	ldr	r2, [pc, #112]	; (8003230 <HAL_GPIO_Init+0x250>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01f      	beq.n	8003202 <HAL_GPIO_Init+0x222>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a1b      	ldr	r2, [pc, #108]	; (8003234 <HAL_GPIO_Init+0x254>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d019      	beq.n	80031fe <HAL_GPIO_Init+0x21e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a1a      	ldr	r2, [pc, #104]	; (8003238 <HAL_GPIO_Init+0x258>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <HAL_GPIO_Init+0x21a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a19      	ldr	r2, [pc, #100]	; (800323c <HAL_GPIO_Init+0x25c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00d      	beq.n	80031f6 <HAL_GPIO_Init+0x216>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a18      	ldr	r2, [pc, #96]	; (8003240 <HAL_GPIO_Init+0x260>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d007      	beq.n	80031f2 <HAL_GPIO_Init+0x212>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a17      	ldr	r2, [pc, #92]	; (8003244 <HAL_GPIO_Init+0x264>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d101      	bne.n	80031ee <HAL_GPIO_Init+0x20e>
 80031ea:	2309      	movs	r3, #9
 80031ec:	e02d      	b.n	800324a <HAL_GPIO_Init+0x26a>
 80031ee:	230a      	movs	r3, #10
 80031f0:	e02b      	b.n	800324a <HAL_GPIO_Init+0x26a>
 80031f2:	2308      	movs	r3, #8
 80031f4:	e029      	b.n	800324a <HAL_GPIO_Init+0x26a>
 80031f6:	2307      	movs	r3, #7
 80031f8:	e027      	b.n	800324a <HAL_GPIO_Init+0x26a>
 80031fa:	2306      	movs	r3, #6
 80031fc:	e025      	b.n	800324a <HAL_GPIO_Init+0x26a>
 80031fe:	2305      	movs	r3, #5
 8003200:	e023      	b.n	800324a <HAL_GPIO_Init+0x26a>
 8003202:	2304      	movs	r3, #4
 8003204:	e021      	b.n	800324a <HAL_GPIO_Init+0x26a>
 8003206:	2303      	movs	r3, #3
 8003208:	e01f      	b.n	800324a <HAL_GPIO_Init+0x26a>
 800320a:	2302      	movs	r3, #2
 800320c:	e01d      	b.n	800324a <HAL_GPIO_Init+0x26a>
 800320e:	2301      	movs	r3, #1
 8003210:	e01b      	b.n	800324a <HAL_GPIO_Init+0x26a>
 8003212:	bf00      	nop
 8003214:	58000080 	.word	0x58000080
 8003218:	58024400 	.word	0x58024400
 800321c:	58000400 	.word	0x58000400
 8003220:	58020000 	.word	0x58020000
 8003224:	58020400 	.word	0x58020400
 8003228:	58020800 	.word	0x58020800
 800322c:	58020c00 	.word	0x58020c00
 8003230:	58021000 	.word	0x58021000
 8003234:	58021400 	.word	0x58021400
 8003238:	58021800 	.word	0x58021800
 800323c:	58021c00 	.word	0x58021c00
 8003240:	58022000 	.word	0x58022000
 8003244:	58022400 	.word	0x58022400
 8003248:	2300      	movs	r3, #0
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	f002 0203 	and.w	r2, r2, #3
 8003250:	0092      	lsls	r2, r2, #2
 8003252:	4093      	lsls	r3, r2
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800325a:	4938      	ldr	r1, [pc, #224]	; (800333c <HAL_GPIO_Init+0x35c>)
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	089b      	lsrs	r3, r3, #2
 8003260:	3302      	adds	r3, #2
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800328e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80032bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	3301      	adds	r3, #1
 800331c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	f47f ae63 	bne.w	8002ff4 <HAL_GPIO_Init+0x14>
  }
}
 800332e:	bf00      	nop
 8003330:	bf00      	nop
 8003332:	3724      	adds	r7, #36	; 0x24
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	58000400 	.word	0x58000400

08003340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	807b      	strh	r3, [r7, #2]
 800334c:	4613      	mov	r3, r2
 800334e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003350:	787b      	ldrb	r3, [r7, #1]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003356:	887a      	ldrh	r2, [r7, #2]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800335c:	e003      	b.n	8003366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800335e:	887b      	ldrh	r3, [r7, #2]
 8003360:	041a      	lsls	r2, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	619a      	str	r2, [r3, #24]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800337c:	4a08      	ldr	r2, [pc, #32]	; (80033a0 <HAL_HSEM_FastTake+0x2c>)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3320      	adds	r3, #32
 8003382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003386:	4a07      	ldr	r2, [pc, #28]	; (80033a4 <HAL_HSEM_FastTake+0x30>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d101      	bne.n	8003390 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e000      	b.n	8003392 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	58026400 	.word	0x58026400
 80033a4:	80000300 	.word	0x80000300

080033a8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80033b2:	4906      	ldr	r1, [pc, #24]	; (80033cc <HAL_HSEM_Release+0x24>)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	58026400 	.word	0x58026400

080033d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e0fe      	b.n	80035e0 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fd fe6a 	bl	80010d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2203      	movs	r2, #3
 8003400:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f005 fb47 	bl	8008a9c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	7c1a      	ldrb	r2, [r3, #16]
 8003416:	f88d 2000 	strb.w	r2, [sp]
 800341a:	3304      	adds	r3, #4
 800341c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800341e:	f005 facb 	bl	80089b8 <USB_CoreInit>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0d5      	b.n	80035e0 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2100      	movs	r1, #0
 800343a:	4618      	mov	r0, r3
 800343c:	f005 fb3f 	bl	8008abe <USB_SetCurrentMode>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2202      	movs	r2, #2
 800344a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e0c6      	b.n	80035e0 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003452:	2300      	movs	r3, #0
 8003454:	73fb      	strb	r3, [r7, #15]
 8003456:	e04a      	b.n	80034ee <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	3315      	adds	r3, #21
 8003468:	2201      	movs	r2, #1
 800346a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800346c:	7bfa      	ldrb	r2, [r7, #15]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	3314      	adds	r3, #20
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003480:	7bfa      	ldrb	r2, [r7, #15]
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	b298      	uxth	r0, r3
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	332e      	adds	r3, #46	; 0x2e
 8003494:	4602      	mov	r2, r0
 8003496:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003498:	7bfa      	ldrb	r2, [r7, #15]
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	3318      	adds	r3, #24
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034ac:	7bfa      	ldrb	r2, [r7, #15]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	331c      	adds	r3, #28
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034c0:	7bfa      	ldrb	r2, [r7, #15]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	3320      	adds	r3, #32
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034d4:	7bfa      	ldrb	r2, [r7, #15]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	3324      	adds	r3, #36	; 0x24
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	3301      	adds	r3, #1
 80034ec:	73fb      	strb	r3, [r7, #15]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	791b      	ldrb	r3, [r3, #4]
 80034f2:	7bfa      	ldrb	r2, [r7, #15]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d3af      	bcc.n	8003458 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f8:	2300      	movs	r3, #0
 80034fa:	73fb      	strb	r3, [r7, #15]
 80034fc:	e044      	b.n	8003588 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034fe:	7bfa      	ldrb	r2, [r7, #15]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003514:	7bfa      	ldrb	r2, [r7, #15]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003526:	7bfa      	ldrb	r2, [r7, #15]
 8003528:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800352a:	7bfa      	ldrb	r2, [r7, #15]
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800353c:	2200      	movs	r2, #0
 800353e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003540:	7bfa      	ldrb	r2, [r7, #15]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003556:	7bfa      	ldrb	r2, [r7, #15]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	4413      	add	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800356c:	7bfa      	ldrb	r2, [r7, #15]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	3301      	adds	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	791b      	ldrb	r3, [r3, #4]
 800358c:	7bfa      	ldrb	r2, [r7, #15]
 800358e:	429a      	cmp	r2, r3
 8003590:	d3b5      	bcc.n	80034fe <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	7c1a      	ldrb	r2, [r3, #16]
 800359a:	f88d 2000 	strb.w	r2, [sp]
 800359e:	3304      	adds	r3, #4
 80035a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035a2:	f005 fad9 	bl	8008b58 <USB_DevInit>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e013      	b.n	80035e0 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	7b1b      	ldrb	r3, [r3, #12]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d102      	bne.n	80035d4 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f80a 	bl	80035e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f005 fc94 	bl	8008f06 <USB_DevDisconnect>

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <HAL_PCDEx_ActivateLPM+0x44>)
 8003618:	4313      	orrs	r3, r2
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	10000003 	.word	0x10000003

08003630 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003638:	4b29      	ldr	r3, [pc, #164]	; (80036e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	2b06      	cmp	r3, #6
 8003642:	d00a      	beq.n	800365a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003644:	4b26      	ldr	r3, [pc, #152]	; (80036e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	429a      	cmp	r2, r3
 8003650:	d001      	beq.n	8003656 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e040      	b.n	80036d8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	e03e      	b.n	80036d8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800365a:	4b21      	ldr	r3, [pc, #132]	; (80036e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003662:	491f      	ldr	r1, [pc, #124]	; (80036e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4313      	orrs	r3, r2
 8003668:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800366a:	f7fd feab 	bl	80013c4 <HAL_GetTick>
 800366e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003670:	e009      	b.n	8003686 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003672:	f7fd fea7 	bl	80013c4 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003680:	d901      	bls.n	8003686 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e028      	b.n	80036d8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003686:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800368e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003692:	d1ee      	bne.n	8003672 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b1e      	cmp	r3, #30
 8003698:	d008      	beq.n	80036ac <HAL_PWREx_ConfigSupply+0x7c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b2e      	cmp	r3, #46	; 0x2e
 800369e:	d005      	beq.n	80036ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b1d      	cmp	r3, #29
 80036a4:	d002      	beq.n	80036ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b2d      	cmp	r3, #45	; 0x2d
 80036aa:	d114      	bne.n	80036d6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80036ac:	f7fd fe8a 	bl	80013c4 <HAL_GetTick>
 80036b0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80036b2:	e009      	b.n	80036c8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80036b4:	f7fd fe86 	bl	80013c4 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036c2:	d901      	bls.n	80036c8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e007      	b.n	80036d8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_PWREx_ConfigSupply+0xb0>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d4:	d1ee      	bne.n	80036b4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	58024800 	.word	0x58024800

080036e4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4a04      	ldr	r2, [pc, #16]	; (8003700 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80036ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036f2:	60d3      	str	r3, [r2, #12]
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	58024800 	.word	0x58024800

08003704 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08c      	sub	sp, #48	; 0x30
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d102      	bne.n	8003718 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	f000 bc48 	b.w	8003fa8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 8088 	beq.w	8003836 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003726:	4b99      	ldr	r3, [pc, #612]	; (800398c <HAL_RCC_OscConfig+0x288>)
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003730:	4b96      	ldr	r3, [pc, #600]	; (800398c <HAL_RCC_OscConfig+0x288>)
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003738:	2b10      	cmp	r3, #16
 800373a:	d007      	beq.n	800374c <HAL_RCC_OscConfig+0x48>
 800373c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373e:	2b18      	cmp	r3, #24
 8003740:	d111      	bne.n	8003766 <HAL_RCC_OscConfig+0x62>
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	f003 0303 	and.w	r3, r3, #3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d10c      	bne.n	8003766 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374c:	4b8f      	ldr	r3, [pc, #572]	; (800398c <HAL_RCC_OscConfig+0x288>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d06d      	beq.n	8003834 <HAL_RCC_OscConfig+0x130>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d169      	bne.n	8003834 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	f000 bc21 	b.w	8003fa8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376e:	d106      	bne.n	800377e <HAL_RCC_OscConfig+0x7a>
 8003770:	4b86      	ldr	r3, [pc, #536]	; (800398c <HAL_RCC_OscConfig+0x288>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a85      	ldr	r2, [pc, #532]	; (800398c <HAL_RCC_OscConfig+0x288>)
 8003776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	e02e      	b.n	80037dc <HAL_RCC_OscConfig+0xd8>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x9c>
 8003786:	4b81      	ldr	r3, [pc, #516]	; (800398c <HAL_RCC_OscConfig+0x288>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a80      	ldr	r2, [pc, #512]	; (800398c <HAL_RCC_OscConfig+0x288>)
 800378c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	4b7e      	ldr	r3, [pc, #504]	; (800398c <HAL_RCC_OscConfig+0x288>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a7d      	ldr	r2, [pc, #500]	; (800398c <HAL_RCC_OscConfig+0x288>)
 8003798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e01d      	b.n	80037dc <HAL_RCC_OscConfig+0xd8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0xc0>
 80037aa:	4b78      	ldr	r3, [pc, #480]	; (800398c <HAL_RCC_OscConfig+0x288>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a77      	ldr	r2, [pc, #476]	; (800398c <HAL_RCC_OscConfig+0x288>)
 80037b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b75      	ldr	r3, [pc, #468]	; (800398c <HAL_RCC_OscConfig+0x288>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a74      	ldr	r2, [pc, #464]	; (800398c <HAL_RCC_OscConfig+0x288>)
 80037bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e00b      	b.n	80037dc <HAL_RCC_OscConfig+0xd8>
 80037c4:	4b71      	ldr	r3, [pc, #452]	; (800398c <HAL_RCC_OscConfig+0x288>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a70      	ldr	r2, [pc, #448]	; (800398c <HAL_RCC_OscConfig+0x288>)
 80037ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	4b6e      	ldr	r3, [pc, #440]	; (800398c <HAL_RCC_OscConfig+0x288>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a6d      	ldr	r2, [pc, #436]	; (800398c <HAL_RCC_OscConfig+0x288>)
 80037d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d013      	beq.n	800380c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7fd fdee 	bl	80013c4 <HAL_GetTick>
 80037e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fd fdea 	bl	80013c4 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	; 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e3d4      	b.n	8003fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037fe:	4b63      	ldr	r3, [pc, #396]	; (800398c <HAL_RCC_OscConfig+0x288>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0xe8>
 800380a:	e014      	b.n	8003836 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fd fdda 	bl	80013c4 <HAL_GetTick>
 8003810:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003814:	f7fd fdd6 	bl	80013c4 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	; 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e3c0      	b.n	8003fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003826:	4b59      	ldr	r3, [pc, #356]	; (800398c <HAL_RCC_OscConfig+0x288>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x110>
 8003832:	e000      	b.n	8003836 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80ca 	beq.w	80039d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003844:	4b51      	ldr	r3, [pc, #324]	; (800398c <HAL_RCC_OscConfig+0x288>)
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800384c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800384e:	4b4f      	ldr	r3, [pc, #316]	; (800398c <HAL_RCC_OscConfig+0x288>)
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003852:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_RCC_OscConfig+0x166>
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	2b18      	cmp	r3, #24
 800385e:	d156      	bne.n	800390e <HAL_RCC_OscConfig+0x20a>
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d151      	bne.n	800390e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800386a:	4b48      	ldr	r3, [pc, #288]	; (800398c <HAL_RCC_OscConfig+0x288>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <HAL_RCC_OscConfig+0x17e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e392      	b.n	8003fa8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003882:	4b42      	ldr	r3, [pc, #264]	; (800398c <HAL_RCC_OscConfig+0x288>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 0219 	bic.w	r2, r3, #25
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	493f      	ldr	r1, [pc, #252]	; (800398c <HAL_RCC_OscConfig+0x288>)
 8003890:	4313      	orrs	r3, r2
 8003892:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fd fd96 	bl	80013c4 <HAL_GetTick>
 8003898:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800389c:	f7fd fd92 	bl	80013c4 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e37c      	b.n	8003fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038ae:	4b37      	ldr	r3, [pc, #220]	; (800398c <HAL_RCC_OscConfig+0x288>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ba:	f7fd fdb3 	bl	8001424 <HAL_GetREVID>
 80038be:	4603      	mov	r3, r0
 80038c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d817      	bhi.n	80038f8 <HAL_RCC_OscConfig+0x1f4>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	2b40      	cmp	r3, #64	; 0x40
 80038ce:	d108      	bne.n	80038e2 <HAL_RCC_OscConfig+0x1de>
 80038d0:	4b2e      	ldr	r3, [pc, #184]	; (800398c <HAL_RCC_OscConfig+0x288>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80038d8:	4a2c      	ldr	r2, [pc, #176]	; (800398c <HAL_RCC_OscConfig+0x288>)
 80038da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038de:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038e0:	e07a      	b.n	80039d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e2:	4b2a      	ldr	r3, [pc, #168]	; (800398c <HAL_RCC_OscConfig+0x288>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	031b      	lsls	r3, r3, #12
 80038f0:	4926      	ldr	r1, [pc, #152]	; (800398c <HAL_RCC_OscConfig+0x288>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038f6:	e06f      	b.n	80039d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f8:	4b24      	ldr	r3, [pc, #144]	; (800398c <HAL_RCC_OscConfig+0x288>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	061b      	lsls	r3, r3, #24
 8003906:	4921      	ldr	r1, [pc, #132]	; (800398c <HAL_RCC_OscConfig+0x288>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800390c:	e064      	b.n	80039d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d047      	beq.n	80039a6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003916:	4b1d      	ldr	r3, [pc, #116]	; (800398c <HAL_RCC_OscConfig+0x288>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 0219 	bic.w	r2, r3, #25
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	491a      	ldr	r1, [pc, #104]	; (800398c <HAL_RCC_OscConfig+0x288>)
 8003924:	4313      	orrs	r3, r2
 8003926:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fd fd4c 	bl	80013c4 <HAL_GetTick>
 800392c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003930:	f7fd fd48 	bl	80013c4 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e332      	b.n	8003fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003942:	4b12      	ldr	r3, [pc, #72]	; (800398c <HAL_RCC_OscConfig+0x288>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0f0      	beq.n	8003930 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394e:	f7fd fd69 	bl	8001424 <HAL_GetREVID>
 8003952:	4603      	mov	r3, r0
 8003954:	f241 0203 	movw	r2, #4099	; 0x1003
 8003958:	4293      	cmp	r3, r2
 800395a:	d819      	bhi.n	8003990 <HAL_RCC_OscConfig+0x28c>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	2b40      	cmp	r3, #64	; 0x40
 8003962:	d108      	bne.n	8003976 <HAL_RCC_OscConfig+0x272>
 8003964:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_RCC_OscConfig+0x288>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800396c:	4a07      	ldr	r2, [pc, #28]	; (800398c <HAL_RCC_OscConfig+0x288>)
 800396e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003972:	6053      	str	r3, [r2, #4]
 8003974:	e030      	b.n	80039d8 <HAL_RCC_OscConfig+0x2d4>
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <HAL_RCC_OscConfig+0x288>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	031b      	lsls	r3, r3, #12
 8003984:	4901      	ldr	r1, [pc, #4]	; (800398c <HAL_RCC_OscConfig+0x288>)
 8003986:	4313      	orrs	r3, r2
 8003988:	604b      	str	r3, [r1, #4]
 800398a:	e025      	b.n	80039d8 <HAL_RCC_OscConfig+0x2d4>
 800398c:	58024400 	.word	0x58024400
 8003990:	4b9a      	ldr	r3, [pc, #616]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	061b      	lsls	r3, r3, #24
 800399e:	4997      	ldr	r1, [pc, #604]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]
 80039a4:	e018      	b.n	80039d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039a6:	4b95      	ldr	r3, [pc, #596]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a94      	ldr	r2, [pc, #592]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 80039ac:	f023 0301 	bic.w	r3, r3, #1
 80039b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b2:	f7fd fd07 	bl	80013c4 <HAL_GetTick>
 80039b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ba:	f7fd fd03 	bl	80013c4 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e2ed      	b.n	8003fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039cc:	4b8b      	ldr	r3, [pc, #556]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f0      	bne.n	80039ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0310 	and.w	r3, r3, #16
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80a9 	beq.w	8003b38 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039e6:	4b85      	ldr	r3, [pc, #532]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039f0:	4b82      	ldr	r3, [pc, #520]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d007      	beq.n	8003a0c <HAL_RCC_OscConfig+0x308>
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	2b18      	cmp	r3, #24
 8003a00:	d13a      	bne.n	8003a78 <HAL_RCC_OscConfig+0x374>
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f003 0303 	and.w	r3, r3, #3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d135      	bne.n	8003a78 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a0c:	4b7b      	ldr	r3, [pc, #492]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_OscConfig+0x320>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	2b80      	cmp	r3, #128	; 0x80
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e2c1      	b.n	8003fa8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a24:	f7fd fcfe 	bl	8001424 <HAL_GetREVID>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d817      	bhi.n	8003a62 <HAL_RCC_OscConfig+0x35e>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	d108      	bne.n	8003a4c <HAL_RCC_OscConfig+0x348>
 8003a3a:	4b70      	ldr	r3, [pc, #448]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a42:	4a6e      	ldr	r2, [pc, #440]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003a44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a48:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a4a:	e075      	b.n	8003b38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a4c:	4b6b      	ldr	r3, [pc, #428]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	069b      	lsls	r3, r3, #26
 8003a5a:	4968      	ldr	r1, [pc, #416]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a60:	e06a      	b.n	8003b38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a62:	4b66      	ldr	r3, [pc, #408]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	061b      	lsls	r3, r3, #24
 8003a70:	4962      	ldr	r1, [pc, #392]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a76:	e05f      	b.n	8003b38 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d042      	beq.n	8003b06 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a80:	4b5e      	ldr	r3, [pc, #376]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a5d      	ldr	r2, [pc, #372]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7fd fc9a 	bl	80013c4 <HAL_GetTick>
 8003a90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a94:	f7fd fc96 	bl	80013c4 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e280      	b.n	8003fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003aa6:	4b55      	ldr	r3, [pc, #340]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ab2:	f7fd fcb7 	bl	8001424 <HAL_GetREVID>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f241 0203 	movw	r2, #4099	; 0x1003
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d817      	bhi.n	8003af0 <HAL_RCC_OscConfig+0x3ec>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	d108      	bne.n	8003ada <HAL_RCC_OscConfig+0x3d6>
 8003ac8:	4b4c      	ldr	r3, [pc, #304]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003ad0:	4a4a      	ldr	r2, [pc, #296]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003ad2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ad6:	6053      	str	r3, [r2, #4]
 8003ad8:	e02e      	b.n	8003b38 <HAL_RCC_OscConfig+0x434>
 8003ada:	4b48      	ldr	r3, [pc, #288]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	069b      	lsls	r3, r3, #26
 8003ae8:	4944      	ldr	r1, [pc, #272]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]
 8003aee:	e023      	b.n	8003b38 <HAL_RCC_OscConfig+0x434>
 8003af0:	4b42      	ldr	r3, [pc, #264]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	061b      	lsls	r3, r3, #24
 8003afe:	493f      	ldr	r1, [pc, #252]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60cb      	str	r3, [r1, #12]
 8003b04:	e018      	b.n	8003b38 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003b06:	4b3d      	ldr	r3, [pc, #244]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a3c      	ldr	r2, [pc, #240]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b12:	f7fd fc57 	bl	80013c4 <HAL_GetTick>
 8003b16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b1a:	f7fd fc53 	bl	80013c4 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e23d      	b.n	8003fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b2c:	4b33      	ldr	r3, [pc, #204]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1f0      	bne.n	8003b1a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d036      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d019      	beq.n	8003b80 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b4c:	4b2b      	ldr	r3, [pc, #172]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b50:	4a2a      	ldr	r2, [pc, #168]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b58:	f7fd fc34 	bl	80013c4 <HAL_GetTick>
 8003b5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b60:	f7fd fc30 	bl	80013c4 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e21a      	b.n	8003fa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b72:	4b22      	ldr	r3, [pc, #136]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x45c>
 8003b7e:	e018      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b80:	4b1e      	ldr	r3, [pc, #120]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b84:	4a1d      	ldr	r2, [pc, #116]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003b86:	f023 0301 	bic.w	r3, r3, #1
 8003b8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8c:	f7fd fc1a 	bl	80013c4 <HAL_GetTick>
 8003b90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b94:	f7fd fc16 	bl	80013c4 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e200      	b.n	8003fa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ba6:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d039      	beq.n	8003c32 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01c      	beq.n	8003c00 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bc6:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003bcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bd0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003bd2:	f7fd fbf7 	bl	80013c4 <HAL_GetTick>
 8003bd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bda:	f7fd fbf3 	bl	80013c4 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e1dd      	b.n	8003fa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0f0      	beq.n	8003bda <HAL_RCC_OscConfig+0x4d6>
 8003bf8:	e01b      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
 8003bfa:	bf00      	nop
 8003bfc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c00:	4b9b      	ldr	r3, [pc, #620]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a9a      	ldr	r2, [pc, #616]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003c06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c0c:	f7fd fbda 	bl	80013c4 <HAL_GetTick>
 8003c10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c14:	f7fd fbd6 	bl	80013c4 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e1c0      	b.n	8003fa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c26:	4b92      	ldr	r3, [pc, #584]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 8081 	beq.w	8003d42 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c40:	4b8c      	ldr	r3, [pc, #560]	; (8003e74 <HAL_RCC_OscConfig+0x770>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a8b      	ldr	r2, [pc, #556]	; (8003e74 <HAL_RCC_OscConfig+0x770>)
 8003c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c4c:	f7fd fbba 	bl	80013c4 <HAL_GetTick>
 8003c50:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c54:	f7fd fbb6 	bl	80013c4 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e1a0      	b.n	8003fa8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c66:	4b83      	ldr	r3, [pc, #524]	; (8003e74 <HAL_RCC_OscConfig+0x770>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d106      	bne.n	8003c88 <HAL_RCC_OscConfig+0x584>
 8003c7a:	4b7d      	ldr	r3, [pc, #500]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	4a7c      	ldr	r2, [pc, #496]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	6713      	str	r3, [r2, #112]	; 0x70
 8003c86:	e02d      	b.n	8003ce4 <HAL_RCC_OscConfig+0x5e0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10c      	bne.n	8003caa <HAL_RCC_OscConfig+0x5a6>
 8003c90:	4b77      	ldr	r3, [pc, #476]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c94:	4a76      	ldr	r2, [pc, #472]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003c96:	f023 0301 	bic.w	r3, r3, #1
 8003c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9c:	4b74      	ldr	r3, [pc, #464]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	4a73      	ldr	r2, [pc, #460]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003ca2:	f023 0304 	bic.w	r3, r3, #4
 8003ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca8:	e01c      	b.n	8003ce4 <HAL_RCC_OscConfig+0x5e0>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b05      	cmp	r3, #5
 8003cb0:	d10c      	bne.n	8003ccc <HAL_RCC_OscConfig+0x5c8>
 8003cb2:	4b6f      	ldr	r3, [pc, #444]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	4a6e      	ldr	r2, [pc, #440]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003cb8:	f043 0304 	orr.w	r3, r3, #4
 8003cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cbe:	4b6c      	ldr	r3, [pc, #432]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc2:	4a6b      	ldr	r2, [pc, #428]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cca:	e00b      	b.n	8003ce4 <HAL_RCC_OscConfig+0x5e0>
 8003ccc:	4b68      	ldr	r3, [pc, #416]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd0:	4a67      	ldr	r2, [pc, #412]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003cd2:	f023 0301 	bic.w	r3, r3, #1
 8003cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd8:	4b65      	ldr	r3, [pc, #404]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cdc:	4a64      	ldr	r2, [pc, #400]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003cde:	f023 0304 	bic.w	r3, r3, #4
 8003ce2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d015      	beq.n	8003d18 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cec:	f7fd fb6a 	bl	80013c4 <HAL_GetTick>
 8003cf0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cf2:	e00a      	b.n	8003d0a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf4:	f7fd fb66 	bl	80013c4 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e14e      	b.n	8003fa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d0a:	4b59      	ldr	r3, [pc, #356]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0ee      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x5f0>
 8003d16:	e014      	b.n	8003d42 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d18:	f7fd fb54 	bl	80013c4 <HAL_GetTick>
 8003d1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d1e:	e00a      	b.n	8003d36 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d20:	f7fd fb50 	bl	80013c4 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e138      	b.n	8003fa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d36:	4b4e      	ldr	r3, [pc, #312]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1ee      	bne.n	8003d20 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 812d 	beq.w	8003fa6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d4c:	4b48      	ldr	r3, [pc, #288]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d54:	2b18      	cmp	r3, #24
 8003d56:	f000 80bd 	beq.w	8003ed4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	f040 809e 	bne.w	8003ea0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d64:	4b42      	ldr	r3, [pc, #264]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a41      	ldr	r2, [pc, #260]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fd fb28 	bl	80013c4 <HAL_GetTick>
 8003d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d78:	f7fd fb24 	bl	80013c4 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e10e      	b.n	8003fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d8a:	4b39      	ldr	r3, [pc, #228]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d96:	4b36      	ldr	r3, [pc, #216]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d9a:	4b37      	ldr	r3, [pc, #220]	; (8003e78 <HAL_RCC_OscConfig+0x774>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003da6:	0112      	lsls	r2, r2, #4
 8003da8:	430a      	orrs	r2, r1
 8003daa:	4931      	ldr	r1, [pc, #196]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	628b      	str	r3, [r1, #40]	; 0x28
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	3b01      	subs	r3, #1
 8003db6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	025b      	lsls	r3, r3, #9
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	041b      	lsls	r3, r3, #16
 8003dce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	061b      	lsls	r3, r3, #24
 8003ddc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003de0:	4923      	ldr	r1, [pc, #140]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003de6:	4b22      	ldr	r3, [pc, #136]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	4a21      	ldr	r2, [pc, #132]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003df2:	4b1f      	ldr	r3, [pc, #124]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df6:	4b21      	ldr	r3, [pc, #132]	; (8003e7c <HAL_RCC_OscConfig+0x778>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003dfe:	00d2      	lsls	r2, r2, #3
 8003e00:	491b      	ldr	r1, [pc, #108]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e06:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0a:	f023 020c 	bic.w	r2, r3, #12
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	4917      	ldr	r1, [pc, #92]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003e18:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	f023 0202 	bic.w	r2, r3, #2
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e24:	4912      	ldr	r1, [pc, #72]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e2a:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	4a10      	ldr	r2, [pc, #64]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e36:	4b0e      	ldr	r3, [pc, #56]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	4a0d      	ldr	r2, [pc, #52]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003e42:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003e4e:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	4a07      	ldr	r2, [pc, #28]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e5a:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a04      	ldr	r2, [pc, #16]	; (8003e70 <HAL_RCC_OscConfig+0x76c>)
 8003e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e66:	f7fd faad 	bl	80013c4 <HAL_GetTick>
 8003e6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e6c:	e011      	b.n	8003e92 <HAL_RCC_OscConfig+0x78e>
 8003e6e:	bf00      	nop
 8003e70:	58024400 	.word	0x58024400
 8003e74:	58024800 	.word	0x58024800
 8003e78:	fffffc0c 	.word	0xfffffc0c
 8003e7c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e80:	f7fd faa0 	bl	80013c4 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e08a      	b.n	8003fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e92:	4b47      	ldr	r3, [pc, #284]	; (8003fb0 <HAL_RCC_OscConfig+0x8ac>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0x77c>
 8003e9e:	e082      	b.n	8003fa6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea0:	4b43      	ldr	r3, [pc, #268]	; (8003fb0 <HAL_RCC_OscConfig+0x8ac>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a42      	ldr	r2, [pc, #264]	; (8003fb0 <HAL_RCC_OscConfig+0x8ac>)
 8003ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eac:	f7fd fa8a 	bl	80013c4 <HAL_GetTick>
 8003eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb4:	f7fd fa86 	bl	80013c4 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e070      	b.n	8003fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ec6:	4b3a      	ldr	r3, [pc, #232]	; (8003fb0 <HAL_RCC_OscConfig+0x8ac>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x7b0>
 8003ed2:	e068      	b.n	8003fa6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ed4:	4b36      	ldr	r3, [pc, #216]	; (8003fb0 <HAL_RCC_OscConfig+0x8ac>)
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003eda:	4b35      	ldr	r3, [pc, #212]	; (8003fb0 <HAL_RCC_OscConfig+0x8ac>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d031      	beq.n	8003f4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f003 0203 	and.w	r2, r3, #3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d12a      	bne.n	8003f4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d122      	bne.n	8003f4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f10:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d11a      	bne.n	8003f4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	0a5b      	lsrs	r3, r3, #9
 8003f1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f22:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d111      	bne.n	8003f4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	0c1b      	lsrs	r3, r3, #16
 8003f2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d108      	bne.n	8003f4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	0e1b      	lsrs	r3, r3, #24
 8003f3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d001      	beq.n	8003f50 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e02b      	b.n	8003fa8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003f50:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <HAL_RCC_OscConfig+0x8ac>)
 8003f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f54:	08db      	lsrs	r3, r3, #3
 8003f56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f5a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d01f      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003f66:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <HAL_RCC_OscConfig+0x8ac>)
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6a:	4a11      	ldr	r2, [pc, #68]	; (8003fb0 <HAL_RCC_OscConfig+0x8ac>)
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f72:	f7fd fa27 	bl	80013c4 <HAL_GetTick>
 8003f76:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003f78:	bf00      	nop
 8003f7a:	f7fd fa23 	bl	80013c4 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d0f9      	beq.n	8003f7a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f86:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <HAL_RCC_OscConfig+0x8ac>)
 8003f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f8a:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <HAL_RCC_OscConfig+0x8b0>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f92:	00d2      	lsls	r2, r2, #3
 8003f94:	4906      	ldr	r1, [pc, #24]	; (8003fb0 <HAL_RCC_OscConfig+0x8ac>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003f9a:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <HAL_RCC_OscConfig+0x8ac>)
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	4a04      	ldr	r2, [pc, #16]	; (8003fb0 <HAL_RCC_OscConfig+0x8ac>)
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3730      	adds	r7, #48	; 0x30
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	58024400 	.word	0x58024400
 8003fb4:	ffff0007 	.word	0xffff0007

08003fb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e19c      	b.n	8004306 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fcc:	4b8a      	ldr	r3, [pc, #552]	; (80041f8 <HAL_RCC_ClockConfig+0x240>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d910      	bls.n	8003ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fda:	4b87      	ldr	r3, [pc, #540]	; (80041f8 <HAL_RCC_ClockConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 020f 	bic.w	r2, r3, #15
 8003fe2:	4985      	ldr	r1, [pc, #532]	; (80041f8 <HAL_RCC_ClockConfig+0x240>)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fea:	4b83      	ldr	r3, [pc, #524]	; (80041f8 <HAL_RCC_ClockConfig+0x240>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e184      	b.n	8004306 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d010      	beq.n	800402a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	4b7b      	ldr	r3, [pc, #492]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004014:	429a      	cmp	r2, r3
 8004016:	d908      	bls.n	800402a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004018:	4b78      	ldr	r3, [pc, #480]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	4975      	ldr	r1, [pc, #468]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 8004026:	4313      	orrs	r3, r2
 8004028:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d010      	beq.n	8004058 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695a      	ldr	r2, [r3, #20]
 800403a:	4b70      	ldr	r3, [pc, #448]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004042:	429a      	cmp	r2, r3
 8004044:	d908      	bls.n	8004058 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004046:	4b6d      	ldr	r3, [pc, #436]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	496a      	ldr	r1, [pc, #424]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 8004054:	4313      	orrs	r3, r2
 8004056:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b00      	cmp	r3, #0
 8004062:	d010      	beq.n	8004086 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699a      	ldr	r2, [r3, #24]
 8004068:	4b64      	ldr	r3, [pc, #400]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004070:	429a      	cmp	r2, r3
 8004072:	d908      	bls.n	8004086 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004074:	4b61      	ldr	r3, [pc, #388]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	495e      	ldr	r1, [pc, #376]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 8004082:	4313      	orrs	r3, r2
 8004084:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	2b00      	cmp	r3, #0
 8004090:	d010      	beq.n	80040b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69da      	ldr	r2, [r3, #28]
 8004096:	4b59      	ldr	r3, [pc, #356]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800409e:	429a      	cmp	r2, r3
 80040a0:	d908      	bls.n	80040b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80040a2:	4b56      	ldr	r3, [pc, #344]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	4953      	ldr	r1, [pc, #332]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d010      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	4b4d      	ldr	r3, [pc, #308]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d908      	bls.n	80040e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d0:	4b4a      	ldr	r3, [pc, #296]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	f023 020f 	bic.w	r2, r3, #15
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4947      	ldr	r1, [pc, #284]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d055      	beq.n	800419a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80040ee:	4b43      	ldr	r3, [pc, #268]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	4940      	ldr	r1, [pc, #256]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d107      	bne.n	8004118 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004108:	4b3c      	ldr	r3, [pc, #240]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d121      	bne.n	8004158 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0f6      	b.n	8004306 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b03      	cmp	r3, #3
 800411e:	d107      	bne.n	8004130 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004120:	4b36      	ldr	r3, [pc, #216]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d115      	bne.n	8004158 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0ea      	b.n	8004306 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d107      	bne.n	8004148 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004138:	4b30      	ldr	r3, [pc, #192]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004140:	2b00      	cmp	r3, #0
 8004142:	d109      	bne.n	8004158 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0de      	b.n	8004306 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004148:	4b2c      	ldr	r3, [pc, #176]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e0d6      	b.n	8004306 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004158:	4b28      	ldr	r3, [pc, #160]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f023 0207 	bic.w	r2, r3, #7
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	4925      	ldr	r1, [pc, #148]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 8004166:	4313      	orrs	r3, r2
 8004168:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800416a:	f7fd f92b 	bl	80013c4 <HAL_GetTick>
 800416e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004170:	e00a      	b.n	8004188 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004172:	f7fd f927 	bl	80013c4 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004180:	4293      	cmp	r3, r2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e0be      	b.n	8004306 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004188:	4b1c      	ldr	r3, [pc, #112]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	429a      	cmp	r2, r3
 8004198:	d1eb      	bne.n	8004172 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d010      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	4b14      	ldr	r3, [pc, #80]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d208      	bcs.n	80041c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b6:	4b11      	ldr	r3, [pc, #68]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	f023 020f 	bic.w	r2, r3, #15
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	490e      	ldr	r1, [pc, #56]	; (80041fc <HAL_RCC_ClockConfig+0x244>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <HAL_RCC_ClockConfig+0x240>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d214      	bcs.n	8004200 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d6:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <HAL_RCC_ClockConfig+0x240>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f023 020f 	bic.w	r2, r3, #15
 80041de:	4906      	ldr	r1, [pc, #24]	; (80041f8 <HAL_RCC_ClockConfig+0x240>)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e6:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <HAL_RCC_ClockConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d005      	beq.n	8004200 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e086      	b.n	8004306 <HAL_RCC_ClockConfig+0x34e>
 80041f8:	52002000 	.word	0x52002000
 80041fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d010      	beq.n	800422e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	4b3f      	ldr	r3, [pc, #252]	; (8004310 <HAL_RCC_ClockConfig+0x358>)
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004218:	429a      	cmp	r2, r3
 800421a:	d208      	bcs.n	800422e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800421c:	4b3c      	ldr	r3, [pc, #240]	; (8004310 <HAL_RCC_ClockConfig+0x358>)
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	4939      	ldr	r1, [pc, #228]	; (8004310 <HAL_RCC_ClockConfig+0x358>)
 800422a:	4313      	orrs	r3, r2
 800422c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d010      	beq.n	800425c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695a      	ldr	r2, [r3, #20]
 800423e:	4b34      	ldr	r3, [pc, #208]	; (8004310 <HAL_RCC_ClockConfig+0x358>)
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004246:	429a      	cmp	r2, r3
 8004248:	d208      	bcs.n	800425c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800424a:	4b31      	ldr	r3, [pc, #196]	; (8004310 <HAL_RCC_ClockConfig+0x358>)
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	492e      	ldr	r1, [pc, #184]	; (8004310 <HAL_RCC_ClockConfig+0x358>)
 8004258:	4313      	orrs	r3, r2
 800425a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b00      	cmp	r3, #0
 8004266:	d010      	beq.n	800428a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699a      	ldr	r2, [r3, #24]
 800426c:	4b28      	ldr	r3, [pc, #160]	; (8004310 <HAL_RCC_ClockConfig+0x358>)
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004274:	429a      	cmp	r2, r3
 8004276:	d208      	bcs.n	800428a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004278:	4b25      	ldr	r3, [pc, #148]	; (8004310 <HAL_RCC_ClockConfig+0x358>)
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	4922      	ldr	r1, [pc, #136]	; (8004310 <HAL_RCC_ClockConfig+0x358>)
 8004286:	4313      	orrs	r3, r2
 8004288:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b00      	cmp	r3, #0
 8004294:	d010      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69da      	ldr	r2, [r3, #28]
 800429a:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <HAL_RCC_ClockConfig+0x358>)
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d208      	bcs.n	80042b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80042a6:	4b1a      	ldr	r3, [pc, #104]	; (8004310 <HAL_RCC_ClockConfig+0x358>)
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	4917      	ldr	r1, [pc, #92]	; (8004310 <HAL_RCC_ClockConfig+0x358>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042b8:	f000 f834 	bl	8004324 <HAL_RCC_GetSysClockFreq>
 80042bc:	4602      	mov	r2, r0
 80042be:	4b14      	ldr	r3, [pc, #80]	; (8004310 <HAL_RCC_ClockConfig+0x358>)
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	0a1b      	lsrs	r3, r3, #8
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	4912      	ldr	r1, [pc, #72]	; (8004314 <HAL_RCC_ClockConfig+0x35c>)
 80042ca:	5ccb      	ldrb	r3, [r1, r3]
 80042cc:	f003 031f 	and.w	r3, r3, #31
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
 80042d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042d6:	4b0e      	ldr	r3, [pc, #56]	; (8004310 <HAL_RCC_ClockConfig+0x358>)
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	4a0d      	ldr	r2, [pc, #52]	; (8004314 <HAL_RCC_ClockConfig+0x35c>)
 80042e0:	5cd3      	ldrb	r3, [r2, r3]
 80042e2:	f003 031f 	and.w	r3, r3, #31
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	fa22 f303 	lsr.w	r3, r2, r3
 80042ec:	4a0a      	ldr	r2, [pc, #40]	; (8004318 <HAL_RCC_ClockConfig+0x360>)
 80042ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042f0:	4a0a      	ldr	r2, [pc, #40]	; (800431c <HAL_RCC_ClockConfig+0x364>)
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80042f6:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <HAL_RCC_ClockConfig+0x368>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fd f818 	bl	8001330 <HAL_InitTick>
 8004300:	4603      	mov	r3, r0
 8004302:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004304:	7bfb      	ldrb	r3, [r7, #15]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	58024400 	.word	0x58024400
 8004314:	08009038 	.word	0x08009038
 8004318:	24000004 	.word	0x24000004
 800431c:	24000000 	.word	0x24000000
 8004320:	24000008 	.word	0x24000008

08004324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004324:	b480      	push	{r7}
 8004326:	b089      	sub	sp, #36	; 0x24
 8004328:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800432a:	4bb3      	ldr	r3, [pc, #716]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004332:	2b18      	cmp	r3, #24
 8004334:	f200 8155 	bhi.w	80045e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004338:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <HAL_RCC_GetSysClockFreq+0x1c>)
 800433a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433e:	bf00      	nop
 8004340:	080043a5 	.word	0x080043a5
 8004344:	080045e3 	.word	0x080045e3
 8004348:	080045e3 	.word	0x080045e3
 800434c:	080045e3 	.word	0x080045e3
 8004350:	080045e3 	.word	0x080045e3
 8004354:	080045e3 	.word	0x080045e3
 8004358:	080045e3 	.word	0x080045e3
 800435c:	080045e3 	.word	0x080045e3
 8004360:	080043cb 	.word	0x080043cb
 8004364:	080045e3 	.word	0x080045e3
 8004368:	080045e3 	.word	0x080045e3
 800436c:	080045e3 	.word	0x080045e3
 8004370:	080045e3 	.word	0x080045e3
 8004374:	080045e3 	.word	0x080045e3
 8004378:	080045e3 	.word	0x080045e3
 800437c:	080045e3 	.word	0x080045e3
 8004380:	080043d1 	.word	0x080043d1
 8004384:	080045e3 	.word	0x080045e3
 8004388:	080045e3 	.word	0x080045e3
 800438c:	080045e3 	.word	0x080045e3
 8004390:	080045e3 	.word	0x080045e3
 8004394:	080045e3 	.word	0x080045e3
 8004398:	080045e3 	.word	0x080045e3
 800439c:	080045e3 	.word	0x080045e3
 80043a0:	080043d7 	.word	0x080043d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043a4:	4b94      	ldr	r3, [pc, #592]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d009      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043b0:	4b91      	ldr	r3, [pc, #580]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	08db      	lsrs	r3, r3, #3
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	4a90      	ldr	r2, [pc, #576]	; (80045fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043bc:	fa22 f303 	lsr.w	r3, r2, r3
 80043c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80043c2:	e111      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80043c4:	4b8d      	ldr	r3, [pc, #564]	; (80045fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043c6:	61bb      	str	r3, [r7, #24]
      break;
 80043c8:	e10e      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80043ca:	4b8d      	ldr	r3, [pc, #564]	; (8004600 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80043cc:	61bb      	str	r3, [r7, #24]
      break;
 80043ce:	e10b      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80043d0:	4b8c      	ldr	r3, [pc, #560]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80043d2:	61bb      	str	r3, [r7, #24]
      break;
 80043d4:	e108      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043d6:	4b88      	ldr	r3, [pc, #544]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80043e0:	4b85      	ldr	r3, [pc, #532]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	091b      	lsrs	r3, r3, #4
 80043e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80043ec:	4b82      	ldr	r3, [pc, #520]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80043f6:	4b80      	ldr	r3, [pc, #512]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fa:	08db      	lsrs	r3, r3, #3
 80043fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	fb02 f303 	mul.w	r3, r2, r3
 8004406:	ee07 3a90 	vmov	s15, r3
 800440a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80e1 	beq.w	80045dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b02      	cmp	r3, #2
 800441e:	f000 8083 	beq.w	8004528 <HAL_RCC_GetSysClockFreq+0x204>
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b02      	cmp	r3, #2
 8004426:	f200 80a1 	bhi.w	800456c <HAL_RCC_GetSysClockFreq+0x248>
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_RCC_GetSysClockFreq+0x114>
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d056      	beq.n	80044e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004436:	e099      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004438:	4b6f      	ldr	r3, [pc, #444]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0320 	and.w	r3, r3, #32
 8004440:	2b00      	cmp	r3, #0
 8004442:	d02d      	beq.n	80044a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004444:	4b6c      	ldr	r3, [pc, #432]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	08db      	lsrs	r3, r3, #3
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	4a6b      	ldr	r2, [pc, #428]	; (80045fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004450:	fa22 f303 	lsr.w	r3, r2, r3
 8004454:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	ee07 3a90 	vmov	s15, r3
 800445c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	ee07 3a90 	vmov	s15, r3
 8004466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800446e:	4b62      	ldr	r3, [pc, #392]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004476:	ee07 3a90 	vmov	s15, r3
 800447a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800447e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004482:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004608 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800448a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800448e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800449e:	e087      	b.n	80045b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	ee07 3a90 	vmov	s15, r3
 80044a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800460c <HAL_RCC_GetSysClockFreq+0x2e8>
 80044ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044b2:	4b51      	ldr	r3, [pc, #324]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ba:	ee07 3a90 	vmov	s15, r3
 80044be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80044c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004608 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044e2:	e065      	b.n	80045b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	ee07 3a90 	vmov	s15, r3
 80044ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004610 <HAL_RCC_GetSysClockFreq+0x2ec>
 80044f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044f6:	4b40      	ldr	r3, [pc, #256]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044fe:	ee07 3a90 	vmov	s15, r3
 8004502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004506:	ed97 6a02 	vldr	s12, [r7, #8]
 800450a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004608 <HAL_RCC_GetSysClockFreq+0x2e4>
 800450e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800451a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800451e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004522:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004526:	e043      	b.n	80045b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004532:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004614 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800453a:	4b2f      	ldr	r3, [pc, #188]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800453c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800454a:	ed97 6a02 	vldr	s12, [r7, #8]
 800454e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004608 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800455a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800455e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004566:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800456a:	e021      	b.n	80045b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004576:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004610 <HAL_RCC_GetSysClockFreq+0x2ec>
 800457a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800457e:	4b1e      	ldr	r3, [pc, #120]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004592:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004608 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800459a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800459e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80045b0:	4b11      	ldr	r3, [pc, #68]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	0a5b      	lsrs	r3, r3, #9
 80045b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ba:	3301      	adds	r3, #1
 80045bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	ee07 3a90 	vmov	s15, r3
 80045c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80045cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045d4:	ee17 3a90 	vmov	r3, s15
 80045d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80045da:	e005      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	61bb      	str	r3, [r7, #24]
      break;
 80045e0:	e002      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80045e2:	4b07      	ldr	r3, [pc, #28]	; (8004600 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80045e4:	61bb      	str	r3, [r7, #24]
      break;
 80045e6:	bf00      	nop
  }

  return sysclockfreq;
 80045e8:	69bb      	ldr	r3, [r7, #24]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3724      	adds	r7, #36	; 0x24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	58024400 	.word	0x58024400
 80045fc:	03d09000 	.word	0x03d09000
 8004600:	003d0900 	.word	0x003d0900
 8004604:	007a1200 	.word	0x007a1200
 8004608:	46000000 	.word	0x46000000
 800460c:	4c742400 	.word	0x4c742400
 8004610:	4a742400 	.word	0x4a742400
 8004614:	4af42400 	.word	0x4af42400

08004618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800461e:	f7ff fe81 	bl	8004324 <HAL_RCC_GetSysClockFreq>
 8004622:	4602      	mov	r2, r0
 8004624:	4b10      	ldr	r3, [pc, #64]	; (8004668 <HAL_RCC_GetHCLKFreq+0x50>)
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	0a1b      	lsrs	r3, r3, #8
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	490f      	ldr	r1, [pc, #60]	; (800466c <HAL_RCC_GetHCLKFreq+0x54>)
 8004630:	5ccb      	ldrb	r3, [r1, r3]
 8004632:	f003 031f 	and.w	r3, r3, #31
 8004636:	fa22 f303 	lsr.w	r3, r2, r3
 800463a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800463c:	4b0a      	ldr	r3, [pc, #40]	; (8004668 <HAL_RCC_GetHCLKFreq+0x50>)
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	4a09      	ldr	r2, [pc, #36]	; (800466c <HAL_RCC_GetHCLKFreq+0x54>)
 8004646:	5cd3      	ldrb	r3, [r2, r3]
 8004648:	f003 031f 	and.w	r3, r3, #31
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	fa22 f303 	lsr.w	r3, r2, r3
 8004652:	4a07      	ldr	r2, [pc, #28]	; (8004670 <HAL_RCC_GetHCLKFreq+0x58>)
 8004654:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004656:	4a07      	ldr	r2, [pc, #28]	; (8004674 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800465c:	4b04      	ldr	r3, [pc, #16]	; (8004670 <HAL_RCC_GetHCLKFreq+0x58>)
 800465e:	681b      	ldr	r3, [r3, #0]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	58024400 	.word	0x58024400
 800466c:	08009038 	.word	0x08009038
 8004670:	24000004 	.word	0x24000004
 8004674:	24000000 	.word	0x24000000

08004678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800467c:	f7ff ffcc 	bl	8004618 <HAL_RCC_GetHCLKFreq>
 8004680:	4602      	mov	r2, r0
 8004682:	4b06      	ldr	r3, [pc, #24]	; (800469c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	091b      	lsrs	r3, r3, #4
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	4904      	ldr	r1, [pc, #16]	; (80046a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800468e:	5ccb      	ldrb	r3, [r1, r3]
 8004690:	f003 031f 	and.w	r3, r3, #31
 8004694:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004698:	4618      	mov	r0, r3
 800469a:	bd80      	pop	{r7, pc}
 800469c:	58024400 	.word	0x58024400
 80046a0:	08009038 	.word	0x08009038

080046a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80046a8:	f7ff ffb6 	bl	8004618 <HAL_RCC_GetHCLKFreq>
 80046ac:	4602      	mov	r2, r0
 80046ae:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	0a1b      	lsrs	r3, r3, #8
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	4904      	ldr	r1, [pc, #16]	; (80046cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80046ba:	5ccb      	ldrb	r3, [r1, r3]
 80046bc:	f003 031f 	and.w	r3, r3, #31
 80046c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	58024400 	.word	0x58024400
 80046cc:	08009038 	.word	0x08009038

080046d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d4:	b0ca      	sub	sp, #296	; 0x128
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046dc:	2300      	movs	r3, #0
 80046de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046e2:	2300      	movs	r3, #0
 80046e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80046f4:	2500      	movs	r5, #0
 80046f6:	ea54 0305 	orrs.w	r3, r4, r5
 80046fa:	d049      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80046fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004702:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004706:	d02f      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004708:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800470c:	d828      	bhi.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800470e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004712:	d01a      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004714:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004718:	d822      	bhi.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800471e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004722:	d007      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004724:	e01c      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004726:	4bb8      	ldr	r3, [pc, #736]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	4ab7      	ldr	r2, [pc, #732]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800472c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004730:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004732:	e01a      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004738:	3308      	adds	r3, #8
 800473a:	2102      	movs	r1, #2
 800473c:	4618      	mov	r0, r3
 800473e:	f001 fc8f 	bl	8006060 <RCCEx_PLL2_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004748:	e00f      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800474a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800474e:	3328      	adds	r3, #40	; 0x28
 8004750:	2102      	movs	r1, #2
 8004752:	4618      	mov	r0, r3
 8004754:	f001 fd36 	bl	80061c4 <RCCEx_PLL3_Config>
 8004758:	4603      	mov	r3, r0
 800475a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800475e:	e004      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004766:	e000      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800476a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004772:	4ba5      	ldr	r3, [pc, #660]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004776:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800477a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800477e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004780:	4aa1      	ldr	r2, [pc, #644]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004782:	430b      	orrs	r3, r1
 8004784:	6513      	str	r3, [r2, #80]	; 0x50
 8004786:	e003      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004788:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800478c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004798:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800479c:	f04f 0900 	mov.w	r9, #0
 80047a0:	ea58 0309 	orrs.w	r3, r8, r9
 80047a4:	d047      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80047a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d82a      	bhi.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80047b0:	a201      	add	r2, pc, #4	; (adr r2, 80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80047b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b6:	bf00      	nop
 80047b8:	080047cd 	.word	0x080047cd
 80047bc:	080047db 	.word	0x080047db
 80047c0:	080047f1 	.word	0x080047f1
 80047c4:	0800480f 	.word	0x0800480f
 80047c8:	0800480f 	.word	0x0800480f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047cc:	4b8e      	ldr	r3, [pc, #568]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	4a8d      	ldr	r2, [pc, #564]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047d8:	e01a      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047de:	3308      	adds	r3, #8
 80047e0:	2100      	movs	r1, #0
 80047e2:	4618      	mov	r0, r3
 80047e4:	f001 fc3c 	bl	8006060 <RCCEx_PLL2_Config>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047ee:	e00f      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f4:	3328      	adds	r3, #40	; 0x28
 80047f6:	2100      	movs	r1, #0
 80047f8:	4618      	mov	r0, r3
 80047fa:	f001 fce3 	bl	80061c4 <RCCEx_PLL3_Config>
 80047fe:	4603      	mov	r3, r0
 8004800:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004804:	e004      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800480c:	e000      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800480e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004810:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10a      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004818:	4b7b      	ldr	r3, [pc, #492]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800481a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800481c:	f023 0107 	bic.w	r1, r3, #7
 8004820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004826:	4a78      	ldr	r2, [pc, #480]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004828:	430b      	orrs	r3, r1
 800482a:	6513      	str	r3, [r2, #80]	; 0x50
 800482c:	e003      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004832:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004842:	f04f 0b00 	mov.w	fp, #0
 8004846:	ea5a 030b 	orrs.w	r3, sl, fp
 800484a:	d04c      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800484c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004856:	d030      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800485c:	d829      	bhi.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800485e:	2bc0      	cmp	r3, #192	; 0xc0
 8004860:	d02d      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004862:	2bc0      	cmp	r3, #192	; 0xc0
 8004864:	d825      	bhi.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004866:	2b80      	cmp	r3, #128	; 0x80
 8004868:	d018      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800486a:	2b80      	cmp	r3, #128	; 0x80
 800486c:	d821      	bhi.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004872:	2b40      	cmp	r3, #64	; 0x40
 8004874:	d007      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004876:	e01c      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004878:	4b63      	ldr	r3, [pc, #396]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	4a62      	ldr	r2, [pc, #392]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800487e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004882:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004884:	e01c      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800488a:	3308      	adds	r3, #8
 800488c:	2100      	movs	r1, #0
 800488e:	4618      	mov	r0, r3
 8004890:	f001 fbe6 	bl	8006060 <RCCEx_PLL2_Config>
 8004894:	4603      	mov	r3, r0
 8004896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800489a:	e011      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800489c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a0:	3328      	adds	r3, #40	; 0x28
 80048a2:	2100      	movs	r1, #0
 80048a4:	4618      	mov	r0, r3
 80048a6:	f001 fc8d 	bl	80061c4 <RCCEx_PLL3_Config>
 80048aa:	4603      	mov	r3, r0
 80048ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80048b0:	e006      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048b8:	e002      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80048ba:	bf00      	nop
 80048bc:	e000      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80048be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10a      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80048c8:	4b4f      	ldr	r3, [pc, #316]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048cc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80048d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d6:	4a4c      	ldr	r2, [pc, #304]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048d8:	430b      	orrs	r3, r1
 80048da:	6513      	str	r3, [r2, #80]	; 0x50
 80048dc:	e003      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80048e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80048f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80048f6:	2300      	movs	r3, #0
 80048f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80048fc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004900:	460b      	mov	r3, r1
 8004902:	4313      	orrs	r3, r2
 8004904:	d053      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800490a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800490e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004912:	d035      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004914:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004918:	d82e      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800491a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800491e:	d031      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004920:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004924:	d828      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004926:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800492a:	d01a      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800492c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004930:	d822      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004936:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800493a:	d007      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800493c:	e01c      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800493e:	4b32      	ldr	r3, [pc, #200]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	4a31      	ldr	r2, [pc, #196]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004948:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800494a:	e01c      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800494c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004950:	3308      	adds	r3, #8
 8004952:	2100      	movs	r1, #0
 8004954:	4618      	mov	r0, r3
 8004956:	f001 fb83 	bl	8006060 <RCCEx_PLL2_Config>
 800495a:	4603      	mov	r3, r0
 800495c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004960:	e011      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004966:	3328      	adds	r3, #40	; 0x28
 8004968:	2100      	movs	r1, #0
 800496a:	4618      	mov	r0, r3
 800496c:	f001 fc2a 	bl	80061c4 <RCCEx_PLL3_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004976:	e006      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800497e:	e002      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004980:	bf00      	nop
 8004982:	e000      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004986:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10b      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800498e:	4b1e      	ldr	r3, [pc, #120]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004992:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800499a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800499e:	4a1a      	ldr	r2, [pc, #104]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049a0:	430b      	orrs	r3, r1
 80049a2:	6593      	str	r3, [r2, #88]	; 0x58
 80049a4:	e003      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80049ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80049ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80049be:	2300      	movs	r3, #0
 80049c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049c4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80049c8:	460b      	mov	r3, r1
 80049ca:	4313      	orrs	r3, r2
 80049cc:	d056      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80049ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80049d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049da:	d038      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80049dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049e0:	d831      	bhi.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80049e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049e6:	d034      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80049e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049ec:	d82b      	bhi.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80049ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049f2:	d01d      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80049f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049f8:	d825      	bhi.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d006      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80049fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a02:	d00a      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004a04:	e01f      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a06:	bf00      	nop
 8004a08:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a0c:	4ba2      	ldr	r3, [pc, #648]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a10:	4aa1      	ldr	r2, [pc, #644]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a18:	e01c      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a1e:	3308      	adds	r3, #8
 8004a20:	2100      	movs	r1, #0
 8004a22:	4618      	mov	r0, r3
 8004a24:	f001 fb1c 	bl	8006060 <RCCEx_PLL2_Config>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004a2e:	e011      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a34:	3328      	adds	r3, #40	; 0x28
 8004a36:	2100      	movs	r1, #0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f001 fbc3 	bl	80061c4 <RCCEx_PLL3_Config>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a44:	e006      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a4c:	e002      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004a4e:	bf00      	nop
 8004a50:	e000      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004a52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10b      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004a5c:	4b8e      	ldr	r3, [pc, #568]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a60:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a6c:	4a8a      	ldr	r2, [pc, #552]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a6e:	430b      	orrs	r3, r1
 8004a70:	6593      	str	r3, [r2, #88]	; 0x58
 8004a72:	e003      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a84:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004a88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004a92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004a96:	460b      	mov	r3, r1
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	d03a      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa2:	2b30      	cmp	r3, #48	; 0x30
 8004aa4:	d01f      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004aa6:	2b30      	cmp	r3, #48	; 0x30
 8004aa8:	d819      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	d00c      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004aae:	2b20      	cmp	r3, #32
 8004ab0:	d815      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d019      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004ab6:	2b10      	cmp	r3, #16
 8004ab8:	d111      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aba:	4b77      	ldr	r3, [pc, #476]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	4a76      	ldr	r2, [pc, #472]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004ac6:	e011      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004acc:	3308      	adds	r3, #8
 8004ace:	2102      	movs	r1, #2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f001 fac5 	bl	8006060 <RCCEx_PLL2_Config>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004adc:	e006      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ae4:	e002      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004ae6:	bf00      	nop
 8004ae8:	e000      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10a      	bne.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004af4:	4b68      	ldr	r3, [pc, #416]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b02:	4a65      	ldr	r2, [pc, #404]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b04:	430b      	orrs	r3, r1
 8004b06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b08:	e003      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004b1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004b22:	2300      	movs	r3, #0
 8004b24:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004b28:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	d051      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b3c:	d035      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004b3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b42:	d82e      	bhi.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004b44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b48:	d031      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004b4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b4e:	d828      	bhi.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b54:	d01a      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b5a:	d822      	bhi.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b64:	d007      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004b66:	e01c      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b68:	4b4b      	ldr	r3, [pc, #300]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	4a4a      	ldr	r2, [pc, #296]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b74:	e01c      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f001 fa6e 	bl	8006060 <RCCEx_PLL2_Config>
 8004b84:	4603      	mov	r3, r0
 8004b86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b8a:	e011      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b90:	3328      	adds	r3, #40	; 0x28
 8004b92:	2100      	movs	r1, #0
 8004b94:	4618      	mov	r0, r3
 8004b96:	f001 fb15 	bl	80061c4 <RCCEx_PLL3_Config>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ba0:	e006      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ba8:	e002      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004baa:	bf00      	nop
 8004bac:	e000      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10a      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004bb8:	4b37      	ldr	r3, [pc, #220]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bbc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc6:	4a34      	ldr	r2, [pc, #208]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	6513      	str	r3, [r2, #80]	; 0x50
 8004bcc:	e003      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bde:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004be2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004be6:	2300      	movs	r3, #0
 8004be8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004bec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	d056      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c00:	d033      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004c02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c06:	d82c      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004c08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c0c:	d02f      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004c0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c12:	d826      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004c14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c18:	d02b      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004c1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c1e:	d820      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004c20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c24:	d012      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004c26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c2a:	d81a      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d022      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c34:	d115      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c3a:	3308      	adds	r3, #8
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f001 fa0e 	bl	8006060 <RCCEx_PLL2_Config>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004c4a:	e015      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c50:	3328      	adds	r3, #40	; 0x28
 8004c52:	2101      	movs	r1, #1
 8004c54:	4618      	mov	r0, r3
 8004c56:	f001 fab5 	bl	80061c4 <RCCEx_PLL3_Config>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004c60:	e00a      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c68:	e006      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004c6a:	bf00      	nop
 8004c6c:	e004      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004c6e:	bf00      	nop
 8004c70:	e002      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004c72:	bf00      	nop
 8004c74:	e000      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10d      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004c80:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c84:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c8e:	4a02      	ldr	r2, [pc, #8]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c90:	430b      	orrs	r3, r1
 8004c92:	6513      	str	r3, [r2, #80]	; 0x50
 8004c94:	e006      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004c96:	bf00      	nop
 8004c98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ca0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cac:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cba:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	d055      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cd0:	d033      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004cd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cd6:	d82c      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cdc:	d02f      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce2:	d826      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004ce4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ce8:	d02b      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004cea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cee:	d820      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cf4:	d012      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004cf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cfa:	d81a      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d022      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004d00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d04:	d115      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d0a:	3308      	adds	r3, #8
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f001 f9a6 	bl	8006060 <RCCEx_PLL2_Config>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d1a:	e015      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d20:	3328      	adds	r3, #40	; 0x28
 8004d22:	2101      	movs	r1, #1
 8004d24:	4618      	mov	r0, r3
 8004d26:	f001 fa4d 	bl	80061c4 <RCCEx_PLL3_Config>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d30:	e00a      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d38:	e006      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004d3a:	bf00      	nop
 8004d3c:	e004      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004d3e:	bf00      	nop
 8004d40:	e002      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004d42:	bf00      	nop
 8004d44:	e000      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10b      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d50:	4ba3      	ldr	r3, [pc, #652]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d54:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d60:	4a9f      	ldr	r2, [pc, #636]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d62:	430b      	orrs	r3, r1
 8004d64:	6593      	str	r3, [r2, #88]	; 0x58
 8004d66:	e003      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004d7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d80:	2300      	movs	r3, #0
 8004d82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004d86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	d037      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d9a:	d00e      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004da0:	d816      	bhi.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d018      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004da6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004daa:	d111      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dac:	4b8c      	ldr	r3, [pc, #560]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	4a8b      	ldr	r2, [pc, #556]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004db6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004db8:	e00f      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dbe:	3308      	adds	r3, #8
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f001 f94c 	bl	8006060 <RCCEx_PLL2_Config>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004dce:	e004      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004dd6:	e000      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10a      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004de2:	4b7f      	ldr	r3, [pc, #508]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df0:	4a7b      	ldr	r2, [pc, #492]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004df2:	430b      	orrs	r3, r1
 8004df4:	6513      	str	r3, [r2, #80]	; 0x50
 8004df6:	e003      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e10:	2300      	movs	r3, #0
 8004e12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004e16:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	d039      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d81c      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004e2a:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e30:	08004e6d 	.word	0x08004e6d
 8004e34:	08004e41 	.word	0x08004e41
 8004e38:	08004e4f 	.word	0x08004e4f
 8004e3c:	08004e6d 	.word	0x08004e6d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e40:	4b67      	ldr	r3, [pc, #412]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	4a66      	ldr	r2, [pc, #408]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e4c:	e00f      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e52:	3308      	adds	r3, #8
 8004e54:	2102      	movs	r1, #2
 8004e56:	4618      	mov	r0, r3
 8004e58:	f001 f902 	bl	8006060 <RCCEx_PLL2_Config>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e62:	e004      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e6a:	e000      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10a      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e76:	4b5a      	ldr	r3, [pc, #360]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e7a:	f023 0103 	bic.w	r1, r3, #3
 8004e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e84:	4a56      	ldr	r2, [pc, #344]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e86:	430b      	orrs	r3, r1
 8004e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e8a:	e003      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004ea0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004eaa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f000 809f 	beq.w	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004eb6:	4b4b      	ldr	r3, [pc, #300]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a4a      	ldr	r2, [pc, #296]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ec2:	f7fc fa7f 	bl	80013c4 <HAL_GetTick>
 8004ec6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eca:	e00b      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ecc:	f7fc fa7a 	bl	80013c4 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b64      	cmp	r3, #100	; 0x64
 8004eda:	d903      	bls.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ee2:	e005      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ee4:	4b3f      	ldr	r3, [pc, #252]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0ed      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d179      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ef8:	4b39      	ldr	r3, [pc, #228]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004efa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f04:	4053      	eors	r3, r2
 8004f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d015      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f0e:	4b34      	ldr	r3, [pc, #208]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f1a:	4b31      	ldr	r3, [pc, #196]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1e:	4a30      	ldr	r2, [pc, #192]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f24:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f26:	4b2e      	ldr	r3, [pc, #184]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2a:	4a2d      	ldr	r2, [pc, #180]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f30:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004f32:	4a2b      	ldr	r2, [pc, #172]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f38:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f46:	d118      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f48:	f7fc fa3c 	bl	80013c4 <HAL_GetTick>
 8004f4c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f50:	e00d      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f52:	f7fc fa37 	bl	80013c4 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f5c:	1ad2      	subs	r2, r2, r3
 8004f5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d903      	bls.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004f6c:	e005      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f6e:	4b1c      	ldr	r3, [pc, #112]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0eb      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d129      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f92:	d10e      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004f94:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fa0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004fa4:	091a      	lsrs	r2, r3, #4
 8004fa6:	4b10      	ldr	r3, [pc, #64]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	4a0d      	ldr	r2, [pc, #52]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fac:	430b      	orrs	r3, r1
 8004fae:	6113      	str	r3, [r2, #16]
 8004fb0:	e005      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004fb2:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	4a0a      	ldr	r2, [pc, #40]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fb8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004fbc:	6113      	str	r3, [r2, #16]
 8004fbe:	4b08      	ldr	r3, [pc, #32]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fc0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fce:	4a04      	ldr	r2, [pc, #16]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fd4:	e00e      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004fde:	e009      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004fe0:	58024400 	.word	0x58024400
 8004fe4:	58024800 	.word	0x58024800
 8004fe8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ff0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	f002 0301 	and.w	r3, r2, #1
 8005000:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005004:	2300      	movs	r3, #0
 8005006:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800500a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800500e:	460b      	mov	r3, r1
 8005010:	4313      	orrs	r3, r2
 8005012:	f000 8089 	beq.w	8005128 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800501a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800501c:	2b28      	cmp	r3, #40	; 0x28
 800501e:	d86b      	bhi.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005020:	a201      	add	r2, pc, #4	; (adr r2, 8005028 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005026:	bf00      	nop
 8005028:	08005101 	.word	0x08005101
 800502c:	080050f9 	.word	0x080050f9
 8005030:	080050f9 	.word	0x080050f9
 8005034:	080050f9 	.word	0x080050f9
 8005038:	080050f9 	.word	0x080050f9
 800503c:	080050f9 	.word	0x080050f9
 8005040:	080050f9 	.word	0x080050f9
 8005044:	080050f9 	.word	0x080050f9
 8005048:	080050cd 	.word	0x080050cd
 800504c:	080050f9 	.word	0x080050f9
 8005050:	080050f9 	.word	0x080050f9
 8005054:	080050f9 	.word	0x080050f9
 8005058:	080050f9 	.word	0x080050f9
 800505c:	080050f9 	.word	0x080050f9
 8005060:	080050f9 	.word	0x080050f9
 8005064:	080050f9 	.word	0x080050f9
 8005068:	080050e3 	.word	0x080050e3
 800506c:	080050f9 	.word	0x080050f9
 8005070:	080050f9 	.word	0x080050f9
 8005074:	080050f9 	.word	0x080050f9
 8005078:	080050f9 	.word	0x080050f9
 800507c:	080050f9 	.word	0x080050f9
 8005080:	080050f9 	.word	0x080050f9
 8005084:	080050f9 	.word	0x080050f9
 8005088:	08005101 	.word	0x08005101
 800508c:	080050f9 	.word	0x080050f9
 8005090:	080050f9 	.word	0x080050f9
 8005094:	080050f9 	.word	0x080050f9
 8005098:	080050f9 	.word	0x080050f9
 800509c:	080050f9 	.word	0x080050f9
 80050a0:	080050f9 	.word	0x080050f9
 80050a4:	080050f9 	.word	0x080050f9
 80050a8:	08005101 	.word	0x08005101
 80050ac:	080050f9 	.word	0x080050f9
 80050b0:	080050f9 	.word	0x080050f9
 80050b4:	080050f9 	.word	0x080050f9
 80050b8:	080050f9 	.word	0x080050f9
 80050bc:	080050f9 	.word	0x080050f9
 80050c0:	080050f9 	.word	0x080050f9
 80050c4:	080050f9 	.word	0x080050f9
 80050c8:	08005101 	.word	0x08005101
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050d0:	3308      	adds	r3, #8
 80050d2:	2101      	movs	r1, #1
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 ffc3 	bl	8006060 <RCCEx_PLL2_Config>
 80050da:	4603      	mov	r3, r0
 80050dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80050e0:	e00f      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e6:	3328      	adds	r3, #40	; 0x28
 80050e8:	2101      	movs	r1, #1
 80050ea:	4618      	mov	r0, r3
 80050ec:	f001 f86a 	bl	80061c4 <RCCEx_PLL3_Config>
 80050f0:	4603      	mov	r3, r0
 80050f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80050f6:	e004      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050fe:	e000      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005102:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10a      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800510a:	4bbf      	ldr	r3, [pc, #764]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800510c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005118:	4abb      	ldr	r2, [pc, #748]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800511a:	430b      	orrs	r3, r1
 800511c:	6553      	str	r3, [r2, #84]	; 0x54
 800511e:	e003      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005120:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005124:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800512c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005130:	f002 0302 	and.w	r3, r2, #2
 8005134:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005138:	2300      	movs	r3, #0
 800513a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800513e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005142:	460b      	mov	r3, r1
 8005144:	4313      	orrs	r3, r2
 8005146:	d041      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800514c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800514e:	2b05      	cmp	r3, #5
 8005150:	d824      	bhi.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005152:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005158:	080051a5 	.word	0x080051a5
 800515c:	08005171 	.word	0x08005171
 8005160:	08005187 	.word	0x08005187
 8005164:	080051a5 	.word	0x080051a5
 8005168:	080051a5 	.word	0x080051a5
 800516c:	080051a5 	.word	0x080051a5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005174:	3308      	adds	r3, #8
 8005176:	2101      	movs	r1, #1
 8005178:	4618      	mov	r0, r3
 800517a:	f000 ff71 	bl	8006060 <RCCEx_PLL2_Config>
 800517e:	4603      	mov	r3, r0
 8005180:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005184:	e00f      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800518a:	3328      	adds	r3, #40	; 0x28
 800518c:	2101      	movs	r1, #1
 800518e:	4618      	mov	r0, r3
 8005190:	f001 f818 	bl	80061c4 <RCCEx_PLL3_Config>
 8005194:	4603      	mov	r3, r0
 8005196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800519a:	e004      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051a2:	e000      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80051a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10a      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80051ae:	4b96      	ldr	r3, [pc, #600]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b2:	f023 0107 	bic.w	r1, r3, #7
 80051b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051bc:	4a92      	ldr	r2, [pc, #584]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051be:	430b      	orrs	r3, r1
 80051c0:	6553      	str	r3, [r2, #84]	; 0x54
 80051c2:	e003      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d4:	f002 0304 	and.w	r3, r2, #4
 80051d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051dc:	2300      	movs	r3, #0
 80051de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051e2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4313      	orrs	r3, r2
 80051ea:	d044      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80051ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051f4:	2b05      	cmp	r3, #5
 80051f6:	d825      	bhi.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80051f8:	a201      	add	r2, pc, #4	; (adr r2, 8005200 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80051fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fe:	bf00      	nop
 8005200:	0800524d 	.word	0x0800524d
 8005204:	08005219 	.word	0x08005219
 8005208:	0800522f 	.word	0x0800522f
 800520c:	0800524d 	.word	0x0800524d
 8005210:	0800524d 	.word	0x0800524d
 8005214:	0800524d 	.word	0x0800524d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800521c:	3308      	adds	r3, #8
 800521e:	2101      	movs	r1, #1
 8005220:	4618      	mov	r0, r3
 8005222:	f000 ff1d 	bl	8006060 <RCCEx_PLL2_Config>
 8005226:	4603      	mov	r3, r0
 8005228:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800522c:	e00f      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800522e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005232:	3328      	adds	r3, #40	; 0x28
 8005234:	2101      	movs	r1, #1
 8005236:	4618      	mov	r0, r3
 8005238:	f000 ffc4 	bl	80061c4 <RCCEx_PLL3_Config>
 800523c:	4603      	mov	r3, r0
 800523e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005242:	e004      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800524a:	e000      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800524c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800524e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10b      	bne.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005256:	4b6c      	ldr	r3, [pc, #432]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525a:	f023 0107 	bic.w	r1, r3, #7
 800525e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005266:	4a68      	ldr	r2, [pc, #416]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005268:	430b      	orrs	r3, r1
 800526a:	6593      	str	r3, [r2, #88]	; 0x58
 800526c:	e003      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005272:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527e:	f002 0320 	and.w	r3, r2, #32
 8005282:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005286:	2300      	movs	r3, #0
 8005288:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800528c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005290:	460b      	mov	r3, r1
 8005292:	4313      	orrs	r3, r2
 8005294:	d055      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052a2:	d033      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80052a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052a8:	d82c      	bhi.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80052aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ae:	d02f      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80052b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b4:	d826      	bhi.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80052b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052ba:	d02b      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80052bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052c0:	d820      	bhi.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80052c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052c6:	d012      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80052c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052cc:	d81a      	bhi.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d022      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80052d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052d6:	d115      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052dc:	3308      	adds	r3, #8
 80052de:	2100      	movs	r1, #0
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 febd 	bl	8006060 <RCCEx_PLL2_Config>
 80052e6:	4603      	mov	r3, r0
 80052e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80052ec:	e015      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052f2:	3328      	adds	r3, #40	; 0x28
 80052f4:	2102      	movs	r1, #2
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 ff64 	bl	80061c4 <RCCEx_PLL3_Config>
 80052fc:	4603      	mov	r3, r0
 80052fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005302:	e00a      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800530a:	e006      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800530c:	bf00      	nop
 800530e:	e004      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005310:	bf00      	nop
 8005312:	e002      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005314:	bf00      	nop
 8005316:	e000      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800531a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10b      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005322:	4b39      	ldr	r3, [pc, #228]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005326:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800532a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800532e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005332:	4a35      	ldr	r2, [pc, #212]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005334:	430b      	orrs	r3, r1
 8005336:	6553      	str	r3, [r2, #84]	; 0x54
 8005338:	e003      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800533e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800534e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005352:	2300      	movs	r3, #0
 8005354:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005358:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800535c:	460b      	mov	r3, r1
 800535e:	4313      	orrs	r3, r2
 8005360:	d058      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005366:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800536a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800536e:	d033      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005370:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005374:	d82c      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537a:	d02f      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800537c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005380:	d826      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005382:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005386:	d02b      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005388:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800538c:	d820      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800538e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005392:	d012      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005398:	d81a      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800539a:	2b00      	cmp	r3, #0
 800539c:	d022      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800539e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a2:	d115      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053a8:	3308      	adds	r3, #8
 80053aa:	2100      	movs	r1, #0
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fe57 	bl	8006060 <RCCEx_PLL2_Config>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80053b8:	e015      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053be:	3328      	adds	r3, #40	; 0x28
 80053c0:	2102      	movs	r1, #2
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fefe 	bl	80061c4 <RCCEx_PLL3_Config>
 80053c8:	4603      	mov	r3, r0
 80053ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80053ce:	e00a      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053d6:	e006      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80053d8:	bf00      	nop
 80053da:	e004      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80053dc:	bf00      	nop
 80053de:	e002      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80053e0:	bf00      	nop
 80053e2:	e000      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80053e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10e      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053ee:	4b06      	ldr	r3, [pc, #24]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80053f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053fe:	4a02      	ldr	r2, [pc, #8]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005400:	430b      	orrs	r3, r1
 8005402:	6593      	str	r3, [r2, #88]	; 0x58
 8005404:	e006      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005406:	bf00      	nop
 8005408:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800540c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005410:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005424:	2300      	movs	r3, #0
 8005426:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800542a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800542e:	460b      	mov	r3, r1
 8005430:	4313      	orrs	r3, r2
 8005432:	d055      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005438:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800543c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005440:	d033      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005442:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005446:	d82c      	bhi.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800544c:	d02f      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800544e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005452:	d826      	bhi.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005454:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005458:	d02b      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800545a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800545e:	d820      	bhi.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005460:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005464:	d012      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005466:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800546a:	d81a      	bhi.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800546c:	2b00      	cmp	r3, #0
 800546e:	d022      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005474:	d115      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547a:	3308      	adds	r3, #8
 800547c:	2100      	movs	r1, #0
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fdee 	bl	8006060 <RCCEx_PLL2_Config>
 8005484:	4603      	mov	r3, r0
 8005486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800548a:	e015      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800548c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005490:	3328      	adds	r3, #40	; 0x28
 8005492:	2102      	movs	r1, #2
 8005494:	4618      	mov	r0, r3
 8005496:	f000 fe95 	bl	80061c4 <RCCEx_PLL3_Config>
 800549a:	4603      	mov	r3, r0
 800549c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80054a0:	e00a      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054a8:	e006      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80054aa:	bf00      	nop
 80054ac:	e004      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80054ae:	bf00      	nop
 80054b0:	e002      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80054b2:	bf00      	nop
 80054b4:	e000      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80054b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10b      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80054c0:	4ba1      	ldr	r3, [pc, #644]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80054c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80054d0:	4a9d      	ldr	r2, [pc, #628]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054d2:	430b      	orrs	r3, r1
 80054d4:	6593      	str	r3, [r2, #88]	; 0x58
 80054d6:	e003      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80054e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	f002 0308 	and.w	r3, r2, #8
 80054ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054f0:	2300      	movs	r3, #0
 80054f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80054fa:	460b      	mov	r3, r1
 80054fc:	4313      	orrs	r3, r2
 80054fe:	d01e      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800550c:	d10c      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800550e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005512:	3328      	adds	r3, #40	; 0x28
 8005514:	2102      	movs	r1, #2
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fe54 	bl	80061c4 <RCCEx_PLL3_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005528:	4b87      	ldr	r3, [pc, #540]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800552a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005538:	4a83      	ldr	r2, [pc, #524]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800553a:	430b      	orrs	r3, r1
 800553c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800553e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005546:	f002 0310 	and.w	r3, r2, #16
 800554a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800554e:	2300      	movs	r3, #0
 8005550:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005554:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005558:	460b      	mov	r3, r1
 800555a:	4313      	orrs	r3, r2
 800555c:	d01e      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800555e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005562:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800556a:	d10c      	bne.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800556c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005570:	3328      	adds	r3, #40	; 0x28
 8005572:	2102      	movs	r1, #2
 8005574:	4618      	mov	r0, r3
 8005576:	f000 fe25 	bl	80061c4 <RCCEx_PLL3_Config>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005586:	4b70      	ldr	r3, [pc, #448]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800558a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800558e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005592:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005596:	4a6c      	ldr	r2, [pc, #432]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005598:	430b      	orrs	r3, r1
 800559a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800559c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80055a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055ac:	2300      	movs	r3, #0
 80055ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80055b6:	460b      	mov	r3, r1
 80055b8:	4313      	orrs	r3, r2
 80055ba:	d03e      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80055bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80055c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055c8:	d022      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80055ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055ce:	d81b      	bhi.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80055d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d8:	d00b      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80055da:	e015      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055e0:	3308      	adds	r3, #8
 80055e2:	2100      	movs	r1, #0
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fd3b 	bl	8006060 <RCCEx_PLL2_Config>
 80055ea:	4603      	mov	r3, r0
 80055ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80055f0:	e00f      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f6:	3328      	adds	r3, #40	; 0x28
 80055f8:	2102      	movs	r1, #2
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fde2 	bl	80061c4 <RCCEx_PLL3_Config>
 8005600:	4603      	mov	r3, r0
 8005602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005606:	e004      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800560e:	e000      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10b      	bne.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800561a:	4b4b      	ldr	r3, [pc, #300]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800561c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005626:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800562a:	4a47      	ldr	r2, [pc, #284]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800562c:	430b      	orrs	r3, r1
 800562e:	6593      	str	r3, [r2, #88]	; 0x58
 8005630:	e003      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005632:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005636:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800563a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005646:	67bb      	str	r3, [r7, #120]	; 0x78
 8005648:	2300      	movs	r3, #0
 800564a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800564c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005650:	460b      	mov	r3, r1
 8005652:	4313      	orrs	r3, r2
 8005654:	d03b      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005662:	d01f      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005664:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005668:	d818      	bhi.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800566a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800566e:	d003      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005670:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005674:	d007      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005676:	e011      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005678:	4b33      	ldr	r3, [pc, #204]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800567a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567c:	4a32      	ldr	r2, [pc, #200]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800567e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005682:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005684:	e00f      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800568a:	3328      	adds	r3, #40	; 0x28
 800568c:	2101      	movs	r1, #1
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fd98 	bl	80061c4 <RCCEx_PLL3_Config>
 8005694:	4603      	mov	r3, r0
 8005696:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800569a:	e004      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056a2:	e000      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80056a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10b      	bne.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056ae:	4b26      	ldr	r3, [pc, #152]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80056b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056be:	4a22      	ldr	r2, [pc, #136]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056c0:	430b      	orrs	r3, r1
 80056c2:	6553      	str	r3, [r2, #84]	; 0x54
 80056c4:	e003      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80056ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80056da:	673b      	str	r3, [r7, #112]	; 0x70
 80056dc:	2300      	movs	r3, #0
 80056de:	677b      	str	r3, [r7, #116]	; 0x74
 80056e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80056e4:	460b      	mov	r3, r1
 80056e6:	4313      	orrs	r3, r2
 80056e8:	d034      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80056ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d003      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80056f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f8:	d007      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80056fa:	e011      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056fc:	4b12      	ldr	r3, [pc, #72]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005700:	4a11      	ldr	r2, [pc, #68]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005706:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005708:	e00e      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800570a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800570e:	3308      	adds	r3, #8
 8005710:	2102      	movs	r1, #2
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fca4 	bl	8006060 <RCCEx_PLL2_Config>
 8005718:	4603      	mov	r3, r0
 800571a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800571e:	e003      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005728:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10d      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005730:	4b05      	ldr	r3, [pc, #20]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005734:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800573c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800573e:	4a02      	ldr	r2, [pc, #8]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005740:	430b      	orrs	r3, r1
 8005742:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005744:	e006      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005746:	bf00      	nop
 8005748:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800574c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005750:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005760:	66bb      	str	r3, [r7, #104]	; 0x68
 8005762:	2300      	movs	r3, #0
 8005764:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005766:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800576a:	460b      	mov	r3, r1
 800576c:	4313      	orrs	r3, r2
 800576e:	d00c      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005774:	3328      	adds	r3, #40	; 0x28
 8005776:	2102      	movs	r1, #2
 8005778:	4618      	mov	r0, r3
 800577a:	f000 fd23 	bl	80061c4 <RCCEx_PLL3_Config>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800578a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005796:	663b      	str	r3, [r7, #96]	; 0x60
 8005798:	2300      	movs	r3, #0
 800579a:	667b      	str	r3, [r7, #100]	; 0x64
 800579c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80057a0:	460b      	mov	r3, r1
 80057a2:	4313      	orrs	r3, r2
 80057a4:	d038      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80057a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057b2:	d018      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80057b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057b8:	d811      	bhi.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80057ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057be:	d014      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80057c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057c4:	d80b      	bhi.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d011      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80057ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ce:	d106      	bne.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057d0:	4bc3      	ldr	r3, [pc, #780]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	4ac2      	ldr	r2, [pc, #776]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80057dc:	e008      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057e4:	e004      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80057e6:	bf00      	nop
 80057e8:	e002      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80057ea:	bf00      	nop
 80057ec:	e000      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80057ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10b      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057f8:	4bb9      	ldr	r3, [pc, #740]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005808:	4ab5      	ldr	r2, [pc, #724]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800580a:	430b      	orrs	r3, r1
 800580c:	6553      	str	r3, [r2, #84]	; 0x54
 800580e:	e003      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005810:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005814:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005824:	65bb      	str	r3, [r7, #88]	; 0x58
 8005826:	2300      	movs	r3, #0
 8005828:	65fb      	str	r3, [r7, #92]	; 0x5c
 800582a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800582e:	460b      	mov	r3, r1
 8005830:	4313      	orrs	r3, r2
 8005832:	d009      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005834:	4baa      	ldr	r3, [pc, #680]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005838:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800583c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005842:	4aa7      	ldr	r2, [pc, #668]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005844:	430b      	orrs	r3, r1
 8005846:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005854:	653b      	str	r3, [r7, #80]	; 0x50
 8005856:	2300      	movs	r3, #0
 8005858:	657b      	str	r3, [r7, #84]	; 0x54
 800585a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800585e:	460b      	mov	r3, r1
 8005860:	4313      	orrs	r3, r2
 8005862:	d00a      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005864:	4b9e      	ldr	r3, [pc, #632]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800586c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005870:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005874:	4a9a      	ldr	r2, [pc, #616]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005876:	430b      	orrs	r3, r1
 8005878:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800587a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800587e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005882:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005886:	64bb      	str	r3, [r7, #72]	; 0x48
 8005888:	2300      	movs	r3, #0
 800588a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800588c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005890:	460b      	mov	r3, r1
 8005892:	4313      	orrs	r3, r2
 8005894:	d009      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005896:	4b92      	ldr	r3, [pc, #584]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800589e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058a4:	4a8e      	ldr	r2, [pc, #568]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058a6:	430b      	orrs	r3, r1
 80058a8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80058aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80058b6:	643b      	str	r3, [r7, #64]	; 0x40
 80058b8:	2300      	movs	r3, #0
 80058ba:	647b      	str	r3, [r7, #68]	; 0x44
 80058bc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80058c0:	460b      	mov	r3, r1
 80058c2:	4313      	orrs	r3, r2
 80058c4:	d00e      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058c6:	4b86      	ldr	r3, [pc, #536]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	4a85      	ldr	r2, [pc, #532]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058d0:	6113      	str	r3, [r2, #16]
 80058d2:	4b83      	ldr	r3, [pc, #524]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058d4:	6919      	ldr	r1, [r3, #16]
 80058d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80058de:	4a80      	ldr	r2, [pc, #512]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058e0:	430b      	orrs	r3, r1
 80058e2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80058e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ec:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80058f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80058f2:	2300      	movs	r3, #0
 80058f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80058fa:	460b      	mov	r3, r1
 80058fc:	4313      	orrs	r3, r2
 80058fe:	d009      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005900:	4b77      	ldr	r3, [pc, #476]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005904:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800590c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590e:	4a74      	ldr	r2, [pc, #464]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005910:	430b      	orrs	r3, r1
 8005912:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005920:	633b      	str	r3, [r7, #48]	; 0x30
 8005922:	2300      	movs	r3, #0
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
 8005926:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800592a:	460b      	mov	r3, r1
 800592c:	4313      	orrs	r3, r2
 800592e:	d00a      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005930:	4b6b      	ldr	r3, [pc, #428]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005934:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800593c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005940:	4a67      	ldr	r2, [pc, #412]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005942:	430b      	orrs	r3, r1
 8005944:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	2100      	movs	r1, #0
 8005950:	62b9      	str	r1, [r7, #40]	; 0x28
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005958:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800595c:	460b      	mov	r3, r1
 800595e:	4313      	orrs	r3, r2
 8005960:	d011      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005966:	3308      	adds	r3, #8
 8005968:	2100      	movs	r1, #0
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fb78 	bl	8006060 <RCCEx_PLL2_Config>
 8005970:	4603      	mov	r3, r0
 8005972:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005976:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800597e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005982:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800598a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598e:	2100      	movs	r1, #0
 8005990:	6239      	str	r1, [r7, #32]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
 8005998:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800599c:	460b      	mov	r3, r1
 800599e:	4313      	orrs	r3, r2
 80059a0:	d011      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a6:	3308      	adds	r3, #8
 80059a8:	2101      	movs	r1, #1
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 fb58 	bl	8006060 <RCCEx_PLL2_Config>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80059b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80059c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ce:	2100      	movs	r1, #0
 80059d0:	61b9      	str	r1, [r7, #24]
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	61fb      	str	r3, [r7, #28]
 80059d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80059dc:	460b      	mov	r3, r1
 80059de:	4313      	orrs	r3, r2
 80059e0:	d011      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059e6:	3308      	adds	r3, #8
 80059e8:	2102      	movs	r1, #2
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fb38 	bl	8006060 <RCCEx_PLL2_Config>
 80059f0:	4603      	mov	r3, r0
 80059f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80059f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	2100      	movs	r1, #0
 8005a10:	6139      	str	r1, [r7, #16]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	d011      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a26:	3328      	adds	r3, #40	; 0x28
 8005a28:	2100      	movs	r1, #0
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fbca 	bl	80061c4 <RCCEx_PLL3_Config>
 8005a30:	4603      	mov	r3, r0
 8005a32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005a36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4e:	2100      	movs	r1, #0
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	f003 0310 	and.w	r3, r3, #16
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	d011      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a66:	3328      	adds	r3, #40	; 0x28
 8005a68:	2101      	movs	r1, #1
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 fbaa 	bl	80061c4 <RCCEx_PLL3_Config>
 8005a70:	4603      	mov	r3, r0
 8005a72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005a76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8e:	2100      	movs	r1, #0
 8005a90:	6039      	str	r1, [r7, #0]
 8005a92:	f003 0320 	and.w	r3, r3, #32
 8005a96:	607b      	str	r3, [r7, #4]
 8005a98:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	d011      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa6:	3328      	adds	r3, #40	; 0x28
 8005aa8:	2102      	movs	r1, #2
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fb8a 	bl	80061c4 <RCCEx_PLL3_Config>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ac2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005ac6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e000      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005ada:	46bd      	mov	sp, r7
 8005adc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ae0:	58024400 	.word	0x58024400

08005ae4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005ae8:	f7fe fd96 	bl	8004618 <HAL_RCC_GetHCLKFreq>
 8005aec:	4602      	mov	r2, r0
 8005aee:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	091b      	lsrs	r3, r3, #4
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	4904      	ldr	r1, [pc, #16]	; (8005b0c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005afa:	5ccb      	ldrb	r3, [r1, r3]
 8005afc:	f003 031f 	and.w	r3, r3, #31
 8005b00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	58024400 	.word	0x58024400
 8005b0c:	08009038 	.word	0x08009038

08005b10 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b089      	sub	sp, #36	; 0x24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b18:	4ba1      	ldr	r3, [pc, #644]	; (8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1c:	f003 0303 	and.w	r3, r3, #3
 8005b20:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005b22:	4b9f      	ldr	r3, [pc, #636]	; (8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b26:	0b1b      	lsrs	r3, r3, #12
 8005b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b2c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005b2e:	4b9c      	ldr	r3, [pc, #624]	; (8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	091b      	lsrs	r3, r3, #4
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005b3a:	4b99      	ldr	r3, [pc, #612]	; (8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3e:	08db      	lsrs	r3, r3, #3
 8005b40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	fb02 f303 	mul.w	r3, r2, r3
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 8111 	beq.w	8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	f000 8083 	beq.w	8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	f200 80a1 	bhi.w	8005cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d056      	beq.n	8005c28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005b7a:	e099      	b.n	8005cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b7c:	4b88      	ldr	r3, [pc, #544]	; (8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0320 	and.w	r3, r3, #32
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d02d      	beq.n	8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b88:	4b85      	ldr	r3, [pc, #532]	; (8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	08db      	lsrs	r3, r3, #3
 8005b8e:	f003 0303 	and.w	r3, r3, #3
 8005b92:	4a84      	ldr	r2, [pc, #528]	; (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005b94:	fa22 f303 	lsr.w	r3, r2, r3
 8005b98:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	ee07 3a90 	vmov	s15, r3
 8005ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	ee07 3a90 	vmov	s15, r3
 8005baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bb2:	4b7b      	ldr	r3, [pc, #492]	; (8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bc6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005da8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bde:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005be2:	e087      	b.n	8005cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	ee07 3a90 	vmov	s15, r3
 8005bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005dac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bf6:	4b6a      	ldr	r3, [pc, #424]	; (8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bfe:	ee07 3a90 	vmov	s15, r3
 8005c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005da8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c26:	e065      	b.n	8005cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	ee07 3a90 	vmov	s15, r3
 8005c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c3a:	4b59      	ldr	r3, [pc, #356]	; (8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c42:	ee07 3a90 	vmov	s15, r3
 8005c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005da8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c6a:	e043      	b.n	8005cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	ee07 3a90 	vmov	s15, r3
 8005c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005db4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c7e:	4b48      	ldr	r3, [pc, #288]	; (8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c86:	ee07 3a90 	vmov	s15, r3
 8005c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c92:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005da8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005caa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cae:	e021      	b.n	8005cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc2:	4b37      	ldr	r3, [pc, #220]	; (8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cca:	ee07 3a90 	vmov	s15, r3
 8005cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cd6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005da8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cf2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005cf4:	4b2a      	ldr	r3, [pc, #168]	; (8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf8:	0a5b      	lsrs	r3, r3, #9
 8005cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d1a:	ee17 2a90 	vmov	r2, s15
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005d22:	4b1f      	ldr	r3, [pc, #124]	; (8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d26:	0c1b      	lsrs	r3, r3, #16
 8005d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d2c:	ee07 3a90 	vmov	s15, r3
 8005d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d48:	ee17 2a90 	vmov	r2, s15
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005d50:	4b13      	ldr	r3, [pc, #76]	; (8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d54:	0e1b      	lsrs	r3, r3, #24
 8005d56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d5a:	ee07 3a90 	vmov	s15, r3
 8005d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d76:	ee17 2a90 	vmov	r2, s15
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d7e:	e008      	b.n	8005d92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	609a      	str	r2, [r3, #8]
}
 8005d92:	bf00      	nop
 8005d94:	3724      	adds	r7, #36	; 0x24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	58024400 	.word	0x58024400
 8005da4:	03d09000 	.word	0x03d09000
 8005da8:	46000000 	.word	0x46000000
 8005dac:	4c742400 	.word	0x4c742400
 8005db0:	4a742400 	.word	0x4a742400
 8005db4:	4af42400 	.word	0x4af42400

08005db8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b089      	sub	sp, #36	; 0x24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005dc0:	4ba1      	ldr	r3, [pc, #644]	; (8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc4:	f003 0303 	and.w	r3, r3, #3
 8005dc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005dca:	4b9f      	ldr	r3, [pc, #636]	; (8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dce:	0d1b      	lsrs	r3, r3, #20
 8005dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dd4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005dd6:	4b9c      	ldr	r3, [pc, #624]	; (8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dda:	0a1b      	lsrs	r3, r3, #8
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005de2:	4b99      	ldr	r3, [pc, #612]	; (8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de6:	08db      	lsrs	r3, r3, #3
 8005de8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	fb02 f303 	mul.w	r3, r2, r3
 8005df2:	ee07 3a90 	vmov	s15, r3
 8005df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 8111 	beq.w	8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	f000 8083 	beq.w	8005f14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	f200 80a1 	bhi.w	8005f58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d056      	beq.n	8005ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005e22:	e099      	b.n	8005f58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e24:	4b88      	ldr	r3, [pc, #544]	; (8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0320 	and.w	r3, r3, #32
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d02d      	beq.n	8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e30:	4b85      	ldr	r3, [pc, #532]	; (8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	08db      	lsrs	r3, r3, #3
 8005e36:	f003 0303 	and.w	r3, r3, #3
 8005e3a:	4a84      	ldr	r2, [pc, #528]	; (800604c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e40:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	ee07 3a90 	vmov	s15, r3
 8005e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e5a:	4b7b      	ldr	r3, [pc, #492]	; (8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e62:	ee07 3a90 	vmov	s15, r3
 8005e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e8a:	e087      	b.n	8005f9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	ee07 3a90 	vmov	s15, r3
 8005e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e9e:	4b6a      	ldr	r3, [pc, #424]	; (8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea6:	ee07 3a90 	vmov	s15, r3
 8005eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ece:	e065      	b.n	8005f9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006058 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee2:	4b59      	ldr	r3, [pc, #356]	; (8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ef6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f12:	e043      	b.n	8005f9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800605c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f26:	4b48      	ldr	r3, [pc, #288]	; (8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2e:	ee07 3a90 	vmov	s15, r3
 8005f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f56:	e021      	b.n	8005f9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006058 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f6a:	4b37      	ldr	r3, [pc, #220]	; (8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005f9c:	4b2a      	ldr	r3, [pc, #168]	; (8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	0a5b      	lsrs	r3, r3, #9
 8005fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fa6:	ee07 3a90 	vmov	s15, r3
 8005faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fc2:	ee17 2a90 	vmov	r2, s15
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005fca:	4b1f      	ldr	r3, [pc, #124]	; (8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	0c1b      	lsrs	r3, r3, #16
 8005fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fd4:	ee07 3a90 	vmov	s15, r3
 8005fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ff0:	ee17 2a90 	vmov	r2, s15
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005ff8:	4b13      	ldr	r3, [pc, #76]	; (8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffc:	0e1b      	lsrs	r3, r3, #24
 8005ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006002:	ee07 3a90 	vmov	s15, r3
 8006006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800600e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006012:	edd7 6a07 	vldr	s13, [r7, #28]
 8006016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800601a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800601e:	ee17 2a90 	vmov	r2, s15
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006026:	e008      	b.n	800603a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	609a      	str	r2, [r3, #8]
}
 800603a:	bf00      	nop
 800603c:	3724      	adds	r7, #36	; 0x24
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	58024400 	.word	0x58024400
 800604c:	03d09000 	.word	0x03d09000
 8006050:	46000000 	.word	0x46000000
 8006054:	4c742400 	.word	0x4c742400
 8006058:	4a742400 	.word	0x4a742400
 800605c:	4af42400 	.word	0x4af42400

08006060 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800606e:	4b53      	ldr	r3, [pc, #332]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 8006070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	2b03      	cmp	r3, #3
 8006078:	d101      	bne.n	800607e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e099      	b.n	80061b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800607e:	4b4f      	ldr	r3, [pc, #316]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a4e      	ldr	r2, [pc, #312]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 8006084:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800608a:	f7fb f99b 	bl	80013c4 <HAL_GetTick>
 800608e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006090:	e008      	b.n	80060a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006092:	f7fb f997 	bl	80013c4 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d901      	bls.n	80060a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e086      	b.n	80061b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80060a4:	4b45      	ldr	r3, [pc, #276]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1f0      	bne.n	8006092 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80060b0:	4b42      	ldr	r3, [pc, #264]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 80060b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	031b      	lsls	r3, r3, #12
 80060be:	493f      	ldr	r1, [pc, #252]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	628b      	str	r3, [r1, #40]	; 0x28
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	3b01      	subs	r3, #1
 80060ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	025b      	lsls	r3, r3, #9
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	431a      	orrs	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	3b01      	subs	r3, #1
 80060e0:	041b      	lsls	r3, r3, #16
 80060e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80060e6:	431a      	orrs	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	3b01      	subs	r3, #1
 80060ee:	061b      	lsls	r3, r3, #24
 80060f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80060f4:	4931      	ldr	r1, [pc, #196]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80060fa:	4b30      	ldr	r3, [pc, #192]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 80060fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	492d      	ldr	r1, [pc, #180]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 8006108:	4313      	orrs	r3, r2
 800610a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800610c:	4b2b      	ldr	r3, [pc, #172]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	f023 0220 	bic.w	r2, r3, #32
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	4928      	ldr	r1, [pc, #160]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 800611a:	4313      	orrs	r3, r2
 800611c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800611e:	4b27      	ldr	r3, [pc, #156]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 8006120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006122:	4a26      	ldr	r2, [pc, #152]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 8006124:	f023 0310 	bic.w	r3, r3, #16
 8006128:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800612a:	4b24      	ldr	r3, [pc, #144]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 800612c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800612e:	4b24      	ldr	r3, [pc, #144]	; (80061c0 <RCCEx_PLL2_Config+0x160>)
 8006130:	4013      	ands	r3, r2
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	69d2      	ldr	r2, [r2, #28]
 8006136:	00d2      	lsls	r2, r2, #3
 8006138:	4920      	ldr	r1, [pc, #128]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 800613a:	4313      	orrs	r3, r2
 800613c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800613e:	4b1f      	ldr	r3, [pc, #124]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 8006140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006142:	4a1e      	ldr	r2, [pc, #120]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 8006144:	f043 0310 	orr.w	r3, r3, #16
 8006148:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d106      	bne.n	800615e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006150:	4b1a      	ldr	r3, [pc, #104]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 8006152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006154:	4a19      	ldr	r2, [pc, #100]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 8006156:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800615a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800615c:	e00f      	b.n	800617e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d106      	bne.n	8006172 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006164:	4b15      	ldr	r3, [pc, #84]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	4a14      	ldr	r2, [pc, #80]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 800616a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800616e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006170:	e005      	b.n	800617e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006172:	4b12      	ldr	r3, [pc, #72]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 8006174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006176:	4a11      	ldr	r2, [pc, #68]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 8006178:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800617c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800617e:	4b0f      	ldr	r3, [pc, #60]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a0e      	ldr	r2, [pc, #56]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 8006184:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800618a:	f7fb f91b 	bl	80013c4 <HAL_GetTick>
 800618e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006190:	e008      	b.n	80061a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006192:	f7fb f917 	bl	80013c4 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d901      	bls.n	80061a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e006      	b.n	80061b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80061a4:	4b05      	ldr	r3, [pc, #20]	; (80061bc <RCCEx_PLL2_Config+0x15c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0f0      	beq.n	8006192 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	58024400 	.word	0x58024400
 80061c0:	ffff0007 	.word	0xffff0007

080061c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061d2:	4b53      	ldr	r3, [pc, #332]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 80061d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d101      	bne.n	80061e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e099      	b.n	8006316 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80061e2:	4b4f      	ldr	r3, [pc, #316]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a4e      	ldr	r2, [pc, #312]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 80061e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ee:	f7fb f8e9 	bl	80013c4 <HAL_GetTick>
 80061f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061f4:	e008      	b.n	8006208 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80061f6:	f7fb f8e5 	bl	80013c4 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	2b02      	cmp	r3, #2
 8006202:	d901      	bls.n	8006208 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e086      	b.n	8006316 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006208:	4b45      	ldr	r3, [pc, #276]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1f0      	bne.n	80061f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006214:	4b42      	ldr	r3, [pc, #264]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 8006216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006218:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	051b      	lsls	r3, r3, #20
 8006222:	493f      	ldr	r1, [pc, #252]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 8006224:	4313      	orrs	r3, r2
 8006226:	628b      	str	r3, [r1, #40]	; 0x28
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	3b01      	subs	r3, #1
 800622e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	3b01      	subs	r3, #1
 8006238:	025b      	lsls	r3, r3, #9
 800623a:	b29b      	uxth	r3, r3
 800623c:	431a      	orrs	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	3b01      	subs	r3, #1
 8006244:	041b      	lsls	r3, r3, #16
 8006246:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	3b01      	subs	r3, #1
 8006252:	061b      	lsls	r3, r3, #24
 8006254:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006258:	4931      	ldr	r1, [pc, #196]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 800625a:	4313      	orrs	r3, r2
 800625c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800625e:	4b30      	ldr	r3, [pc, #192]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 8006260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006262:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	492d      	ldr	r1, [pc, #180]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 800626c:	4313      	orrs	r3, r2
 800626e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006270:	4b2b      	ldr	r3, [pc, #172]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 8006272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006274:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	4928      	ldr	r1, [pc, #160]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 800627e:	4313      	orrs	r3, r2
 8006280:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006282:	4b27      	ldr	r3, [pc, #156]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 8006284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006286:	4a26      	ldr	r2, [pc, #152]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 8006288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800628c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800628e:	4b24      	ldr	r3, [pc, #144]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 8006290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006292:	4b24      	ldr	r3, [pc, #144]	; (8006324 <RCCEx_PLL3_Config+0x160>)
 8006294:	4013      	ands	r3, r2
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	69d2      	ldr	r2, [r2, #28]
 800629a:	00d2      	lsls	r2, r2, #3
 800629c:	4920      	ldr	r1, [pc, #128]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80062a2:	4b1f      	ldr	r3, [pc, #124]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 80062a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a6:	4a1e      	ldr	r2, [pc, #120]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 80062a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d106      	bne.n	80062c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80062b4:	4b1a      	ldr	r3, [pc, #104]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 80062b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b8:	4a19      	ldr	r2, [pc, #100]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 80062ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80062be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062c0:	e00f      	b.n	80062e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d106      	bne.n	80062d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80062c8:	4b15      	ldr	r3, [pc, #84]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 80062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062cc:	4a14      	ldr	r2, [pc, #80]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 80062ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80062d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062d4:	e005      	b.n	80062e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80062d6:	4b12      	ldr	r3, [pc, #72]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 80062d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062da:	4a11      	ldr	r2, [pc, #68]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 80062dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80062e2:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a0e      	ldr	r2, [pc, #56]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 80062e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ee:	f7fb f869 	bl	80013c4 <HAL_GetTick>
 80062f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80062f4:	e008      	b.n	8006308 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062f6:	f7fb f865 	bl	80013c4 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e006      	b.n	8006316 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006308:	4b05      	ldr	r3, [pc, #20]	; (8006320 <RCCEx_PLL3_Config+0x15c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0f0      	beq.n	80062f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006314:	7bfb      	ldrb	r3, [r7, #15]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	58024400 	.word	0x58024400
 8006324:	ffff0007 	.word	0xffff0007

08006328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e049      	b.n	80063ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d106      	bne.n	8006354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7fa fde2 	bl	8000f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3304      	adds	r3, #4
 8006364:	4619      	mov	r1, r3
 8006366:	4610      	mov	r0, r2
 8006368:	f000 fd5e 	bl	8006e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
	...

080063d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d001      	beq.n	80063f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e04c      	b.n	800648a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a26      	ldr	r2, [pc, #152]	; (8006498 <HAL_TIM_Base_Start+0xc0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d022      	beq.n	8006448 <HAL_TIM_Base_Start+0x70>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640a:	d01d      	beq.n	8006448 <HAL_TIM_Base_Start+0x70>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a22      	ldr	r2, [pc, #136]	; (800649c <HAL_TIM_Base_Start+0xc4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d018      	beq.n	8006448 <HAL_TIM_Base_Start+0x70>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a21      	ldr	r2, [pc, #132]	; (80064a0 <HAL_TIM_Base_Start+0xc8>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d013      	beq.n	8006448 <HAL_TIM_Base_Start+0x70>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a1f      	ldr	r2, [pc, #124]	; (80064a4 <HAL_TIM_Base_Start+0xcc>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d00e      	beq.n	8006448 <HAL_TIM_Base_Start+0x70>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a1e      	ldr	r2, [pc, #120]	; (80064a8 <HAL_TIM_Base_Start+0xd0>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d009      	beq.n	8006448 <HAL_TIM_Base_Start+0x70>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1c      	ldr	r2, [pc, #112]	; (80064ac <HAL_TIM_Base_Start+0xd4>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d004      	beq.n	8006448 <HAL_TIM_Base_Start+0x70>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1b      	ldr	r2, [pc, #108]	; (80064b0 <HAL_TIM_Base_Start+0xd8>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d115      	bne.n	8006474 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	4b19      	ldr	r3, [pc, #100]	; (80064b4 <HAL_TIM_Base_Start+0xdc>)
 8006450:	4013      	ands	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2b06      	cmp	r3, #6
 8006458:	d015      	beq.n	8006486 <HAL_TIM_Base_Start+0xae>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006460:	d011      	beq.n	8006486 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0201 	orr.w	r2, r2, #1
 8006470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006472:	e008      	b.n	8006486 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0201 	orr.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	e000      	b.n	8006488 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006486:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	40010000 	.word	0x40010000
 800649c:	40000400 	.word	0x40000400
 80064a0:	40000800 	.word	0x40000800
 80064a4:	40000c00 	.word	0x40000c00
 80064a8:	40010400 	.word	0x40010400
 80064ac:	40001800 	.word	0x40001800
 80064b0:	40014000 	.word	0x40014000
 80064b4:	00010007 	.word	0x00010007

080064b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d001      	beq.n	80064d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e054      	b.n	800657a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0201 	orr.w	r2, r2, #1
 80064e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a26      	ldr	r2, [pc, #152]	; (8006588 <HAL_TIM_Base_Start_IT+0xd0>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d022      	beq.n	8006538 <HAL_TIM_Base_Start_IT+0x80>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fa:	d01d      	beq.n	8006538 <HAL_TIM_Base_Start_IT+0x80>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a22      	ldr	r2, [pc, #136]	; (800658c <HAL_TIM_Base_Start_IT+0xd4>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d018      	beq.n	8006538 <HAL_TIM_Base_Start_IT+0x80>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a21      	ldr	r2, [pc, #132]	; (8006590 <HAL_TIM_Base_Start_IT+0xd8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d013      	beq.n	8006538 <HAL_TIM_Base_Start_IT+0x80>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a1f      	ldr	r2, [pc, #124]	; (8006594 <HAL_TIM_Base_Start_IT+0xdc>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00e      	beq.n	8006538 <HAL_TIM_Base_Start_IT+0x80>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a1e      	ldr	r2, [pc, #120]	; (8006598 <HAL_TIM_Base_Start_IT+0xe0>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d009      	beq.n	8006538 <HAL_TIM_Base_Start_IT+0x80>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a1c      	ldr	r2, [pc, #112]	; (800659c <HAL_TIM_Base_Start_IT+0xe4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d004      	beq.n	8006538 <HAL_TIM_Base_Start_IT+0x80>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a1b      	ldr	r2, [pc, #108]	; (80065a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d115      	bne.n	8006564 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689a      	ldr	r2, [r3, #8]
 800653e:	4b19      	ldr	r3, [pc, #100]	; (80065a4 <HAL_TIM_Base_Start_IT+0xec>)
 8006540:	4013      	ands	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b06      	cmp	r3, #6
 8006548:	d015      	beq.n	8006576 <HAL_TIM_Base_Start_IT+0xbe>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006550:	d011      	beq.n	8006576 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f042 0201 	orr.w	r2, r2, #1
 8006560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006562:	e008      	b.n	8006576 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0201 	orr.w	r2, r2, #1
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	e000      	b.n	8006578 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006576:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40010000 	.word	0x40010000
 800658c:	40000400 	.word	0x40000400
 8006590:	40000800 	.word	0x40000800
 8006594:	40000c00 	.word	0x40000c00
 8006598:	40010400 	.word	0x40010400
 800659c:	40001800 	.word	0x40001800
 80065a0:	40014000 	.word	0x40014000
 80065a4:	00010007 	.word	0x00010007

080065a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0201 	bic.w	r2, r2, #1
 80065be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6a1a      	ldr	r2, [r3, #32]
 80065c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80065ca:	4013      	ands	r3, r2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10f      	bne.n	80065f0 <HAL_TIM_Base_Stop_IT+0x48>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6a1a      	ldr	r2, [r3, #32]
 80065d6:	f240 4344 	movw	r3, #1092	; 0x444
 80065da:	4013      	ands	r3, r2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d107      	bne.n	80065f0 <HAL_TIM_Base_Stop_IT+0x48>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0201 	bic.w	r2, r2, #1
 80065ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b082      	sub	sp, #8
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e049      	b.n	80066ac <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b00      	cmp	r3, #0
 8006622:	d106      	bne.n	8006632 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f841 	bl	80066b4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2202      	movs	r2, #2
 8006636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3304      	adds	r3, #4
 8006642:	4619      	mov	r1, r3
 8006644:	4610      	mov	r0, r2
 8006646:	f000 fbef 	bl	8006e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d109      	bne.n	80066ec <HAL_TIM_OC_Start+0x24>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	bf14      	ite	ne
 80066e4:	2301      	movne	r3, #1
 80066e6:	2300      	moveq	r3, #0
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	e03c      	b.n	8006766 <HAL_TIM_OC_Start+0x9e>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d109      	bne.n	8006706 <HAL_TIM_OC_Start+0x3e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	bf14      	ite	ne
 80066fe:	2301      	movne	r3, #1
 8006700:	2300      	moveq	r3, #0
 8006702:	b2db      	uxtb	r3, r3
 8006704:	e02f      	b.n	8006766 <HAL_TIM_OC_Start+0x9e>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b08      	cmp	r3, #8
 800670a:	d109      	bne.n	8006720 <HAL_TIM_OC_Start+0x58>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b01      	cmp	r3, #1
 8006716:	bf14      	ite	ne
 8006718:	2301      	movne	r3, #1
 800671a:	2300      	moveq	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	e022      	b.n	8006766 <HAL_TIM_OC_Start+0x9e>
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	2b0c      	cmp	r3, #12
 8006724:	d109      	bne.n	800673a <HAL_TIM_OC_Start+0x72>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b01      	cmp	r3, #1
 8006730:	bf14      	ite	ne
 8006732:	2301      	movne	r3, #1
 8006734:	2300      	moveq	r3, #0
 8006736:	b2db      	uxtb	r3, r3
 8006738:	e015      	b.n	8006766 <HAL_TIM_OC_Start+0x9e>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b10      	cmp	r3, #16
 800673e:	d109      	bne.n	8006754 <HAL_TIM_OC_Start+0x8c>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b01      	cmp	r3, #1
 800674a:	bf14      	ite	ne
 800674c:	2301      	movne	r3, #1
 800674e:	2300      	moveq	r3, #0
 8006750:	b2db      	uxtb	r3, r3
 8006752:	e008      	b.n	8006766 <HAL_TIM_OC_Start+0x9e>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b01      	cmp	r3, #1
 800675e:	bf14      	ite	ne
 8006760:	2301      	movne	r3, #1
 8006762:	2300      	moveq	r3, #0
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e0a1      	b.n	80068b2 <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d104      	bne.n	800677e <HAL_TIM_OC_Start+0xb6>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800677c:	e023      	b.n	80067c6 <HAL_TIM_OC_Start+0xfe>
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b04      	cmp	r3, #4
 8006782:	d104      	bne.n	800678e <HAL_TIM_OC_Start+0xc6>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2202      	movs	r2, #2
 8006788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800678c:	e01b      	b.n	80067c6 <HAL_TIM_OC_Start+0xfe>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b08      	cmp	r3, #8
 8006792:	d104      	bne.n	800679e <HAL_TIM_OC_Start+0xd6>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800679c:	e013      	b.n	80067c6 <HAL_TIM_OC_Start+0xfe>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b0c      	cmp	r3, #12
 80067a2:	d104      	bne.n	80067ae <HAL_TIM_OC_Start+0xe6>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2202      	movs	r2, #2
 80067a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067ac:	e00b      	b.n	80067c6 <HAL_TIM_OC_Start+0xfe>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b10      	cmp	r3, #16
 80067b2:	d104      	bne.n	80067be <HAL_TIM_OC_Start+0xf6>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067bc:	e003      	b.n	80067c6 <HAL_TIM_OC_Start+0xfe>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2202      	movs	r2, #2
 80067c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2201      	movs	r2, #1
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 ff44 	bl	800765c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a38      	ldr	r2, [pc, #224]	; (80068bc <HAL_TIM_OC_Start+0x1f4>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d013      	beq.n	8006806 <HAL_TIM_OC_Start+0x13e>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a37      	ldr	r2, [pc, #220]	; (80068c0 <HAL_TIM_OC_Start+0x1f8>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00e      	beq.n	8006806 <HAL_TIM_OC_Start+0x13e>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a35      	ldr	r2, [pc, #212]	; (80068c4 <HAL_TIM_OC_Start+0x1fc>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d009      	beq.n	8006806 <HAL_TIM_OC_Start+0x13e>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a34      	ldr	r2, [pc, #208]	; (80068c8 <HAL_TIM_OC_Start+0x200>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d004      	beq.n	8006806 <HAL_TIM_OC_Start+0x13e>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a32      	ldr	r2, [pc, #200]	; (80068cc <HAL_TIM_OC_Start+0x204>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d101      	bne.n	800680a <HAL_TIM_OC_Start+0x142>
 8006806:	2301      	movs	r3, #1
 8006808:	e000      	b.n	800680c <HAL_TIM_OC_Start+0x144>
 800680a:	2300      	movs	r3, #0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d007      	beq.n	8006820 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800681e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a25      	ldr	r2, [pc, #148]	; (80068bc <HAL_TIM_OC_Start+0x1f4>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d022      	beq.n	8006870 <HAL_TIM_OC_Start+0x1a8>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006832:	d01d      	beq.n	8006870 <HAL_TIM_OC_Start+0x1a8>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a25      	ldr	r2, [pc, #148]	; (80068d0 <HAL_TIM_OC_Start+0x208>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d018      	beq.n	8006870 <HAL_TIM_OC_Start+0x1a8>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a24      	ldr	r2, [pc, #144]	; (80068d4 <HAL_TIM_OC_Start+0x20c>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d013      	beq.n	8006870 <HAL_TIM_OC_Start+0x1a8>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a22      	ldr	r2, [pc, #136]	; (80068d8 <HAL_TIM_OC_Start+0x210>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d00e      	beq.n	8006870 <HAL_TIM_OC_Start+0x1a8>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a1a      	ldr	r2, [pc, #104]	; (80068c0 <HAL_TIM_OC_Start+0x1f8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d009      	beq.n	8006870 <HAL_TIM_OC_Start+0x1a8>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a1e      	ldr	r2, [pc, #120]	; (80068dc <HAL_TIM_OC_Start+0x214>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d004      	beq.n	8006870 <HAL_TIM_OC_Start+0x1a8>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a16      	ldr	r2, [pc, #88]	; (80068c4 <HAL_TIM_OC_Start+0x1fc>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d115      	bne.n	800689c <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	4b1a      	ldr	r3, [pc, #104]	; (80068e0 <HAL_TIM_OC_Start+0x218>)
 8006878:	4013      	ands	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b06      	cmp	r3, #6
 8006880:	d015      	beq.n	80068ae <HAL_TIM_OC_Start+0x1e6>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006888:	d011      	beq.n	80068ae <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0201 	orr.w	r2, r2, #1
 8006898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800689a:	e008      	b.n	80068ae <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0201 	orr.w	r2, r2, #1
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	e000      	b.n	80068b0 <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	40010000 	.word	0x40010000
 80068c0:	40010400 	.word	0x40010400
 80068c4:	40014000 	.word	0x40014000
 80068c8:	40014400 	.word	0x40014400
 80068cc:	40014800 	.word	0x40014800
 80068d0:	40000400 	.word	0x40000400
 80068d4:	40000800 	.word	0x40000800
 80068d8:	40000c00 	.word	0x40000c00
 80068dc:	40001800 	.word	0x40001800
 80068e0:	00010007 	.word	0x00010007

080068e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d020      	beq.n	8006948 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01b      	beq.n	8006948 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f06f 0202 	mvn.w	r2, #2
 8006918:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	f003 0303 	and.w	r3, r3, #3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fa5c 	bl	8006dec <HAL_TIM_IC_CaptureCallback>
 8006934:	e005      	b.n	8006942 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fa4e 	bl	8006dd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fa5f 	bl	8006e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	f003 0304 	and.w	r3, r3, #4
 800694e:	2b00      	cmp	r3, #0
 8006950:	d020      	beq.n	8006994 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01b      	beq.n	8006994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f06f 0204 	mvn.w	r2, #4
 8006964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2202      	movs	r2, #2
 800696a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fa36 	bl	8006dec <HAL_TIM_IC_CaptureCallback>
 8006980:	e005      	b.n	800698e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fa28 	bl	8006dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fa39 	bl	8006e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f003 0308 	and.w	r3, r3, #8
 800699a:	2b00      	cmp	r3, #0
 800699c:	d020      	beq.n	80069e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f003 0308 	and.w	r3, r3, #8
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d01b      	beq.n	80069e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f06f 0208 	mvn.w	r2, #8
 80069b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2204      	movs	r2, #4
 80069b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fa10 	bl	8006dec <HAL_TIM_IC_CaptureCallback>
 80069cc:	e005      	b.n	80069da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fa02 	bl	8006dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fa13 	bl	8006e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f003 0310 	and.w	r3, r3, #16
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d020      	beq.n	8006a2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f003 0310 	and.w	r3, r3, #16
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d01b      	beq.n	8006a2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f06f 0210 	mvn.w	r2, #16
 80069fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2208      	movs	r2, #8
 8006a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f9ea 	bl	8006dec <HAL_TIM_IC_CaptureCallback>
 8006a18:	e005      	b.n	8006a26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f9dc 	bl	8006dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f9ed 	bl	8006e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00c      	beq.n	8006a50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d007      	beq.n	8006a50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f06f 0201 	mvn.w	r2, #1
 8006a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7fa f9fe 	bl	8000e4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d104      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00c      	beq.n	8006a7e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d007      	beq.n	8006a7e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fead 	bl	80077d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00c      	beq.n	8006aa2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d007      	beq.n	8006aa2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fea5 	bl	80077ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00c      	beq.n	8006ac6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d007      	beq.n	8006ac6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f9a7 	bl	8006e14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	f003 0320 	and.w	r3, r3, #32
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00c      	beq.n	8006aea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d007      	beq.n	8006aea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f06f 0220 	mvn.w	r2, #32
 8006ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fe6d 	bl	80077c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006aea:	bf00      	nop
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
	...

08006af4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e066      	b.n	8006be0 <HAL_TIM_OC_ConfigChannel+0xec>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b14      	cmp	r3, #20
 8006b1e:	d857      	bhi.n	8006bd0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006b20:	a201      	add	r2, pc, #4	; (adr r2, 8006b28 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b26:	bf00      	nop
 8006b28:	08006b7d 	.word	0x08006b7d
 8006b2c:	08006bd1 	.word	0x08006bd1
 8006b30:	08006bd1 	.word	0x08006bd1
 8006b34:	08006bd1 	.word	0x08006bd1
 8006b38:	08006b8b 	.word	0x08006b8b
 8006b3c:	08006bd1 	.word	0x08006bd1
 8006b40:	08006bd1 	.word	0x08006bd1
 8006b44:	08006bd1 	.word	0x08006bd1
 8006b48:	08006b99 	.word	0x08006b99
 8006b4c:	08006bd1 	.word	0x08006bd1
 8006b50:	08006bd1 	.word	0x08006bd1
 8006b54:	08006bd1 	.word	0x08006bd1
 8006b58:	08006ba7 	.word	0x08006ba7
 8006b5c:	08006bd1 	.word	0x08006bd1
 8006b60:	08006bd1 	.word	0x08006bd1
 8006b64:	08006bd1 	.word	0x08006bd1
 8006b68:	08006bb5 	.word	0x08006bb5
 8006b6c:	08006bd1 	.word	0x08006bd1
 8006b70:	08006bd1 	.word	0x08006bd1
 8006b74:	08006bd1 	.word	0x08006bd1
 8006b78:	08006bc3 	.word	0x08006bc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68b9      	ldr	r1, [r7, #8]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 f9f6 	bl	8006f74 <TIM_OC1_SetConfig>
      break;
 8006b88:	e025      	b.n	8006bd6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68b9      	ldr	r1, [r7, #8]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 fa7f 	bl	8007094 <TIM_OC2_SetConfig>
      break;
 8006b96:	e01e      	b.n	8006bd6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68b9      	ldr	r1, [r7, #8]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 fb02 	bl	80071a8 <TIM_OC3_SetConfig>
      break;
 8006ba4:	e017      	b.n	8006bd6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68b9      	ldr	r1, [r7, #8]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 fb83 	bl	80072b8 <TIM_OC4_SetConfig>
      break;
 8006bb2:	e010      	b.n	8006bd6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68b9      	ldr	r1, [r7, #8]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 fbe6 	bl	800738c <TIM_OC5_SetConfig>
      break;
 8006bc0:	e009      	b.n	8006bd6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 fc43 	bl	8007454 <TIM_OC6_SetConfig>
      break;
 8006bce:	e002      	b.n	8006bd6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8006bd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d101      	bne.n	8006c04 <HAL_TIM_ConfigClockSource+0x1c>
 8006c00:	2302      	movs	r3, #2
 8006c02:	e0dc      	b.n	8006dbe <HAL_TIM_ConfigClockSource+0x1d6>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	4b6a      	ldr	r3, [pc, #424]	; (8006dc8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006c20:	4013      	ands	r3, r2
 8006c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a64      	ldr	r2, [pc, #400]	; (8006dcc <HAL_TIM_ConfigClockSource+0x1e4>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	f000 80a9 	beq.w	8006d92 <HAL_TIM_ConfigClockSource+0x1aa>
 8006c40:	4a62      	ldr	r2, [pc, #392]	; (8006dcc <HAL_TIM_ConfigClockSource+0x1e4>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	f200 80ae 	bhi.w	8006da4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c48:	4a61      	ldr	r2, [pc, #388]	; (8006dd0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	f000 80a1 	beq.w	8006d92 <HAL_TIM_ConfigClockSource+0x1aa>
 8006c50:	4a5f      	ldr	r2, [pc, #380]	; (8006dd0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	f200 80a6 	bhi.w	8006da4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c58:	4a5e      	ldr	r2, [pc, #376]	; (8006dd4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	f000 8099 	beq.w	8006d92 <HAL_TIM_ConfigClockSource+0x1aa>
 8006c60:	4a5c      	ldr	r2, [pc, #368]	; (8006dd4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	f200 809e 	bhi.w	8006da4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006c6c:	f000 8091 	beq.w	8006d92 <HAL_TIM_ConfigClockSource+0x1aa>
 8006c70:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006c74:	f200 8096 	bhi.w	8006da4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c7c:	f000 8089 	beq.w	8006d92 <HAL_TIM_ConfigClockSource+0x1aa>
 8006c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c84:	f200 808e 	bhi.w	8006da4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c8c:	d03e      	beq.n	8006d0c <HAL_TIM_ConfigClockSource+0x124>
 8006c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c92:	f200 8087 	bhi.w	8006da4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c9a:	f000 8086 	beq.w	8006daa <HAL_TIM_ConfigClockSource+0x1c2>
 8006c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ca2:	d87f      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ca4:	2b70      	cmp	r3, #112	; 0x70
 8006ca6:	d01a      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0xf6>
 8006ca8:	2b70      	cmp	r3, #112	; 0x70
 8006caa:	d87b      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006cac:	2b60      	cmp	r3, #96	; 0x60
 8006cae:	d050      	beq.n	8006d52 <HAL_TIM_ConfigClockSource+0x16a>
 8006cb0:	2b60      	cmp	r3, #96	; 0x60
 8006cb2:	d877      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006cb4:	2b50      	cmp	r3, #80	; 0x50
 8006cb6:	d03c      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0x14a>
 8006cb8:	2b50      	cmp	r3, #80	; 0x50
 8006cba:	d873      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006cbc:	2b40      	cmp	r3, #64	; 0x40
 8006cbe:	d058      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x18a>
 8006cc0:	2b40      	cmp	r3, #64	; 0x40
 8006cc2:	d86f      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006cc4:	2b30      	cmp	r3, #48	; 0x30
 8006cc6:	d064      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0x1aa>
 8006cc8:	2b30      	cmp	r3, #48	; 0x30
 8006cca:	d86b      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ccc:	2b20      	cmp	r3, #32
 8006cce:	d060      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0x1aa>
 8006cd0:	2b20      	cmp	r3, #32
 8006cd2:	d867      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d05c      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0x1aa>
 8006cd8:	2b10      	cmp	r3, #16
 8006cda:	d05a      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0x1aa>
 8006cdc:	e062      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cee:	f000 fc95 	bl	800761c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	609a      	str	r2, [r3, #8]
      break;
 8006d0a:	e04f      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d1c:	f000 fc7e 	bl	800761c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689a      	ldr	r2, [r3, #8]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d2e:	609a      	str	r2, [r3, #8]
      break;
 8006d30:	e03c      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f000 fbee 	bl	8007520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2150      	movs	r1, #80	; 0x50
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 fc48 	bl	80075e0 <TIM_ITRx_SetConfig>
      break;
 8006d50:	e02c      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f000 fc0d 	bl	800757e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2160      	movs	r1, #96	; 0x60
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 fc38 	bl	80075e0 <TIM_ITRx_SetConfig>
      break;
 8006d70:	e01c      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d7e:	461a      	mov	r2, r3
 8006d80:	f000 fbce 	bl	8007520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2140      	movs	r1, #64	; 0x40
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 fc28 	bl	80075e0 <TIM_ITRx_SetConfig>
      break;
 8006d90:	e00c      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	f000 fc1f 	bl	80075e0 <TIM_ITRx_SetConfig>
      break;
 8006da2:	e003      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	73fb      	strb	r3, [r7, #15]
      break;
 8006da8:	e000      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006daa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	ffceff88 	.word	0xffceff88
 8006dcc:	00100040 	.word	0x00100040
 8006dd0:	00100030 	.word	0x00100030
 8006dd4:	00100020 	.word	0x00100020

08006dd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a46      	ldr	r2, [pc, #280]	; (8006f54 <TIM_Base_SetConfig+0x12c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d013      	beq.n	8006e68 <TIM_Base_SetConfig+0x40>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e46:	d00f      	beq.n	8006e68 <TIM_Base_SetConfig+0x40>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a43      	ldr	r2, [pc, #268]	; (8006f58 <TIM_Base_SetConfig+0x130>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d00b      	beq.n	8006e68 <TIM_Base_SetConfig+0x40>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a42      	ldr	r2, [pc, #264]	; (8006f5c <TIM_Base_SetConfig+0x134>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d007      	beq.n	8006e68 <TIM_Base_SetConfig+0x40>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a41      	ldr	r2, [pc, #260]	; (8006f60 <TIM_Base_SetConfig+0x138>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d003      	beq.n	8006e68 <TIM_Base_SetConfig+0x40>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a40      	ldr	r2, [pc, #256]	; (8006f64 <TIM_Base_SetConfig+0x13c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d108      	bne.n	8006e7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a35      	ldr	r2, [pc, #212]	; (8006f54 <TIM_Base_SetConfig+0x12c>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d01f      	beq.n	8006ec2 <TIM_Base_SetConfig+0x9a>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e88:	d01b      	beq.n	8006ec2 <TIM_Base_SetConfig+0x9a>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a32      	ldr	r2, [pc, #200]	; (8006f58 <TIM_Base_SetConfig+0x130>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d017      	beq.n	8006ec2 <TIM_Base_SetConfig+0x9a>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a31      	ldr	r2, [pc, #196]	; (8006f5c <TIM_Base_SetConfig+0x134>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d013      	beq.n	8006ec2 <TIM_Base_SetConfig+0x9a>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a30      	ldr	r2, [pc, #192]	; (8006f60 <TIM_Base_SetConfig+0x138>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00f      	beq.n	8006ec2 <TIM_Base_SetConfig+0x9a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a2f      	ldr	r2, [pc, #188]	; (8006f64 <TIM_Base_SetConfig+0x13c>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d00b      	beq.n	8006ec2 <TIM_Base_SetConfig+0x9a>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a2e      	ldr	r2, [pc, #184]	; (8006f68 <TIM_Base_SetConfig+0x140>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d007      	beq.n	8006ec2 <TIM_Base_SetConfig+0x9a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a2d      	ldr	r2, [pc, #180]	; (8006f6c <TIM_Base_SetConfig+0x144>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d003      	beq.n	8006ec2 <TIM_Base_SetConfig+0x9a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a2c      	ldr	r2, [pc, #176]	; (8006f70 <TIM_Base_SetConfig+0x148>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d108      	bne.n	8006ed4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a16      	ldr	r2, [pc, #88]	; (8006f54 <TIM_Base_SetConfig+0x12c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00f      	beq.n	8006f20 <TIM_Base_SetConfig+0xf8>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a18      	ldr	r2, [pc, #96]	; (8006f64 <TIM_Base_SetConfig+0x13c>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d00b      	beq.n	8006f20 <TIM_Base_SetConfig+0xf8>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a17      	ldr	r2, [pc, #92]	; (8006f68 <TIM_Base_SetConfig+0x140>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d007      	beq.n	8006f20 <TIM_Base_SetConfig+0xf8>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a16      	ldr	r2, [pc, #88]	; (8006f6c <TIM_Base_SetConfig+0x144>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d003      	beq.n	8006f20 <TIM_Base_SetConfig+0xf8>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a15      	ldr	r2, [pc, #84]	; (8006f70 <TIM_Base_SetConfig+0x148>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d103      	bne.n	8006f28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d105      	bne.n	8006f46 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	f023 0201 	bic.w	r2, r3, #1
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	611a      	str	r2, [r3, #16]
  }
}
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40010000 	.word	0x40010000
 8006f58:	40000400 	.word	0x40000400
 8006f5c:	40000800 	.word	0x40000800
 8006f60:	40000c00 	.word	0x40000c00
 8006f64:	40010400 	.word	0x40010400
 8006f68:	40014000 	.word	0x40014000
 8006f6c:	40014400 	.word	0x40014400
 8006f70:	40014800 	.word	0x40014800

08006f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	f023 0201 	bic.w	r2, r3, #1
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	4b37      	ldr	r3, [pc, #220]	; (800707c <TIM_OC1_SetConfig+0x108>)
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 0303 	bic.w	r3, r3, #3
 8006faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f023 0302 	bic.w	r3, r3, #2
 8006fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a2d      	ldr	r2, [pc, #180]	; (8007080 <TIM_OC1_SetConfig+0x10c>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d00f      	beq.n	8006ff0 <TIM_OC1_SetConfig+0x7c>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a2c      	ldr	r2, [pc, #176]	; (8007084 <TIM_OC1_SetConfig+0x110>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d00b      	beq.n	8006ff0 <TIM_OC1_SetConfig+0x7c>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a2b      	ldr	r2, [pc, #172]	; (8007088 <TIM_OC1_SetConfig+0x114>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d007      	beq.n	8006ff0 <TIM_OC1_SetConfig+0x7c>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a2a      	ldr	r2, [pc, #168]	; (800708c <TIM_OC1_SetConfig+0x118>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d003      	beq.n	8006ff0 <TIM_OC1_SetConfig+0x7c>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a29      	ldr	r2, [pc, #164]	; (8007090 <TIM_OC1_SetConfig+0x11c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d10c      	bne.n	800700a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f023 0308 	bic.w	r3, r3, #8
 8006ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f023 0304 	bic.w	r3, r3, #4
 8007008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a1c      	ldr	r2, [pc, #112]	; (8007080 <TIM_OC1_SetConfig+0x10c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d00f      	beq.n	8007032 <TIM_OC1_SetConfig+0xbe>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a1b      	ldr	r2, [pc, #108]	; (8007084 <TIM_OC1_SetConfig+0x110>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d00b      	beq.n	8007032 <TIM_OC1_SetConfig+0xbe>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a1a      	ldr	r2, [pc, #104]	; (8007088 <TIM_OC1_SetConfig+0x114>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d007      	beq.n	8007032 <TIM_OC1_SetConfig+0xbe>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a19      	ldr	r2, [pc, #100]	; (800708c <TIM_OC1_SetConfig+0x118>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d003      	beq.n	8007032 <TIM_OC1_SetConfig+0xbe>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a18      	ldr	r2, [pc, #96]	; (8007090 <TIM_OC1_SetConfig+0x11c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d111      	bne.n	8007056 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4313      	orrs	r3, r2
 8007054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	621a      	str	r2, [r3, #32]
}
 8007070:	bf00      	nop
 8007072:	371c      	adds	r7, #28
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	fffeff8f 	.word	0xfffeff8f
 8007080:	40010000 	.word	0x40010000
 8007084:	40010400 	.word	0x40010400
 8007088:	40014000 	.word	0x40014000
 800708c:	40014400 	.word	0x40014400
 8007090:	40014800 	.word	0x40014800

08007094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	f023 0210 	bic.w	r2, r3, #16
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	4b34      	ldr	r3, [pc, #208]	; (8007190 <TIM_OC2_SetConfig+0xfc>)
 80070c0:	4013      	ands	r3, r2
 80070c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	021b      	lsls	r3, r3, #8
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f023 0320 	bic.w	r3, r3, #32
 80070de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	011b      	lsls	r3, r3, #4
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a29      	ldr	r2, [pc, #164]	; (8007194 <TIM_OC2_SetConfig+0x100>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d003      	beq.n	80070fc <TIM_OC2_SetConfig+0x68>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a28      	ldr	r2, [pc, #160]	; (8007198 <TIM_OC2_SetConfig+0x104>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d10d      	bne.n	8007118 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	011b      	lsls	r3, r3, #4
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	4313      	orrs	r3, r2
 800710e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007116:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a1e      	ldr	r2, [pc, #120]	; (8007194 <TIM_OC2_SetConfig+0x100>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d00f      	beq.n	8007140 <TIM_OC2_SetConfig+0xac>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a1d      	ldr	r2, [pc, #116]	; (8007198 <TIM_OC2_SetConfig+0x104>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d00b      	beq.n	8007140 <TIM_OC2_SetConfig+0xac>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a1c      	ldr	r2, [pc, #112]	; (800719c <TIM_OC2_SetConfig+0x108>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d007      	beq.n	8007140 <TIM_OC2_SetConfig+0xac>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a1b      	ldr	r2, [pc, #108]	; (80071a0 <TIM_OC2_SetConfig+0x10c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d003      	beq.n	8007140 <TIM_OC2_SetConfig+0xac>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a1a      	ldr	r2, [pc, #104]	; (80071a4 <TIM_OC2_SetConfig+0x110>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d113      	bne.n	8007168 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007146:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800714e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	4313      	orrs	r3, r2
 800715a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	4313      	orrs	r3, r2
 8007166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	621a      	str	r2, [r3, #32]
}
 8007182:	bf00      	nop
 8007184:	371c      	adds	r7, #28
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	feff8fff 	.word	0xfeff8fff
 8007194:	40010000 	.word	0x40010000
 8007198:	40010400 	.word	0x40010400
 800719c:	40014000 	.word	0x40014000
 80071a0:	40014400 	.word	0x40014400
 80071a4:	40014800 	.word	0x40014800

080071a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b087      	sub	sp, #28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a1b      	ldr	r3, [r3, #32]
 80071bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	4b33      	ldr	r3, [pc, #204]	; (80072a0 <TIM_OC3_SetConfig+0xf8>)
 80071d4:	4013      	ands	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f023 0303 	bic.w	r3, r3, #3
 80071de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	021b      	lsls	r3, r3, #8
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a28      	ldr	r2, [pc, #160]	; (80072a4 <TIM_OC3_SetConfig+0xfc>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d003      	beq.n	800720e <TIM_OC3_SetConfig+0x66>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a27      	ldr	r2, [pc, #156]	; (80072a8 <TIM_OC3_SetConfig+0x100>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d10d      	bne.n	800722a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	021b      	lsls	r3, r3, #8
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	4313      	orrs	r3, r2
 8007220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a1d      	ldr	r2, [pc, #116]	; (80072a4 <TIM_OC3_SetConfig+0xfc>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00f      	beq.n	8007252 <TIM_OC3_SetConfig+0xaa>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a1c      	ldr	r2, [pc, #112]	; (80072a8 <TIM_OC3_SetConfig+0x100>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d00b      	beq.n	8007252 <TIM_OC3_SetConfig+0xaa>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a1b      	ldr	r2, [pc, #108]	; (80072ac <TIM_OC3_SetConfig+0x104>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d007      	beq.n	8007252 <TIM_OC3_SetConfig+0xaa>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a1a      	ldr	r2, [pc, #104]	; (80072b0 <TIM_OC3_SetConfig+0x108>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d003      	beq.n	8007252 <TIM_OC3_SetConfig+0xaa>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a19      	ldr	r2, [pc, #100]	; (80072b4 <TIM_OC3_SetConfig+0x10c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d113      	bne.n	800727a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	4313      	orrs	r3, r2
 800726c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	011b      	lsls	r3, r3, #4
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	4313      	orrs	r3, r2
 8007278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	621a      	str	r2, [r3, #32]
}
 8007294:	bf00      	nop
 8007296:	371c      	adds	r7, #28
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr
 80072a0:	fffeff8f 	.word	0xfffeff8f
 80072a4:	40010000 	.word	0x40010000
 80072a8:	40010400 	.word	0x40010400
 80072ac:	40014000 	.word	0x40014000
 80072b0:	40014400 	.word	0x40014400
 80072b4:	40014800 	.word	0x40014800

080072b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	4b24      	ldr	r3, [pc, #144]	; (8007374 <TIM_OC4_SetConfig+0xbc>)
 80072e4:	4013      	ands	r3, r2
 80072e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	021b      	lsls	r3, r3, #8
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	031b      	lsls	r3, r3, #12
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	4313      	orrs	r3, r2
 800730e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a19      	ldr	r2, [pc, #100]	; (8007378 <TIM_OC4_SetConfig+0xc0>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d00f      	beq.n	8007338 <TIM_OC4_SetConfig+0x80>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a18      	ldr	r2, [pc, #96]	; (800737c <TIM_OC4_SetConfig+0xc4>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d00b      	beq.n	8007338 <TIM_OC4_SetConfig+0x80>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a17      	ldr	r2, [pc, #92]	; (8007380 <TIM_OC4_SetConfig+0xc8>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d007      	beq.n	8007338 <TIM_OC4_SetConfig+0x80>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a16      	ldr	r2, [pc, #88]	; (8007384 <TIM_OC4_SetConfig+0xcc>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d003      	beq.n	8007338 <TIM_OC4_SetConfig+0x80>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a15      	ldr	r2, [pc, #84]	; (8007388 <TIM_OC4_SetConfig+0xd0>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d109      	bne.n	800734c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800733e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	019b      	lsls	r3, r3, #6
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	4313      	orrs	r3, r2
 800734a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	621a      	str	r2, [r3, #32]
}
 8007366:	bf00      	nop
 8007368:	371c      	adds	r7, #28
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	feff8fff 	.word	0xfeff8fff
 8007378:	40010000 	.word	0x40010000
 800737c:	40010400 	.word	0x40010400
 8007380:	40014000 	.word	0x40014000
 8007384:	40014400 	.word	0x40014400
 8007388:	40014800 	.word	0x40014800

0800738c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	4b21      	ldr	r3, [pc, #132]	; (800743c <TIM_OC5_SetConfig+0xb0>)
 80073b8:	4013      	ands	r3, r2
 80073ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80073cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	041b      	lsls	r3, r3, #16
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a18      	ldr	r2, [pc, #96]	; (8007440 <TIM_OC5_SetConfig+0xb4>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d00f      	beq.n	8007402 <TIM_OC5_SetConfig+0x76>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a17      	ldr	r2, [pc, #92]	; (8007444 <TIM_OC5_SetConfig+0xb8>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d00b      	beq.n	8007402 <TIM_OC5_SetConfig+0x76>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a16      	ldr	r2, [pc, #88]	; (8007448 <TIM_OC5_SetConfig+0xbc>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d007      	beq.n	8007402 <TIM_OC5_SetConfig+0x76>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a15      	ldr	r2, [pc, #84]	; (800744c <TIM_OC5_SetConfig+0xc0>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d003      	beq.n	8007402 <TIM_OC5_SetConfig+0x76>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a14      	ldr	r2, [pc, #80]	; (8007450 <TIM_OC5_SetConfig+0xc4>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d109      	bne.n	8007416 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007408:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	021b      	lsls	r3, r3, #8
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	4313      	orrs	r3, r2
 8007414:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	621a      	str	r2, [r3, #32]
}
 8007430:	bf00      	nop
 8007432:	371c      	adds	r7, #28
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	fffeff8f 	.word	0xfffeff8f
 8007440:	40010000 	.word	0x40010000
 8007444:	40010400 	.word	0x40010400
 8007448:	40014000 	.word	0x40014000
 800744c:	40014400 	.word	0x40014400
 8007450:	40014800 	.word	0x40014800

08007454 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800747a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	4b22      	ldr	r3, [pc, #136]	; (8007508 <TIM_OC6_SetConfig+0xb4>)
 8007480:	4013      	ands	r3, r2
 8007482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	021b      	lsls	r3, r3, #8
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	4313      	orrs	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	051b      	lsls	r3, r3, #20
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a19      	ldr	r2, [pc, #100]	; (800750c <TIM_OC6_SetConfig+0xb8>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d00f      	beq.n	80074cc <TIM_OC6_SetConfig+0x78>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a18      	ldr	r2, [pc, #96]	; (8007510 <TIM_OC6_SetConfig+0xbc>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d00b      	beq.n	80074cc <TIM_OC6_SetConfig+0x78>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a17      	ldr	r2, [pc, #92]	; (8007514 <TIM_OC6_SetConfig+0xc0>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d007      	beq.n	80074cc <TIM_OC6_SetConfig+0x78>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a16      	ldr	r2, [pc, #88]	; (8007518 <TIM_OC6_SetConfig+0xc4>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d003      	beq.n	80074cc <TIM_OC6_SetConfig+0x78>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a15      	ldr	r2, [pc, #84]	; (800751c <TIM_OC6_SetConfig+0xc8>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d109      	bne.n	80074e0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	029b      	lsls	r3, r3, #10
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	4313      	orrs	r3, r2
 80074de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	621a      	str	r2, [r3, #32]
}
 80074fa:	bf00      	nop
 80074fc:	371c      	adds	r7, #28
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	feff8fff 	.word	0xfeff8fff
 800750c:	40010000 	.word	0x40010000
 8007510:	40010400 	.word	0x40010400
 8007514:	40014000 	.word	0x40014000
 8007518:	40014400 	.word	0x40014400
 800751c:	40014800 	.word	0x40014800

08007520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	f023 0201 	bic.w	r2, r3, #1
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800754a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	011b      	lsls	r3, r3, #4
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	4313      	orrs	r3, r2
 8007554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f023 030a 	bic.w	r3, r3, #10
 800755c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	4313      	orrs	r3, r2
 8007564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	621a      	str	r2, [r3, #32]
}
 8007572:	bf00      	nop
 8007574:	371c      	adds	r7, #28
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800757e:	b480      	push	{r7}
 8007580:	b087      	sub	sp, #28
 8007582:	af00      	add	r7, sp, #0
 8007584:	60f8      	str	r0, [r7, #12]
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	f023 0210 	bic.w	r2, r3, #16
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	031b      	lsls	r3, r3, #12
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	011b      	lsls	r3, r3, #4
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	621a      	str	r2, [r3, #32]
}
 80075d2:	bf00      	nop
 80075d4:	371c      	adds	r7, #28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
	...

080075e0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	4b09      	ldr	r3, [pc, #36]	; (8007618 <TIM_ITRx_SetConfig+0x38>)
 80075f4:	4013      	ands	r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	f043 0307 	orr.w	r3, r3, #7
 8007602:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	609a      	str	r2, [r3, #8]
}
 800760a:	bf00      	nop
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	ffcfff8f 	.word	0xffcfff8f

0800761c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800761c:	b480      	push	{r7}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
 8007628:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007636:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	021a      	lsls	r2, r3, #8
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	431a      	orrs	r2, r3
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	4313      	orrs	r3, r2
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	4313      	orrs	r3, r2
 8007648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	609a      	str	r2, [r3, #8]
}
 8007650:	bf00      	nop
 8007652:	371c      	adds	r7, #28
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800765c:	b480      	push	{r7}
 800765e:	b087      	sub	sp, #28
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f003 031f 	and.w	r3, r3, #31
 800766e:	2201      	movs	r2, #1
 8007670:	fa02 f303 	lsl.w	r3, r2, r3
 8007674:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6a1a      	ldr	r2, [r3, #32]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	43db      	mvns	r3, r3
 800767e:	401a      	ands	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6a1a      	ldr	r2, [r3, #32]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	f003 031f 	and.w	r3, r3, #31
 800768e:	6879      	ldr	r1, [r7, #4]
 8007690:	fa01 f303 	lsl.w	r3, r1, r3
 8007694:	431a      	orrs	r2, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	621a      	str	r2, [r3, #32]
}
 800769a:	bf00      	nop
 800769c:	371c      	adds	r7, #28
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
	...

080076a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d101      	bne.n	80076c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076bc:	2302      	movs	r3, #2
 80076be:	e06d      	b.n	800779c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2202      	movs	r2, #2
 80076cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a30      	ldr	r2, [pc, #192]	; (80077a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d004      	beq.n	80076f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a2f      	ldr	r2, [pc, #188]	; (80077ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d108      	bne.n	8007706 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80076fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	4313      	orrs	r3, r2
 8007704:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	4313      	orrs	r3, r2
 8007716:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a20      	ldr	r2, [pc, #128]	; (80077a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d022      	beq.n	8007770 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007732:	d01d      	beq.n	8007770 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a1d      	ldr	r2, [pc, #116]	; (80077b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d018      	beq.n	8007770 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a1c      	ldr	r2, [pc, #112]	; (80077b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d013      	beq.n	8007770 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a1a      	ldr	r2, [pc, #104]	; (80077b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d00e      	beq.n	8007770 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a15      	ldr	r2, [pc, #84]	; (80077ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d009      	beq.n	8007770 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a16      	ldr	r2, [pc, #88]	; (80077bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d004      	beq.n	8007770 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a15      	ldr	r2, [pc, #84]	; (80077c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d10c      	bne.n	800778a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007776:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	4313      	orrs	r3, r2
 8007780:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	40010000 	.word	0x40010000
 80077ac:	40010400 	.word	0x40010400
 80077b0:	40000400 	.word	0x40000400
 80077b4:	40000800 	.word	0x40000800
 80077b8:	40000c00 	.word	0x40000c00
 80077bc:	40001800 	.word	0x40001800
 80077c0:	40014000 	.word	0x40014000

080077c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d101      	bne.n	8007812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e042      	b.n	8007898 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007818:	2b00      	cmp	r3, #0
 800781a:	d106      	bne.n	800782a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7f9 fbe9 	bl	8000ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2224      	movs	r2, #36	; 0x24
 800782e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f022 0201 	bic.w	r2, r2, #1
 8007840:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007846:	2b00      	cmp	r3, #0
 8007848:	d002      	beq.n	8007850 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fd90 	bl	8008370 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f825 	bl	80078a0 <UART_SetConfig>
 8007856:	4603      	mov	r3, r0
 8007858:	2b01      	cmp	r3, #1
 800785a:	d101      	bne.n	8007860 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e01b      	b.n	8007898 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800786e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800787e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f042 0201 	orr.w	r2, r2, #1
 800788e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fe0f 	bl	80084b4 <UART_CheckIdleState>
 8007896:	4603      	mov	r3, r0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078a4:	b092      	sub	sp, #72	; 0x48
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	431a      	orrs	r2, r3
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	431a      	orrs	r2, r3
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	4bbe      	ldr	r3, [pc, #760]	; (8007bc8 <UART_SetConfig+0x328>)
 80078d0:	4013      	ands	r3, r2
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	6812      	ldr	r2, [r2, #0]
 80078d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078d8:	430b      	orrs	r3, r1
 80078da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	68da      	ldr	r2, [r3, #12]
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4ab3      	ldr	r2, [pc, #716]	; (8007bcc <UART_SetConfig+0x32c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d004      	beq.n	800790c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007908:	4313      	orrs	r3, r2
 800790a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689a      	ldr	r2, [r3, #8]
 8007912:	4baf      	ldr	r3, [pc, #700]	; (8007bd0 <UART_SetConfig+0x330>)
 8007914:	4013      	ands	r3, r2
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	6812      	ldr	r2, [r2, #0]
 800791a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800791c:	430b      	orrs	r3, r1
 800791e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007926:	f023 010f 	bic.w	r1, r3, #15
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4aa6      	ldr	r2, [pc, #664]	; (8007bd4 <UART_SetConfig+0x334>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d177      	bne.n	8007a30 <UART_SetConfig+0x190>
 8007940:	4ba5      	ldr	r3, [pc, #660]	; (8007bd8 <UART_SetConfig+0x338>)
 8007942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007944:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007948:	2b28      	cmp	r3, #40	; 0x28
 800794a:	d86d      	bhi.n	8007a28 <UART_SetConfig+0x188>
 800794c:	a201      	add	r2, pc, #4	; (adr r2, 8007954 <UART_SetConfig+0xb4>)
 800794e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007952:	bf00      	nop
 8007954:	080079f9 	.word	0x080079f9
 8007958:	08007a29 	.word	0x08007a29
 800795c:	08007a29 	.word	0x08007a29
 8007960:	08007a29 	.word	0x08007a29
 8007964:	08007a29 	.word	0x08007a29
 8007968:	08007a29 	.word	0x08007a29
 800796c:	08007a29 	.word	0x08007a29
 8007970:	08007a29 	.word	0x08007a29
 8007974:	08007a01 	.word	0x08007a01
 8007978:	08007a29 	.word	0x08007a29
 800797c:	08007a29 	.word	0x08007a29
 8007980:	08007a29 	.word	0x08007a29
 8007984:	08007a29 	.word	0x08007a29
 8007988:	08007a29 	.word	0x08007a29
 800798c:	08007a29 	.word	0x08007a29
 8007990:	08007a29 	.word	0x08007a29
 8007994:	08007a09 	.word	0x08007a09
 8007998:	08007a29 	.word	0x08007a29
 800799c:	08007a29 	.word	0x08007a29
 80079a0:	08007a29 	.word	0x08007a29
 80079a4:	08007a29 	.word	0x08007a29
 80079a8:	08007a29 	.word	0x08007a29
 80079ac:	08007a29 	.word	0x08007a29
 80079b0:	08007a29 	.word	0x08007a29
 80079b4:	08007a11 	.word	0x08007a11
 80079b8:	08007a29 	.word	0x08007a29
 80079bc:	08007a29 	.word	0x08007a29
 80079c0:	08007a29 	.word	0x08007a29
 80079c4:	08007a29 	.word	0x08007a29
 80079c8:	08007a29 	.word	0x08007a29
 80079cc:	08007a29 	.word	0x08007a29
 80079d0:	08007a29 	.word	0x08007a29
 80079d4:	08007a19 	.word	0x08007a19
 80079d8:	08007a29 	.word	0x08007a29
 80079dc:	08007a29 	.word	0x08007a29
 80079e0:	08007a29 	.word	0x08007a29
 80079e4:	08007a29 	.word	0x08007a29
 80079e8:	08007a29 	.word	0x08007a29
 80079ec:	08007a29 	.word	0x08007a29
 80079f0:	08007a29 	.word	0x08007a29
 80079f4:	08007a21 	.word	0x08007a21
 80079f8:	2301      	movs	r3, #1
 80079fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079fe:	e222      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007a00:	2304      	movs	r3, #4
 8007a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a06:	e21e      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007a08:	2308      	movs	r3, #8
 8007a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a0e:	e21a      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007a10:	2310      	movs	r3, #16
 8007a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a16:	e216      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007a18:	2320      	movs	r3, #32
 8007a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a1e:	e212      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007a20:	2340      	movs	r3, #64	; 0x40
 8007a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a26:	e20e      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007a28:	2380      	movs	r3, #128	; 0x80
 8007a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a2e:	e20a      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a69      	ldr	r2, [pc, #420]	; (8007bdc <UART_SetConfig+0x33c>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d130      	bne.n	8007a9c <UART_SetConfig+0x1fc>
 8007a3a:	4b67      	ldr	r3, [pc, #412]	; (8007bd8 <UART_SetConfig+0x338>)
 8007a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3e:	f003 0307 	and.w	r3, r3, #7
 8007a42:	2b05      	cmp	r3, #5
 8007a44:	d826      	bhi.n	8007a94 <UART_SetConfig+0x1f4>
 8007a46:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <UART_SetConfig+0x1ac>)
 8007a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4c:	08007a65 	.word	0x08007a65
 8007a50:	08007a6d 	.word	0x08007a6d
 8007a54:	08007a75 	.word	0x08007a75
 8007a58:	08007a7d 	.word	0x08007a7d
 8007a5c:	08007a85 	.word	0x08007a85
 8007a60:	08007a8d 	.word	0x08007a8d
 8007a64:	2300      	movs	r3, #0
 8007a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a6a:	e1ec      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007a6c:	2304      	movs	r3, #4
 8007a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a72:	e1e8      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007a74:	2308      	movs	r3, #8
 8007a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a7a:	e1e4      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007a7c:	2310      	movs	r3, #16
 8007a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a82:	e1e0      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007a84:	2320      	movs	r3, #32
 8007a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a8a:	e1dc      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007a8c:	2340      	movs	r3, #64	; 0x40
 8007a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a92:	e1d8      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007a94:	2380      	movs	r3, #128	; 0x80
 8007a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a9a:	e1d4      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a4f      	ldr	r2, [pc, #316]	; (8007be0 <UART_SetConfig+0x340>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d130      	bne.n	8007b08 <UART_SetConfig+0x268>
 8007aa6:	4b4c      	ldr	r3, [pc, #304]	; (8007bd8 <UART_SetConfig+0x338>)
 8007aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aaa:	f003 0307 	and.w	r3, r3, #7
 8007aae:	2b05      	cmp	r3, #5
 8007ab0:	d826      	bhi.n	8007b00 <UART_SetConfig+0x260>
 8007ab2:	a201      	add	r2, pc, #4	; (adr r2, 8007ab8 <UART_SetConfig+0x218>)
 8007ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab8:	08007ad1 	.word	0x08007ad1
 8007abc:	08007ad9 	.word	0x08007ad9
 8007ac0:	08007ae1 	.word	0x08007ae1
 8007ac4:	08007ae9 	.word	0x08007ae9
 8007ac8:	08007af1 	.word	0x08007af1
 8007acc:	08007af9 	.word	0x08007af9
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ad6:	e1b6      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007ad8:	2304      	movs	r3, #4
 8007ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ade:	e1b2      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007ae0:	2308      	movs	r3, #8
 8007ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ae6:	e1ae      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007ae8:	2310      	movs	r3, #16
 8007aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aee:	e1aa      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007af0:	2320      	movs	r3, #32
 8007af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007af6:	e1a6      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007af8:	2340      	movs	r3, #64	; 0x40
 8007afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007afe:	e1a2      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007b00:	2380      	movs	r3, #128	; 0x80
 8007b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b06:	e19e      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a35      	ldr	r2, [pc, #212]	; (8007be4 <UART_SetConfig+0x344>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d130      	bne.n	8007b74 <UART_SetConfig+0x2d4>
 8007b12:	4b31      	ldr	r3, [pc, #196]	; (8007bd8 <UART_SetConfig+0x338>)
 8007b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b16:	f003 0307 	and.w	r3, r3, #7
 8007b1a:	2b05      	cmp	r3, #5
 8007b1c:	d826      	bhi.n	8007b6c <UART_SetConfig+0x2cc>
 8007b1e:	a201      	add	r2, pc, #4	; (adr r2, 8007b24 <UART_SetConfig+0x284>)
 8007b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b24:	08007b3d 	.word	0x08007b3d
 8007b28:	08007b45 	.word	0x08007b45
 8007b2c:	08007b4d 	.word	0x08007b4d
 8007b30:	08007b55 	.word	0x08007b55
 8007b34:	08007b5d 	.word	0x08007b5d
 8007b38:	08007b65 	.word	0x08007b65
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b42:	e180      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007b44:	2304      	movs	r3, #4
 8007b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b4a:	e17c      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007b4c:	2308      	movs	r3, #8
 8007b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b52:	e178      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007b54:	2310      	movs	r3, #16
 8007b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b5a:	e174      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007b5c:	2320      	movs	r3, #32
 8007b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b62:	e170      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007b64:	2340      	movs	r3, #64	; 0x40
 8007b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b6a:	e16c      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007b6c:	2380      	movs	r3, #128	; 0x80
 8007b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b72:	e168      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a1b      	ldr	r2, [pc, #108]	; (8007be8 <UART_SetConfig+0x348>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d142      	bne.n	8007c04 <UART_SetConfig+0x364>
 8007b7e:	4b16      	ldr	r3, [pc, #88]	; (8007bd8 <UART_SetConfig+0x338>)
 8007b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b82:	f003 0307 	and.w	r3, r3, #7
 8007b86:	2b05      	cmp	r3, #5
 8007b88:	d838      	bhi.n	8007bfc <UART_SetConfig+0x35c>
 8007b8a:	a201      	add	r2, pc, #4	; (adr r2, 8007b90 <UART_SetConfig+0x2f0>)
 8007b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b90:	08007ba9 	.word	0x08007ba9
 8007b94:	08007bb1 	.word	0x08007bb1
 8007b98:	08007bb9 	.word	0x08007bb9
 8007b9c:	08007bc1 	.word	0x08007bc1
 8007ba0:	08007bed 	.word	0x08007bed
 8007ba4:	08007bf5 	.word	0x08007bf5
 8007ba8:	2300      	movs	r3, #0
 8007baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bae:	e14a      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007bb0:	2304      	movs	r3, #4
 8007bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bb6:	e146      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007bb8:	2308      	movs	r3, #8
 8007bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bbe:	e142      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007bc0:	2310      	movs	r3, #16
 8007bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bc6:	e13e      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007bc8:	cfff69f3 	.word	0xcfff69f3
 8007bcc:	58000c00 	.word	0x58000c00
 8007bd0:	11fff4ff 	.word	0x11fff4ff
 8007bd4:	40011000 	.word	0x40011000
 8007bd8:	58024400 	.word	0x58024400
 8007bdc:	40004400 	.word	0x40004400
 8007be0:	40004800 	.word	0x40004800
 8007be4:	40004c00 	.word	0x40004c00
 8007be8:	40005000 	.word	0x40005000
 8007bec:	2320      	movs	r3, #32
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bf2:	e128      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007bf4:	2340      	movs	r3, #64	; 0x40
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bfa:	e124      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007bfc:	2380      	movs	r3, #128	; 0x80
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c02:	e120      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4acb      	ldr	r2, [pc, #812]	; (8007f38 <UART_SetConfig+0x698>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d176      	bne.n	8007cfc <UART_SetConfig+0x45c>
 8007c0e:	4bcb      	ldr	r3, [pc, #812]	; (8007f3c <UART_SetConfig+0x69c>)
 8007c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c16:	2b28      	cmp	r3, #40	; 0x28
 8007c18:	d86c      	bhi.n	8007cf4 <UART_SetConfig+0x454>
 8007c1a:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <UART_SetConfig+0x380>)
 8007c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c20:	08007cc5 	.word	0x08007cc5
 8007c24:	08007cf5 	.word	0x08007cf5
 8007c28:	08007cf5 	.word	0x08007cf5
 8007c2c:	08007cf5 	.word	0x08007cf5
 8007c30:	08007cf5 	.word	0x08007cf5
 8007c34:	08007cf5 	.word	0x08007cf5
 8007c38:	08007cf5 	.word	0x08007cf5
 8007c3c:	08007cf5 	.word	0x08007cf5
 8007c40:	08007ccd 	.word	0x08007ccd
 8007c44:	08007cf5 	.word	0x08007cf5
 8007c48:	08007cf5 	.word	0x08007cf5
 8007c4c:	08007cf5 	.word	0x08007cf5
 8007c50:	08007cf5 	.word	0x08007cf5
 8007c54:	08007cf5 	.word	0x08007cf5
 8007c58:	08007cf5 	.word	0x08007cf5
 8007c5c:	08007cf5 	.word	0x08007cf5
 8007c60:	08007cd5 	.word	0x08007cd5
 8007c64:	08007cf5 	.word	0x08007cf5
 8007c68:	08007cf5 	.word	0x08007cf5
 8007c6c:	08007cf5 	.word	0x08007cf5
 8007c70:	08007cf5 	.word	0x08007cf5
 8007c74:	08007cf5 	.word	0x08007cf5
 8007c78:	08007cf5 	.word	0x08007cf5
 8007c7c:	08007cf5 	.word	0x08007cf5
 8007c80:	08007cdd 	.word	0x08007cdd
 8007c84:	08007cf5 	.word	0x08007cf5
 8007c88:	08007cf5 	.word	0x08007cf5
 8007c8c:	08007cf5 	.word	0x08007cf5
 8007c90:	08007cf5 	.word	0x08007cf5
 8007c94:	08007cf5 	.word	0x08007cf5
 8007c98:	08007cf5 	.word	0x08007cf5
 8007c9c:	08007cf5 	.word	0x08007cf5
 8007ca0:	08007ce5 	.word	0x08007ce5
 8007ca4:	08007cf5 	.word	0x08007cf5
 8007ca8:	08007cf5 	.word	0x08007cf5
 8007cac:	08007cf5 	.word	0x08007cf5
 8007cb0:	08007cf5 	.word	0x08007cf5
 8007cb4:	08007cf5 	.word	0x08007cf5
 8007cb8:	08007cf5 	.word	0x08007cf5
 8007cbc:	08007cf5 	.word	0x08007cf5
 8007cc0:	08007ced 	.word	0x08007ced
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cca:	e0bc      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007ccc:	2304      	movs	r3, #4
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cd2:	e0b8      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007cd4:	2308      	movs	r3, #8
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cda:	e0b4      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007cdc:	2310      	movs	r3, #16
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ce2:	e0b0      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007ce4:	2320      	movs	r3, #32
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cea:	e0ac      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007cec:	2340      	movs	r3, #64	; 0x40
 8007cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cf2:	e0a8      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007cf4:	2380      	movs	r3, #128	; 0x80
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cfa:	e0a4      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a8f      	ldr	r2, [pc, #572]	; (8007f40 <UART_SetConfig+0x6a0>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d130      	bne.n	8007d68 <UART_SetConfig+0x4c8>
 8007d06:	4b8d      	ldr	r3, [pc, #564]	; (8007f3c <UART_SetConfig+0x69c>)
 8007d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d0a:	f003 0307 	and.w	r3, r3, #7
 8007d0e:	2b05      	cmp	r3, #5
 8007d10:	d826      	bhi.n	8007d60 <UART_SetConfig+0x4c0>
 8007d12:	a201      	add	r2, pc, #4	; (adr r2, 8007d18 <UART_SetConfig+0x478>)
 8007d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d18:	08007d31 	.word	0x08007d31
 8007d1c:	08007d39 	.word	0x08007d39
 8007d20:	08007d41 	.word	0x08007d41
 8007d24:	08007d49 	.word	0x08007d49
 8007d28:	08007d51 	.word	0x08007d51
 8007d2c:	08007d59 	.word	0x08007d59
 8007d30:	2300      	movs	r3, #0
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d36:	e086      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007d38:	2304      	movs	r3, #4
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d3e:	e082      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007d40:	2308      	movs	r3, #8
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d46:	e07e      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007d48:	2310      	movs	r3, #16
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d4e:	e07a      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007d50:	2320      	movs	r3, #32
 8007d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d56:	e076      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007d58:	2340      	movs	r3, #64	; 0x40
 8007d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d5e:	e072      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007d60:	2380      	movs	r3, #128	; 0x80
 8007d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d66:	e06e      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a75      	ldr	r2, [pc, #468]	; (8007f44 <UART_SetConfig+0x6a4>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d130      	bne.n	8007dd4 <UART_SetConfig+0x534>
 8007d72:	4b72      	ldr	r3, [pc, #456]	; (8007f3c <UART_SetConfig+0x69c>)
 8007d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d76:	f003 0307 	and.w	r3, r3, #7
 8007d7a:	2b05      	cmp	r3, #5
 8007d7c:	d826      	bhi.n	8007dcc <UART_SetConfig+0x52c>
 8007d7e:	a201      	add	r2, pc, #4	; (adr r2, 8007d84 <UART_SetConfig+0x4e4>)
 8007d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d84:	08007d9d 	.word	0x08007d9d
 8007d88:	08007da5 	.word	0x08007da5
 8007d8c:	08007dad 	.word	0x08007dad
 8007d90:	08007db5 	.word	0x08007db5
 8007d94:	08007dbd 	.word	0x08007dbd
 8007d98:	08007dc5 	.word	0x08007dc5
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007da2:	e050      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007da4:	2304      	movs	r3, #4
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007daa:	e04c      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007dac:	2308      	movs	r3, #8
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007db2:	e048      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007db4:	2310      	movs	r3, #16
 8007db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dba:	e044      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007dbc:	2320      	movs	r3, #32
 8007dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dc2:	e040      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007dc4:	2340      	movs	r3, #64	; 0x40
 8007dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dca:	e03c      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007dcc:	2380      	movs	r3, #128	; 0x80
 8007dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dd2:	e038      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a5b      	ldr	r2, [pc, #364]	; (8007f48 <UART_SetConfig+0x6a8>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d130      	bne.n	8007e40 <UART_SetConfig+0x5a0>
 8007dde:	4b57      	ldr	r3, [pc, #348]	; (8007f3c <UART_SetConfig+0x69c>)
 8007de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	2b05      	cmp	r3, #5
 8007de8:	d826      	bhi.n	8007e38 <UART_SetConfig+0x598>
 8007dea:	a201      	add	r2, pc, #4	; (adr r2, 8007df0 <UART_SetConfig+0x550>)
 8007dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df0:	08007e09 	.word	0x08007e09
 8007df4:	08007e11 	.word	0x08007e11
 8007df8:	08007e19 	.word	0x08007e19
 8007dfc:	08007e21 	.word	0x08007e21
 8007e00:	08007e29 	.word	0x08007e29
 8007e04:	08007e31 	.word	0x08007e31
 8007e08:	2302      	movs	r3, #2
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e0e:	e01a      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007e10:	2304      	movs	r3, #4
 8007e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e16:	e016      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007e18:	2308      	movs	r3, #8
 8007e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e1e:	e012      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007e20:	2310      	movs	r3, #16
 8007e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e26:	e00e      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007e28:	2320      	movs	r3, #32
 8007e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e2e:	e00a      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007e30:	2340      	movs	r3, #64	; 0x40
 8007e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e36:	e006      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007e38:	2380      	movs	r3, #128	; 0x80
 8007e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e3e:	e002      	b.n	8007e46 <UART_SetConfig+0x5a6>
 8007e40:	2380      	movs	r3, #128	; 0x80
 8007e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a3f      	ldr	r2, [pc, #252]	; (8007f48 <UART_SetConfig+0x6a8>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	f040 80f8 	bne.w	8008042 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e52:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e56:	2b20      	cmp	r3, #32
 8007e58:	dc46      	bgt.n	8007ee8 <UART_SetConfig+0x648>
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	f2c0 8082 	blt.w	8007f64 <UART_SetConfig+0x6c4>
 8007e60:	3b02      	subs	r3, #2
 8007e62:	2b1e      	cmp	r3, #30
 8007e64:	d87e      	bhi.n	8007f64 <UART_SetConfig+0x6c4>
 8007e66:	a201      	add	r2, pc, #4	; (adr r2, 8007e6c <UART_SetConfig+0x5cc>)
 8007e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6c:	08007eef 	.word	0x08007eef
 8007e70:	08007f65 	.word	0x08007f65
 8007e74:	08007ef7 	.word	0x08007ef7
 8007e78:	08007f65 	.word	0x08007f65
 8007e7c:	08007f65 	.word	0x08007f65
 8007e80:	08007f65 	.word	0x08007f65
 8007e84:	08007f07 	.word	0x08007f07
 8007e88:	08007f65 	.word	0x08007f65
 8007e8c:	08007f65 	.word	0x08007f65
 8007e90:	08007f65 	.word	0x08007f65
 8007e94:	08007f65 	.word	0x08007f65
 8007e98:	08007f65 	.word	0x08007f65
 8007e9c:	08007f65 	.word	0x08007f65
 8007ea0:	08007f65 	.word	0x08007f65
 8007ea4:	08007f17 	.word	0x08007f17
 8007ea8:	08007f65 	.word	0x08007f65
 8007eac:	08007f65 	.word	0x08007f65
 8007eb0:	08007f65 	.word	0x08007f65
 8007eb4:	08007f65 	.word	0x08007f65
 8007eb8:	08007f65 	.word	0x08007f65
 8007ebc:	08007f65 	.word	0x08007f65
 8007ec0:	08007f65 	.word	0x08007f65
 8007ec4:	08007f65 	.word	0x08007f65
 8007ec8:	08007f65 	.word	0x08007f65
 8007ecc:	08007f65 	.word	0x08007f65
 8007ed0:	08007f65 	.word	0x08007f65
 8007ed4:	08007f65 	.word	0x08007f65
 8007ed8:	08007f65 	.word	0x08007f65
 8007edc:	08007f65 	.word	0x08007f65
 8007ee0:	08007f65 	.word	0x08007f65
 8007ee4:	08007f57 	.word	0x08007f57
 8007ee8:	2b40      	cmp	r3, #64	; 0x40
 8007eea:	d037      	beq.n	8007f5c <UART_SetConfig+0x6bc>
 8007eec:	e03a      	b.n	8007f64 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007eee:	f7fd fdf9 	bl	8005ae4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ef2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ef4:	e03c      	b.n	8007f70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fd fe08 	bl	8005b10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f04:	e034      	b.n	8007f70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f06:	f107 0318 	add.w	r3, r7, #24
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7fd ff54 	bl	8005db8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f14:	e02c      	b.n	8007f70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f16:	4b09      	ldr	r3, [pc, #36]	; (8007f3c <UART_SetConfig+0x69c>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0320 	and.w	r3, r3, #32
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d016      	beq.n	8007f50 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f22:	4b06      	ldr	r3, [pc, #24]	; (8007f3c <UART_SetConfig+0x69c>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	08db      	lsrs	r3, r3, #3
 8007f28:	f003 0303 	and.w	r3, r3, #3
 8007f2c:	4a07      	ldr	r2, [pc, #28]	; (8007f4c <UART_SetConfig+0x6ac>)
 8007f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f34:	e01c      	b.n	8007f70 <UART_SetConfig+0x6d0>
 8007f36:	bf00      	nop
 8007f38:	40011400 	.word	0x40011400
 8007f3c:	58024400 	.word	0x58024400
 8007f40:	40007800 	.word	0x40007800
 8007f44:	40007c00 	.word	0x40007c00
 8007f48:	58000c00 	.word	0x58000c00
 8007f4c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007f50:	4b9d      	ldr	r3, [pc, #628]	; (80081c8 <UART_SetConfig+0x928>)
 8007f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f54:	e00c      	b.n	8007f70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f56:	4b9d      	ldr	r3, [pc, #628]	; (80081cc <UART_SetConfig+0x92c>)
 8007f58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f5a:	e009      	b.n	8007f70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f62:	e005      	b.n	8007f70 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007f6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 81de 	beq.w	8008334 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7c:	4a94      	ldr	r2, [pc, #592]	; (80081d0 <UART_SetConfig+0x930>)
 8007f7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f82:	461a      	mov	r2, r3
 8007f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f86:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f8a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	4613      	mov	r3, r2
 8007f92:	005b      	lsls	r3, r3, #1
 8007f94:	4413      	add	r3, r2
 8007f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d305      	bcc.n	8007fa8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d903      	bls.n	8007fb0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007fae:	e1c1      	b.n	8008334 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	60bb      	str	r3, [r7, #8]
 8007fb6:	60fa      	str	r2, [r7, #12]
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	4a84      	ldr	r2, [pc, #528]	; (80081d0 <UART_SetConfig+0x930>)
 8007fbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	603b      	str	r3, [r7, #0]
 8007fc8:	607a      	str	r2, [r7, #4]
 8007fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007fd2:	f7f8 f981 	bl	80002d8 <__aeabi_uldivmod>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4610      	mov	r0, r2
 8007fdc:	4619      	mov	r1, r3
 8007fde:	f04f 0200 	mov.w	r2, #0
 8007fe2:	f04f 0300 	mov.w	r3, #0
 8007fe6:	020b      	lsls	r3, r1, #8
 8007fe8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007fec:	0202      	lsls	r2, r0, #8
 8007fee:	6979      	ldr	r1, [r7, #20]
 8007ff0:	6849      	ldr	r1, [r1, #4]
 8007ff2:	0849      	lsrs	r1, r1, #1
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	4605      	mov	r5, r0
 8007ffa:	eb12 0804 	adds.w	r8, r2, r4
 8007ffe:	eb43 0905 	adc.w	r9, r3, r5
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	469a      	mov	sl, r3
 800800a:	4693      	mov	fp, r2
 800800c:	4652      	mov	r2, sl
 800800e:	465b      	mov	r3, fp
 8008010:	4640      	mov	r0, r8
 8008012:	4649      	mov	r1, r9
 8008014:	f7f8 f960 	bl	80002d8 <__aeabi_uldivmod>
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	4613      	mov	r3, r2
 800801e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008022:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008026:	d308      	bcc.n	800803a <UART_SetConfig+0x79a>
 8008028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800802e:	d204      	bcs.n	800803a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008036:	60da      	str	r2, [r3, #12]
 8008038:	e17c      	b.n	8008334 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008040:	e178      	b.n	8008334 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	69db      	ldr	r3, [r3, #28]
 8008046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800804a:	f040 80c5 	bne.w	80081d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800804e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008052:	2b20      	cmp	r3, #32
 8008054:	dc48      	bgt.n	80080e8 <UART_SetConfig+0x848>
 8008056:	2b00      	cmp	r3, #0
 8008058:	db7b      	blt.n	8008152 <UART_SetConfig+0x8b2>
 800805a:	2b20      	cmp	r3, #32
 800805c:	d879      	bhi.n	8008152 <UART_SetConfig+0x8b2>
 800805e:	a201      	add	r2, pc, #4	; (adr r2, 8008064 <UART_SetConfig+0x7c4>)
 8008060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008064:	080080ef 	.word	0x080080ef
 8008068:	080080f7 	.word	0x080080f7
 800806c:	08008153 	.word	0x08008153
 8008070:	08008153 	.word	0x08008153
 8008074:	080080ff 	.word	0x080080ff
 8008078:	08008153 	.word	0x08008153
 800807c:	08008153 	.word	0x08008153
 8008080:	08008153 	.word	0x08008153
 8008084:	0800810f 	.word	0x0800810f
 8008088:	08008153 	.word	0x08008153
 800808c:	08008153 	.word	0x08008153
 8008090:	08008153 	.word	0x08008153
 8008094:	08008153 	.word	0x08008153
 8008098:	08008153 	.word	0x08008153
 800809c:	08008153 	.word	0x08008153
 80080a0:	08008153 	.word	0x08008153
 80080a4:	0800811f 	.word	0x0800811f
 80080a8:	08008153 	.word	0x08008153
 80080ac:	08008153 	.word	0x08008153
 80080b0:	08008153 	.word	0x08008153
 80080b4:	08008153 	.word	0x08008153
 80080b8:	08008153 	.word	0x08008153
 80080bc:	08008153 	.word	0x08008153
 80080c0:	08008153 	.word	0x08008153
 80080c4:	08008153 	.word	0x08008153
 80080c8:	08008153 	.word	0x08008153
 80080cc:	08008153 	.word	0x08008153
 80080d0:	08008153 	.word	0x08008153
 80080d4:	08008153 	.word	0x08008153
 80080d8:	08008153 	.word	0x08008153
 80080dc:	08008153 	.word	0x08008153
 80080e0:	08008153 	.word	0x08008153
 80080e4:	08008145 	.word	0x08008145
 80080e8:	2b40      	cmp	r3, #64	; 0x40
 80080ea:	d02e      	beq.n	800814a <UART_SetConfig+0x8aa>
 80080ec:	e031      	b.n	8008152 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080ee:	f7fc fac3 	bl	8004678 <HAL_RCC_GetPCLK1Freq>
 80080f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80080f4:	e033      	b.n	800815e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080f6:	f7fc fad5 	bl	80046a4 <HAL_RCC_GetPCLK2Freq>
 80080fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80080fc:	e02f      	b.n	800815e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008102:	4618      	mov	r0, r3
 8008104:	f7fd fd04 	bl	8005b10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800810c:	e027      	b.n	800815e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800810e:	f107 0318 	add.w	r3, r7, #24
 8008112:	4618      	mov	r0, r3
 8008114:	f7fd fe50 	bl	8005db8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800811c:	e01f      	b.n	800815e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800811e:	4b2d      	ldr	r3, [pc, #180]	; (80081d4 <UART_SetConfig+0x934>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b00      	cmp	r3, #0
 8008128:	d009      	beq.n	800813e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800812a:	4b2a      	ldr	r3, [pc, #168]	; (80081d4 <UART_SetConfig+0x934>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	08db      	lsrs	r3, r3, #3
 8008130:	f003 0303 	and.w	r3, r3, #3
 8008134:	4a24      	ldr	r2, [pc, #144]	; (80081c8 <UART_SetConfig+0x928>)
 8008136:	fa22 f303 	lsr.w	r3, r2, r3
 800813a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800813c:	e00f      	b.n	800815e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800813e:	4b22      	ldr	r3, [pc, #136]	; (80081c8 <UART_SetConfig+0x928>)
 8008140:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008142:	e00c      	b.n	800815e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008144:	4b21      	ldr	r3, [pc, #132]	; (80081cc <UART_SetConfig+0x92c>)
 8008146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008148:	e009      	b.n	800815e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800814a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800814e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008150:	e005      	b.n	800815e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008152:	2300      	movs	r3, #0
 8008154:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800815c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800815e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 80e7 	beq.w	8008334 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	4a19      	ldr	r2, [pc, #100]	; (80081d0 <UART_SetConfig+0x930>)
 800816c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008170:	461a      	mov	r2, r3
 8008172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008174:	fbb3 f3f2 	udiv	r3, r3, r2
 8008178:	005a      	lsls	r2, r3, #1
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	085b      	lsrs	r3, r3, #1
 8008180:	441a      	add	r2, r3
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	fbb2 f3f3 	udiv	r3, r2, r3
 800818a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800818c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818e:	2b0f      	cmp	r3, #15
 8008190:	d916      	bls.n	80081c0 <UART_SetConfig+0x920>
 8008192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008198:	d212      	bcs.n	80081c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800819a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819c:	b29b      	uxth	r3, r3
 800819e:	f023 030f 	bic.w	r3, r3, #15
 80081a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a6:	085b      	lsrs	r3, r3, #1
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	f003 0307 	and.w	r3, r3, #7
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80081b2:	4313      	orrs	r3, r2
 80081b4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80081bc:	60da      	str	r2, [r3, #12]
 80081be:	e0b9      	b.n	8008334 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80081c6:	e0b5      	b.n	8008334 <UART_SetConfig+0xa94>
 80081c8:	03d09000 	.word	0x03d09000
 80081cc:	003d0900 	.word	0x003d0900
 80081d0:	08009050 	.word	0x08009050
 80081d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80081d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80081dc:	2b20      	cmp	r3, #32
 80081de:	dc49      	bgt.n	8008274 <UART_SetConfig+0x9d4>
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	db7c      	blt.n	80082de <UART_SetConfig+0xa3e>
 80081e4:	2b20      	cmp	r3, #32
 80081e6:	d87a      	bhi.n	80082de <UART_SetConfig+0xa3e>
 80081e8:	a201      	add	r2, pc, #4	; (adr r2, 80081f0 <UART_SetConfig+0x950>)
 80081ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ee:	bf00      	nop
 80081f0:	0800827b 	.word	0x0800827b
 80081f4:	08008283 	.word	0x08008283
 80081f8:	080082df 	.word	0x080082df
 80081fc:	080082df 	.word	0x080082df
 8008200:	0800828b 	.word	0x0800828b
 8008204:	080082df 	.word	0x080082df
 8008208:	080082df 	.word	0x080082df
 800820c:	080082df 	.word	0x080082df
 8008210:	0800829b 	.word	0x0800829b
 8008214:	080082df 	.word	0x080082df
 8008218:	080082df 	.word	0x080082df
 800821c:	080082df 	.word	0x080082df
 8008220:	080082df 	.word	0x080082df
 8008224:	080082df 	.word	0x080082df
 8008228:	080082df 	.word	0x080082df
 800822c:	080082df 	.word	0x080082df
 8008230:	080082ab 	.word	0x080082ab
 8008234:	080082df 	.word	0x080082df
 8008238:	080082df 	.word	0x080082df
 800823c:	080082df 	.word	0x080082df
 8008240:	080082df 	.word	0x080082df
 8008244:	080082df 	.word	0x080082df
 8008248:	080082df 	.word	0x080082df
 800824c:	080082df 	.word	0x080082df
 8008250:	080082df 	.word	0x080082df
 8008254:	080082df 	.word	0x080082df
 8008258:	080082df 	.word	0x080082df
 800825c:	080082df 	.word	0x080082df
 8008260:	080082df 	.word	0x080082df
 8008264:	080082df 	.word	0x080082df
 8008268:	080082df 	.word	0x080082df
 800826c:	080082df 	.word	0x080082df
 8008270:	080082d1 	.word	0x080082d1
 8008274:	2b40      	cmp	r3, #64	; 0x40
 8008276:	d02e      	beq.n	80082d6 <UART_SetConfig+0xa36>
 8008278:	e031      	b.n	80082de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800827a:	f7fc f9fd 	bl	8004678 <HAL_RCC_GetPCLK1Freq>
 800827e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008280:	e033      	b.n	80082ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008282:	f7fc fa0f 	bl	80046a4 <HAL_RCC_GetPCLK2Freq>
 8008286:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008288:	e02f      	b.n	80082ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800828a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800828e:	4618      	mov	r0, r3
 8008290:	f7fd fc3e 	bl	8005b10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008298:	e027      	b.n	80082ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800829a:	f107 0318 	add.w	r3, r7, #24
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fd fd8a 	bl	8005db8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082a8:	e01f      	b.n	80082ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082aa:	4b2d      	ldr	r3, [pc, #180]	; (8008360 <UART_SetConfig+0xac0>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 0320 	and.w	r3, r3, #32
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d009      	beq.n	80082ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80082b6:	4b2a      	ldr	r3, [pc, #168]	; (8008360 <UART_SetConfig+0xac0>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	08db      	lsrs	r3, r3, #3
 80082bc:	f003 0303 	and.w	r3, r3, #3
 80082c0:	4a28      	ldr	r2, [pc, #160]	; (8008364 <UART_SetConfig+0xac4>)
 80082c2:	fa22 f303 	lsr.w	r3, r2, r3
 80082c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80082c8:	e00f      	b.n	80082ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80082ca:	4b26      	ldr	r3, [pc, #152]	; (8008364 <UART_SetConfig+0xac4>)
 80082cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082ce:	e00c      	b.n	80082ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80082d0:	4b25      	ldr	r3, [pc, #148]	; (8008368 <UART_SetConfig+0xac8>)
 80082d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082d4:	e009      	b.n	80082ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082dc:	e005      	b.n	80082ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80082e8:	bf00      	nop
    }

    if (pclk != 0U)
 80082ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d021      	beq.n	8008334 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f4:	4a1d      	ldr	r2, [pc, #116]	; (800836c <UART_SetConfig+0xacc>)
 80082f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082fa:	461a      	mov	r2, r3
 80082fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	085b      	lsrs	r3, r3, #1
 8008308:	441a      	add	r2, r3
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008312:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008316:	2b0f      	cmp	r3, #15
 8008318:	d909      	bls.n	800832e <UART_SetConfig+0xa8e>
 800831a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008320:	d205      	bcs.n	800832e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008324:	b29a      	uxth	r2, r3
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	60da      	str	r2, [r3, #12]
 800832c:	e002      	b.n	8008334 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	2201      	movs	r2, #1
 8008338:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	2201      	movs	r2, #1
 8008340:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	2200      	movs	r2, #0
 8008348:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2200      	movs	r2, #0
 800834e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008350:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008354:	4618      	mov	r0, r3
 8008356:	3748      	adds	r7, #72	; 0x48
 8008358:	46bd      	mov	sp, r7
 800835a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800835e:	bf00      	nop
 8008360:	58024400 	.word	0x58024400
 8008364:	03d09000 	.word	0x03d09000
 8008368:	003d0900 	.word	0x003d0900
 800836c:	08009050 	.word	0x08009050

08008370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837c:	f003 0308 	and.w	r3, r3, #8
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00a      	beq.n	800839a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	430a      	orrs	r2, r1
 8008398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00a      	beq.n	80083bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	430a      	orrs	r2, r1
 80083ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c0:	f003 0302 	and.w	r3, r3, #2
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00a      	beq.n	80083de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	430a      	orrs	r2, r1
 80083dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e2:	f003 0304 	and.w	r3, r3, #4
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00a      	beq.n	8008400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	430a      	orrs	r2, r1
 80083fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008404:	f003 0310 	and.w	r3, r3, #16
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00a      	beq.n	8008422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	430a      	orrs	r2, r1
 8008420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008426:	f003 0320 	and.w	r3, r3, #32
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	430a      	orrs	r2, r1
 8008442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800844c:	2b00      	cmp	r3, #0
 800844e:	d01a      	beq.n	8008486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	430a      	orrs	r2, r1
 8008464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800846a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800846e:	d10a      	bne.n	8008486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00a      	beq.n	80084a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	430a      	orrs	r2, r1
 80084a6:	605a      	str	r2, [r3, #4]
  }
}
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b098      	sub	sp, #96	; 0x60
 80084b8:	af02      	add	r7, sp, #8
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084c4:	f7f8 ff7e 	bl	80013c4 <HAL_GetTick>
 80084c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 0308 	and.w	r3, r3, #8
 80084d4:	2b08      	cmp	r3, #8
 80084d6:	d12f      	bne.n	8008538 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084e0:	2200      	movs	r2, #0
 80084e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f88e 	bl	8008608 <UART_WaitOnFlagUntilTimeout>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d022      	beq.n	8008538 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fa:	e853 3f00 	ldrex	r3, [r3]
 80084fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008506:	653b      	str	r3, [r7, #80]	; 0x50
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	461a      	mov	r2, r3
 800850e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008510:	647b      	str	r3, [r7, #68]	; 0x44
 8008512:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008514:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008516:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008518:	e841 2300 	strex	r3, r2, [r1]
 800851c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800851e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1e6      	bne.n	80084f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2220      	movs	r2, #32
 8008528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	e063      	b.n	8008600 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0304 	and.w	r3, r3, #4
 8008542:	2b04      	cmp	r3, #4
 8008544:	d149      	bne.n	80085da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008546:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800854e:	2200      	movs	r2, #0
 8008550:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f857 	bl	8008608 <UART_WaitOnFlagUntilTimeout>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d03c      	beq.n	80085da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008568:	e853 3f00 	ldrex	r3, [r3]
 800856c:	623b      	str	r3, [r7, #32]
   return(result);
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008574:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800857e:	633b      	str	r3, [r7, #48]	; 0x30
 8008580:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800858c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e6      	bne.n	8008560 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3308      	adds	r3, #8
 8008598:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	e853 3f00 	ldrex	r3, [r3]
 80085a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f023 0301 	bic.w	r3, r3, #1
 80085a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3308      	adds	r3, #8
 80085b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085b2:	61fa      	str	r2, [r7, #28]
 80085b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b6:	69b9      	ldr	r1, [r7, #24]
 80085b8:	69fa      	ldr	r2, [r7, #28]
 80085ba:	e841 2300 	strex	r3, r2, [r1]
 80085be:	617b      	str	r3, [r7, #20]
   return(result);
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1e5      	bne.n	8008592 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2220      	movs	r2, #32
 80085ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e012      	b.n	8008600 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2220      	movs	r2, #32
 80085de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2220      	movs	r2, #32
 80085e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3758      	adds	r7, #88	; 0x58
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	603b      	str	r3, [r7, #0]
 8008614:	4613      	mov	r3, r2
 8008616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008618:	e04f      	b.n	80086ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008620:	d04b      	beq.n	80086ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008622:	f7f8 fecf 	bl	80013c4 <HAL_GetTick>
 8008626:	4602      	mov	r2, r0
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	1ad3      	subs	r3, r2, r3
 800862c:	69ba      	ldr	r2, [r7, #24]
 800862e:	429a      	cmp	r2, r3
 8008630:	d302      	bcc.n	8008638 <UART_WaitOnFlagUntilTimeout+0x30>
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d101      	bne.n	800863c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e04e      	b.n	80086da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 0304 	and.w	r3, r3, #4
 8008646:	2b00      	cmp	r3, #0
 8008648:	d037      	beq.n	80086ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	2b80      	cmp	r3, #128	; 0x80
 800864e:	d034      	beq.n	80086ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2b40      	cmp	r3, #64	; 0x40
 8008654:	d031      	beq.n	80086ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	69db      	ldr	r3, [r3, #28]
 800865c:	f003 0308 	and.w	r3, r3, #8
 8008660:	2b08      	cmp	r3, #8
 8008662:	d110      	bne.n	8008686 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2208      	movs	r2, #8
 800866a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f000 f839 	bl	80086e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2208      	movs	r2, #8
 8008676:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e029      	b.n	80086da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008694:	d111      	bne.n	80086ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800869e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 f81f 	bl	80086e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2220      	movs	r2, #32
 80086aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80086b6:	2303      	movs	r3, #3
 80086b8:	e00f      	b.n	80086da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	69da      	ldr	r2, [r3, #28]
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	4013      	ands	r3, r2
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	bf0c      	ite	eq
 80086ca:	2301      	moveq	r3, #1
 80086cc:	2300      	movne	r3, #0
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	461a      	mov	r2, r3
 80086d2:	79fb      	ldrb	r3, [r7, #7]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d0a0      	beq.n	800861a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
	...

080086e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b095      	sub	sp, #84	; 0x54
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f4:	e853 3f00 	ldrex	r3, [r3]
 80086f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008700:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	461a      	mov	r2, r3
 8008708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800870a:	643b      	str	r3, [r7, #64]	; 0x40
 800870c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008710:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008712:	e841 2300 	strex	r3, r2, [r1]
 8008716:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1e6      	bne.n	80086ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3308      	adds	r3, #8
 8008724:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	e853 3f00 	ldrex	r3, [r3]
 800872c:	61fb      	str	r3, [r7, #28]
   return(result);
 800872e:	69fa      	ldr	r2, [r7, #28]
 8008730:	4b1e      	ldr	r3, [pc, #120]	; (80087ac <UART_EndRxTransfer+0xc8>)
 8008732:	4013      	ands	r3, r2
 8008734:	64bb      	str	r3, [r7, #72]	; 0x48
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	3308      	adds	r3, #8
 800873c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800873e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008740:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008742:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008746:	e841 2300 	strex	r3, r2, [r1]
 800874a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800874c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1e5      	bne.n	800871e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008756:	2b01      	cmp	r3, #1
 8008758:	d118      	bne.n	800878c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	e853 3f00 	ldrex	r3, [r3]
 8008766:	60bb      	str	r3, [r7, #8]
   return(result);
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	f023 0310 	bic.w	r3, r3, #16
 800876e:	647b      	str	r3, [r7, #68]	; 0x44
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	461a      	mov	r2, r3
 8008776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008778:	61bb      	str	r3, [r7, #24]
 800877a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877c:	6979      	ldr	r1, [r7, #20]
 800877e:	69ba      	ldr	r2, [r7, #24]
 8008780:	e841 2300 	strex	r3, r2, [r1]
 8008784:	613b      	str	r3, [r7, #16]
   return(result);
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1e6      	bne.n	800875a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2220      	movs	r2, #32
 8008790:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	675a      	str	r2, [r3, #116]	; 0x74
}
 80087a0:	bf00      	nop
 80087a2:	3754      	adds	r7, #84	; 0x54
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	effffffe 	.word	0xeffffffe

080087b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d101      	bne.n	80087c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80087c2:	2302      	movs	r3, #2
 80087c4:	e027      	b.n	8008816 <HAL_UARTEx_DisableFifoMode+0x66>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2224      	movs	r2, #36	; 0x24
 80087d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f022 0201 	bic.w	r2, r2, #1
 80087ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80087f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2220      	movs	r2, #32
 8008808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b084      	sub	sp, #16
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008832:	2b01      	cmp	r3, #1
 8008834:	d101      	bne.n	800883a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008836:	2302      	movs	r3, #2
 8008838:	e02d      	b.n	8008896 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2224      	movs	r2, #36	; 0x24
 8008846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f022 0201 	bic.w	r2, r2, #1
 8008860:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	683a      	ldr	r2, [r7, #0]
 8008872:	430a      	orrs	r2, r1
 8008874:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f850 	bl	800891c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2220      	movs	r2, #32
 8008888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d101      	bne.n	80088b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088b2:	2302      	movs	r3, #2
 80088b4:	e02d      	b.n	8008912 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2224      	movs	r2, #36	; 0x24
 80088c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f022 0201 	bic.w	r2, r2, #1
 80088dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	430a      	orrs	r2, r1
 80088f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 f812 	bl	800891c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2220      	movs	r2, #32
 8008904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
	...

0800891c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008928:	2b00      	cmp	r3, #0
 800892a:	d108      	bne.n	800893e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800893c:	e031      	b.n	80089a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800893e:	2310      	movs	r3, #16
 8008940:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008942:	2310      	movs	r3, #16
 8008944:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	0e5b      	lsrs	r3, r3, #25
 800894e:	b2db      	uxtb	r3, r3
 8008950:	f003 0307 	and.w	r3, r3, #7
 8008954:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	0f5b      	lsrs	r3, r3, #29
 800895e:	b2db      	uxtb	r3, r3
 8008960:	f003 0307 	and.w	r3, r3, #7
 8008964:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008966:	7bbb      	ldrb	r3, [r7, #14]
 8008968:	7b3a      	ldrb	r2, [r7, #12]
 800896a:	4911      	ldr	r1, [pc, #68]	; (80089b0 <UARTEx_SetNbDataToProcess+0x94>)
 800896c:	5c8a      	ldrb	r2, [r1, r2]
 800896e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008972:	7b3a      	ldrb	r2, [r7, #12]
 8008974:	490f      	ldr	r1, [pc, #60]	; (80089b4 <UARTEx_SetNbDataToProcess+0x98>)
 8008976:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008978:	fb93 f3f2 	sdiv	r3, r3, r2
 800897c:	b29a      	uxth	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008984:	7bfb      	ldrb	r3, [r7, #15]
 8008986:	7b7a      	ldrb	r2, [r7, #13]
 8008988:	4909      	ldr	r1, [pc, #36]	; (80089b0 <UARTEx_SetNbDataToProcess+0x94>)
 800898a:	5c8a      	ldrb	r2, [r1, r2]
 800898c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008990:	7b7a      	ldrb	r2, [r7, #13]
 8008992:	4908      	ldr	r1, [pc, #32]	; (80089b4 <UARTEx_SetNbDataToProcess+0x98>)
 8008994:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008996:	fb93 f3f2 	sdiv	r3, r3, r2
 800899a:	b29a      	uxth	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80089a2:	bf00      	nop
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	08009068 	.word	0x08009068
 80089b4:	08009070 	.word	0x08009070

080089b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089b8:	b084      	sub	sp, #16
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	f107 001c 	add.w	r0, r7, #28
 80089c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089ca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d121      	bne.n	8008a16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	68da      	ldr	r2, [r3, #12]
 80089e2:	4b2c      	ldr	r3, [pc, #176]	; (8008a94 <USB_CoreInit+0xdc>)
 80089e4:	4013      	ands	r3, r2
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80089f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d105      	bne.n	8008a0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 faaa 	bl	8008f64 <USB_CoreReset>
 8008a10:	4603      	mov	r3, r0
 8008a12:	73fb      	strb	r3, [r7, #15]
 8008a14:	e01b      	b.n	8008a4e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fa9e 	bl	8008f64 <USB_CoreReset>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a2c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d106      	bne.n	8008a42 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	639a      	str	r2, [r3, #56]	; 0x38
 8008a40:	e005      	b.n	8008a4e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a4e:	7fbb      	ldrb	r3, [r7, #30]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d116      	bne.n	8008a82 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a62:	4b0d      	ldr	r3, [pc, #52]	; (8008a98 <USB_CoreInit+0xe0>)
 8008a64:	4313      	orrs	r3, r2
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	f043 0206 	orr.w	r2, r3, #6
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f043 0220 	orr.w	r2, r3, #32
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a8e:	b004      	add	sp, #16
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	ffbdffbf 	.word	0xffbdffbf
 8008a98:	03ee0000 	.word	0x03ee0000

08008a9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	f023 0201 	bic.w	r2, r3, #1
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b084      	sub	sp, #16
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008aca:	2300      	movs	r3, #0
 8008acc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ada:	78fb      	ldrb	r3, [r7, #3]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d115      	bne.n	8008b0c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008aec:	200a      	movs	r0, #10
 8008aee:	f7f8 fc75 	bl	80013dc <HAL_Delay>
      ms += 10U;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	330a      	adds	r3, #10
 8008af6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fa25 	bl	8008f48 <USB_GetMode>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d01e      	beq.n	8008b42 <USB_SetCurrentMode+0x84>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2bc7      	cmp	r3, #199	; 0xc7
 8008b08:	d9f0      	bls.n	8008aec <USB_SetCurrentMode+0x2e>
 8008b0a:	e01a      	b.n	8008b42 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b0c:	78fb      	ldrb	r3, [r7, #3]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d115      	bne.n	8008b3e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008b1e:	200a      	movs	r0, #10
 8008b20:	f7f8 fc5c 	bl	80013dc <HAL_Delay>
      ms += 10U;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	330a      	adds	r3, #10
 8008b28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fa0c 	bl	8008f48 <USB_GetMode>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d005      	beq.n	8008b42 <USB_SetCurrentMode+0x84>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2bc7      	cmp	r3, #199	; 0xc7
 8008b3a:	d9f0      	bls.n	8008b1e <USB_SetCurrentMode+0x60>
 8008b3c:	e001      	b.n	8008b42 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e005      	b.n	8008b4e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2bc8      	cmp	r3, #200	; 0xc8
 8008b46:	d101      	bne.n	8008b4c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e000      	b.n	8008b4e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
	...

08008b58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b58:	b084      	sub	sp, #16
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b086      	sub	sp, #24
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b72:	2300      	movs	r3, #0
 8008b74:	613b      	str	r3, [r7, #16]
 8008b76:	e009      	b.n	8008b8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	3340      	adds	r3, #64	; 0x40
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	2200      	movs	r2, #0
 8008b84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	613b      	str	r3, [r7, #16]
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	2b0e      	cmp	r3, #14
 8008b90:	d9f2      	bls.n	8008b78 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d11c      	bne.n	8008bd4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ba8:	f043 0302 	orr.w	r3, r3, #2
 8008bac:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	601a      	str	r2, [r3, #0]
 8008bd2:	e005      	b.n	8008be0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008be6:	461a      	mov	r2, r3
 8008be8:	2300      	movs	r3, #0
 8008bea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008bec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d10d      	bne.n	8008c10 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d104      	bne.n	8008c06 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f968 	bl	8008ed4 <USB_SetDevSpeed>
 8008c04:	e008      	b.n	8008c18 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c06:	2101      	movs	r1, #1
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 f963 	bl	8008ed4 <USB_SetDevSpeed>
 8008c0e:	e003      	b.n	8008c18 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008c10:	2103      	movs	r1, #3
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f95e 	bl	8008ed4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c18:	2110      	movs	r1, #16
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f8fa 	bl	8008e14 <USB_FlushTxFifo>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f924 	bl	8008e78 <USB_FlushRxFifo>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c40:	461a      	mov	r2, r3
 8008c42:	2300      	movs	r3, #0
 8008c44:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	2300      	movs	r3, #0
 8008c50:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c58:	461a      	mov	r2, r3
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c5e:	2300      	movs	r3, #0
 8008c60:	613b      	str	r3, [r7, #16]
 8008c62:	e043      	b.n	8008cec <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	015a      	lsls	r2, r3, #5
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c7a:	d118      	bne.n	8008cae <USB_DevInit+0x156>
    {
      if (i == 0U)
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10a      	bne.n	8008c98 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	015a      	lsls	r2, r3, #5
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	4413      	add	r3, r2
 8008c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8e:	461a      	mov	r2, r3
 8008c90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c94:	6013      	str	r3, [r2, #0]
 8008c96:	e013      	b.n	8008cc0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	015a      	lsls	r2, r3, #5
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008caa:	6013      	str	r3, [r2, #0]
 8008cac:	e008      	b.n	8008cc0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	015a      	lsls	r2, r3, #5
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cba:	461a      	mov	r2, r3
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	015a      	lsls	r2, r3, #5
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ccc:	461a      	mov	r2, r3
 8008cce:	2300      	movs	r3, #0
 8008cd0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	015a      	lsls	r2, r3, #5
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	4413      	add	r3, r2
 8008cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cde:	461a      	mov	r2, r3
 8008ce0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ce4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	613b      	str	r3, [r7, #16]
 8008cec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d3b5      	bcc.n	8008c64 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	613b      	str	r3, [r7, #16]
 8008cfc:	e043      	b.n	8008d86 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	015a      	lsls	r2, r3, #5
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d14:	d118      	bne.n	8008d48 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10a      	bne.n	8008d32 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	015a      	lsls	r2, r3, #5
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	4413      	add	r3, r2
 8008d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d28:	461a      	mov	r2, r3
 8008d2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d2e:	6013      	str	r3, [r2, #0]
 8008d30:	e013      	b.n	8008d5a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	015a      	lsls	r2, r3, #5
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	4413      	add	r3, r2
 8008d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d3e:	461a      	mov	r2, r3
 8008d40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d44:	6013      	str	r3, [r2, #0]
 8008d46:	e008      	b.n	8008d5a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d54:	461a      	mov	r2, r3
 8008d56:	2300      	movs	r3, #0
 8008d58:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d66:	461a      	mov	r2, r3
 8008d68:	2300      	movs	r3, #0
 8008d6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	015a      	lsls	r2, r3, #5
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	4413      	add	r3, r2
 8008d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d78:	461a      	mov	r2, r3
 8008d7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	3301      	adds	r3, #1
 8008d84:	613b      	str	r3, [r7, #16]
 8008d86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d3b5      	bcc.n	8008cfe <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008da4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008db2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008db4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d105      	bne.n	8008dc8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	f043 0210 	orr.w	r2, r3, #16
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	699a      	ldr	r2, [r3, #24]
 8008dcc:	4b0f      	ldr	r3, [pc, #60]	; (8008e0c <USB_DevInit+0x2b4>)
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008dd4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d005      	beq.n	8008de8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	f043 0208 	orr.w	r2, r3, #8
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008de8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d105      	bne.n	8008dfc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	699a      	ldr	r2, [r3, #24]
 8008df4:	4b06      	ldr	r3, [pc, #24]	; (8008e10 <USB_DevInit+0x2b8>)
 8008df6:	4313      	orrs	r3, r2
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3718      	adds	r7, #24
 8008e02:	46bd      	mov	sp, r7
 8008e04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e08:	b004      	add	sp, #16
 8008e0a:	4770      	bx	lr
 8008e0c:	803c3800 	.word	0x803c3800
 8008e10:	40000004 	.word	0x40000004

08008e14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	3301      	adds	r3, #1
 8008e26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008e2e:	d901      	bls.n	8008e34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e01b      	b.n	8008e6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	daf2      	bge.n	8008e22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	019b      	lsls	r3, r3, #6
 8008e44:	f043 0220 	orr.w	r2, r3, #32
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008e58:	d901      	bls.n	8008e5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	e006      	b.n	8008e6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	f003 0320 	and.w	r3, r3, #32
 8008e66:	2b20      	cmp	r3, #32
 8008e68:	d0f0      	beq.n	8008e4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e80:	2300      	movs	r3, #0
 8008e82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	3301      	adds	r3, #1
 8008e88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008e90:	d901      	bls.n	8008e96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e92:	2303      	movs	r3, #3
 8008e94:	e018      	b.n	8008ec8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	daf2      	bge.n	8008e84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2210      	movs	r2, #16
 8008ea6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008eb4:	d901      	bls.n	8008eba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	e006      	b.n	8008ec8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	f003 0310 	and.w	r3, r3, #16
 8008ec2:	2b10      	cmp	r3, #16
 8008ec4:	d0f0      	beq.n	8008ea8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	460b      	mov	r3, r1
 8008ede:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	78fb      	ldrb	r3, [r7, #3]
 8008eee:	68f9      	ldr	r1, [r7, #12]
 8008ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b085      	sub	sp, #20
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f20:	f023 0303 	bic.w	r3, r3, #3
 8008f24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f34:	f043 0302 	orr.w	r3, r3, #2
 8008f38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3714      	adds	r7, #20
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	695b      	ldr	r3, [r3, #20]
 8008f54:	f003 0301 	and.w	r3, r3, #1
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	3301      	adds	r3, #1
 8008f74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008f7c:	d901      	bls.n	8008f82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	e01b      	b.n	8008fba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	daf2      	bge.n	8008f70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	f043 0201 	orr.w	r2, r3, #1
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008fa6:	d901      	bls.n	8008fac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	e006      	b.n	8008fba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	f003 0301 	and.w	r3, r3, #1
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d0f0      	beq.n	8008f9a <USB_CoreReset+0x36>

  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3714      	adds	r7, #20
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr

08008fc6 <memset>:
 8008fc6:	4402      	add	r2, r0
 8008fc8:	4603      	mov	r3, r0
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d100      	bne.n	8008fd0 <memset+0xa>
 8008fce:	4770      	bx	lr
 8008fd0:	f803 1b01 	strb.w	r1, [r3], #1
 8008fd4:	e7f9      	b.n	8008fca <memset+0x4>
	...

08008fd8 <__libc_init_array>:
 8008fd8:	b570      	push	{r4, r5, r6, lr}
 8008fda:	4d0d      	ldr	r5, [pc, #52]	; (8009010 <__libc_init_array+0x38>)
 8008fdc:	4c0d      	ldr	r4, [pc, #52]	; (8009014 <__libc_init_array+0x3c>)
 8008fde:	1b64      	subs	r4, r4, r5
 8008fe0:	10a4      	asrs	r4, r4, #2
 8008fe2:	2600      	movs	r6, #0
 8008fe4:	42a6      	cmp	r6, r4
 8008fe6:	d109      	bne.n	8008ffc <__libc_init_array+0x24>
 8008fe8:	4d0b      	ldr	r5, [pc, #44]	; (8009018 <__libc_init_array+0x40>)
 8008fea:	4c0c      	ldr	r4, [pc, #48]	; (800901c <__libc_init_array+0x44>)
 8008fec:	f000 f818 	bl	8009020 <_init>
 8008ff0:	1b64      	subs	r4, r4, r5
 8008ff2:	10a4      	asrs	r4, r4, #2
 8008ff4:	2600      	movs	r6, #0
 8008ff6:	42a6      	cmp	r6, r4
 8008ff8:	d105      	bne.n	8009006 <__libc_init_array+0x2e>
 8008ffa:	bd70      	pop	{r4, r5, r6, pc}
 8008ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009000:	4798      	blx	r3
 8009002:	3601      	adds	r6, #1
 8009004:	e7ee      	b.n	8008fe4 <__libc_init_array+0xc>
 8009006:	f855 3b04 	ldr.w	r3, [r5], #4
 800900a:	4798      	blx	r3
 800900c:	3601      	adds	r6, #1
 800900e:	e7f2      	b.n	8008ff6 <__libc_init_array+0x1e>
 8009010:	08009080 	.word	0x08009080
 8009014:	08009080 	.word	0x08009080
 8009018:	08009080 	.word	0x08009080
 800901c:	08009084 	.word	0x08009084

08009020 <_init>:
 8009020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009022:	bf00      	nop
 8009024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009026:	bc08      	pop	{r3}
 8009028:	469e      	mov	lr, r3
 800902a:	4770      	bx	lr

0800902c <_fini>:
 800902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902e:	bf00      	nop
 8009030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009032:	bc08      	pop	{r3}
 8009034:	469e      	mov	lr, r3
 8009036:	4770      	bx	lr
