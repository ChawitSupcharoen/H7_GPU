
Code_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e38  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080090d0  080090d0  000190d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009110  08009110  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009110  08009110  00019110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009118  08009118  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009118  08009118  00019118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800911c  0800911c  0001911c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08009120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  24000010  08009130  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240006bc  08009130  000206bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a957  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fdd  00000000  00000000  0003a9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  0003d9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001035  00000000  00000000  0003ee70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003abbc  00000000  00000000  0003fea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c2e6  00000000  00000000  0007aa61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00186233  00000000  00000000  00096d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005948  00000000  00000000  0021cf7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  002228c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080090b8 	.word	0x080090b8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080090b8 	.word	0x080090b8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <main+0xd8>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 fc21 	bl	8000f70 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fe0f 	bl	8001350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f85b 	bl	80007ec <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000736:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <main+0xd8>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a26      	ldr	r2, [pc, #152]	; (80007d8 <main+0xd8>)
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <main+0xd8>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000754:	2000      	movs	r0, #0
 8000756:	f002 fe59 	bl	800340c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f002 fe6f 	bl	8003440 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000766:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <main+0xd8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x80>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x6a>
if ( timeout < 0 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x8a>
{
Error_Handler();
 8000786:	f000 fbf3 	bl	8000f70 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 fa0b 	bl	8000ba4 <MX_GPIO_Init>
  MX_DMA_Init();
 800078e:	f000 f9e9 	bl	8000b64 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000792:	f000 f9b5 	bl	8000b00 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000796:	f000 f8f3 	bl	8000980 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800079a:	f000 f965 	bl	8000a68 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800079e:	f000 f8a3 	bl	80008e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  GPIOB->ODR = 0x00;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <main+0xdc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  HAL_Delay(500);
 80007a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ac:	f000 fe62 	bl	8001474 <HAL_Delay>
  HAL_TIM_Base_Start(&htim3);
 80007b0:	480b      	ldr	r0, [pc, #44]	; (80007e0 <main+0xe0>)
 80007b2:	f005 fe5d 	bl	8006470 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 80007b6:	2100      	movs	r1, #0
 80007b8:	4809      	ldr	r0, [pc, #36]	; (80007e0 <main+0xe0>)
 80007ba:	f005 ffd1 	bl	8006760 <HAL_TIM_OC_Start>
  hdma_tim3_ch1.XferCpltCallback = endof_scan_line;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <main+0xe4>)
 80007c0:	4a09      	ldr	r2, [pc, #36]	; (80007e8 <main+0xe8>)
 80007c2:	63da      	str	r2, [r3, #60]	; 0x3c
//
//  HAL_Delay(2000);
//
//  HAL_DMA_Start_IT(&hdma_tim3_ch1, (uint32_t)test_frame, (uint32_t) &GPIOB->ODR, 16);
//  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC1);
  start_Vsync_Sequence();
 80007c4:	f000 fb30 	bl	8000e28 <start_Vsync_Sequence>

  HAL_Delay(1000);
 80007c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007cc:	f000 fe52 	bl	8001474 <HAL_Delay>

  start_Hsync_Sequence();
 80007d0:	f000 fb12 	bl	8000df8 <start_Hsync_Sequence>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <main+0xd4>
 80007d6:	bf00      	nop
 80007d8:	58024400 	.word	0x58024400
 80007dc:	58020400 	.word	0x58020400
 80007e0:	24000078 	.word	0x24000078
 80007e4:	240000c4 	.word	0x240000c4
 80007e8:	08000d65 	.word	0x08000d65

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b09c      	sub	sp, #112	; 0x70
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f6:	224c      	movs	r2, #76	; 0x4c
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f008 fc2f 	bl	800905e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2220      	movs	r2, #32
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f008 fc29 	bl	800905e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800080c:	2004      	movs	r0, #4
 800080e:	f002 ff5b 	bl	80036c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	4b32      	ldr	r3, [pc, #200]	; (80008e0 <SystemClock_Config+0xf4>)
 8000818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081a:	4a31      	ldr	r2, [pc, #196]	; (80008e0 <SystemClock_Config+0xf4>)
 800081c:	f023 0301 	bic.w	r3, r3, #1
 8000820:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000822:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <SystemClock_Config+0xf4>)
 8000824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	4b2d      	ldr	r3, [pc, #180]	; (80008e4 <SystemClock_Config+0xf8>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000834:	4a2b      	ldr	r2, [pc, #172]	; (80008e4 <SystemClock_Config+0xf8>)
 8000836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <SystemClock_Config+0xf8>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000848:	bf00      	nop
 800084a:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <SystemClock_Config+0xf8>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000856:	d1f8      	bne.n	800084a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000858:	2301      	movs	r3, #1
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800085c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000866:	2302      	movs	r3, #2
 8000868:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800086a:	2301      	movs	r3, #1
 800086c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800086e:	2312      	movs	r3, #18
 8000870:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800087a:	2302      	movs	r3, #2
 800087c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800087e:	230c      	movs	r3, #12
 8000880:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000882:	2302      	movs	r3, #2
 8000884:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000886:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800088a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000890:	4618      	mov	r0, r3
 8000892:	f002 ff83 	bl	800379c <HAL_RCC_OscConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800089c:	f000 fb68 	bl	8000f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a0:	233f      	movs	r3, #63	; 0x3f
 80008a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a4:	2303      	movs	r3, #3
 80008a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008b0:	2340      	movs	r3, #64	; 0x40
 80008b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008b4:	2340      	movs	r3, #64	; 0x40
 80008b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008be:	2340      	movs	r3, #64	; 0x40
 80008c0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2101      	movs	r1, #1
 80008c6:	4618      	mov	r0, r3
 80008c8:	f003 fbc2 	bl	8004050 <HAL_RCC_ClockConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80008d2:	f000 fb4d 	bl	8000f70 <Error_Handler>
  }
}
 80008d6:	bf00      	nop
 80008d8:	3770      	adds	r7, #112	; 0x70
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	58000400 	.word	0x58000400
 80008e4:	58024800 	.word	0x58024800

080008e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ee:	f107 0310 	add.w	r3, r7, #16
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <MX_TIM2_Init+0x94>)
 8000908:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800090c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800090e:	4b1b      	ldr	r3, [pc, #108]	; (800097c <MX_TIM2_Init+0x94>)
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000914:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_TIM2_Init+0x94>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <MX_TIM2_Init+0x94>)
 800091c:	2201      	movs	r2, #1
 800091e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_TIM2_Init+0x94>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_TIM2_Init+0x94>)
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800092c:	4813      	ldr	r0, [pc, #76]	; (800097c <MX_TIM2_Init+0x94>)
 800092e:	f005 fd47 	bl	80063c0 <HAL_TIM_Base_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000938:	f000 fb1a 	bl	8000f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000940:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	4619      	mov	r1, r3
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <MX_TIM2_Init+0x94>)
 800094a:	f006 f999 	bl	8006c80 <HAL_TIM_ConfigClockSource>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000954:	f000 fb0c 	bl	8000f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_TIM2_Init+0x94>)
 8000966:	f006 feeb 	bl	8007740 <HAL_TIMEx_MasterConfigSynchronization>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000970:	f000 fafe 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	3720      	adds	r7, #32
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2400002c 	.word	0x2400002c

08000980 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08e      	sub	sp, #56	; 0x38
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a0:	463b      	mov	r3, r7
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
 80009ae:	615a      	str	r2, [r3, #20]
 80009b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009b2:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <MX_TIM3_Init+0xe0>)
 80009b4:	4a2b      	ldr	r2, [pc, #172]	; (8000a64 <MX_TIM3_Init+0xe4>)
 80009b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80009b8:	4b29      	ldr	r3, [pc, #164]	; (8000a60 <MX_TIM3_Init+0xe0>)
 80009ba:	2263      	movs	r2, #99	; 0x63
 80009bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <MX_TIM3_Init+0xe0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5;
 80009c4:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <MX_TIM3_Init+0xe0>)
 80009c6:	2205      	movs	r2, #5
 80009c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ca:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <MX_TIM3_Init+0xe0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009d0:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <MX_TIM3_Init+0xe0>)
 80009d2:	2280      	movs	r2, #128	; 0x80
 80009d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009d6:	4822      	ldr	r0, [pc, #136]	; (8000a60 <MX_TIM3_Init+0xe0>)
 80009d8:	f005 fcf2 	bl	80063c0 <HAL_TIM_Base_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80009e2:	f000 fac5 	bl	8000f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f0:	4619      	mov	r1, r3
 80009f2:	481b      	ldr	r0, [pc, #108]	; (8000a60 <MX_TIM3_Init+0xe0>)
 80009f4:	f006 f944 	bl	8006c80 <HAL_TIM_ConfigClockSource>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80009fe:	f000 fab7 	bl	8000f70 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000a02:	4817      	ldr	r0, [pc, #92]	; (8000a60 <MX_TIM3_Init+0xe0>)
 8000a04:	f005 fe4b 	bl	800669e <HAL_TIM_OC_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a0e:	f000 faaf 	bl	8000f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480f      	ldr	r0, [pc, #60]	; (8000a60 <MX_TIM3_Init+0xe0>)
 8000a22:	f006 fe8d 	bl	8007740 <HAL_TIMEx_MasterConfigSynchronization>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a2c:	f000 faa0 	bl	8000f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a30:	2300      	movs	r3, #0
 8000a32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	2200      	movs	r2, #0
 8000a44:	4619      	mov	r1, r3
 8000a46:	4806      	ldr	r0, [pc, #24]	; (8000a60 <MX_TIM3_Init+0xe0>)
 8000a48:	f006 f8a0 	bl	8006b8c <HAL_TIM_OC_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000a52:	f000 fa8d 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	3738      	adds	r7, #56	; 0x38
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	24000078 	.word	0x24000078
 8000a64:	40000400 	.word	0x40000400

08000a68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a6c:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a6e:	4a23      	ldr	r2, [pc, #140]	; (8000afc <MX_USART3_UART_Init+0x94>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_USART3_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_USART3_UART_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <MX_USART3_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ab0:	4811      	ldr	r0, [pc, #68]	; (8000af8 <MX_USART3_UART_Init+0x90>)
 8000ab2:	f006 fef1 	bl	8007898 <HAL_UART_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000abc:	f000 fa58 	bl	8000f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_USART3_UART_Init+0x90>)
 8000ac4:	f007 fef9 	bl	80088ba <HAL_UARTEx_SetTxFifoThreshold>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ace:	f000 fa4f 	bl	8000f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4808      	ldr	r0, [pc, #32]	; (8000af8 <MX_USART3_UART_Init+0x90>)
 8000ad6:	f007 ff2e 	bl	8008936 <HAL_UARTEx_SetRxFifoThreshold>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ae0:	f000 fa46 	bl	8000f70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <MX_USART3_UART_Init+0x90>)
 8000ae6:	f007 feaf 	bl	8008848 <HAL_UARTEx_DisableFifoMode>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000af0:	f000 fa3e 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2400013c 	.word	0x2400013c
 8000afc:	40004800 	.word	0x40004800

08000b00 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b06:	4a16      	ldr	r2, [pc, #88]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b08:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b0c:	2209      	movs	r2, #9
 8000b0e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b12:	2202      	movs	r2, #2
 8000b14:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b1e:	2202      	movs	r2, #2
 8000b20:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b48:	f002 fc8e 	bl	8003468 <HAL_PCD_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b52:	f000 fa0d 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	240001d0 	.word	0x240001d0
 8000b60:	40080000 	.word	0x40080000

08000b64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <MX_DMA_Init+0x3c>)
 8000b6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b70:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <MX_DMA_Init+0x3c>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_DMA_Init+0x3c>)
 8000b7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	200b      	movs	r0, #11
 8000b8e:	f000 fd7c 	bl	800168a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b92:	200b      	movs	r0, #11
 8000b94:	f000 fd93 	bl	80016be <HAL_NVIC_EnableIRQ>

}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	58024400 	.word	0x58024400

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	; 0x30
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4b64      	ldr	r3, [pc, #400]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	4a62      	ldr	r2, [pc, #392]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bca:	4b60      	ldr	r3, [pc, #384]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	61bb      	str	r3, [r7, #24]
 8000bd6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd8:	4b5c      	ldr	r3, [pc, #368]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bde:	4a5b      	ldr	r2, [pc, #364]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be8:	4b58      	ldr	r3, [pc, #352]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b55      	ldr	r3, [pc, #340]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	4a53      	ldr	r2, [pc, #332]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c06:	4b51      	ldr	r3, [pc, #324]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c14:	4b4d      	ldr	r3, [pc, #308]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	4a4c      	ldr	r2, [pc, #304]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c24:	4b49      	ldr	r3, [pc, #292]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c32:	4b46      	ldr	r3, [pc, #280]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	4a44      	ldr	r2, [pc, #272]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000c3a:	f043 0310 	orr.w	r3, r3, #16
 8000c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c42:	4b42      	ldr	r3, [pc, #264]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	f003 0310 	and.w	r3, r3, #16
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c50:	4b3e      	ldr	r3, [pc, #248]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	4a3d      	ldr	r2, [pc, #244]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c60:	4b3a      	ldr	r3, [pc, #232]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c6e:	4b37      	ldr	r3, [pc, #220]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c74:	4a35      	ldr	r2, [pc, #212]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7e:	4b33      	ldr	r3, [pc, #204]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c92:	482f      	ldr	r0, [pc, #188]	; (8000d50 <MX_GPIO_Init+0x1ac>)
 8000c94:	f002 fba0 	bl	80033d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f248 0103 	movw	r1, #32771	; 0x8003
 8000c9e:	482d      	ldr	r0, [pc, #180]	; (8000d54 <MX_GPIO_Init+0x1b0>)
 8000ca0:	f002 fb9a 	bl	80033d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ca4:	2332      	movs	r3, #50	; 0x32
 8000ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb4:	230b      	movs	r3, #11
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4826      	ldr	r0, [pc, #152]	; (8000d58 <MX_GPIO_Init+0x1b4>)
 8000cc0:	f002 f9da 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000cc4:	2386      	movs	r3, #134	; 0x86
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd4:	230b      	movs	r3, #11
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	481f      	ldr	r0, [pc, #124]	; (8000d5c <MX_GPIO_Init+0x1b8>)
 8000ce0:	f002 f9ca 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000ce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ce8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4814      	ldr	r0, [pc, #80]	; (8000d50 <MX_GPIO_Init+0x1ac>)
 8000cfe:	f002 f9bb 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8000d02:	f248 0303 	movw	r3, #32771	; 0x8003
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480e      	ldr	r0, [pc, #56]	; (8000d54 <MX_GPIO_Init+0x1b0>)
 8000d1c:	f002 f9ac 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d20:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d32:	230b      	movs	r3, #11
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d36:	f107 031c 	add.w	r3, r7, #28
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4808      	ldr	r0, [pc, #32]	; (8000d60 <MX_GPIO_Init+0x1bc>)
 8000d3e:	f002 f99b 	bl	8003078 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d42:	bf00      	nop
 8000d44:	3730      	adds	r7, #48	; 0x30
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	58024400 	.word	0x58024400
 8000d50:	58020400 	.word	0x58020400
 8000d54:	58021000 	.word	0x58021000
 8000d58:	58020800 	.word	0x58020800
 8000d5c:	58020000 	.word	0x58020000
 8000d60:	58021800 	.word	0x58021800

08000d64 <endof_scan_line>:

/* USER CODE BEGIN 4 */
void endof_scan_line(DMA_HandleTypeDef* _hdma){
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

	GPIOB->ODR = 0x00;
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <endof_scan_line+0x70>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <endof_scan_line+0x74>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <endof_scan_line+0x78>)
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d903      	bls.n	8000d86 <endof_scan_line+0x22>
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <endof_scan_line+0x7c>)
 8000d80:	2220      	movs	r2, #32
 8000d82:	605a      	str	r2, [r3, #4]

	// Setup for Hsync sequence

	return;
 8000d84:	e021      	b.n	8000dca <endof_scan_line+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <endof_scan_line+0x74>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <endof_scan_line+0x80>)
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d903      	bls.n	8000d9a <endof_scan_line+0x36>
 8000d92:	4a15      	ldr	r2, [pc, #84]	; (8000de8 <endof_scan_line+0x84>)
 8000d94:	2320      	movs	r3, #32
 8000d96:	60d3      	str	r3, [r2, #12]
	return;
 8000d98:	e017      	b.n	8000dca <endof_scan_line+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <endof_scan_line+0x74>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <endof_scan_line+0x88>)
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d903      	bls.n	8000dae <endof_scan_line+0x4a>
 8000da6:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <endof_scan_line+0x84>)
 8000da8:	2320      	movs	r3, #32
 8000daa:	6093      	str	r3, [r2, #8]
	return;
 8000dac:	e00d      	b.n	8000dca <endof_scan_line+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <endof_scan_line+0x74>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <endof_scan_line+0x8c>)
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d903      	bls.n	8000dc2 <endof_scan_line+0x5e>
 8000dba:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <endof_scan_line+0x90>)
 8000dbc:	2320      	movs	r3, #32
 8000dbe:	60d3      	str	r3, [r2, #12]
	return;
 8000dc0:	e003      	b.n	8000dca <endof_scan_line+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000dc2:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <endof_scan_line+0x90>)
 8000dc4:	2320      	movs	r3, #32
 8000dc6:	6093      	str	r3, [r2, #8]
	return;
 8000dc8:	bf00      	nop
}
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	58020400 	.word	0x58020400
 8000dd8:	240000c4 	.word	0x240000c4
 8000ddc:	400204b8 	.word	0x400204b8
 8000de0:	58025400 	.word	0x58025400
 8000de4:	40020458 	.word	0x40020458
 8000de8:	40020400 	.word	0x40020400
 8000dec:	400200b8 	.word	0x400200b8
 8000df0:	40020058 	.word	0x40020058
 8000df4:	40020000 	.word	0x40020000

08000df8 <start_Hsync_Sequence>:

void start_Hsync_Sequence(){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0


	// Setup presecaler
//	TIM2->PSC = 0;
	TIM2->PSC = 99;
 8000dfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e00:	2263      	movs	r2, #99	; 0x63
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28


	// Setup first sequence

	// Setup pulse sequence
	pulse_iter = 0;
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <start_Hsync_Sequence+0x24>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	801a      	strh	r2, [r3, #0]

	GPIOB->ODR = 0xffff;
 8000e0a:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <start_Hsync_Sequence+0x28>)
 8000e0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e10:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start_IT(&htim2);
 8000e12:	4804      	ldr	r0, [pc, #16]	; (8000e24 <start_Hsync_Sequence+0x2c>)
 8000e14:	f005 fb9c 	bl	8006550 <HAL_TIM_Base_Start_IT>

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	240006b4 	.word	0x240006b4
 8000e20:	58020400 	.word	0x58020400
 8000e24:	2400002c 	.word	0x2400002c

08000e28 <start_Vsync_Sequence>:


void start_Vsync_Sequence(){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0


	// Setup presecaler
	TIM2->PSC = 0;
 8000e2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e30:	2200      	movs	r2, #0
 8000e32:	629a      	str	r2, [r3, #40]	; 0x28

	// Setup first sequence


	// Setup pulse sequence
	pulse_iter = 0x10;
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <start_Vsync_Sequence+0x24>)
 8000e36:	2210      	movs	r2, #16
 8000e38:	801a      	strh	r2, [r3, #0]


	GPIOB->ODR = 0xffff;
 8000e3a:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <start_Vsync_Sequence+0x28>)
 8000e3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e40:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start_IT(&htim2);
 8000e42:	4804      	ldr	r0, [pc, #16]	; (8000e54 <start_Vsync_Sequence+0x2c>)
 8000e44:	f005 fb84 	bl	8006550 <HAL_TIM_Base_Start_IT>
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	240006b4 	.word	0x240006b4
 8000e50:	58020400 	.word	0x58020400
 8000e54:	2400002c 	.word	0x2400002c

08000e58 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

	if(htim == &htim2){
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a3e      	ldr	r2, [pc, #248]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d175      	bne.n	8000f54 <HAL_TIM_PeriodElapsedCallback+0xfc>

		if (pulse_iter == 0x00){
 8000e68:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d108      	bne.n	8000e82 <HAL_TIM_PeriodElapsedCallback+0x2a>
			GPIOE->ODR = 0x8001;
 8000e70:	4b3c      	ldr	r3, [pc, #240]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000e72:	f248 0201 	movw	r2, #32769	; 0x8001
 8000e76:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 45;
 8000e78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e7c:	222d      	movs	r2, #45	; 0x2d
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e80:	e062      	b.n	8000f48 <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
		else if (pulse_iter == 0x01){
 8000e82:	4b37      	ldr	r3, [pc, #220]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d109      	bne.n	8000e9e <HAL_TIM_PeriodElapsedCallback+0x46>
			GPIOE->ODR = 0x8001;
 8000e8a:	4b36      	ldr	r3, [pc, #216]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000e8c:	f248 0201 	movw	r2, #32769	; 0x8001
 8000e90:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 285;
 8000e92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e96:	f240 121d 	movw	r2, #285	; 0x11d
 8000e9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e9c:	e054      	b.n	8000f48 <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
		else if (pulse_iter == 0x02){
 8000e9e:	4b30      	ldr	r3, [pc, #192]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d107      	bne.n	8000eb6 <HAL_TIM_PeriodElapsedCallback+0x5e>

			GPIOE->ODR = 0x0001;
 8000ea6:	4b2f      	ldr	r3, [pc, #188]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 143;
 8000eac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eb0:	228f      	movs	r2, #143	; 0x8f
 8000eb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eb4:	e048      	b.n	8000f48 <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
		else if (pulse_iter == 0x03){
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	2b03      	cmp	r3, #3
 8000ebc:	d108      	bne.n	8000ed0 <HAL_TIM_PeriodElapsedCallback+0x78>

			GPIOE->ODR = 0x8001;
 8000ebe:	4b29      	ldr	r3, [pc, #164]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ec0:	f248 0201 	movw	r2, #32769	; 0x8001
 8000ec4:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 1;
 8000ec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eca:	2201      	movs	r2, #1
 8000ecc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ece:	e03b      	b.n	8000f48 <HAL_TIM_PeriodElapsedCallback+0xf0>
		}


		else if (pulse_iter == 0x10){
 8000ed0:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	2b10      	cmp	r3, #16
 8000ed6:	d109      	bne.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x94>
			GPIOE->ODR = 0x8001;
 8000ed8:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000eda:	f248 0201 	movw	r2, #32769	; 0x8001
 8000ede:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 23827;
 8000ee0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee4:	f645 5213 	movw	r2, #23827	; 0x5d13
 8000ee8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eea:	e02d      	b.n	8000f48 <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
		else if (pulse_iter == 0x11){
 8000eec:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	2b11      	cmp	r3, #17
 8000ef2:	d109      	bne.n	8000f08 <HAL_TIM_PeriodElapsedCallback+0xb0>
			GPIOE->ODR = 0x8001;
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ef6:	f248 0201 	movw	r2, #32769	; 0x8001
 8000efa:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 4751;
 8000efc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f00:	f241 228f 	movw	r2, #4751	; 0x128f
 8000f04:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f06:	e01f      	b.n	8000f48 <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
		else if (pulse_iter == 0x12){
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	2b12      	cmp	r3, #18
 8000f0e:	d108      	bne.n	8000f22 <HAL_TIM_PeriodElapsedCallback+0xca>
			GPIOE->ODR = 0x8000;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f12:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f16:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 78675;
 8000f18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f1c:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f20:	e012      	b.n	8000f48 <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
		else if (pulse_iter == 0x13){
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	2b13      	cmp	r3, #19
 8000f28:	d108      	bne.n	8000f3c <HAL_TIM_PeriodElapsedCallback+0xe4>
			GPIOE->ODR = 0x8001;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f2c:	f248 0201 	movw	r2, #32769	; 0x8001
 8000f30:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 1;
 8000f32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f36:	2201      	movs	r2, #1
 8000f38:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f3a:	e005      	b.n	8000f48 <HAL_TIM_PeriodElapsedCallback+0xf0>
		}



		else{
			HAL_TIM_Base_Stop_IT(&htim2);
 8000f3c:	4807      	ldr	r0, [pc, #28]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f3e:	f005 fb7f 	bl	8006640 <HAL_TIM_Base_Stop_IT>
			GPIOB->ODR = 0x0000;
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	615a      	str	r2, [r3, #20]

		}

//		TIM2->ARR = pulse_sequence[pulse_iter];
		pulse_iter++;
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f52:	801a      	strh	r2, [r3, #0]


	}

}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2400002c 	.word	0x2400002c
 8000f60:	240006b4 	.word	0x240006b4
 8000f64:	58021000 	.word	0x58021000
 8000f68:	00013353 	.word	0x00013353
 8000f6c:	58020400 	.word	0x58020400

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
}
 8000f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <Error_Handler+0x8>
	...

08000f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_MspInit+0x30>)
 8000f84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f88:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_MspInit+0x30>)
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_MspInit+0x30>)
 8000f94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	58024400 	.word	0x58024400

08000fb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc0:	d117      	bne.n	8000ff2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fc2:	4b30      	ldr	r3, [pc, #192]	; (8001084 <HAL_TIM_Base_MspInit+0xd4>)
 8000fc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fc8:	4a2e      	ldr	r2, [pc, #184]	; (8001084 <HAL_TIM_Base_MspInit+0xd4>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fd2:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <HAL_TIM_Base_MspInit+0xd4>)
 8000fd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	201c      	movs	r0, #28
 8000fe6:	f000 fb50 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fea:	201c      	movs	r0, #28
 8000fec:	f000 fb67 	bl	80016be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ff0:	e043      	b.n	800107a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a24      	ldr	r2, [pc, #144]	; (8001088 <HAL_TIM_Base_MspInit+0xd8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d13e      	bne.n	800107a <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <HAL_TIM_Base_MspInit+0xd4>)
 8000ffe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001002:	4a20      	ldr	r2, [pc, #128]	; (8001084 <HAL_TIM_Base_MspInit+0xd4>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <HAL_TIM_Base_MspInit+0xd4>)
 800100e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1.Instance = DMA1_Stream0;
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <HAL_TIM_Base_MspInit+0xdc>)
 800101c:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <HAL_TIM_Base_MspInit+0xe0>)
 800101e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <HAL_TIM_Base_MspInit+0xdc>)
 8001022:	2217      	movs	r2, #23
 8001024:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_TIM_Base_MspInit+0xdc>)
 8001028:	2240      	movs	r2, #64	; 0x40
 800102a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <HAL_TIM_Base_MspInit+0xdc>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_TIM_Base_MspInit+0xdc>)
 8001034:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001038:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <HAL_TIM_Base_MspInit+0xdc>)
 800103c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001040:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001042:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_TIM_Base_MspInit+0xdc>)
 8001044:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001048:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <HAL_TIM_Base_MspInit+0xdc>)
 800104c:	2200      	movs	r2, #0
 800104e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_TIM_Base_MspInit+0xdc>)
 8001052:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001056:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <HAL_TIM_Base_MspInit+0xdc>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800105e:	480b      	ldr	r0, [pc, #44]	; (800108c <HAL_TIM_Base_MspInit+0xdc>)
 8001060:	f000 fb48 	bl	80016f4 <HAL_DMA_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_TIM_Base_MspInit+0xbe>
      Error_Handler();
 800106a:	f7ff ff81 	bl	8000f70 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a06      	ldr	r2, [pc, #24]	; (800108c <HAL_TIM_Base_MspInit+0xdc>)
 8001072:	625a      	str	r2, [r3, #36]	; 0x24
 8001074:	4a05      	ldr	r2, [pc, #20]	; (800108c <HAL_TIM_Base_MspInit+0xdc>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6393      	str	r3, [r2, #56]	; 0x38
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	58024400 	.word	0x58024400
 8001088:	40000400 	.word	0x40000400
 800108c:	240000c4 	.word	0x240000c4
 8001090:	40020010 	.word	0x40020010

08001094 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b0ba      	sub	sp, #232	; 0xe8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	22c0      	movs	r2, #192	; 0xc0
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f007 ffd2 	bl	800905e <memset>
  if(huart->Instance==USART3)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a27      	ldr	r2, [pc, #156]	; (800115c <HAL_UART_MspInit+0xc8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d146      	bne.n	8001152 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010c4:	f04f 0202 	mov.w	r2, #2
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 fb44 	bl	8004768 <HAL_RCCEx_PeriphCLKConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010e6:	f7ff ff43 	bl	8000f70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <HAL_UART_MspInit+0xcc>)
 80010ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010f0:	4a1b      	ldr	r2, [pc, #108]	; (8001160 <HAL_UART_MspInit+0xcc>)
 80010f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_UART_MspInit+0xcc>)
 80010fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001100:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_UART_MspInit+0xcc>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110e:	4a14      	ldr	r2, [pc, #80]	; (8001160 <HAL_UART_MspInit+0xcc>)
 8001110:	f043 0308 	orr.w	r3, r3, #8
 8001114:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <HAL_UART_MspInit+0xcc>)
 800111a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001126:	f44f 7340 	mov.w	r3, #768	; 0x300
 800112a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001140:	2307      	movs	r3, #7
 8001142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001146:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <HAL_UART_MspInit+0xd0>)
 800114e:	f001 ff93 	bl	8003078 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001152:	bf00      	nop
 8001154:	37e8      	adds	r7, #232	; 0xe8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40004800 	.word	0x40004800
 8001160:	58024400 	.word	0x58024400
 8001164:	58020c00 	.word	0x58020c00

08001168 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0ba      	sub	sp, #232	; 0xe8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	22c0      	movs	r2, #192	; 0xc0
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f007 ff68 	bl	800905e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a38      	ldr	r2, [pc, #224]	; (8001274 <HAL_PCD_MspInit+0x10c>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d169      	bne.n	800126c <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001198:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800119c:	f04f 0300 	mov.w	r3, #0
 80011a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80011a8:	2312      	movs	r3, #18
 80011aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80011b0:	2303      	movs	r3, #3
 80011b2:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80011b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80011be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011c2:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80011c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	4618      	mov	r0, r3
 80011d2:	f003 fac9 	bl	8004768 <HAL_RCCEx_PeriphCLKConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 80011dc:	f7ff fec8 	bl	8000f70 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80011e0:	f002 facc 	bl	800377c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <HAL_PCD_MspInit+0x110>)
 80011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ea:	4a23      	ldr	r2, [pc, #140]	; (8001278 <HAL_PCD_MspInit+0x110>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <HAL_PCD_MspInit+0x110>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001202:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001206:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800121c:	230a      	movs	r3, #10
 800121e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001226:	4619      	mov	r1, r3
 8001228:	4814      	ldr	r0, [pc, #80]	; (800127c <HAL_PCD_MspInit+0x114>)
 800122a:	f001 ff25 	bl	8003078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800122e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001232:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001246:	4619      	mov	r1, r3
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <HAL_PCD_MspInit+0x114>)
 800124a:	f001 ff15 	bl	8003078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_PCD_MspInit+0x110>)
 8001250:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001254:	4a08      	ldr	r2, [pc, #32]	; (8001278 <HAL_PCD_MspInit+0x110>)
 8001256:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800125a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_PCD_MspInit+0x110>)
 8001260:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800126c:	bf00      	nop
 800126e:	37e8      	adds	r7, #232	; 0xe8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40080000 	.word	0x40080000
 8001278:	58024400 	.word	0x58024400
 800127c:	58020000 	.word	0x58020000

08001280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <NMI_Handler+0x4>

08001286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <HardFault_Handler+0x4>

0800128c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <MemManage_Handler+0x4>

08001292 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001296:	e7fe      	b.n	8001296 <BusFault_Handler+0x4>

08001298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800129c:	e7fe      	b.n	800129c <UsageFault_Handler+0x4>

0800129e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012cc:	f000 f8b2 	bl	8001434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <DMA1_Stream0_IRQHandler+0x10>)
 80012da:	f000 fd67 	bl	8001dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	240000c4 	.word	0x240000c4

080012e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <TIM2_IRQHandler+0x10>)
 80012ee:	f005 fb45 	bl	800697c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2400002c 	.word	0x2400002c

080012fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001334 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001300:	f7ff f968 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001306:	490d      	ldr	r1, [pc, #52]	; (800133c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800131c:	4c0a      	ldr	r4, [pc, #40]	; (8001348 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132a:	f007 fea1 	bl	8009070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800132e:	f7ff f9e7 	bl	8000700 <main>
  bx  lr
 8001332:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001334:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001338:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800133c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001340:	08009120 	.word	0x08009120
  ldr r2, =_sbss
 8001344:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001348:	240006bc 	.word	0x240006bc

0800134c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC3_IRQHandler>
	...

08001350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001356:	2003      	movs	r0, #3
 8001358:	f000 f98c 	bl	8001674 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800135c:	f003 f82e 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 8001360:	4602      	mov	r2, r0
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_Init+0x68>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	0a1b      	lsrs	r3, r3, #8
 8001368:	f003 030f 	and.w	r3, r3, #15
 800136c:	4913      	ldr	r1, [pc, #76]	; (80013bc <HAL_Init+0x6c>)
 800136e:	5ccb      	ldrb	r3, [r1, r3]
 8001370:	f003 031f 	and.w	r3, r3, #31
 8001374:	fa22 f303 	lsr.w	r3, r2, r3
 8001378:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_Init+0x68>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_Init+0x6c>)
 8001384:	5cd3      	ldrb	r3, [r2, r3]
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	fa22 f303 	lsr.w	r3, r2, r3
 8001390:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <HAL_Init+0x70>)
 8001392:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001394:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <HAL_Init+0x74>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800139a:	2000      	movs	r0, #0
 800139c:	f000 f814 	bl	80013c8 <HAL_InitTick>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e002      	b.n	80013b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013aa:	f7ff fde7 	bl	8000f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	58024400 	.word	0x58024400
 80013bc:	080090d0 	.word	0x080090d0
 80013c0:	24000004 	.word	0x24000004
 80013c4:	24000000 	.word	0x24000000

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_InitTick+0x60>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e021      	b.n	8001420 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <HAL_InitTick+0x64>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <HAL_InitTick+0x60>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 f971 	bl	80016da <HAL_SYSTICK_Config>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e00e      	b.n	8001420 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b0f      	cmp	r3, #15
 8001406:	d80a      	bhi.n	800141e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001408:	2200      	movs	r2, #0
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	f000 f93b 	bl	800168a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001414:	4a06      	ldr	r2, [pc, #24]	; (8001430 <HAL_InitTick+0x68>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	e000      	b.n	8001420 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	2400000c 	.word	0x2400000c
 800142c:	24000000 	.word	0x24000000
 8001430:	24000008 	.word	0x24000008

08001434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_IncTick+0x20>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_IncTick+0x24>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4413      	add	r3, r2
 8001444:	4a04      	ldr	r2, [pc, #16]	; (8001458 <HAL_IncTick+0x24>)
 8001446:	6013      	str	r3, [r2, #0]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	2400000c 	.word	0x2400000c
 8001458:	240006b8 	.word	0x240006b8

0800145c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return uwTick;
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <HAL_GetTick+0x14>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	240006b8 	.word	0x240006b8

08001474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800147c:	f7ff ffee 	bl	800145c <HAL_GetTick>
 8001480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148c:	d005      	beq.n	800149a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <HAL_Delay+0x44>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4413      	add	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800149a:	bf00      	nop
 800149c:	f7ff ffde 	bl	800145c <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d8f7      	bhi.n	800149c <HAL_Delay+0x28>
  {
  }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2400000c 	.word	0x2400000c

080014bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_GetREVID+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	0c1b      	lsrs	r3, r3, #16
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	5c001000 	.word	0x5c001000

080014d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <__NVIC_SetPriorityGrouping+0x40>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f0:	4013      	ands	r3, r2
 80014f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <__NVIC_SetPriorityGrouping+0x40>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00
 8001518:	05fa0000 	.word	0x05fa0000

0800151c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <__NVIC_GetPriorityGrouping+0x18>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	f003 0307 	and.w	r3, r3, #7
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001546:	2b00      	cmp	r3, #0
 8001548:	db0b      	blt.n	8001562 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	f003 021f 	and.w	r2, r3, #31
 8001550:	4907      	ldr	r1, [pc, #28]	; (8001570 <__NVIC_EnableIRQ+0x38>)
 8001552:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	2001      	movs	r0, #1
 800155a:	fa00 f202 	lsl.w	r2, r0, r2
 800155e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000e100 	.word	0xe000e100

08001574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001584:	2b00      	cmp	r3, #0
 8001586:	db0a      	blt.n	800159e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	b2da      	uxtb	r2, r3
 800158c:	490c      	ldr	r1, [pc, #48]	; (80015c0 <__NVIC_SetPriority+0x4c>)
 800158e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001592:	0112      	lsls	r2, r2, #4
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	440b      	add	r3, r1
 8001598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800159c:	e00a      	b.n	80015b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4908      	ldr	r1, [pc, #32]	; (80015c4 <__NVIC_SetPriority+0x50>)
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	3b04      	subs	r3, #4
 80015ac:	0112      	lsls	r2, r2, #4
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	440b      	add	r3, r1
 80015b2:	761a      	strb	r2, [r3, #24]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000e100 	.word	0xe000e100
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	; 0x24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f1c3 0307 	rsb	r3, r3, #7
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	bf28      	it	cs
 80015e6:	2304      	movcs	r3, #4
 80015e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3304      	adds	r3, #4
 80015ee:	2b06      	cmp	r3, #6
 80015f0:	d902      	bls.n	80015f8 <NVIC_EncodePriority+0x30>
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3b03      	subs	r3, #3
 80015f6:	e000      	b.n	80015fa <NVIC_EncodePriority+0x32>
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	401a      	ands	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001610:	f04f 31ff 	mov.w	r1, #4294967295
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	43d9      	mvns	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	4313      	orrs	r3, r2
         );
}
 8001622:	4618      	mov	r0, r3
 8001624:	3724      	adds	r7, #36	; 0x24
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001640:	d301      	bcc.n	8001646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001642:	2301      	movs	r3, #1
 8001644:	e00f      	b.n	8001666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <SysTick_Config+0x40>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164e:	210f      	movs	r1, #15
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	f7ff ff8e 	bl	8001574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <SysTick_Config+0x40>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <SysTick_Config+0x40>)
 8001660:	2207      	movs	r2, #7
 8001662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	e000e010 	.word	0xe000e010

08001674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ff29 	bl	80014d4 <__NVIC_SetPriorityGrouping>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
 8001696:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001698:	f7ff ff40 	bl	800151c <__NVIC_GetPriorityGrouping>
 800169c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	6978      	ldr	r0, [r7, #20]
 80016a4:	f7ff ff90 	bl	80015c8 <NVIC_EncodePriority>
 80016a8:	4602      	mov	r2, r0
 80016aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff5f 	bl	8001574 <__NVIC_SetPriority>
}
 80016b6:	bf00      	nop
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff33 	bl	8001538 <__NVIC_EnableIRQ>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffa4 	bl	8001630 <SysTick_Config>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80016fc:	f7ff feae 	bl	800145c <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e316      	b.n	8001d3a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a66      	ldr	r2, [pc, #408]	; (80018ac <HAL_DMA_Init+0x1b8>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d04a      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a65      	ldr	r2, [pc, #404]	; (80018b0 <HAL_DMA_Init+0x1bc>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d045      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a63      	ldr	r2, [pc, #396]	; (80018b4 <HAL_DMA_Init+0x1c0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d040      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a62      	ldr	r2, [pc, #392]	; (80018b8 <HAL_DMA_Init+0x1c4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d03b      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a60      	ldr	r2, [pc, #384]	; (80018bc <HAL_DMA_Init+0x1c8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d036      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a5f      	ldr	r2, [pc, #380]	; (80018c0 <HAL_DMA_Init+0x1cc>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d031      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a5d      	ldr	r2, [pc, #372]	; (80018c4 <HAL_DMA_Init+0x1d0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d02c      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a5c      	ldr	r2, [pc, #368]	; (80018c8 <HAL_DMA_Init+0x1d4>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d027      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a5a      	ldr	r2, [pc, #360]	; (80018cc <HAL_DMA_Init+0x1d8>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d022      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a59      	ldr	r2, [pc, #356]	; (80018d0 <HAL_DMA_Init+0x1dc>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d01d      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a57      	ldr	r2, [pc, #348]	; (80018d4 <HAL_DMA_Init+0x1e0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d018      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a56      	ldr	r2, [pc, #344]	; (80018d8 <HAL_DMA_Init+0x1e4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d013      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a54      	ldr	r2, [pc, #336]	; (80018dc <HAL_DMA_Init+0x1e8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d00e      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a53      	ldr	r2, [pc, #332]	; (80018e0 <HAL_DMA_Init+0x1ec>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d009      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a51      	ldr	r2, [pc, #324]	; (80018e4 <HAL_DMA_Init+0x1f0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d004      	beq.n	80017ac <HAL_DMA_Init+0xb8>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a50      	ldr	r2, [pc, #320]	; (80018e8 <HAL_DMA_Init+0x1f4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d101      	bne.n	80017b0 <HAL_DMA_Init+0xbc>
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <HAL_DMA_Init+0xbe>
 80017b0:	2300      	movs	r3, #0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 813b 	beq.w	8001a2e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2202      	movs	r2, #2
 80017bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a37      	ldr	r2, [pc, #220]	; (80018ac <HAL_DMA_Init+0x1b8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d04a      	beq.n	8001868 <HAL_DMA_Init+0x174>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a36      	ldr	r2, [pc, #216]	; (80018b0 <HAL_DMA_Init+0x1bc>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d045      	beq.n	8001868 <HAL_DMA_Init+0x174>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a34      	ldr	r2, [pc, #208]	; (80018b4 <HAL_DMA_Init+0x1c0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d040      	beq.n	8001868 <HAL_DMA_Init+0x174>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a33      	ldr	r2, [pc, #204]	; (80018b8 <HAL_DMA_Init+0x1c4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d03b      	beq.n	8001868 <HAL_DMA_Init+0x174>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a31      	ldr	r2, [pc, #196]	; (80018bc <HAL_DMA_Init+0x1c8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d036      	beq.n	8001868 <HAL_DMA_Init+0x174>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a30      	ldr	r2, [pc, #192]	; (80018c0 <HAL_DMA_Init+0x1cc>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d031      	beq.n	8001868 <HAL_DMA_Init+0x174>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a2e      	ldr	r2, [pc, #184]	; (80018c4 <HAL_DMA_Init+0x1d0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d02c      	beq.n	8001868 <HAL_DMA_Init+0x174>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a2d      	ldr	r2, [pc, #180]	; (80018c8 <HAL_DMA_Init+0x1d4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d027      	beq.n	8001868 <HAL_DMA_Init+0x174>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a2b      	ldr	r2, [pc, #172]	; (80018cc <HAL_DMA_Init+0x1d8>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d022      	beq.n	8001868 <HAL_DMA_Init+0x174>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a2a      	ldr	r2, [pc, #168]	; (80018d0 <HAL_DMA_Init+0x1dc>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d01d      	beq.n	8001868 <HAL_DMA_Init+0x174>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a28      	ldr	r2, [pc, #160]	; (80018d4 <HAL_DMA_Init+0x1e0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d018      	beq.n	8001868 <HAL_DMA_Init+0x174>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a27      	ldr	r2, [pc, #156]	; (80018d8 <HAL_DMA_Init+0x1e4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d013      	beq.n	8001868 <HAL_DMA_Init+0x174>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a25      	ldr	r2, [pc, #148]	; (80018dc <HAL_DMA_Init+0x1e8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d00e      	beq.n	8001868 <HAL_DMA_Init+0x174>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a24      	ldr	r2, [pc, #144]	; (80018e0 <HAL_DMA_Init+0x1ec>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d009      	beq.n	8001868 <HAL_DMA_Init+0x174>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a22      	ldr	r2, [pc, #136]	; (80018e4 <HAL_DMA_Init+0x1f0>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d004      	beq.n	8001868 <HAL_DMA_Init+0x174>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a21      	ldr	r2, [pc, #132]	; (80018e8 <HAL_DMA_Init+0x1f4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d108      	bne.n	800187a <HAL_DMA_Init+0x186>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0201 	bic.w	r2, r2, #1
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	e007      	b.n	800188a <HAL_DMA_Init+0x196>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0201 	bic.w	r2, r2, #1
 8001888:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800188a:	e02f      	b.n	80018ec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800188c:	f7ff fde6 	bl	800145c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b05      	cmp	r3, #5
 8001898:	d928      	bls.n	80018ec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2220      	movs	r2, #32
 800189e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2203      	movs	r2, #3
 80018a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e246      	b.n	8001d3a <HAL_DMA_Init+0x646>
 80018ac:	40020010 	.word	0x40020010
 80018b0:	40020028 	.word	0x40020028
 80018b4:	40020040 	.word	0x40020040
 80018b8:	40020058 	.word	0x40020058
 80018bc:	40020070 	.word	0x40020070
 80018c0:	40020088 	.word	0x40020088
 80018c4:	400200a0 	.word	0x400200a0
 80018c8:	400200b8 	.word	0x400200b8
 80018cc:	40020410 	.word	0x40020410
 80018d0:	40020428 	.word	0x40020428
 80018d4:	40020440 	.word	0x40020440
 80018d8:	40020458 	.word	0x40020458
 80018dc:	40020470 	.word	0x40020470
 80018e0:	40020488 	.word	0x40020488
 80018e4:	400204a0 	.word	0x400204a0
 80018e8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1c8      	bne.n	800188c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4b83      	ldr	r3, [pc, #524]	; (8001b14 <HAL_DMA_Init+0x420>)
 8001906:	4013      	ands	r3, r2
 8001908:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001912:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	4313      	orrs	r3, r2
 8001936:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	2b04      	cmp	r3, #4
 800193e:	d107      	bne.n	8001950 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	4313      	orrs	r3, r2
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	4313      	orrs	r3, r2
 800194e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001950:	4b71      	ldr	r3, [pc, #452]	; (8001b18 <HAL_DMA_Init+0x424>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b71      	ldr	r3, [pc, #452]	; (8001b1c <HAL_DMA_Init+0x428>)
 8001956:	4013      	ands	r3, r2
 8001958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800195c:	d328      	bcc.n	80019b0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b28      	cmp	r3, #40	; 0x28
 8001964:	d903      	bls.n	800196e <HAL_DMA_Init+0x27a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b2e      	cmp	r3, #46	; 0x2e
 800196c:	d917      	bls.n	800199e <HAL_DMA_Init+0x2aa>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b3e      	cmp	r3, #62	; 0x3e
 8001974:	d903      	bls.n	800197e <HAL_DMA_Init+0x28a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b42      	cmp	r3, #66	; 0x42
 800197c:	d90f      	bls.n	800199e <HAL_DMA_Init+0x2aa>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b46      	cmp	r3, #70	; 0x46
 8001984:	d903      	bls.n	800198e <HAL_DMA_Init+0x29a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b48      	cmp	r3, #72	; 0x48
 800198c:	d907      	bls.n	800199e <HAL_DMA_Init+0x2aa>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b4e      	cmp	r3, #78	; 0x4e
 8001994:	d905      	bls.n	80019a2 <HAL_DMA_Init+0x2ae>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b52      	cmp	r3, #82	; 0x52
 800199c:	d801      	bhi.n	80019a2 <HAL_DMA_Init+0x2ae>
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <HAL_DMA_Init+0x2b0>
 80019a2:	2300      	movs	r3, #0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019ae:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f023 0307 	bic.w	r3, r3, #7
 80019c6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d117      	bne.n	8001a0a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00e      	beq.n	8001a0a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f001 f9b9 	bl	8002d64 <DMA_CheckFifoParam>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2240      	movs	r2, #64	; 0x40
 80019fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e197      	b.n	8001d3a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f001 f8f4 	bl	8002c00 <DMA_CalcBaseAndBitshift>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	223f      	movs	r2, #63	; 0x3f
 8001a26:	409a      	lsls	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	e0cd      	b.n	8001bca <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a3b      	ldr	r2, [pc, #236]	; (8001b20 <HAL_DMA_Init+0x42c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d022      	beq.n	8001a7e <HAL_DMA_Init+0x38a>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a39      	ldr	r2, [pc, #228]	; (8001b24 <HAL_DMA_Init+0x430>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01d      	beq.n	8001a7e <HAL_DMA_Init+0x38a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a38      	ldr	r2, [pc, #224]	; (8001b28 <HAL_DMA_Init+0x434>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d018      	beq.n	8001a7e <HAL_DMA_Init+0x38a>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a36      	ldr	r2, [pc, #216]	; (8001b2c <HAL_DMA_Init+0x438>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_DMA_Init+0x38a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a35      	ldr	r2, [pc, #212]	; (8001b30 <HAL_DMA_Init+0x43c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d00e      	beq.n	8001a7e <HAL_DMA_Init+0x38a>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a33      	ldr	r2, [pc, #204]	; (8001b34 <HAL_DMA_Init+0x440>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d009      	beq.n	8001a7e <HAL_DMA_Init+0x38a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a32      	ldr	r2, [pc, #200]	; (8001b38 <HAL_DMA_Init+0x444>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d004      	beq.n	8001a7e <HAL_DMA_Init+0x38a>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a30      	ldr	r2, [pc, #192]	; (8001b3c <HAL_DMA_Init+0x448>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d101      	bne.n	8001a82 <HAL_DMA_Init+0x38e>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_DMA_Init+0x390>
 8001a82:	2300      	movs	r3, #0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 8097 	beq.w	8001bb8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a24      	ldr	r2, [pc, #144]	; (8001b20 <HAL_DMA_Init+0x42c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d021      	beq.n	8001ad8 <HAL_DMA_Init+0x3e4>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a22      	ldr	r2, [pc, #136]	; (8001b24 <HAL_DMA_Init+0x430>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d01c      	beq.n	8001ad8 <HAL_DMA_Init+0x3e4>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a21      	ldr	r2, [pc, #132]	; (8001b28 <HAL_DMA_Init+0x434>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d017      	beq.n	8001ad8 <HAL_DMA_Init+0x3e4>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a1f      	ldr	r2, [pc, #124]	; (8001b2c <HAL_DMA_Init+0x438>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d012      	beq.n	8001ad8 <HAL_DMA_Init+0x3e4>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a1e      	ldr	r2, [pc, #120]	; (8001b30 <HAL_DMA_Init+0x43c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d00d      	beq.n	8001ad8 <HAL_DMA_Init+0x3e4>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a1c      	ldr	r2, [pc, #112]	; (8001b34 <HAL_DMA_Init+0x440>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d008      	beq.n	8001ad8 <HAL_DMA_Init+0x3e4>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a1b      	ldr	r2, [pc, #108]	; (8001b38 <HAL_DMA_Init+0x444>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d003      	beq.n	8001ad8 <HAL_DMA_Init+0x3e4>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a19      	ldr	r2, [pc, #100]	; (8001b3c <HAL_DMA_Init+0x448>)
 8001ad6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_DMA_Init+0x44c>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b40      	cmp	r3, #64	; 0x40
 8001afe:	d021      	beq.n	8001b44 <HAL_DMA_Init+0x450>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b80      	cmp	r3, #128	; 0x80
 8001b06:	d102      	bne.n	8001b0e <HAL_DMA_Init+0x41a>
 8001b08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b0c:	e01b      	b.n	8001b46 <HAL_DMA_Init+0x452>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e019      	b.n	8001b46 <HAL_DMA_Init+0x452>
 8001b12:	bf00      	nop
 8001b14:	fe10803f 	.word	0xfe10803f
 8001b18:	5c001000 	.word	0x5c001000
 8001b1c:	ffff0000 	.word	0xffff0000
 8001b20:	58025408 	.word	0x58025408
 8001b24:	5802541c 	.word	0x5802541c
 8001b28:	58025430 	.word	0x58025430
 8001b2c:	58025444 	.word	0x58025444
 8001b30:	58025458 	.word	0x58025458
 8001b34:	5802546c 	.word	0x5802546c
 8001b38:	58025480 	.word	0x58025480
 8001b3c:	58025494 	.word	0x58025494
 8001b40:	fffe000f 	.word	0xfffe000f
 8001b44:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	68d2      	ldr	r2, [r2, #12]
 8001b4a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b74:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b6e      	ldr	r3, [pc, #440]	; (8001d44 <HAL_DMA_Init+0x650>)
 8001b8c:	4413      	add	r3, r2
 8001b8e:	4a6e      	ldr	r2, [pc, #440]	; (8001d48 <HAL_DMA_Init+0x654>)
 8001b90:	fba2 2303 	umull	r2, r3, r2, r3
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	009a      	lsls	r2, r3, #2
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f001 f82f 	bl	8002c00 <DMA_CalcBaseAndBitshift>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001baa:	f003 031f 	and.w	r3, r3, #31
 8001bae:	2201      	movs	r2, #1
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	e008      	b.n	8001bca <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2240      	movs	r2, #64	; 0x40
 8001bbc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e0b7      	b.n	8001d3a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a5f      	ldr	r2, [pc, #380]	; (8001d4c <HAL_DMA_Init+0x658>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d072      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a5d      	ldr	r2, [pc, #372]	; (8001d50 <HAL_DMA_Init+0x65c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d06d      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a5c      	ldr	r2, [pc, #368]	; (8001d54 <HAL_DMA_Init+0x660>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d068      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a5a      	ldr	r2, [pc, #360]	; (8001d58 <HAL_DMA_Init+0x664>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d063      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a59      	ldr	r2, [pc, #356]	; (8001d5c <HAL_DMA_Init+0x668>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d05e      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a57      	ldr	r2, [pc, #348]	; (8001d60 <HAL_DMA_Init+0x66c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d059      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a56      	ldr	r2, [pc, #344]	; (8001d64 <HAL_DMA_Init+0x670>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d054      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a54      	ldr	r2, [pc, #336]	; (8001d68 <HAL_DMA_Init+0x674>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d04f      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a53      	ldr	r2, [pc, #332]	; (8001d6c <HAL_DMA_Init+0x678>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d04a      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a51      	ldr	r2, [pc, #324]	; (8001d70 <HAL_DMA_Init+0x67c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d045      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a50      	ldr	r2, [pc, #320]	; (8001d74 <HAL_DMA_Init+0x680>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d040      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a4e      	ldr	r2, [pc, #312]	; (8001d78 <HAL_DMA_Init+0x684>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d03b      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a4d      	ldr	r2, [pc, #308]	; (8001d7c <HAL_DMA_Init+0x688>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d036      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a4b      	ldr	r2, [pc, #300]	; (8001d80 <HAL_DMA_Init+0x68c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d031      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a4a      	ldr	r2, [pc, #296]	; (8001d84 <HAL_DMA_Init+0x690>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d02c      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a48      	ldr	r2, [pc, #288]	; (8001d88 <HAL_DMA_Init+0x694>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d027      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a47      	ldr	r2, [pc, #284]	; (8001d8c <HAL_DMA_Init+0x698>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d022      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a45      	ldr	r2, [pc, #276]	; (8001d90 <HAL_DMA_Init+0x69c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01d      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a44      	ldr	r2, [pc, #272]	; (8001d94 <HAL_DMA_Init+0x6a0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d018      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a42      	ldr	r2, [pc, #264]	; (8001d98 <HAL_DMA_Init+0x6a4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d013      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a41      	ldr	r2, [pc, #260]	; (8001d9c <HAL_DMA_Init+0x6a8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d00e      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a3f      	ldr	r2, [pc, #252]	; (8001da0 <HAL_DMA_Init+0x6ac>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d009      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a3e      	ldr	r2, [pc, #248]	; (8001da4 <HAL_DMA_Init+0x6b0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d004      	beq.n	8001cba <HAL_DMA_Init+0x5c6>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a3c      	ldr	r2, [pc, #240]	; (8001da8 <HAL_DMA_Init+0x6b4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_DMA_Init+0x5ca>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_DMA_Init+0x5cc>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d032      	beq.n	8001d2a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f001 f8c9 	bl	8002e5c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b80      	cmp	r3, #128	; 0x80
 8001cd0:	d102      	bne.n	8001cd8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001cec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d010      	beq.n	8001d18 <HAL_DMA_Init+0x624>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d80c      	bhi.n	8001d18 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f001 f946 	bl	8002f90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	e008      	b.n	8001d2a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	a7fdabf8 	.word	0xa7fdabf8
 8001d48:	cccccccd 	.word	0xcccccccd
 8001d4c:	40020010 	.word	0x40020010
 8001d50:	40020028 	.word	0x40020028
 8001d54:	40020040 	.word	0x40020040
 8001d58:	40020058 	.word	0x40020058
 8001d5c:	40020070 	.word	0x40020070
 8001d60:	40020088 	.word	0x40020088
 8001d64:	400200a0 	.word	0x400200a0
 8001d68:	400200b8 	.word	0x400200b8
 8001d6c:	40020410 	.word	0x40020410
 8001d70:	40020428 	.word	0x40020428
 8001d74:	40020440 	.word	0x40020440
 8001d78:	40020458 	.word	0x40020458
 8001d7c:	40020470 	.word	0x40020470
 8001d80:	40020488 	.word	0x40020488
 8001d84:	400204a0 	.word	0x400204a0
 8001d88:	400204b8 	.word	0x400204b8
 8001d8c:	58025408 	.word	0x58025408
 8001d90:	5802541c 	.word	0x5802541c
 8001d94:	58025430 	.word	0x58025430
 8001d98:	58025444 	.word	0x58025444
 8001d9c:	58025458 	.word	0x58025458
 8001da0:	5802546c 	.word	0x5802546c
 8001da4:	58025480 	.word	0x58025480
 8001da8:	58025494 	.word	0x58025494

08001dac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001db8:	4b67      	ldr	r3, [pc, #412]	; (8001f58 <HAL_DMA_IRQHandler+0x1ac>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a67      	ldr	r2, [pc, #412]	; (8001f5c <HAL_DMA_IRQHandler+0x1b0>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	0a9b      	lsrs	r3, r3, #10
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a5f      	ldr	r2, [pc, #380]	; (8001f60 <HAL_DMA_IRQHandler+0x1b4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d04a      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a5d      	ldr	r2, [pc, #372]	; (8001f64 <HAL_DMA_IRQHandler+0x1b8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d045      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a5c      	ldr	r2, [pc, #368]	; (8001f68 <HAL_DMA_IRQHandler+0x1bc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d040      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a5a      	ldr	r2, [pc, #360]	; (8001f6c <HAL_DMA_IRQHandler+0x1c0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d03b      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a59      	ldr	r2, [pc, #356]	; (8001f70 <HAL_DMA_IRQHandler+0x1c4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d036      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a57      	ldr	r2, [pc, #348]	; (8001f74 <HAL_DMA_IRQHandler+0x1c8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d031      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a56      	ldr	r2, [pc, #344]	; (8001f78 <HAL_DMA_IRQHandler+0x1cc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d02c      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a54      	ldr	r2, [pc, #336]	; (8001f7c <HAL_DMA_IRQHandler+0x1d0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d027      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a53      	ldr	r2, [pc, #332]	; (8001f80 <HAL_DMA_IRQHandler+0x1d4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d022      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a51      	ldr	r2, [pc, #324]	; (8001f84 <HAL_DMA_IRQHandler+0x1d8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d01d      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a50      	ldr	r2, [pc, #320]	; (8001f88 <HAL_DMA_IRQHandler+0x1dc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d018      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a4e      	ldr	r2, [pc, #312]	; (8001f8c <HAL_DMA_IRQHandler+0x1e0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d013      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a4d      	ldr	r2, [pc, #308]	; (8001f90 <HAL_DMA_IRQHandler+0x1e4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d00e      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a4b      	ldr	r2, [pc, #300]	; (8001f94 <HAL_DMA_IRQHandler+0x1e8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d009      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a4a      	ldr	r2, [pc, #296]	; (8001f98 <HAL_DMA_IRQHandler+0x1ec>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d004      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a48      	ldr	r2, [pc, #288]	; (8001f9c <HAL_DMA_IRQHandler+0x1f0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <HAL_DMA_IRQHandler+0xd6>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_DMA_IRQHandler+0xd8>
 8001e82:	2300      	movs	r3, #0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 842b 	beq.w	80026e0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	2208      	movs	r2, #8
 8001e94:	409a      	lsls	r2, r3
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 80a2 	beq.w	8001fe4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a2e      	ldr	r2, [pc, #184]	; (8001f60 <HAL_DMA_IRQHandler+0x1b4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d04a      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a2d      	ldr	r2, [pc, #180]	; (8001f64 <HAL_DMA_IRQHandler+0x1b8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d045      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a2b      	ldr	r2, [pc, #172]	; (8001f68 <HAL_DMA_IRQHandler+0x1bc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d040      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a2a      	ldr	r2, [pc, #168]	; (8001f6c <HAL_DMA_IRQHandler+0x1c0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d03b      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a28      	ldr	r2, [pc, #160]	; (8001f70 <HAL_DMA_IRQHandler+0x1c4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d036      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a27      	ldr	r2, [pc, #156]	; (8001f74 <HAL_DMA_IRQHandler+0x1c8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d031      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a25      	ldr	r2, [pc, #148]	; (8001f78 <HAL_DMA_IRQHandler+0x1cc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d02c      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a24      	ldr	r2, [pc, #144]	; (8001f7c <HAL_DMA_IRQHandler+0x1d0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d027      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a22      	ldr	r2, [pc, #136]	; (8001f80 <HAL_DMA_IRQHandler+0x1d4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d022      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a21      	ldr	r2, [pc, #132]	; (8001f84 <HAL_DMA_IRQHandler+0x1d8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d01d      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1f      	ldr	r2, [pc, #124]	; (8001f88 <HAL_DMA_IRQHandler+0x1dc>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d018      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <HAL_DMA_IRQHandler+0x1e0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d013      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <HAL_DMA_IRQHandler+0x1e4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00e      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a1b      	ldr	r2, [pc, #108]	; (8001f94 <HAL_DMA_IRQHandler+0x1e8>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d009      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <HAL_DMA_IRQHandler+0x1ec>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d004      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a18      	ldr	r2, [pc, #96]	; (8001f9c <HAL_DMA_IRQHandler+0x1f0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d12f      	bne.n	8001fa0 <HAL_DMA_IRQHandler+0x1f4>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bf14      	ite	ne
 8001f4e:	2301      	movne	r3, #1
 8001f50:	2300      	moveq	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	e02e      	b.n	8001fb4 <HAL_DMA_IRQHandler+0x208>
 8001f56:	bf00      	nop
 8001f58:	24000000 	.word	0x24000000
 8001f5c:	1b4e81b5 	.word	0x1b4e81b5
 8001f60:	40020010 	.word	0x40020010
 8001f64:	40020028 	.word	0x40020028
 8001f68:	40020040 	.word	0x40020040
 8001f6c:	40020058 	.word	0x40020058
 8001f70:	40020070 	.word	0x40020070
 8001f74:	40020088 	.word	0x40020088
 8001f78:	400200a0 	.word	0x400200a0
 8001f7c:	400200b8 	.word	0x400200b8
 8001f80:	40020410 	.word	0x40020410
 8001f84:	40020428 	.word	0x40020428
 8001f88:	40020440 	.word	0x40020440
 8001f8c:	40020458 	.word	0x40020458
 8001f90:	40020470 	.word	0x40020470
 8001f94:	40020488 	.word	0x40020488
 8001f98:	400204a0 	.word	0x400204a0
 8001f9c:	400204b8 	.word	0x400204b8
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	bf14      	ite	ne
 8001fae:	2301      	movne	r3, #1
 8001fb0:	2300      	moveq	r3, #0
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d015      	beq.n	8001fe4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0204 	bic.w	r2, r2, #4
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	2208      	movs	r2, #8
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fdc:	f043 0201 	orr.w	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d06e      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a69      	ldr	r2, [pc, #420]	; (80021a4 <HAL_DMA_IRQHandler+0x3f8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d04a      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a67      	ldr	r2, [pc, #412]	; (80021a8 <HAL_DMA_IRQHandler+0x3fc>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d045      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a66      	ldr	r2, [pc, #408]	; (80021ac <HAL_DMA_IRQHandler+0x400>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d040      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a64      	ldr	r2, [pc, #400]	; (80021b0 <HAL_DMA_IRQHandler+0x404>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d03b      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a63      	ldr	r2, [pc, #396]	; (80021b4 <HAL_DMA_IRQHandler+0x408>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d036      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a61      	ldr	r2, [pc, #388]	; (80021b8 <HAL_DMA_IRQHandler+0x40c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d031      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a60      	ldr	r2, [pc, #384]	; (80021bc <HAL_DMA_IRQHandler+0x410>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d02c      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a5e      	ldr	r2, [pc, #376]	; (80021c0 <HAL_DMA_IRQHandler+0x414>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d027      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a5d      	ldr	r2, [pc, #372]	; (80021c4 <HAL_DMA_IRQHandler+0x418>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d022      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a5b      	ldr	r2, [pc, #364]	; (80021c8 <HAL_DMA_IRQHandler+0x41c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01d      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a5a      	ldr	r2, [pc, #360]	; (80021cc <HAL_DMA_IRQHandler+0x420>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d018      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a58      	ldr	r2, [pc, #352]	; (80021d0 <HAL_DMA_IRQHandler+0x424>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a57      	ldr	r2, [pc, #348]	; (80021d4 <HAL_DMA_IRQHandler+0x428>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d00e      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a55      	ldr	r2, [pc, #340]	; (80021d8 <HAL_DMA_IRQHandler+0x42c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d009      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a54      	ldr	r2, [pc, #336]	; (80021dc <HAL_DMA_IRQHandler+0x430>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d004      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a52      	ldr	r2, [pc, #328]	; (80021e0 <HAL_DMA_IRQHandler+0x434>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d10a      	bne.n	80020b0 <HAL_DMA_IRQHandler+0x304>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf14      	ite	ne
 80020a8:	2301      	movne	r3, #1
 80020aa:	2300      	moveq	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	e003      	b.n	80020b8 <HAL_DMA_IRQHandler+0x30c>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2300      	movs	r3, #0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00d      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	2201      	movs	r2, #1
 80020c6:	409a      	lsls	r2, r3
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d0:	f043 0202 	orr.w	r2, r3, #2
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	2204      	movs	r2, #4
 80020e2:	409a      	lsls	r2, r3
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 808f 	beq.w	800220c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a2c      	ldr	r2, [pc, #176]	; (80021a4 <HAL_DMA_IRQHandler+0x3f8>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d04a      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a2a      	ldr	r2, [pc, #168]	; (80021a8 <HAL_DMA_IRQHandler+0x3fc>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d045      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a29      	ldr	r2, [pc, #164]	; (80021ac <HAL_DMA_IRQHandler+0x400>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d040      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a27      	ldr	r2, [pc, #156]	; (80021b0 <HAL_DMA_IRQHandler+0x404>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d03b      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a26      	ldr	r2, [pc, #152]	; (80021b4 <HAL_DMA_IRQHandler+0x408>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d036      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a24      	ldr	r2, [pc, #144]	; (80021b8 <HAL_DMA_IRQHandler+0x40c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d031      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a23      	ldr	r2, [pc, #140]	; (80021bc <HAL_DMA_IRQHandler+0x410>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d02c      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a21      	ldr	r2, [pc, #132]	; (80021c0 <HAL_DMA_IRQHandler+0x414>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d027      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a20      	ldr	r2, [pc, #128]	; (80021c4 <HAL_DMA_IRQHandler+0x418>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d022      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1e      	ldr	r2, [pc, #120]	; (80021c8 <HAL_DMA_IRQHandler+0x41c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01d      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a1d      	ldr	r2, [pc, #116]	; (80021cc <HAL_DMA_IRQHandler+0x420>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d018      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1b      	ldr	r2, [pc, #108]	; (80021d0 <HAL_DMA_IRQHandler+0x424>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1a      	ldr	r2, [pc, #104]	; (80021d4 <HAL_DMA_IRQHandler+0x428>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00e      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a18      	ldr	r2, [pc, #96]	; (80021d8 <HAL_DMA_IRQHandler+0x42c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d009      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a17      	ldr	r2, [pc, #92]	; (80021dc <HAL_DMA_IRQHandler+0x430>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d004      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a15      	ldr	r2, [pc, #84]	; (80021e0 <HAL_DMA_IRQHandler+0x434>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d12a      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x438>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf14      	ite	ne
 800219c:	2301      	movne	r3, #1
 800219e:	2300      	moveq	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	e023      	b.n	80021ec <HAL_DMA_IRQHandler+0x440>
 80021a4:	40020010 	.word	0x40020010
 80021a8:	40020028 	.word	0x40020028
 80021ac:	40020040 	.word	0x40020040
 80021b0:	40020058 	.word	0x40020058
 80021b4:	40020070 	.word	0x40020070
 80021b8:	40020088 	.word	0x40020088
 80021bc:	400200a0 	.word	0x400200a0
 80021c0:	400200b8 	.word	0x400200b8
 80021c4:	40020410 	.word	0x40020410
 80021c8:	40020428 	.word	0x40020428
 80021cc:	40020440 	.word	0x40020440
 80021d0:	40020458 	.word	0x40020458
 80021d4:	40020470 	.word	0x40020470
 80021d8:	40020488 	.word	0x40020488
 80021dc:	400204a0 	.word	0x400204a0
 80021e0:	400204b8 	.word	0x400204b8
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2300      	movs	r3, #0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00d      	beq.n	800220c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	2204      	movs	r2, #4
 80021fa:	409a      	lsls	r2, r3
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002204:	f043 0204 	orr.w	r2, r3, #4
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	2210      	movs	r2, #16
 8002216:	409a      	lsls	r2, r3
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80a6 	beq.w	800236e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a85      	ldr	r2, [pc, #532]	; (800243c <HAL_DMA_IRQHandler+0x690>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d04a      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a83      	ldr	r2, [pc, #524]	; (8002440 <HAL_DMA_IRQHandler+0x694>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d045      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a82      	ldr	r2, [pc, #520]	; (8002444 <HAL_DMA_IRQHandler+0x698>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d040      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a80      	ldr	r2, [pc, #512]	; (8002448 <HAL_DMA_IRQHandler+0x69c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d03b      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a7f      	ldr	r2, [pc, #508]	; (800244c <HAL_DMA_IRQHandler+0x6a0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d036      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a7d      	ldr	r2, [pc, #500]	; (8002450 <HAL_DMA_IRQHandler+0x6a4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d031      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a7c      	ldr	r2, [pc, #496]	; (8002454 <HAL_DMA_IRQHandler+0x6a8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d02c      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a7a      	ldr	r2, [pc, #488]	; (8002458 <HAL_DMA_IRQHandler+0x6ac>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d027      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a79      	ldr	r2, [pc, #484]	; (800245c <HAL_DMA_IRQHandler+0x6b0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d022      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a77      	ldr	r2, [pc, #476]	; (8002460 <HAL_DMA_IRQHandler+0x6b4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01d      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a76      	ldr	r2, [pc, #472]	; (8002464 <HAL_DMA_IRQHandler+0x6b8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d018      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a74      	ldr	r2, [pc, #464]	; (8002468 <HAL_DMA_IRQHandler+0x6bc>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d013      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a73      	ldr	r2, [pc, #460]	; (800246c <HAL_DMA_IRQHandler+0x6c0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00e      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a71      	ldr	r2, [pc, #452]	; (8002470 <HAL_DMA_IRQHandler+0x6c4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d009      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a70      	ldr	r2, [pc, #448]	; (8002474 <HAL_DMA_IRQHandler+0x6c8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d004      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a6e      	ldr	r2, [pc, #440]	; (8002478 <HAL_DMA_IRQHandler+0x6cc>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d10a      	bne.n	80022d8 <HAL_DMA_IRQHandler+0x52c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bf14      	ite	ne
 80022d0:	2301      	movne	r3, #1
 80022d2:	2300      	moveq	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	e009      	b.n	80022ec <HAL_DMA_IRQHandler+0x540>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	bf14      	ite	ne
 80022e6:	2301      	movne	r3, #1
 80022e8:	2300      	moveq	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d03e      	beq.n	800236e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	2210      	movs	r2, #16
 80022fa:	409a      	lsls	r2, r3
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d018      	beq.n	8002340 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d108      	bne.n	800232e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	2b00      	cmp	r3, #0
 8002322:	d024      	beq.n	800236e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	4798      	blx	r3
 800232c:	e01f      	b.n	800236e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01b      	beq.n	800236e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	4798      	blx	r3
 800233e:	e016      	b.n	800236e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234a:	2b00      	cmp	r3, #0
 800234c:	d107      	bne.n	800235e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0208 	bic.w	r2, r2, #8
 800235c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	2220      	movs	r2, #32
 8002378:	409a      	lsls	r2, r3
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 8110 	beq.w	80025a4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a2c      	ldr	r2, [pc, #176]	; (800243c <HAL_DMA_IRQHandler+0x690>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d04a      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a2b      	ldr	r2, [pc, #172]	; (8002440 <HAL_DMA_IRQHandler+0x694>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d045      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a29      	ldr	r2, [pc, #164]	; (8002444 <HAL_DMA_IRQHandler+0x698>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d040      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a28      	ldr	r2, [pc, #160]	; (8002448 <HAL_DMA_IRQHandler+0x69c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d03b      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a26      	ldr	r2, [pc, #152]	; (800244c <HAL_DMA_IRQHandler+0x6a0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d036      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a25      	ldr	r2, [pc, #148]	; (8002450 <HAL_DMA_IRQHandler+0x6a4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d031      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a23      	ldr	r2, [pc, #140]	; (8002454 <HAL_DMA_IRQHandler+0x6a8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d02c      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a22      	ldr	r2, [pc, #136]	; (8002458 <HAL_DMA_IRQHandler+0x6ac>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d027      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a20      	ldr	r2, [pc, #128]	; (800245c <HAL_DMA_IRQHandler+0x6b0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d022      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a1f      	ldr	r2, [pc, #124]	; (8002460 <HAL_DMA_IRQHandler+0x6b4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d01d      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a1d      	ldr	r2, [pc, #116]	; (8002464 <HAL_DMA_IRQHandler+0x6b8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d018      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <HAL_DMA_IRQHandler+0x6bc>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d013      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a1a      	ldr	r2, [pc, #104]	; (800246c <HAL_DMA_IRQHandler+0x6c0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00e      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a19      	ldr	r2, [pc, #100]	; (8002470 <HAL_DMA_IRQHandler+0x6c4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d009      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a17      	ldr	r2, [pc, #92]	; (8002474 <HAL_DMA_IRQHandler+0x6c8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d004      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a16      	ldr	r2, [pc, #88]	; (8002478 <HAL_DMA_IRQHandler+0x6cc>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d12b      	bne.n	800247c <HAL_DMA_IRQHandler+0x6d0>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b00      	cmp	r3, #0
 8002430:	bf14      	ite	ne
 8002432:	2301      	movne	r3, #1
 8002434:	2300      	moveq	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	e02a      	b.n	8002490 <HAL_DMA_IRQHandler+0x6e4>
 800243a:	bf00      	nop
 800243c:	40020010 	.word	0x40020010
 8002440:	40020028 	.word	0x40020028
 8002444:	40020040 	.word	0x40020040
 8002448:	40020058 	.word	0x40020058
 800244c:	40020070 	.word	0x40020070
 8002450:	40020088 	.word	0x40020088
 8002454:	400200a0 	.word	0x400200a0
 8002458:	400200b8 	.word	0x400200b8
 800245c:	40020410 	.word	0x40020410
 8002460:	40020428 	.word	0x40020428
 8002464:	40020440 	.word	0x40020440
 8002468:	40020458 	.word	0x40020458
 800246c:	40020470 	.word	0x40020470
 8002470:	40020488 	.word	0x40020488
 8002474:	400204a0 	.word	0x400204a0
 8002478:	400204b8 	.word	0x400204b8
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	bf14      	ite	ne
 800248a:	2301      	movne	r3, #1
 800248c:	2300      	moveq	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 8087 	beq.w	80025a4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249a:	f003 031f 	and.w	r3, r3, #31
 800249e:	2220      	movs	r2, #32
 80024a0:	409a      	lsls	r2, r3
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d139      	bne.n	8002526 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0216 	bic.w	r2, r2, #22
 80024c0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695a      	ldr	r2, [r3, #20]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024d0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d103      	bne.n	80024e2 <HAL_DMA_IRQHandler+0x736>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0208 	bic.w	r2, r2, #8
 80024f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	223f      	movs	r2, #63	; 0x3f
 80024fc:	409a      	lsls	r2, r3
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 834a 	beq.w	8002bb0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	4798      	blx	r3
          }
          return;
 8002524:	e344      	b.n	8002bb0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d018      	beq.n	8002566 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d108      	bne.n	8002554 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	2b00      	cmp	r3, #0
 8002548:	d02c      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	4798      	blx	r3
 8002552:	e027      	b.n	80025a4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002558:	2b00      	cmp	r3, #0
 800255a:	d023      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	4798      	blx	r3
 8002564:	e01e      	b.n	80025a4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10f      	bne.n	8002594 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0210 	bic.w	r2, r2, #16
 8002582:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 8306 	beq.w	8002bba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 8088 	beq.w	80026cc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2204      	movs	r2, #4
 80025c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a7a      	ldr	r2, [pc, #488]	; (80027b4 <HAL_DMA_IRQHandler+0xa08>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d04a      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a79      	ldr	r2, [pc, #484]	; (80027b8 <HAL_DMA_IRQHandler+0xa0c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d045      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a77      	ldr	r2, [pc, #476]	; (80027bc <HAL_DMA_IRQHandler+0xa10>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d040      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a76      	ldr	r2, [pc, #472]	; (80027c0 <HAL_DMA_IRQHandler+0xa14>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d03b      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a74      	ldr	r2, [pc, #464]	; (80027c4 <HAL_DMA_IRQHandler+0xa18>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d036      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a73      	ldr	r2, [pc, #460]	; (80027c8 <HAL_DMA_IRQHandler+0xa1c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d031      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a71      	ldr	r2, [pc, #452]	; (80027cc <HAL_DMA_IRQHandler+0xa20>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d02c      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a70      	ldr	r2, [pc, #448]	; (80027d0 <HAL_DMA_IRQHandler+0xa24>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d027      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a6e      	ldr	r2, [pc, #440]	; (80027d4 <HAL_DMA_IRQHandler+0xa28>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d022      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a6d      	ldr	r2, [pc, #436]	; (80027d8 <HAL_DMA_IRQHandler+0xa2c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d01d      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a6b      	ldr	r2, [pc, #428]	; (80027dc <HAL_DMA_IRQHandler+0xa30>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d018      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a6a      	ldr	r2, [pc, #424]	; (80027e0 <HAL_DMA_IRQHandler+0xa34>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d013      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a68      	ldr	r2, [pc, #416]	; (80027e4 <HAL_DMA_IRQHandler+0xa38>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00e      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a67      	ldr	r2, [pc, #412]	; (80027e8 <HAL_DMA_IRQHandler+0xa3c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d009      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a65      	ldr	r2, [pc, #404]	; (80027ec <HAL_DMA_IRQHandler+0xa40>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d004      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a64      	ldr	r2, [pc, #400]	; (80027f0 <HAL_DMA_IRQHandler+0xa44>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d108      	bne.n	8002676 <HAL_DMA_IRQHandler+0x8ca>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	e007      	b.n	8002686 <HAL_DMA_IRQHandler+0x8da>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	3301      	adds	r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268e:	429a      	cmp	r2, r3
 8002690:	d307      	bcc.n	80026a2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f2      	bne.n	8002686 <HAL_DMA_IRQHandler+0x8da>
 80026a0:	e000      	b.n	80026a4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80026a2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d004      	beq.n	80026bc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2203      	movs	r2, #3
 80026b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80026ba:	e003      	b.n	80026c4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 8272 	beq.w	8002bba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	4798      	blx	r3
 80026de:	e26c      	b.n	8002bba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a43      	ldr	r2, [pc, #268]	; (80027f4 <HAL_DMA_IRQHandler+0xa48>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d022      	beq.n	8002730 <HAL_DMA_IRQHandler+0x984>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a42      	ldr	r2, [pc, #264]	; (80027f8 <HAL_DMA_IRQHandler+0xa4c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d01d      	beq.n	8002730 <HAL_DMA_IRQHandler+0x984>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a40      	ldr	r2, [pc, #256]	; (80027fc <HAL_DMA_IRQHandler+0xa50>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d018      	beq.n	8002730 <HAL_DMA_IRQHandler+0x984>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a3f      	ldr	r2, [pc, #252]	; (8002800 <HAL_DMA_IRQHandler+0xa54>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d013      	beq.n	8002730 <HAL_DMA_IRQHandler+0x984>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a3d      	ldr	r2, [pc, #244]	; (8002804 <HAL_DMA_IRQHandler+0xa58>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00e      	beq.n	8002730 <HAL_DMA_IRQHandler+0x984>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a3c      	ldr	r2, [pc, #240]	; (8002808 <HAL_DMA_IRQHandler+0xa5c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d009      	beq.n	8002730 <HAL_DMA_IRQHandler+0x984>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a3a      	ldr	r2, [pc, #232]	; (800280c <HAL_DMA_IRQHandler+0xa60>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d004      	beq.n	8002730 <HAL_DMA_IRQHandler+0x984>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a39      	ldr	r2, [pc, #228]	; (8002810 <HAL_DMA_IRQHandler+0xa64>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d101      	bne.n	8002734 <HAL_DMA_IRQHandler+0x988>
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <HAL_DMA_IRQHandler+0x98a>
 8002734:	2300      	movs	r3, #0
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 823f 	beq.w	8002bba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	2204      	movs	r2, #4
 800274e:	409a      	lsls	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	4013      	ands	r3, r2
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80cd 	beq.w	80028f4 <HAL_DMA_IRQHandler+0xb48>
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80c7 	beq.w	80028f4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	2204      	movs	r2, #4
 8002770:	409a      	lsls	r2, r3
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d049      	beq.n	8002814 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 8210 	beq.w	8002bb4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800279c:	e20a      	b.n	8002bb4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 8206 	beq.w	8002bb4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027b0:	e200      	b.n	8002bb4 <HAL_DMA_IRQHandler+0xe08>
 80027b2:	bf00      	nop
 80027b4:	40020010 	.word	0x40020010
 80027b8:	40020028 	.word	0x40020028
 80027bc:	40020040 	.word	0x40020040
 80027c0:	40020058 	.word	0x40020058
 80027c4:	40020070 	.word	0x40020070
 80027c8:	40020088 	.word	0x40020088
 80027cc:	400200a0 	.word	0x400200a0
 80027d0:	400200b8 	.word	0x400200b8
 80027d4:	40020410 	.word	0x40020410
 80027d8:	40020428 	.word	0x40020428
 80027dc:	40020440 	.word	0x40020440
 80027e0:	40020458 	.word	0x40020458
 80027e4:	40020470 	.word	0x40020470
 80027e8:	40020488 	.word	0x40020488
 80027ec:	400204a0 	.word	0x400204a0
 80027f0:	400204b8 	.word	0x400204b8
 80027f4:	58025408 	.word	0x58025408
 80027f8:	5802541c 	.word	0x5802541c
 80027fc:	58025430 	.word	0x58025430
 8002800:	58025444 	.word	0x58025444
 8002804:	58025458 	.word	0x58025458
 8002808:	5802546c 	.word	0x5802546c
 800280c:	58025480 	.word	0x58025480
 8002810:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	d160      	bne.n	80028e0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a7f      	ldr	r2, [pc, #508]	; (8002a20 <HAL_DMA_IRQHandler+0xc74>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d04a      	beq.n	80028be <HAL_DMA_IRQHandler+0xb12>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a7d      	ldr	r2, [pc, #500]	; (8002a24 <HAL_DMA_IRQHandler+0xc78>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d045      	beq.n	80028be <HAL_DMA_IRQHandler+0xb12>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a7c      	ldr	r2, [pc, #496]	; (8002a28 <HAL_DMA_IRQHandler+0xc7c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d040      	beq.n	80028be <HAL_DMA_IRQHandler+0xb12>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a7a      	ldr	r2, [pc, #488]	; (8002a2c <HAL_DMA_IRQHandler+0xc80>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d03b      	beq.n	80028be <HAL_DMA_IRQHandler+0xb12>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a79      	ldr	r2, [pc, #484]	; (8002a30 <HAL_DMA_IRQHandler+0xc84>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d036      	beq.n	80028be <HAL_DMA_IRQHandler+0xb12>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a77      	ldr	r2, [pc, #476]	; (8002a34 <HAL_DMA_IRQHandler+0xc88>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d031      	beq.n	80028be <HAL_DMA_IRQHandler+0xb12>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a76      	ldr	r2, [pc, #472]	; (8002a38 <HAL_DMA_IRQHandler+0xc8c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d02c      	beq.n	80028be <HAL_DMA_IRQHandler+0xb12>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a74      	ldr	r2, [pc, #464]	; (8002a3c <HAL_DMA_IRQHandler+0xc90>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d027      	beq.n	80028be <HAL_DMA_IRQHandler+0xb12>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a73      	ldr	r2, [pc, #460]	; (8002a40 <HAL_DMA_IRQHandler+0xc94>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d022      	beq.n	80028be <HAL_DMA_IRQHandler+0xb12>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a71      	ldr	r2, [pc, #452]	; (8002a44 <HAL_DMA_IRQHandler+0xc98>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d01d      	beq.n	80028be <HAL_DMA_IRQHandler+0xb12>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a70      	ldr	r2, [pc, #448]	; (8002a48 <HAL_DMA_IRQHandler+0xc9c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d018      	beq.n	80028be <HAL_DMA_IRQHandler+0xb12>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a6e      	ldr	r2, [pc, #440]	; (8002a4c <HAL_DMA_IRQHandler+0xca0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d013      	beq.n	80028be <HAL_DMA_IRQHandler+0xb12>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a6d      	ldr	r2, [pc, #436]	; (8002a50 <HAL_DMA_IRQHandler+0xca4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d00e      	beq.n	80028be <HAL_DMA_IRQHandler+0xb12>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a6b      	ldr	r2, [pc, #428]	; (8002a54 <HAL_DMA_IRQHandler+0xca8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d009      	beq.n	80028be <HAL_DMA_IRQHandler+0xb12>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a6a      	ldr	r2, [pc, #424]	; (8002a58 <HAL_DMA_IRQHandler+0xcac>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d004      	beq.n	80028be <HAL_DMA_IRQHandler+0xb12>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a68      	ldr	r2, [pc, #416]	; (8002a5c <HAL_DMA_IRQHandler+0xcb0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d108      	bne.n	80028d0 <HAL_DMA_IRQHandler+0xb24>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0208 	bic.w	r2, r2, #8
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	e007      	b.n	80028e0 <HAL_DMA_IRQHandler+0xb34>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0204 	bic.w	r2, r2, #4
 80028de:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8165 	beq.w	8002bb4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028f2:	e15f      	b.n	8002bb4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	2202      	movs	r2, #2
 80028fe:	409a      	lsls	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 80c5 	beq.w	8002a94 <HAL_DMA_IRQHandler+0xce8>
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80bf 	beq.w	8002a94 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291a:	f003 031f 	and.w	r3, r3, #31
 800291e:	2202      	movs	r2, #2
 8002920:	409a      	lsls	r2, r3
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d018      	beq.n	8002962 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d109      	bne.n	800294e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 813a 	beq.w	8002bb8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800294c:	e134      	b.n	8002bb8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 8130 	beq.w	8002bb8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002960:	e12a      	b.n	8002bb8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b00      	cmp	r3, #0
 800296a:	f040 8089 	bne.w	8002a80 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a2b      	ldr	r2, [pc, #172]	; (8002a20 <HAL_DMA_IRQHandler+0xc74>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d04a      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xc62>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a29      	ldr	r2, [pc, #164]	; (8002a24 <HAL_DMA_IRQHandler+0xc78>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d045      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xc62>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a28      	ldr	r2, [pc, #160]	; (8002a28 <HAL_DMA_IRQHandler+0xc7c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d040      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xc62>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a26      	ldr	r2, [pc, #152]	; (8002a2c <HAL_DMA_IRQHandler+0xc80>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d03b      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xc62>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a25      	ldr	r2, [pc, #148]	; (8002a30 <HAL_DMA_IRQHandler+0xc84>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d036      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xc62>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a23      	ldr	r2, [pc, #140]	; (8002a34 <HAL_DMA_IRQHandler+0xc88>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d031      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xc62>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a22      	ldr	r2, [pc, #136]	; (8002a38 <HAL_DMA_IRQHandler+0xc8c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d02c      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xc62>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a20      	ldr	r2, [pc, #128]	; (8002a3c <HAL_DMA_IRQHandler+0xc90>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d027      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xc62>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1f      	ldr	r2, [pc, #124]	; (8002a40 <HAL_DMA_IRQHandler+0xc94>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d022      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xc62>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1d      	ldr	r2, [pc, #116]	; (8002a44 <HAL_DMA_IRQHandler+0xc98>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d01d      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xc62>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <HAL_DMA_IRQHandler+0xc9c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d018      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xc62>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1a      	ldr	r2, [pc, #104]	; (8002a4c <HAL_DMA_IRQHandler+0xca0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xc62>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a19      	ldr	r2, [pc, #100]	; (8002a50 <HAL_DMA_IRQHandler+0xca4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00e      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xc62>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <HAL_DMA_IRQHandler+0xca8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d009      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xc62>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a16      	ldr	r2, [pc, #88]	; (8002a58 <HAL_DMA_IRQHandler+0xcac>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d004      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xc62>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <HAL_DMA_IRQHandler+0xcb0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d128      	bne.n	8002a60 <HAL_DMA_IRQHandler+0xcb4>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0214 	bic.w	r2, r2, #20
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	e027      	b.n	8002a70 <HAL_DMA_IRQHandler+0xcc4>
 8002a20:	40020010 	.word	0x40020010
 8002a24:	40020028 	.word	0x40020028
 8002a28:	40020040 	.word	0x40020040
 8002a2c:	40020058 	.word	0x40020058
 8002a30:	40020070 	.word	0x40020070
 8002a34:	40020088 	.word	0x40020088
 8002a38:	400200a0 	.word	0x400200a0
 8002a3c:	400200b8 	.word	0x400200b8
 8002a40:	40020410 	.word	0x40020410
 8002a44:	40020428 	.word	0x40020428
 8002a48:	40020440 	.word	0x40020440
 8002a4c:	40020458 	.word	0x40020458
 8002a50:	40020470 	.word	0x40020470
 8002a54:	40020488 	.word	0x40020488
 8002a58:	400204a0 	.word	0x400204a0
 8002a5c:	400204b8 	.word	0x400204b8
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 020a 	bic.w	r2, r2, #10
 8002a6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 8097 	beq.w	8002bb8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a92:	e091      	b.n	8002bb8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	2208      	movs	r2, #8
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8088 	beq.w	8002bba <HAL_DMA_IRQHandler+0xe0e>
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 8082 	beq.w	8002bba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a41      	ldr	r2, [pc, #260]	; (8002bc0 <HAL_DMA_IRQHandler+0xe14>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d04a      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xdaa>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a3f      	ldr	r2, [pc, #252]	; (8002bc4 <HAL_DMA_IRQHandler+0xe18>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d045      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xdaa>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a3e      	ldr	r2, [pc, #248]	; (8002bc8 <HAL_DMA_IRQHandler+0xe1c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d040      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xdaa>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a3c      	ldr	r2, [pc, #240]	; (8002bcc <HAL_DMA_IRQHandler+0xe20>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d03b      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xdaa>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a3b      	ldr	r2, [pc, #236]	; (8002bd0 <HAL_DMA_IRQHandler+0xe24>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d036      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xdaa>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a39      	ldr	r2, [pc, #228]	; (8002bd4 <HAL_DMA_IRQHandler+0xe28>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d031      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xdaa>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a38      	ldr	r2, [pc, #224]	; (8002bd8 <HAL_DMA_IRQHandler+0xe2c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d02c      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xdaa>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a36      	ldr	r2, [pc, #216]	; (8002bdc <HAL_DMA_IRQHandler+0xe30>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d027      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xdaa>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a35      	ldr	r2, [pc, #212]	; (8002be0 <HAL_DMA_IRQHandler+0xe34>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d022      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xdaa>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a33      	ldr	r2, [pc, #204]	; (8002be4 <HAL_DMA_IRQHandler+0xe38>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d01d      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xdaa>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a32      	ldr	r2, [pc, #200]	; (8002be8 <HAL_DMA_IRQHandler+0xe3c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d018      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xdaa>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a30      	ldr	r2, [pc, #192]	; (8002bec <HAL_DMA_IRQHandler+0xe40>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xdaa>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a2f      	ldr	r2, [pc, #188]	; (8002bf0 <HAL_DMA_IRQHandler+0xe44>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d00e      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xdaa>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a2d      	ldr	r2, [pc, #180]	; (8002bf4 <HAL_DMA_IRQHandler+0xe48>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d009      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xdaa>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a2c      	ldr	r2, [pc, #176]	; (8002bf8 <HAL_DMA_IRQHandler+0xe4c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d004      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xdaa>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a2a      	ldr	r2, [pc, #168]	; (8002bfc <HAL_DMA_IRQHandler+0xe50>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d108      	bne.n	8002b68 <HAL_DMA_IRQHandler+0xdbc>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 021c 	bic.w	r2, r2, #28
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	e007      	b.n	8002b78 <HAL_DMA_IRQHandler+0xdcc>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 020e 	bic.w	r2, r2, #14
 8002b76:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	2201      	movs	r2, #1
 8002b82:	409a      	lsls	r2, r3
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	4798      	blx	r3
 8002bae:	e004      	b.n	8002bba <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002bb0:	bf00      	nop
 8002bb2:	e002      	b.n	8002bba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002bb4:	bf00      	nop
 8002bb6:	e000      	b.n	8002bba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002bb8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002bba:	3728      	adds	r7, #40	; 0x28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40020010 	.word	0x40020010
 8002bc4:	40020028 	.word	0x40020028
 8002bc8:	40020040 	.word	0x40020040
 8002bcc:	40020058 	.word	0x40020058
 8002bd0:	40020070 	.word	0x40020070
 8002bd4:	40020088 	.word	0x40020088
 8002bd8:	400200a0 	.word	0x400200a0
 8002bdc:	400200b8 	.word	0x400200b8
 8002be0:	40020410 	.word	0x40020410
 8002be4:	40020428 	.word	0x40020428
 8002be8:	40020440 	.word	0x40020440
 8002bec:	40020458 	.word	0x40020458
 8002bf0:	40020470 	.word	0x40020470
 8002bf4:	40020488 	.word	0x40020488
 8002bf8:	400204a0 	.word	0x400204a0
 8002bfc:	400204b8 	.word	0x400204b8

08002c00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a42      	ldr	r2, [pc, #264]	; (8002d18 <DMA_CalcBaseAndBitshift+0x118>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d04a      	beq.n	8002ca8 <DMA_CalcBaseAndBitshift+0xa8>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a41      	ldr	r2, [pc, #260]	; (8002d1c <DMA_CalcBaseAndBitshift+0x11c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d045      	beq.n	8002ca8 <DMA_CalcBaseAndBitshift+0xa8>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a3f      	ldr	r2, [pc, #252]	; (8002d20 <DMA_CalcBaseAndBitshift+0x120>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d040      	beq.n	8002ca8 <DMA_CalcBaseAndBitshift+0xa8>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a3e      	ldr	r2, [pc, #248]	; (8002d24 <DMA_CalcBaseAndBitshift+0x124>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d03b      	beq.n	8002ca8 <DMA_CalcBaseAndBitshift+0xa8>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a3c      	ldr	r2, [pc, #240]	; (8002d28 <DMA_CalcBaseAndBitshift+0x128>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d036      	beq.n	8002ca8 <DMA_CalcBaseAndBitshift+0xa8>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a3b      	ldr	r2, [pc, #236]	; (8002d2c <DMA_CalcBaseAndBitshift+0x12c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d031      	beq.n	8002ca8 <DMA_CalcBaseAndBitshift+0xa8>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a39      	ldr	r2, [pc, #228]	; (8002d30 <DMA_CalcBaseAndBitshift+0x130>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d02c      	beq.n	8002ca8 <DMA_CalcBaseAndBitshift+0xa8>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a38      	ldr	r2, [pc, #224]	; (8002d34 <DMA_CalcBaseAndBitshift+0x134>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d027      	beq.n	8002ca8 <DMA_CalcBaseAndBitshift+0xa8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a36      	ldr	r2, [pc, #216]	; (8002d38 <DMA_CalcBaseAndBitshift+0x138>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d022      	beq.n	8002ca8 <DMA_CalcBaseAndBitshift+0xa8>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a35      	ldr	r2, [pc, #212]	; (8002d3c <DMA_CalcBaseAndBitshift+0x13c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d01d      	beq.n	8002ca8 <DMA_CalcBaseAndBitshift+0xa8>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a33      	ldr	r2, [pc, #204]	; (8002d40 <DMA_CalcBaseAndBitshift+0x140>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d018      	beq.n	8002ca8 <DMA_CalcBaseAndBitshift+0xa8>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a32      	ldr	r2, [pc, #200]	; (8002d44 <DMA_CalcBaseAndBitshift+0x144>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d013      	beq.n	8002ca8 <DMA_CalcBaseAndBitshift+0xa8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a30      	ldr	r2, [pc, #192]	; (8002d48 <DMA_CalcBaseAndBitshift+0x148>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00e      	beq.n	8002ca8 <DMA_CalcBaseAndBitshift+0xa8>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a2f      	ldr	r2, [pc, #188]	; (8002d4c <DMA_CalcBaseAndBitshift+0x14c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d009      	beq.n	8002ca8 <DMA_CalcBaseAndBitshift+0xa8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a2d      	ldr	r2, [pc, #180]	; (8002d50 <DMA_CalcBaseAndBitshift+0x150>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d004      	beq.n	8002ca8 <DMA_CalcBaseAndBitshift+0xa8>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a2c      	ldr	r2, [pc, #176]	; (8002d54 <DMA_CalcBaseAndBitshift+0x154>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d101      	bne.n	8002cac <DMA_CalcBaseAndBitshift+0xac>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <DMA_CalcBaseAndBitshift+0xae>
 8002cac:	2300      	movs	r3, #0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d024      	beq.n	8002cfc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	3b10      	subs	r3, #16
 8002cba:	4a27      	ldr	r2, [pc, #156]	; (8002d58 <DMA_CalcBaseAndBitshift+0x158>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	4a24      	ldr	r2, [pc, #144]	; (8002d5c <DMA_CalcBaseAndBitshift+0x15c>)
 8002ccc:	5cd3      	ldrb	r3, [r2, r3]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d908      	bls.n	8002cec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4b1f      	ldr	r3, [pc, #124]	; (8002d60 <DMA_CalcBaseAndBitshift+0x160>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	1d1a      	adds	r2, r3, #4
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	659a      	str	r2, [r3, #88]	; 0x58
 8002cea:	e00d      	b.n	8002d08 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <DMA_CalcBaseAndBitshift+0x160>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8002cfa:	e005      	b.n	8002d08 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	40020010 	.word	0x40020010
 8002d1c:	40020028 	.word	0x40020028
 8002d20:	40020040 	.word	0x40020040
 8002d24:	40020058 	.word	0x40020058
 8002d28:	40020070 	.word	0x40020070
 8002d2c:	40020088 	.word	0x40020088
 8002d30:	400200a0 	.word	0x400200a0
 8002d34:	400200b8 	.word	0x400200b8
 8002d38:	40020410 	.word	0x40020410
 8002d3c:	40020428 	.word	0x40020428
 8002d40:	40020440 	.word	0x40020440
 8002d44:	40020458 	.word	0x40020458
 8002d48:	40020470 	.word	0x40020470
 8002d4c:	40020488 	.word	0x40020488
 8002d50:	400204a0 	.word	0x400204a0
 8002d54:	400204b8 	.word	0x400204b8
 8002d58:	aaaaaaab 	.word	0xaaaaaaab
 8002d5c:	080090e0 	.word	0x080090e0
 8002d60:	fffffc00 	.word	0xfffffc00

08002d64 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d120      	bne.n	8002dba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d858      	bhi.n	8002e32 <DMA_CheckFifoParam+0xce>
 8002d80:	a201      	add	r2, pc, #4	; (adr r2, 8002d88 <DMA_CheckFifoParam+0x24>)
 8002d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d86:	bf00      	nop
 8002d88:	08002d99 	.word	0x08002d99
 8002d8c:	08002dab 	.word	0x08002dab
 8002d90:	08002d99 	.word	0x08002d99
 8002d94:	08002e33 	.word	0x08002e33
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d048      	beq.n	8002e36 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002da8:	e045      	b.n	8002e36 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002db2:	d142      	bne.n	8002e3a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002db8:	e03f      	b.n	8002e3a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc2:	d123      	bne.n	8002e0c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d838      	bhi.n	8002e3e <DMA_CheckFifoParam+0xda>
 8002dcc:	a201      	add	r2, pc, #4	; (adr r2, 8002dd4 <DMA_CheckFifoParam+0x70>)
 8002dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd2:	bf00      	nop
 8002dd4:	08002de5 	.word	0x08002de5
 8002dd8:	08002deb 	.word	0x08002deb
 8002ddc:	08002de5 	.word	0x08002de5
 8002de0:	08002dfd 	.word	0x08002dfd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	73fb      	strb	r3, [r7, #15]
        break;
 8002de8:	e030      	b.n	8002e4c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d025      	beq.n	8002e42 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002dfa:	e022      	b.n	8002e42 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e04:	d11f      	bne.n	8002e46 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002e0a:	e01c      	b.n	8002e46 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d902      	bls.n	8002e1a <DMA_CheckFifoParam+0xb6>
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d003      	beq.n	8002e20 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002e18:	e018      	b.n	8002e4c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e1e:	e015      	b.n	8002e4c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00e      	beq.n	8002e4a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8002e30:	e00b      	b.n	8002e4a <DMA_CheckFifoParam+0xe6>
        break;
 8002e32:	bf00      	nop
 8002e34:	e00a      	b.n	8002e4c <DMA_CheckFifoParam+0xe8>
        break;
 8002e36:	bf00      	nop
 8002e38:	e008      	b.n	8002e4c <DMA_CheckFifoParam+0xe8>
        break;
 8002e3a:	bf00      	nop
 8002e3c:	e006      	b.n	8002e4c <DMA_CheckFifoParam+0xe8>
        break;
 8002e3e:	bf00      	nop
 8002e40:	e004      	b.n	8002e4c <DMA_CheckFifoParam+0xe8>
        break;
 8002e42:	bf00      	nop
 8002e44:	e002      	b.n	8002e4c <DMA_CheckFifoParam+0xe8>
        break;
 8002e46:	bf00      	nop
 8002e48:	e000      	b.n	8002e4c <DMA_CheckFifoParam+0xe8>
    break;
 8002e4a:	bf00      	nop
    }
  }

  return status;
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop

08002e5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a38      	ldr	r2, [pc, #224]	; (8002f50 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d022      	beq.n	8002eba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a36      	ldr	r2, [pc, #216]	; (8002f54 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d01d      	beq.n	8002eba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a35      	ldr	r2, [pc, #212]	; (8002f58 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d018      	beq.n	8002eba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a33      	ldr	r2, [pc, #204]	; (8002f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d013      	beq.n	8002eba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a32      	ldr	r2, [pc, #200]	; (8002f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d00e      	beq.n	8002eba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a30      	ldr	r2, [pc, #192]	; (8002f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d009      	beq.n	8002eba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a2f      	ldr	r2, [pc, #188]	; (8002f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d004      	beq.n	8002eba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a2d      	ldr	r2, [pc, #180]	; (8002f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d101      	bne.n	8002ebe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d01a      	beq.n	8002efa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	3b08      	subs	r3, #8
 8002ecc:	4a28      	ldr	r2, [pc, #160]	; (8002f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	091b      	lsrs	r3, r3, #4
 8002ed4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4b26      	ldr	r3, [pc, #152]	; (8002f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	461a      	mov	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a24      	ldr	r2, [pc, #144]	; (8002f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002ee8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002ef8:	e024      	b.n	8002f44 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	3b10      	subs	r3, #16
 8002f02:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	091b      	lsrs	r3, r3, #4
 8002f0a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4a1c      	ldr	r2, [pc, #112]	; (8002f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d806      	bhi.n	8002f22 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	4a1b      	ldr	r2, [pc, #108]	; (8002f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d902      	bls.n	8002f22 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	3308      	adds	r3, #8
 8002f20:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a16      	ldr	r2, [pc, #88]	; (8002f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002f34:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	58025408 	.word	0x58025408
 8002f54:	5802541c 	.word	0x5802541c
 8002f58:	58025430 	.word	0x58025430
 8002f5c:	58025444 	.word	0x58025444
 8002f60:	58025458 	.word	0x58025458
 8002f64:	5802546c 	.word	0x5802546c
 8002f68:	58025480 	.word	0x58025480
 8002f6c:	58025494 	.word	0x58025494
 8002f70:	cccccccd 	.word	0xcccccccd
 8002f74:	16009600 	.word	0x16009600
 8002f78:	58025880 	.word	0x58025880
 8002f7c:	aaaaaaab 	.word	0xaaaaaaab
 8002f80:	400204b8 	.word	0x400204b8
 8002f84:	4002040f 	.word	0x4002040f
 8002f88:	10008200 	.word	0x10008200
 8002f8c:	40020880 	.word	0x40020880

08002f90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d04a      	beq.n	800303c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d847      	bhi.n	800303c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a25      	ldr	r2, [pc, #148]	; (8003048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d022      	beq.n	8002ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a24      	ldr	r2, [pc, #144]	; (800304c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d01d      	beq.n	8002ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a22      	ldr	r2, [pc, #136]	; (8003050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d018      	beq.n	8002ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a21      	ldr	r2, [pc, #132]	; (8003054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d013      	beq.n	8002ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a1f      	ldr	r2, [pc, #124]	; (8003058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00e      	beq.n	8002ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a1e      	ldr	r2, [pc, #120]	; (800305c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d009      	beq.n	8002ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1c      	ldr	r2, [pc, #112]	; (8003060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d004      	beq.n	8002ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1b      	ldr	r2, [pc, #108]	; (8003064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d101      	bne.n	8003000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003000:	2300      	movs	r3, #0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4b17      	ldr	r3, [pc, #92]	; (8003068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	461a      	mov	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a15      	ldr	r2, [pc, #84]	; (800306c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003018:	671a      	str	r2, [r3, #112]	; 0x70
 800301a:	e009      	b.n	8003030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	461a      	mov	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a11      	ldr	r2, [pc, #68]	; (8003074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800302e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3b01      	subs	r3, #1
 8003034:	2201      	movs	r2, #1
 8003036:	409a      	lsls	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	58025408 	.word	0x58025408
 800304c:	5802541c 	.word	0x5802541c
 8003050:	58025430 	.word	0x58025430
 8003054:	58025444 	.word	0x58025444
 8003058:	58025458 	.word	0x58025458
 800305c:	5802546c 	.word	0x5802546c
 8003060:	58025480 	.word	0x58025480
 8003064:	58025494 	.word	0x58025494
 8003068:	1600963f 	.word	0x1600963f
 800306c:	58025940 	.word	0x58025940
 8003070:	1000823f 	.word	0x1000823f
 8003074:	40020940 	.word	0x40020940

08003078 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003086:	4b89      	ldr	r3, [pc, #548]	; (80032ac <HAL_GPIO_Init+0x234>)
 8003088:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800308a:	e194      	b.n	80033b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	2101      	movs	r1, #1
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	fa01 f303 	lsl.w	r3, r1, r3
 8003098:	4013      	ands	r3, r2
 800309a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 8186 	beq.w	80033b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d005      	beq.n	80030bc <HAL_GPIO_Init+0x44>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d130      	bne.n	800311e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	2203      	movs	r2, #3
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030f2:	2201      	movs	r2, #1
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	091b      	lsrs	r3, r3, #4
 8003108:	f003 0201 	and.w	r2, r3, #1
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4313      	orrs	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b03      	cmp	r3, #3
 8003128:	d017      	beq.n	800315a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	2203      	movs	r2, #3
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4013      	ands	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d123      	bne.n	80031ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	08da      	lsrs	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3208      	adds	r2, #8
 800316e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	220f      	movs	r2, #15
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	08da      	lsrs	r2, r3, #3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3208      	adds	r2, #8
 80031a8:	69b9      	ldr	r1, [r7, #24]
 80031aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	2203      	movs	r2, #3
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 0203 	and.w	r2, r3, #3
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 80e0 	beq.w	80033b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f0:	4b2f      	ldr	r3, [pc, #188]	; (80032b0 <HAL_GPIO_Init+0x238>)
 80031f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031f6:	4a2e      	ldr	r2, [pc, #184]	; (80032b0 <HAL_GPIO_Init+0x238>)
 80031f8:	f043 0302 	orr.w	r3, r3, #2
 80031fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003200:	4b2b      	ldr	r3, [pc, #172]	; (80032b0 <HAL_GPIO_Init+0x238>)
 8003202:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800320e:	4a29      	ldr	r2, [pc, #164]	; (80032b4 <HAL_GPIO_Init+0x23c>)
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	089b      	lsrs	r3, r3, #2
 8003214:	3302      	adds	r3, #2
 8003216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800321a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	220f      	movs	r2, #15
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a20      	ldr	r2, [pc, #128]	; (80032b8 <HAL_GPIO_Init+0x240>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d052      	beq.n	80032e0 <HAL_GPIO_Init+0x268>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a1f      	ldr	r2, [pc, #124]	; (80032bc <HAL_GPIO_Init+0x244>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d031      	beq.n	80032a6 <HAL_GPIO_Init+0x22e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a1e      	ldr	r2, [pc, #120]	; (80032c0 <HAL_GPIO_Init+0x248>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d02b      	beq.n	80032a2 <HAL_GPIO_Init+0x22a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a1d      	ldr	r2, [pc, #116]	; (80032c4 <HAL_GPIO_Init+0x24c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d025      	beq.n	800329e <HAL_GPIO_Init+0x226>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a1c      	ldr	r2, [pc, #112]	; (80032c8 <HAL_GPIO_Init+0x250>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d01f      	beq.n	800329a <HAL_GPIO_Init+0x222>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a1b      	ldr	r2, [pc, #108]	; (80032cc <HAL_GPIO_Init+0x254>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d019      	beq.n	8003296 <HAL_GPIO_Init+0x21e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a1a      	ldr	r2, [pc, #104]	; (80032d0 <HAL_GPIO_Init+0x258>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d013      	beq.n	8003292 <HAL_GPIO_Init+0x21a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a19      	ldr	r2, [pc, #100]	; (80032d4 <HAL_GPIO_Init+0x25c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00d      	beq.n	800328e <HAL_GPIO_Init+0x216>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a18      	ldr	r2, [pc, #96]	; (80032d8 <HAL_GPIO_Init+0x260>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d007      	beq.n	800328a <HAL_GPIO_Init+0x212>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a17      	ldr	r2, [pc, #92]	; (80032dc <HAL_GPIO_Init+0x264>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d101      	bne.n	8003286 <HAL_GPIO_Init+0x20e>
 8003282:	2309      	movs	r3, #9
 8003284:	e02d      	b.n	80032e2 <HAL_GPIO_Init+0x26a>
 8003286:	230a      	movs	r3, #10
 8003288:	e02b      	b.n	80032e2 <HAL_GPIO_Init+0x26a>
 800328a:	2308      	movs	r3, #8
 800328c:	e029      	b.n	80032e2 <HAL_GPIO_Init+0x26a>
 800328e:	2307      	movs	r3, #7
 8003290:	e027      	b.n	80032e2 <HAL_GPIO_Init+0x26a>
 8003292:	2306      	movs	r3, #6
 8003294:	e025      	b.n	80032e2 <HAL_GPIO_Init+0x26a>
 8003296:	2305      	movs	r3, #5
 8003298:	e023      	b.n	80032e2 <HAL_GPIO_Init+0x26a>
 800329a:	2304      	movs	r3, #4
 800329c:	e021      	b.n	80032e2 <HAL_GPIO_Init+0x26a>
 800329e:	2303      	movs	r3, #3
 80032a0:	e01f      	b.n	80032e2 <HAL_GPIO_Init+0x26a>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e01d      	b.n	80032e2 <HAL_GPIO_Init+0x26a>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e01b      	b.n	80032e2 <HAL_GPIO_Init+0x26a>
 80032aa:	bf00      	nop
 80032ac:	58000080 	.word	0x58000080
 80032b0:	58024400 	.word	0x58024400
 80032b4:	58000400 	.word	0x58000400
 80032b8:	58020000 	.word	0x58020000
 80032bc:	58020400 	.word	0x58020400
 80032c0:	58020800 	.word	0x58020800
 80032c4:	58020c00 	.word	0x58020c00
 80032c8:	58021000 	.word	0x58021000
 80032cc:	58021400 	.word	0x58021400
 80032d0:	58021800 	.word	0x58021800
 80032d4:	58021c00 	.word	0x58021c00
 80032d8:	58022000 	.word	0x58022000
 80032dc:	58022400 	.word	0x58022400
 80032e0:	2300      	movs	r3, #0
 80032e2:	69fa      	ldr	r2, [r7, #28]
 80032e4:	f002 0203 	and.w	r2, r2, #3
 80032e8:	0092      	lsls	r2, r2, #2
 80032ea:	4093      	lsls	r3, r2
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032f2:	4938      	ldr	r1, [pc, #224]	; (80033d4 <HAL_GPIO_Init+0x35c>)
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	089b      	lsrs	r3, r3, #2
 80032f8:	3302      	adds	r3, #2
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	43db      	mvns	r3, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4013      	ands	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4313      	orrs	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003326:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800332e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003354:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	43db      	mvns	r3, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4013      	ands	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	3301      	adds	r3, #1
 80033b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f47f ae63 	bne.w	800308c <HAL_GPIO_Init+0x14>
  }
}
 80033c6:	bf00      	nop
 80033c8:	bf00      	nop
 80033ca:	3724      	adds	r7, #36	; 0x24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	58000400 	.word	0x58000400

080033d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	807b      	strh	r3, [r7, #2]
 80033e4:	4613      	mov	r3, r2
 80033e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033e8:	787b      	ldrb	r3, [r7, #1]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ee:	887a      	ldrh	r2, [r7, #2]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80033f4:	e003      	b.n	80033fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80033f6:	887b      	ldrh	r3, [r7, #2]
 80033f8:	041a      	lsls	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	619a      	str	r2, [r3, #24]
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003414:	4a08      	ldr	r2, [pc, #32]	; (8003438 <HAL_HSEM_FastTake+0x2c>)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3320      	adds	r3, #32
 800341a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341e:	4a07      	ldr	r2, [pc, #28]	; (800343c <HAL_HSEM_FastTake+0x30>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d101      	bne.n	8003428 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	e000      	b.n	800342a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
}
 800342a:	4618      	mov	r0, r3
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	58026400 	.word	0x58026400
 800343c:	80000300 	.word	0x80000300

08003440 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800344a:	4906      	ldr	r1, [pc, #24]	; (8003464 <HAL_HSEM_Release+0x24>)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	58026400 	.word	0x58026400

08003468 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af02      	add	r7, sp, #8
 800346e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e0fe      	b.n	8003678 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fd fe6a 	bl	8001168 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2203      	movs	r2, #3
 8003498:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f005 fb47 	bl	8008b34 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	7c1a      	ldrb	r2, [r3, #16]
 80034ae:	f88d 2000 	strb.w	r2, [sp]
 80034b2:	3304      	adds	r3, #4
 80034b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034b6:	f005 facb 	bl	8008a50 <USB_CoreInit>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0d5      	b.n	8003678 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f005 fb3f 	bl	8008b56 <USB_SetCurrentMode>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d005      	beq.n	80034ea <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2202      	movs	r2, #2
 80034e2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e0c6      	b.n	8003678 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ea:	2300      	movs	r3, #0
 80034ec:	73fb      	strb	r3, [r7, #15]
 80034ee:	e04a      	b.n	8003586 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034f0:	7bfa      	ldrb	r2, [r7, #15]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	3315      	adds	r3, #21
 8003500:	2201      	movs	r2, #1
 8003502:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	3314      	adds	r3, #20
 8003514:	7bfa      	ldrb	r2, [r7, #15]
 8003516:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003518:	7bfa      	ldrb	r2, [r7, #15]
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	b298      	uxth	r0, r3
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	332e      	adds	r3, #46	; 0x2e
 800352c:	4602      	mov	r2, r0
 800352e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003530:	7bfa      	ldrb	r2, [r7, #15]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	3318      	adds	r3, #24
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003544:	7bfa      	ldrb	r2, [r7, #15]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	331c      	adds	r3, #28
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003558:	7bfa      	ldrb	r2, [r7, #15]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	3320      	adds	r3, #32
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800356c:	7bfa      	ldrb	r2, [r7, #15]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	3324      	adds	r3, #36	; 0x24
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	3301      	adds	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	791b      	ldrb	r3, [r3, #4]
 800358a:	7bfa      	ldrb	r2, [r7, #15]
 800358c:	429a      	cmp	r2, r3
 800358e:	d3af      	bcc.n	80034f0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003590:	2300      	movs	r3, #0
 8003592:	73fb      	strb	r3, [r7, #15]
 8003594:	e044      	b.n	8003620 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003596:	7bfa      	ldrb	r2, [r7, #15]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	f203 2355 	addw	r3, r3, #597	; 0x255
 80035a8:	2200      	movs	r2, #0
 80035aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035ac:	7bfa      	ldrb	r2, [r7, #15]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80035be:	7bfa      	ldrb	r2, [r7, #15]
 80035c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80035d4:	2200      	movs	r2, #0
 80035d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035ee:	7bfa      	ldrb	r2, [r7, #15]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	3301      	adds	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	791b      	ldrb	r3, [r3, #4]
 8003624:	7bfa      	ldrb	r2, [r7, #15]
 8003626:	429a      	cmp	r2, r3
 8003628:	d3b5      	bcc.n	8003596 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	7c1a      	ldrb	r2, [r3, #16]
 8003632:	f88d 2000 	strb.w	r2, [sp]
 8003636:	3304      	adds	r3, #4
 8003638:	cb0e      	ldmia	r3, {r1, r2, r3}
 800363a:	f005 fad9 	bl	8008bf0 <USB_DevInit>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e013      	b.n	8003678 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	7b1b      	ldrb	r3, [r3, #12]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d102      	bne.n	800366c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f80a 	bl	8003680 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f005 fc94 	bl	8008f9e <USB_DevDisconnect>

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	10000003 	.word	0x10000003

080036c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80036d0:	4b29      	ldr	r3, [pc, #164]	; (8003778 <HAL_PWREx_ConfigSupply+0xb0>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	2b06      	cmp	r3, #6
 80036da:	d00a      	beq.n	80036f2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80036dc:	4b26      	ldr	r3, [pc, #152]	; (8003778 <HAL_PWREx_ConfigSupply+0xb0>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d001      	beq.n	80036ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e040      	b.n	8003770 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e03e      	b.n	8003770 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80036f2:	4b21      	ldr	r3, [pc, #132]	; (8003778 <HAL_PWREx_ConfigSupply+0xb0>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80036fa:	491f      	ldr	r1, [pc, #124]	; (8003778 <HAL_PWREx_ConfigSupply+0xb0>)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003702:	f7fd feab 	bl	800145c <HAL_GetTick>
 8003706:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003708:	e009      	b.n	800371e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800370a:	f7fd fea7 	bl	800145c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003718:	d901      	bls.n	800371e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e028      	b.n	8003770 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800371e:	4b16      	ldr	r3, [pc, #88]	; (8003778 <HAL_PWREx_ConfigSupply+0xb0>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800372a:	d1ee      	bne.n	800370a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b1e      	cmp	r3, #30
 8003730:	d008      	beq.n	8003744 <HAL_PWREx_ConfigSupply+0x7c>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b2e      	cmp	r3, #46	; 0x2e
 8003736:	d005      	beq.n	8003744 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b1d      	cmp	r3, #29
 800373c:	d002      	beq.n	8003744 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b2d      	cmp	r3, #45	; 0x2d
 8003742:	d114      	bne.n	800376e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003744:	f7fd fe8a 	bl	800145c <HAL_GetTick>
 8003748:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800374a:	e009      	b.n	8003760 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800374c:	f7fd fe86 	bl	800145c <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800375a:	d901      	bls.n	8003760 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e007      	b.n	8003770 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_PWREx_ConfigSupply+0xb0>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376c:	d1ee      	bne.n	800374c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	58024800 	.word	0x58024800

0800377c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003780:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4a04      	ldr	r2, [pc, #16]	; (8003798 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800378a:	60d3      	str	r3, [r2, #12]
}
 800378c:	bf00      	nop
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	58024800 	.word	0x58024800

0800379c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08c      	sub	sp, #48	; 0x30
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d102      	bne.n	80037b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f000 bc48 	b.w	8004040 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8088 	beq.w	80038ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037be:	4b99      	ldr	r3, [pc, #612]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037c8:	4b96      	ldr	r3, [pc, #600]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 80037ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037cc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80037ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d007      	beq.n	80037e4 <HAL_RCC_OscConfig+0x48>
 80037d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d6:	2b18      	cmp	r3, #24
 80037d8:	d111      	bne.n	80037fe <HAL_RCC_OscConfig+0x62>
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	f003 0303 	and.w	r3, r3, #3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d10c      	bne.n	80037fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e4:	4b8f      	ldr	r3, [pc, #572]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d06d      	beq.n	80038cc <HAL_RCC_OscConfig+0x130>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d169      	bne.n	80038cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f000 bc21 	b.w	8004040 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003806:	d106      	bne.n	8003816 <HAL_RCC_OscConfig+0x7a>
 8003808:	4b86      	ldr	r3, [pc, #536]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a85      	ldr	r2, [pc, #532]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 800380e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	e02e      	b.n	8003874 <HAL_RCC_OscConfig+0xd8>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10c      	bne.n	8003838 <HAL_RCC_OscConfig+0x9c>
 800381e:	4b81      	ldr	r3, [pc, #516]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a80      	ldr	r2, [pc, #512]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 8003824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	4b7e      	ldr	r3, [pc, #504]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a7d      	ldr	r2, [pc, #500]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 8003830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e01d      	b.n	8003874 <HAL_RCC_OscConfig+0xd8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0xc0>
 8003842:	4b78      	ldr	r3, [pc, #480]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a77      	ldr	r2, [pc, #476]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 8003848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	4b75      	ldr	r3, [pc, #468]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a74      	ldr	r2, [pc, #464]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 8003854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e00b      	b.n	8003874 <HAL_RCC_OscConfig+0xd8>
 800385c:	4b71      	ldr	r3, [pc, #452]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a70      	ldr	r2, [pc, #448]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 8003862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	4b6e      	ldr	r3, [pc, #440]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a6d      	ldr	r2, [pc, #436]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 800386e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d013      	beq.n	80038a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fd fdee 	bl	800145c <HAL_GetTick>
 8003880:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003884:	f7fd fdea 	bl	800145c <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	; 0x64
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e3d4      	b.n	8004040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003896:	4b63      	ldr	r3, [pc, #396]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0xe8>
 80038a2:	e014      	b.n	80038ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fd fdda 	bl	800145c <HAL_GetTick>
 80038a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ac:	f7fd fdd6 	bl	800145c <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b64      	cmp	r3, #100	; 0x64
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e3c0      	b.n	8004040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038be:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x110>
 80038ca:	e000      	b.n	80038ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 80ca 	beq.w	8003a70 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038dc:	4b51      	ldr	r3, [pc, #324]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038e6:	4b4f      	ldr	r3, [pc, #316]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 80038e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d007      	beq.n	8003902 <HAL_RCC_OscConfig+0x166>
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	2b18      	cmp	r3, #24
 80038f6:	d156      	bne.n	80039a6 <HAL_RCC_OscConfig+0x20a>
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d151      	bne.n	80039a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003902:	4b48      	ldr	r3, [pc, #288]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <HAL_RCC_OscConfig+0x17e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e392      	b.n	8004040 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800391a:	4b42      	ldr	r3, [pc, #264]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 0219 	bic.w	r2, r3, #25
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	493f      	ldr	r1, [pc, #252]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 8003928:	4313      	orrs	r3, r2
 800392a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7fd fd96 	bl	800145c <HAL_GetTick>
 8003930:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003934:	f7fd fd92 	bl	800145c <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e37c      	b.n	8004040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003946:	4b37      	ldr	r3, [pc, #220]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003952:	f7fd fdb3 	bl	80014bc <HAL_GetREVID>
 8003956:	4603      	mov	r3, r0
 8003958:	f241 0203 	movw	r2, #4099	; 0x1003
 800395c:	4293      	cmp	r3, r2
 800395e:	d817      	bhi.n	8003990 <HAL_RCC_OscConfig+0x1f4>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	2b40      	cmp	r3, #64	; 0x40
 8003966:	d108      	bne.n	800397a <HAL_RCC_OscConfig+0x1de>
 8003968:	4b2e      	ldr	r3, [pc, #184]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003970:	4a2c      	ldr	r2, [pc, #176]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 8003972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003976:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003978:	e07a      	b.n	8003a70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397a:	4b2a      	ldr	r3, [pc, #168]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	031b      	lsls	r3, r3, #12
 8003988:	4926      	ldr	r1, [pc, #152]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 800398a:	4313      	orrs	r3, r2
 800398c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800398e:	e06f      	b.n	8003a70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003990:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	061b      	lsls	r3, r3, #24
 800399e:	4921      	ldr	r1, [pc, #132]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039a4:	e064      	b.n	8003a70 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d047      	beq.n	8003a3e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039ae:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f023 0219 	bic.w	r2, r3, #25
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	491a      	ldr	r1, [pc, #104]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fd fd4c 	bl	800145c <HAL_GetTick>
 80039c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c8:	f7fd fd48 	bl	800145c <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e332      	b.n	8004040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039da:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e6:	f7fd fd69 	bl	80014bc <HAL_GetREVID>
 80039ea:	4603      	mov	r3, r0
 80039ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d819      	bhi.n	8003a28 <HAL_RCC_OscConfig+0x28c>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b40      	cmp	r3, #64	; 0x40
 80039fa:	d108      	bne.n	8003a0e <HAL_RCC_OscConfig+0x272>
 80039fc:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a04:	4a07      	ldr	r2, [pc, #28]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 8003a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a0a:	6053      	str	r3, [r2, #4]
 8003a0c:	e030      	b.n	8003a70 <HAL_RCC_OscConfig+0x2d4>
 8003a0e:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	031b      	lsls	r3, r3, #12
 8003a1c:	4901      	ldr	r1, [pc, #4]	; (8003a24 <HAL_RCC_OscConfig+0x288>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	604b      	str	r3, [r1, #4]
 8003a22:	e025      	b.n	8003a70 <HAL_RCC_OscConfig+0x2d4>
 8003a24:	58024400 	.word	0x58024400
 8003a28:	4b9a      	ldr	r3, [pc, #616]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	061b      	lsls	r3, r3, #24
 8003a36:	4997      	ldr	r1, [pc, #604]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	604b      	str	r3, [r1, #4]
 8003a3c:	e018      	b.n	8003a70 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a3e:	4b95      	ldr	r3, [pc, #596]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a94      	ldr	r2, [pc, #592]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4a:	f7fd fd07 	bl	800145c <HAL_GetTick>
 8003a4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a52:	f7fd fd03 	bl	800145c <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e2ed      	b.n	8004040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a64:	4b8b      	ldr	r3, [pc, #556]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f0      	bne.n	8003a52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 80a9 	beq.w	8003bd0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a7e:	4b85      	ldr	r3, [pc, #532]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a86:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a88:	4b82      	ldr	r3, [pc, #520]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d007      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x308>
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b18      	cmp	r3, #24
 8003a98:	d13a      	bne.n	8003b10 <HAL_RCC_OscConfig+0x374>
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d135      	bne.n	8003b10 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003aa4:	4b7b      	ldr	r3, [pc, #492]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_RCC_OscConfig+0x320>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	2b80      	cmp	r3, #128	; 0x80
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e2c1      	b.n	8004040 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003abc:	f7fd fcfe 	bl	80014bc <HAL_GetREVID>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d817      	bhi.n	8003afa <HAL_RCC_OscConfig+0x35e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	d108      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x348>
 8003ad2:	4b70      	ldr	r3, [pc, #448]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003ada:	4a6e      	ldr	r2, [pc, #440]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003adc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ae0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ae2:	e075      	b.n	8003bd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ae4:	4b6b      	ldr	r3, [pc, #428]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	069b      	lsls	r3, r3, #26
 8003af2:	4968      	ldr	r1, [pc, #416]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003af8:	e06a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003afa:	4b66      	ldr	r3, [pc, #408]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	061b      	lsls	r3, r3, #24
 8003b08:	4962      	ldr	r1, [pc, #392]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b0e:	e05f      	b.n	8003bd0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d042      	beq.n	8003b9e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b18:	4b5e      	ldr	r3, [pc, #376]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a5d      	ldr	r2, [pc, #372]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fd fc9a 	bl	800145c <HAL_GetTick>
 8003b28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b2c:	f7fd fc96 	bl	800145c <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e280      	b.n	8004040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b3e:	4b55      	ldr	r3, [pc, #340]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b4a:	f7fd fcb7 	bl	80014bc <HAL_GetREVID>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d817      	bhi.n	8003b88 <HAL_RCC_OscConfig+0x3ec>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	d108      	bne.n	8003b72 <HAL_RCC_OscConfig+0x3d6>
 8003b60:	4b4c      	ldr	r3, [pc, #304]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b68:	4a4a      	ldr	r2, [pc, #296]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003b6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b6e:	6053      	str	r3, [r2, #4]
 8003b70:	e02e      	b.n	8003bd0 <HAL_RCC_OscConfig+0x434>
 8003b72:	4b48      	ldr	r3, [pc, #288]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	069b      	lsls	r3, r3, #26
 8003b80:	4944      	ldr	r1, [pc, #272]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	604b      	str	r3, [r1, #4]
 8003b86:	e023      	b.n	8003bd0 <HAL_RCC_OscConfig+0x434>
 8003b88:	4b42      	ldr	r3, [pc, #264]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	061b      	lsls	r3, r3, #24
 8003b96:	493f      	ldr	r1, [pc, #252]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60cb      	str	r3, [r1, #12]
 8003b9c:	e018      	b.n	8003bd0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003b9e:	4b3d      	ldr	r3, [pc, #244]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a3c      	ldr	r2, [pc, #240]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003ba4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fd fc57 	bl	800145c <HAL_GetTick>
 8003bae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bb2:	f7fd fc53 	bl	800145c <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e23d      	b.n	8004040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bc4:	4b33      	ldr	r3, [pc, #204]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f0      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d036      	beq.n	8003c4a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d019      	beq.n	8003c18 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003be4:	4b2b      	ldr	r3, [pc, #172]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be8:	4a2a      	ldr	r2, [pc, #168]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf0:	f7fd fc34 	bl	800145c <HAL_GetTick>
 8003bf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf8:	f7fd fc30 	bl	800145c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e21a      	b.n	8004040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c0a:	4b22      	ldr	r3, [pc, #136]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x45c>
 8003c16:	e018      	b.n	8003c4a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c18:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1c:	4a1d      	ldr	r2, [pc, #116]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c24:	f7fd fc1a 	bl	800145c <HAL_GetTick>
 8003c28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c2c:	f7fd fc16 	bl	800145c <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e200      	b.n	8004040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c3e:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f0      	bne.n	8003c2c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d039      	beq.n	8003cca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01c      	beq.n	8003c98 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c5e:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a0c      	ldr	r2, [pc, #48]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003c64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c6a:	f7fd fbf7 	bl	800145c <HAL_GetTick>
 8003c6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c72:	f7fd fbf3 	bl	800145c <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e1dd      	b.n	8004040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c84:	4b03      	ldr	r3, [pc, #12]	; (8003c94 <HAL_RCC_OscConfig+0x4f8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0f0      	beq.n	8003c72 <HAL_RCC_OscConfig+0x4d6>
 8003c90:	e01b      	b.n	8003cca <HAL_RCC_OscConfig+0x52e>
 8003c92:	bf00      	nop
 8003c94:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c98:	4b9b      	ldr	r3, [pc, #620]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a9a      	ldr	r2, [pc, #616]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003c9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ca4:	f7fd fbda 	bl	800145c <HAL_GetTick>
 8003ca8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cac:	f7fd fbd6 	bl	800145c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e1c0      	b.n	8004040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cbe:	4b92      	ldr	r3, [pc, #584]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 8081 	beq.w	8003dda <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003cd8:	4b8c      	ldr	r3, [pc, #560]	; (8003f0c <HAL_RCC_OscConfig+0x770>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a8b      	ldr	r2, [pc, #556]	; (8003f0c <HAL_RCC_OscConfig+0x770>)
 8003cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ce4:	f7fd fbba 	bl	800145c <HAL_GetTick>
 8003ce8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cec:	f7fd fbb6 	bl	800145c <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b64      	cmp	r3, #100	; 0x64
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e1a0      	b.n	8004040 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cfe:	4b83      	ldr	r3, [pc, #524]	; (8003f0c <HAL_RCC_OscConfig+0x770>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d106      	bne.n	8003d20 <HAL_RCC_OscConfig+0x584>
 8003d12:	4b7d      	ldr	r3, [pc, #500]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d16:	4a7c      	ldr	r2, [pc, #496]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1e:	e02d      	b.n	8003d7c <HAL_RCC_OscConfig+0x5e0>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10c      	bne.n	8003d42 <HAL_RCC_OscConfig+0x5a6>
 8003d28:	4b77      	ldr	r3, [pc, #476]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2c:	4a76      	ldr	r2, [pc, #472]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003d2e:	f023 0301 	bic.w	r3, r3, #1
 8003d32:	6713      	str	r3, [r2, #112]	; 0x70
 8003d34:	4b74      	ldr	r3, [pc, #464]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d38:	4a73      	ldr	r2, [pc, #460]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003d3a:	f023 0304 	bic.w	r3, r3, #4
 8003d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d40:	e01c      	b.n	8003d7c <HAL_RCC_OscConfig+0x5e0>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	2b05      	cmp	r3, #5
 8003d48:	d10c      	bne.n	8003d64 <HAL_RCC_OscConfig+0x5c8>
 8003d4a:	4b6f      	ldr	r3, [pc, #444]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	4a6e      	ldr	r2, [pc, #440]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003d50:	f043 0304 	orr.w	r3, r3, #4
 8003d54:	6713      	str	r3, [r2, #112]	; 0x70
 8003d56:	4b6c      	ldr	r3, [pc, #432]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5a:	4a6b      	ldr	r2, [pc, #428]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	6713      	str	r3, [r2, #112]	; 0x70
 8003d62:	e00b      	b.n	8003d7c <HAL_RCC_OscConfig+0x5e0>
 8003d64:	4b68      	ldr	r3, [pc, #416]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	4a67      	ldr	r2, [pc, #412]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003d6a:	f023 0301 	bic.w	r3, r3, #1
 8003d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d70:	4b65      	ldr	r3, [pc, #404]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	4a64      	ldr	r2, [pc, #400]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003d76:	f023 0304 	bic.w	r3, r3, #4
 8003d7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d015      	beq.n	8003db0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d84:	f7fd fb6a 	bl	800145c <HAL_GetTick>
 8003d88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d8a:	e00a      	b.n	8003da2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8c:	f7fd fb66 	bl	800145c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e14e      	b.n	8004040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003da2:	4b59      	ldr	r3, [pc, #356]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0ee      	beq.n	8003d8c <HAL_RCC_OscConfig+0x5f0>
 8003dae:	e014      	b.n	8003dda <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db0:	f7fd fb54 	bl	800145c <HAL_GetTick>
 8003db4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003db6:	e00a      	b.n	8003dce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db8:	f7fd fb50 	bl	800145c <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e138      	b.n	8004040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003dce:	4b4e      	ldr	r3, [pc, #312]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1ee      	bne.n	8003db8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 812d 	beq.w	800403e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003de4:	4b48      	ldr	r3, [pc, #288]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dec:	2b18      	cmp	r3, #24
 8003dee:	f000 80bd 	beq.w	8003f6c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	f040 809e 	bne.w	8003f38 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfc:	4b42      	ldr	r3, [pc, #264]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a41      	ldr	r2, [pc, #260]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003e02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fd fb28 	bl	800145c <HAL_GetTick>
 8003e0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e10:	f7fd fb24 	bl	800145c <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e10e      	b.n	8004040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e22:	4b39      	ldr	r3, [pc, #228]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e2e:	4b36      	ldr	r3, [pc, #216]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e32:	4b37      	ldr	r3, [pc, #220]	; (8003f10 <HAL_RCC_OscConfig+0x774>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e3e:	0112      	lsls	r2, r2, #4
 8003e40:	430a      	orrs	r2, r1
 8003e42:	4931      	ldr	r1, [pc, #196]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	628b      	str	r3, [r1, #40]	; 0x28
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e56:	3b01      	subs	r3, #1
 8003e58:	025b      	lsls	r3, r3, #9
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	3b01      	subs	r3, #1
 8003e64:	041b      	lsls	r3, r3, #16
 8003e66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e70:	3b01      	subs	r3, #1
 8003e72:	061b      	lsls	r3, r3, #24
 8003e74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e78:	4923      	ldr	r1, [pc, #140]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003e7e:	4b22      	ldr	r3, [pc, #136]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	4a21      	ldr	r2, [pc, #132]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e8a:	4b1f      	ldr	r3, [pc, #124]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e8e:	4b21      	ldr	r3, [pc, #132]	; (8003f14 <HAL_RCC_OscConfig+0x778>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e96:	00d2      	lsls	r2, r2, #3
 8003e98:	491b      	ldr	r1, [pc, #108]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e9e:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	f023 020c 	bic.w	r2, r3, #12
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	4917      	ldr	r1, [pc, #92]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003eb0:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	f023 0202 	bic.w	r2, r3, #2
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebc:	4912      	ldr	r1, [pc, #72]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ec2:	4b11      	ldr	r3, [pc, #68]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec6:	4a10      	ldr	r2, [pc, #64]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ece:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	4a0d      	ldr	r2, [pc, #52]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003eda:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	4a0a      	ldr	r2, [pc, #40]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003ee6:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eea:	4a07      	ldr	r2, [pc, #28]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ef2:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a04      	ldr	r2, [pc, #16]	; (8003f08 <HAL_RCC_OscConfig+0x76c>)
 8003ef8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efe:	f7fd faad 	bl	800145c <HAL_GetTick>
 8003f02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f04:	e011      	b.n	8003f2a <HAL_RCC_OscConfig+0x78e>
 8003f06:	bf00      	nop
 8003f08:	58024400 	.word	0x58024400
 8003f0c:	58024800 	.word	0x58024800
 8003f10:	fffffc0c 	.word	0xfffffc0c
 8003f14:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f18:	f7fd faa0 	bl	800145c <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e08a      	b.n	8004040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f2a:	4b47      	ldr	r3, [pc, #284]	; (8004048 <HAL_RCC_OscConfig+0x8ac>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x77c>
 8003f36:	e082      	b.n	800403e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f38:	4b43      	ldr	r3, [pc, #268]	; (8004048 <HAL_RCC_OscConfig+0x8ac>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a42      	ldr	r2, [pc, #264]	; (8004048 <HAL_RCC_OscConfig+0x8ac>)
 8003f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fd fa8a 	bl	800145c <HAL_GetTick>
 8003f48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4c:	f7fd fa86 	bl	800145c <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e070      	b.n	8004040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f5e:	4b3a      	ldr	r3, [pc, #232]	; (8004048 <HAL_RCC_OscConfig+0x8ac>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0x7b0>
 8003f6a:	e068      	b.n	800403e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003f6c:	4b36      	ldr	r3, [pc, #216]	; (8004048 <HAL_RCC_OscConfig+0x8ac>)
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f72:	4b35      	ldr	r3, [pc, #212]	; (8004048 <HAL_RCC_OscConfig+0x8ac>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d031      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f003 0203 	and.w	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d12a      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d122      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d11a      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	0a5b      	lsrs	r3, r3, #9
 8003fb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d111      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	0c1b      	lsrs	r3, r3, #16
 8003fc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d108      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	0e1b      	lsrs	r3, r3, #24
 8003fd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fde:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e02b      	b.n	8004040 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003fe8:	4b17      	ldr	r3, [pc, #92]	; (8004048 <HAL_RCC_OscConfig+0x8ac>)
 8003fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fec:	08db      	lsrs	r3, r3, #3
 8003fee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ff2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d01f      	beq.n	800403e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003ffe:	4b12      	ldr	r3, [pc, #72]	; (8004048 <HAL_RCC_OscConfig+0x8ac>)
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	4a11      	ldr	r2, [pc, #68]	; (8004048 <HAL_RCC_OscConfig+0x8ac>)
 8004004:	f023 0301 	bic.w	r3, r3, #1
 8004008:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800400a:	f7fd fa27 	bl	800145c <HAL_GetTick>
 800400e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004010:	bf00      	nop
 8004012:	f7fd fa23 	bl	800145c <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	4293      	cmp	r3, r2
 800401c:	d0f9      	beq.n	8004012 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800401e:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <HAL_RCC_OscConfig+0x8ac>)
 8004020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004022:	4b0a      	ldr	r3, [pc, #40]	; (800404c <HAL_RCC_OscConfig+0x8b0>)
 8004024:	4013      	ands	r3, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800402a:	00d2      	lsls	r2, r2, #3
 800402c:	4906      	ldr	r1, [pc, #24]	; (8004048 <HAL_RCC_OscConfig+0x8ac>)
 800402e:	4313      	orrs	r3, r2
 8004030:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004032:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_RCC_OscConfig+0x8ac>)
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	4a04      	ldr	r2, [pc, #16]	; (8004048 <HAL_RCC_OscConfig+0x8ac>)
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3730      	adds	r7, #48	; 0x30
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	58024400 	.word	0x58024400
 800404c:	ffff0007 	.word	0xffff0007

08004050 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e19c      	b.n	800439e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004064:	4b8a      	ldr	r3, [pc, #552]	; (8004290 <HAL_RCC_ClockConfig+0x240>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d910      	bls.n	8004094 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004072:	4b87      	ldr	r3, [pc, #540]	; (8004290 <HAL_RCC_ClockConfig+0x240>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f023 020f 	bic.w	r2, r3, #15
 800407a:	4985      	ldr	r1, [pc, #532]	; (8004290 <HAL_RCC_ClockConfig+0x240>)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	4313      	orrs	r3, r2
 8004080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004082:	4b83      	ldr	r3, [pc, #524]	; (8004290 <HAL_RCC_ClockConfig+0x240>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e184      	b.n	800439e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d010      	beq.n	80040c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	4b7b      	ldr	r3, [pc, #492]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d908      	bls.n	80040c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040b0:	4b78      	ldr	r3, [pc, #480]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	4975      	ldr	r1, [pc, #468]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d010      	beq.n	80040f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	4b70      	ldr	r3, [pc, #448]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040da:	429a      	cmp	r2, r3
 80040dc:	d908      	bls.n	80040f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040de:	4b6d      	ldr	r3, [pc, #436]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	496a      	ldr	r1, [pc, #424]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d010      	beq.n	800411e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699a      	ldr	r2, [r3, #24]
 8004100:	4b64      	ldr	r3, [pc, #400]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004108:	429a      	cmp	r2, r3
 800410a:	d908      	bls.n	800411e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800410c:	4b61      	ldr	r3, [pc, #388]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	495e      	ldr	r1, [pc, #376]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 800411a:	4313      	orrs	r3, r2
 800411c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d010      	beq.n	800414c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69da      	ldr	r2, [r3, #28]
 800412e:	4b59      	ldr	r3, [pc, #356]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004136:	429a      	cmp	r2, r3
 8004138:	d908      	bls.n	800414c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800413a:	4b56      	ldr	r3, [pc, #344]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	4953      	ldr	r1, [pc, #332]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 8004148:	4313      	orrs	r3, r2
 800414a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d010      	beq.n	800417a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	4b4d      	ldr	r3, [pc, #308]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	f003 030f 	and.w	r3, r3, #15
 8004164:	429a      	cmp	r2, r3
 8004166:	d908      	bls.n	800417a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004168:	4b4a      	ldr	r3, [pc, #296]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	f023 020f 	bic.w	r2, r3, #15
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4947      	ldr	r1, [pc, #284]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 8004176:	4313      	orrs	r3, r2
 8004178:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d055      	beq.n	8004232 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004186:	4b43      	ldr	r3, [pc, #268]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	4940      	ldr	r1, [pc, #256]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 8004194:	4313      	orrs	r3, r2
 8004196:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d107      	bne.n	80041b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041a0:	4b3c      	ldr	r3, [pc, #240]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d121      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0f6      	b.n	800439e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b03      	cmp	r3, #3
 80041b6:	d107      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041b8:	4b36      	ldr	r3, [pc, #216]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d115      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0ea      	b.n	800439e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d107      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041d0:	4b30      	ldr	r3, [pc, #192]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d109      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e0de      	b.n	800439e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041e0:	4b2c      	ldr	r3, [pc, #176]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0d6      	b.n	800439e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041f0:	4b28      	ldr	r3, [pc, #160]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f023 0207 	bic.w	r2, r3, #7
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	4925      	ldr	r1, [pc, #148]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004202:	f7fd f92b 	bl	800145c <HAL_GetTick>
 8004206:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004208:	e00a      	b.n	8004220 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800420a:	f7fd f927 	bl	800145c <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	f241 3288 	movw	r2, #5000	; 0x1388
 8004218:	4293      	cmp	r3, r2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e0be      	b.n	800439e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004220:	4b1c      	ldr	r3, [pc, #112]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	429a      	cmp	r2, r3
 8004230:	d1eb      	bne.n	800420a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d010      	beq.n	8004260 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	4b14      	ldr	r3, [pc, #80]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	429a      	cmp	r2, r3
 800424c:	d208      	bcs.n	8004260 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800424e:	4b11      	ldr	r3, [pc, #68]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f023 020f 	bic.w	r2, r3, #15
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	490e      	ldr	r1, [pc, #56]	; (8004294 <HAL_RCC_ClockConfig+0x244>)
 800425c:	4313      	orrs	r3, r2
 800425e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004260:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <HAL_RCC_ClockConfig+0x240>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d214      	bcs.n	8004298 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426e:	4b08      	ldr	r3, [pc, #32]	; (8004290 <HAL_RCC_ClockConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 020f 	bic.w	r2, r3, #15
 8004276:	4906      	ldr	r1, [pc, #24]	; (8004290 <HAL_RCC_ClockConfig+0x240>)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	4313      	orrs	r3, r2
 800427c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800427e:	4b04      	ldr	r3, [pc, #16]	; (8004290 <HAL_RCC_ClockConfig+0x240>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d005      	beq.n	8004298 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e086      	b.n	800439e <HAL_RCC_ClockConfig+0x34e>
 8004290:	52002000 	.word	0x52002000
 8004294:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d010      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	4b3f      	ldr	r3, [pc, #252]	; (80043a8 <HAL_RCC_ClockConfig+0x358>)
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d208      	bcs.n	80042c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042b4:	4b3c      	ldr	r3, [pc, #240]	; (80043a8 <HAL_RCC_ClockConfig+0x358>)
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	4939      	ldr	r1, [pc, #228]	; (80043a8 <HAL_RCC_ClockConfig+0x358>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d010      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695a      	ldr	r2, [r3, #20]
 80042d6:	4b34      	ldr	r3, [pc, #208]	; (80043a8 <HAL_RCC_ClockConfig+0x358>)
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042de:	429a      	cmp	r2, r3
 80042e0:	d208      	bcs.n	80042f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042e2:	4b31      	ldr	r3, [pc, #196]	; (80043a8 <HAL_RCC_ClockConfig+0x358>)
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	492e      	ldr	r1, [pc, #184]	; (80043a8 <HAL_RCC_ClockConfig+0x358>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d010      	beq.n	8004322 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	699a      	ldr	r2, [r3, #24]
 8004304:	4b28      	ldr	r3, [pc, #160]	; (80043a8 <HAL_RCC_ClockConfig+0x358>)
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800430c:	429a      	cmp	r2, r3
 800430e:	d208      	bcs.n	8004322 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004310:	4b25      	ldr	r3, [pc, #148]	; (80043a8 <HAL_RCC_ClockConfig+0x358>)
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	4922      	ldr	r1, [pc, #136]	; (80043a8 <HAL_RCC_ClockConfig+0x358>)
 800431e:	4313      	orrs	r3, r2
 8004320:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b00      	cmp	r3, #0
 800432c:	d010      	beq.n	8004350 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69da      	ldr	r2, [r3, #28]
 8004332:	4b1d      	ldr	r3, [pc, #116]	; (80043a8 <HAL_RCC_ClockConfig+0x358>)
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800433a:	429a      	cmp	r2, r3
 800433c:	d208      	bcs.n	8004350 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800433e:	4b1a      	ldr	r3, [pc, #104]	; (80043a8 <HAL_RCC_ClockConfig+0x358>)
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	4917      	ldr	r1, [pc, #92]	; (80043a8 <HAL_RCC_ClockConfig+0x358>)
 800434c:	4313      	orrs	r3, r2
 800434e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004350:	f000 f834 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 8004354:	4602      	mov	r2, r0
 8004356:	4b14      	ldr	r3, [pc, #80]	; (80043a8 <HAL_RCC_ClockConfig+0x358>)
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	4912      	ldr	r1, [pc, #72]	; (80043ac <HAL_RCC_ClockConfig+0x35c>)
 8004362:	5ccb      	ldrb	r3, [r1, r3]
 8004364:	f003 031f 	and.w	r3, r3, #31
 8004368:	fa22 f303 	lsr.w	r3, r2, r3
 800436c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800436e:	4b0e      	ldr	r3, [pc, #56]	; (80043a8 <HAL_RCC_ClockConfig+0x358>)
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	4a0d      	ldr	r2, [pc, #52]	; (80043ac <HAL_RCC_ClockConfig+0x35c>)
 8004378:	5cd3      	ldrb	r3, [r2, r3]
 800437a:	f003 031f 	and.w	r3, r3, #31
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	fa22 f303 	lsr.w	r3, r2, r3
 8004384:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <HAL_RCC_ClockConfig+0x360>)
 8004386:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004388:	4a0a      	ldr	r2, [pc, #40]	; (80043b4 <HAL_RCC_ClockConfig+0x364>)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800438e:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <HAL_RCC_ClockConfig+0x368>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f7fd f818 	bl	80013c8 <HAL_InitTick>
 8004398:	4603      	mov	r3, r0
 800439a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800439c:	7bfb      	ldrb	r3, [r7, #15]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	58024400 	.word	0x58024400
 80043ac:	080090d0 	.word	0x080090d0
 80043b0:	24000004 	.word	0x24000004
 80043b4:	24000000 	.word	0x24000000
 80043b8:	24000008 	.word	0x24000008

080043bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	b089      	sub	sp, #36	; 0x24
 80043c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043c2:	4bb3      	ldr	r3, [pc, #716]	; (8004690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043ca:	2b18      	cmp	r3, #24
 80043cc:	f200 8155 	bhi.w	800467a <HAL_RCC_GetSysClockFreq+0x2be>
 80043d0:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80043d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d6:	bf00      	nop
 80043d8:	0800443d 	.word	0x0800443d
 80043dc:	0800467b 	.word	0x0800467b
 80043e0:	0800467b 	.word	0x0800467b
 80043e4:	0800467b 	.word	0x0800467b
 80043e8:	0800467b 	.word	0x0800467b
 80043ec:	0800467b 	.word	0x0800467b
 80043f0:	0800467b 	.word	0x0800467b
 80043f4:	0800467b 	.word	0x0800467b
 80043f8:	08004463 	.word	0x08004463
 80043fc:	0800467b 	.word	0x0800467b
 8004400:	0800467b 	.word	0x0800467b
 8004404:	0800467b 	.word	0x0800467b
 8004408:	0800467b 	.word	0x0800467b
 800440c:	0800467b 	.word	0x0800467b
 8004410:	0800467b 	.word	0x0800467b
 8004414:	0800467b 	.word	0x0800467b
 8004418:	08004469 	.word	0x08004469
 800441c:	0800467b 	.word	0x0800467b
 8004420:	0800467b 	.word	0x0800467b
 8004424:	0800467b 	.word	0x0800467b
 8004428:	0800467b 	.word	0x0800467b
 800442c:	0800467b 	.word	0x0800467b
 8004430:	0800467b 	.word	0x0800467b
 8004434:	0800467b 	.word	0x0800467b
 8004438:	0800446f 	.word	0x0800446f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800443c:	4b94      	ldr	r3, [pc, #592]	; (8004690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b00      	cmp	r3, #0
 8004446:	d009      	beq.n	800445c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004448:	4b91      	ldr	r3, [pc, #580]	; (8004690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	08db      	lsrs	r3, r3, #3
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	4a90      	ldr	r2, [pc, #576]	; (8004694 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
 8004458:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800445a:	e111      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800445c:	4b8d      	ldr	r3, [pc, #564]	; (8004694 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800445e:	61bb      	str	r3, [r7, #24]
      break;
 8004460:	e10e      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004462:	4b8d      	ldr	r3, [pc, #564]	; (8004698 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004464:	61bb      	str	r3, [r7, #24]
      break;
 8004466:	e10b      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004468:	4b8c      	ldr	r3, [pc, #560]	; (800469c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800446a:	61bb      	str	r3, [r7, #24]
      break;
 800446c:	e108      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800446e:	4b88      	ldr	r3, [pc, #544]	; (8004690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004478:	4b85      	ldr	r3, [pc, #532]	; (8004690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004482:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004484:	4b82      	ldr	r3, [pc, #520]	; (8004690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800448e:	4b80      	ldr	r3, [pc, #512]	; (8004690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004492:	08db      	lsrs	r3, r3, #3
 8004494:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 80e1 	beq.w	8004674 <HAL_RCC_GetSysClockFreq+0x2b8>
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	f000 8083 	beq.w	80045c0 <HAL_RCC_GetSysClockFreq+0x204>
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	f200 80a1 	bhi.w	8004604 <HAL_RCC_GetSysClockFreq+0x248>
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_RCC_GetSysClockFreq+0x114>
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d056      	beq.n	800457c <HAL_RCC_GetSysClockFreq+0x1c0>
 80044ce:	e099      	b.n	8004604 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044d0:	4b6f      	ldr	r3, [pc, #444]	; (8004690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d02d      	beq.n	8004538 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044dc:	4b6c      	ldr	r3, [pc, #432]	; (8004690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	08db      	lsrs	r3, r3, #3
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	4a6b      	ldr	r2, [pc, #428]	; (8004694 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
 80044ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	ee07 3a90 	vmov	s15, r3
 80044f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	ee07 3a90 	vmov	s15, r3
 80044fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004506:	4b62      	ldr	r3, [pc, #392]	; (8004690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450e:	ee07 3a90 	vmov	s15, r3
 8004512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004516:	ed97 6a02 	vldr	s12, [r7, #8]
 800451a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80046a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800451e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800452a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800452e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004532:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004536:	e087      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	ee07 3a90 	vmov	s15, r3
 800453e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004542:	eddf 6a58 	vldr	s13, [pc, #352]	; 80046a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800454a:	4b51      	ldr	r3, [pc, #324]	; (8004690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004552:	ee07 3a90 	vmov	s15, r3
 8004556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800455a:	ed97 6a02 	vldr	s12, [r7, #8]
 800455e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80046a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800456a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800456e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004576:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800457a:	e065      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004586:	eddf 6a48 	vldr	s13, [pc, #288]	; 80046a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800458a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800458e:	4b40      	ldr	r3, [pc, #256]	; (8004690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004596:	ee07 3a90 	vmov	s15, r3
 800459a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800459e:	ed97 6a02 	vldr	s12, [r7, #8]
 80045a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80046a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045be:	e043      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	ee07 3a90 	vmov	s15, r3
 80045c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80046ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80045ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045d2:	4b2f      	ldr	r3, [pc, #188]	; (8004690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045da:	ee07 3a90 	vmov	s15, r3
 80045de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80045e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80046a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004602:	e021      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80046a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004616:	4b1e      	ldr	r3, [pc, #120]	; (8004690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800461e:	ee07 3a90 	vmov	s15, r3
 8004622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004626:	ed97 6a02 	vldr	s12, [r7, #8]
 800462a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80046a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800462e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800463a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800463e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004642:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004646:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004648:	4b11      	ldr	r3, [pc, #68]	; (8004690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	0a5b      	lsrs	r3, r3, #9
 800464e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004652:	3301      	adds	r3, #1
 8004654:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	ee07 3a90 	vmov	s15, r3
 800465c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004660:	edd7 6a07 	vldr	s13, [r7, #28]
 8004664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800466c:	ee17 3a90 	vmov	r3, s15
 8004670:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004672:	e005      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	61bb      	str	r3, [r7, #24]
      break;
 8004678:	e002      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800467a:	4b07      	ldr	r3, [pc, #28]	; (8004698 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800467c:	61bb      	str	r3, [r7, #24]
      break;
 800467e:	bf00      	nop
  }

  return sysclockfreq;
 8004680:	69bb      	ldr	r3, [r7, #24]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3724      	adds	r7, #36	; 0x24
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	58024400 	.word	0x58024400
 8004694:	03d09000 	.word	0x03d09000
 8004698:	003d0900 	.word	0x003d0900
 800469c:	007a1200 	.word	0x007a1200
 80046a0:	46000000 	.word	0x46000000
 80046a4:	4c742400 	.word	0x4c742400
 80046a8:	4a742400 	.word	0x4a742400
 80046ac:	4af42400 	.word	0x4af42400

080046b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80046b6:	f7ff fe81 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 80046ba:	4602      	mov	r2, r0
 80046bc:	4b10      	ldr	r3, [pc, #64]	; (8004700 <HAL_RCC_GetHCLKFreq+0x50>)
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	0a1b      	lsrs	r3, r3, #8
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	490f      	ldr	r1, [pc, #60]	; (8004704 <HAL_RCC_GetHCLKFreq+0x54>)
 80046c8:	5ccb      	ldrb	r3, [r1, r3]
 80046ca:	f003 031f 	and.w	r3, r3, #31
 80046ce:	fa22 f303 	lsr.w	r3, r2, r3
 80046d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046d4:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <HAL_RCC_GetHCLKFreq+0x50>)
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	f003 030f 	and.w	r3, r3, #15
 80046dc:	4a09      	ldr	r2, [pc, #36]	; (8004704 <HAL_RCC_GetHCLKFreq+0x54>)
 80046de:	5cd3      	ldrb	r3, [r2, r3]
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ea:	4a07      	ldr	r2, [pc, #28]	; (8004708 <HAL_RCC_GetHCLKFreq+0x58>)
 80046ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046ee:	4a07      	ldr	r2, [pc, #28]	; (800470c <HAL_RCC_GetHCLKFreq+0x5c>)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80046f4:	4b04      	ldr	r3, [pc, #16]	; (8004708 <HAL_RCC_GetHCLKFreq+0x58>)
 80046f6:	681b      	ldr	r3, [r3, #0]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	58024400 	.word	0x58024400
 8004704:	080090d0 	.word	0x080090d0
 8004708:	24000004 	.word	0x24000004
 800470c:	24000000 	.word	0x24000000

08004710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004714:	f7ff ffcc 	bl	80046b0 <HAL_RCC_GetHCLKFreq>
 8004718:	4602      	mov	r2, r0
 800471a:	4b06      	ldr	r3, [pc, #24]	; (8004734 <HAL_RCC_GetPCLK1Freq+0x24>)
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	091b      	lsrs	r3, r3, #4
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	4904      	ldr	r1, [pc, #16]	; (8004738 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004726:	5ccb      	ldrb	r3, [r1, r3]
 8004728:	f003 031f 	and.w	r3, r3, #31
 800472c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004730:	4618      	mov	r0, r3
 8004732:	bd80      	pop	{r7, pc}
 8004734:	58024400 	.word	0x58024400
 8004738:	080090d0 	.word	0x080090d0

0800473c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004740:	f7ff ffb6 	bl	80046b0 <HAL_RCC_GetHCLKFreq>
 8004744:	4602      	mov	r2, r0
 8004746:	4b06      	ldr	r3, [pc, #24]	; (8004760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	0a1b      	lsrs	r3, r3, #8
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	4904      	ldr	r1, [pc, #16]	; (8004764 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004752:	5ccb      	ldrb	r3, [r1, r3]
 8004754:	f003 031f 	and.w	r3, r3, #31
 8004758:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800475c:	4618      	mov	r0, r3
 800475e:	bd80      	pop	{r7, pc}
 8004760:	58024400 	.word	0x58024400
 8004764:	080090d0 	.word	0x080090d0

08004768 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800476c:	b0ca      	sub	sp, #296	; 0x128
 800476e:	af00      	add	r7, sp, #0
 8004770:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004774:	2300      	movs	r3, #0
 8004776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800477a:	2300      	movs	r3, #0
 800477c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004788:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800478c:	2500      	movs	r5, #0
 800478e:	ea54 0305 	orrs.w	r3, r4, r5
 8004792:	d049      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800479a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800479e:	d02f      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80047a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047a4:	d828      	bhi.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80047a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047aa:	d01a      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80047ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047b0:	d822      	bhi.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80047b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ba:	d007      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80047bc:	e01c      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047be:	4bb8      	ldr	r3, [pc, #736]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c2:	4ab7      	ldr	r2, [pc, #732]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047ca:	e01a      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d0:	3308      	adds	r3, #8
 80047d2:	2102      	movs	r1, #2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f001 fc8f 	bl	80060f8 <RCCEx_PLL2_Config>
 80047da:	4603      	mov	r3, r0
 80047dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047e0:	e00f      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e6:	3328      	adds	r3, #40	; 0x28
 80047e8:	2102      	movs	r1, #2
 80047ea:	4618      	mov	r0, r3
 80047ec:	f001 fd36 	bl	800625c <RCCEx_PLL3_Config>
 80047f0:	4603      	mov	r3, r0
 80047f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047f6:	e004      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047fe:	e000      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004802:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10a      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800480a:	4ba5      	ldr	r3, [pc, #660]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800480c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800480e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004818:	4aa1      	ldr	r2, [pc, #644]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800481a:	430b      	orrs	r3, r1
 800481c:	6513      	str	r3, [r2, #80]	; 0x50
 800481e:	e003      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004820:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004824:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800482c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004830:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004834:	f04f 0900 	mov.w	r9, #0
 8004838:	ea58 0309 	orrs.w	r3, r8, r9
 800483c:	d047      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800483e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004844:	2b04      	cmp	r3, #4
 8004846:	d82a      	bhi.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004848:	a201      	add	r2, pc, #4	; (adr r2, 8004850 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800484a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484e:	bf00      	nop
 8004850:	08004865 	.word	0x08004865
 8004854:	08004873 	.word	0x08004873
 8004858:	08004889 	.word	0x08004889
 800485c:	080048a7 	.word	0x080048a7
 8004860:	080048a7 	.word	0x080048a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004864:	4b8e      	ldr	r3, [pc, #568]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004868:	4a8d      	ldr	r2, [pc, #564]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800486a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800486e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004870:	e01a      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004876:	3308      	adds	r3, #8
 8004878:	2100      	movs	r1, #0
 800487a:	4618      	mov	r0, r3
 800487c:	f001 fc3c 	bl	80060f8 <RCCEx_PLL2_Config>
 8004880:	4603      	mov	r3, r0
 8004882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004886:	e00f      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800488c:	3328      	adds	r3, #40	; 0x28
 800488e:	2100      	movs	r1, #0
 8004890:	4618      	mov	r0, r3
 8004892:	f001 fce3 	bl	800625c <RCCEx_PLL3_Config>
 8004896:	4603      	mov	r3, r0
 8004898:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800489c:	e004      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048a4:	e000      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80048a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10a      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048b0:	4b7b      	ldr	r3, [pc, #492]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b4:	f023 0107 	bic.w	r1, r3, #7
 80048b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048be:	4a78      	ldr	r2, [pc, #480]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048c0:	430b      	orrs	r3, r1
 80048c2:	6513      	str	r3, [r2, #80]	; 0x50
 80048c4:	e003      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80048ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80048da:	f04f 0b00 	mov.w	fp, #0
 80048de:	ea5a 030b 	orrs.w	r3, sl, fp
 80048e2:	d04c      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80048e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ee:	d030      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80048f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048f4:	d829      	bhi.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80048f6:	2bc0      	cmp	r3, #192	; 0xc0
 80048f8:	d02d      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80048fa:	2bc0      	cmp	r3, #192	; 0xc0
 80048fc:	d825      	bhi.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80048fe:	2b80      	cmp	r3, #128	; 0x80
 8004900:	d018      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004902:	2b80      	cmp	r3, #128	; 0x80
 8004904:	d821      	bhi.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800490a:	2b40      	cmp	r3, #64	; 0x40
 800490c:	d007      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800490e:	e01c      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004910:	4b63      	ldr	r3, [pc, #396]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	4a62      	ldr	r2, [pc, #392]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800491a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800491c:	e01c      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800491e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004922:	3308      	adds	r3, #8
 8004924:	2100      	movs	r1, #0
 8004926:	4618      	mov	r0, r3
 8004928:	f001 fbe6 	bl	80060f8 <RCCEx_PLL2_Config>
 800492c:	4603      	mov	r3, r0
 800492e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004932:	e011      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004938:	3328      	adds	r3, #40	; 0x28
 800493a:	2100      	movs	r1, #0
 800493c:	4618      	mov	r0, r3
 800493e:	f001 fc8d 	bl	800625c <RCCEx_PLL3_Config>
 8004942:	4603      	mov	r3, r0
 8004944:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004948:	e006      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004950:	e002      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004952:	bf00      	nop
 8004954:	e000      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004958:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004960:	4b4f      	ldr	r3, [pc, #316]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004964:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800496c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496e:	4a4c      	ldr	r2, [pc, #304]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004970:	430b      	orrs	r3, r1
 8004972:	6513      	str	r3, [r2, #80]	; 0x50
 8004974:	e003      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004976:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800497a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800497e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004986:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800498a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800498e:	2300      	movs	r3, #0
 8004990:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004994:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004998:	460b      	mov	r3, r1
 800499a:	4313      	orrs	r3, r2
 800499c:	d053      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800499e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80049a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049aa:	d035      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80049ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049b0:	d82e      	bhi.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80049b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80049b6:	d031      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80049b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80049bc:	d828      	bhi.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80049be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049c2:	d01a      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x292>
 80049c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049c8:	d822      	bhi.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80049ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049d2:	d007      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80049d4:	e01c      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049d6:	4b32      	ldr	r3, [pc, #200]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	4a31      	ldr	r2, [pc, #196]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049e2:	e01c      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049e8:	3308      	adds	r3, #8
 80049ea:	2100      	movs	r1, #0
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 fb83 	bl	80060f8 <RCCEx_PLL2_Config>
 80049f2:	4603      	mov	r3, r0
 80049f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80049f8:	e011      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049fe:	3328      	adds	r3, #40	; 0x28
 8004a00:	2100      	movs	r1, #0
 8004a02:	4618      	mov	r0, r3
 8004a04:	f001 fc2a 	bl	800625c <RCCEx_PLL3_Config>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a0e:	e006      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a16:	e002      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004a18:	bf00      	nop
 8004a1a:	e000      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10b      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a26:	4b1e      	ldr	r3, [pc, #120]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a36:	4a1a      	ldr	r2, [pc, #104]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a3c:	e003      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004a52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004a56:	2300      	movs	r3, #0
 8004a58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004a5c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004a60:	460b      	mov	r3, r1
 8004a62:	4313      	orrs	r3, r2
 8004a64:	d056      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a72:	d038      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004a74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a78:	d831      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a7e:	d034      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004a80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a84:	d82b      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a8a:	d01d      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004a8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a90:	d825      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d006      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004a96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a9a:	d00a      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004a9c:	e01f      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a9e:	bf00      	nop
 8004aa0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aa4:	4ba2      	ldr	r3, [pc, #648]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa8:	4aa1      	ldr	r2, [pc, #644]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ab0:	e01c      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	2100      	movs	r1, #0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f001 fb1c 	bl	80060f8 <RCCEx_PLL2_Config>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004ac6:	e011      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004acc:	3328      	adds	r3, #40	; 0x28
 8004ace:	2100      	movs	r1, #0
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f001 fbc3 	bl	800625c <RCCEx_PLL3_Config>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004adc:	e006      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ae4:	e002      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004ae6:	bf00      	nop
 8004ae8:	e000      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10b      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004af4:	4b8e      	ldr	r3, [pc, #568]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b04:	4a8a      	ldr	r2, [pc, #552]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b06:	430b      	orrs	r3, r1
 8004b08:	6593      	str	r3, [r2, #88]	; 0x58
 8004b0a:	e003      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004b20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004b24:	2300      	movs	r3, #0
 8004b26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004b2a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4313      	orrs	r3, r2
 8004b32:	d03a      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3a:	2b30      	cmp	r3, #48	; 0x30
 8004b3c:	d01f      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004b3e:	2b30      	cmp	r3, #48	; 0x30
 8004b40:	d819      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	d00c      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004b46:	2b20      	cmp	r3, #32
 8004b48:	d815      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d019      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004b4e:	2b10      	cmp	r3, #16
 8004b50:	d111      	bne.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b52:	4b77      	ldr	r3, [pc, #476]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	4a76      	ldr	r2, [pc, #472]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004b5e:	e011      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b64:	3308      	adds	r3, #8
 8004b66:	2102      	movs	r1, #2
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f001 fac5 	bl	80060f8 <RCCEx_PLL2_Config>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004b74:	e006      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b7c:	e002      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004b7e:	bf00      	nop
 8004b80:	e000      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10a      	bne.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b8c:	4b68      	ldr	r3, [pc, #416]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b90:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9a:	4a65      	ldr	r2, [pc, #404]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b9c:	430b      	orrs	r3, r1
 8004b9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ba0:	e003      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ba6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004bb6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004bc0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	d051      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bd4:	d035      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004bd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bda:	d82e      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004bdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004be0:	d031      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004be2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004be6:	d828      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bec:	d01a      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf2:	d822      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfc:	d007      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004bfe:	e01c      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c00:	4b4b      	ldr	r3, [pc, #300]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	4a4a      	ldr	r2, [pc, #296]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c0c:	e01c      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c12:	3308      	adds	r3, #8
 8004c14:	2100      	movs	r1, #0
 8004c16:	4618      	mov	r0, r3
 8004c18:	f001 fa6e 	bl	80060f8 <RCCEx_PLL2_Config>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c22:	e011      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c28:	3328      	adds	r3, #40	; 0x28
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f001 fb15 	bl	800625c <RCCEx_PLL3_Config>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c38:	e006      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c40:	e002      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004c42:	bf00      	nop
 8004c44:	e000      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10a      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c50:	4b37      	ldr	r3, [pc, #220]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c54:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c5e:	4a34      	ldr	r2, [pc, #208]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c60:	430b      	orrs	r3, r1
 8004c62:	6513      	str	r3, [r2, #80]	; 0x50
 8004c64:	e003      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004c84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	d056      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c98:	d033      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004c9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c9e:	d82c      	bhi.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ca0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ca4:	d02f      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004ca6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004caa:	d826      	bhi.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004cac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cb0:	d02b      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004cb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cb6:	d820      	bhi.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cbc:	d012      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004cbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cc2:	d81a      	bhi.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d022      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ccc:	d115      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cd2:	3308      	adds	r3, #8
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f001 fa0e 	bl	80060f8 <RCCEx_PLL2_Config>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ce2:	e015      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ce8:	3328      	adds	r3, #40	; 0x28
 8004cea:	2101      	movs	r1, #1
 8004cec:	4618      	mov	r0, r3
 8004cee:	f001 fab5 	bl	800625c <RCCEx_PLL3_Config>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004cf8:	e00a      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d00:	e006      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d02:	bf00      	nop
 8004d04:	e004      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d06:	bf00      	nop
 8004d08:	e002      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d0a:	bf00      	nop
 8004d0c:	e000      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10d      	bne.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d18:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d1c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d26:	4a02      	ldr	r2, [pc, #8]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	6513      	str	r3, [r2, #80]	; 0x50
 8004d2c:	e006      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004d2e:	bf00      	nop
 8004d30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d44:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004d48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d52:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	d055      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d68:	d033      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d6e:	d82c      	bhi.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d74:	d02f      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7a:	d826      	bhi.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d80:	d02b      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004d82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d86:	d820      	bhi.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d8c:	d012      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d92:	d81a      	bhi.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d022      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004d98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d9c:	d115      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004da2:	3308      	adds	r3, #8
 8004da4:	2101      	movs	r1, #1
 8004da6:	4618      	mov	r0, r3
 8004da8:	f001 f9a6 	bl	80060f8 <RCCEx_PLL2_Config>
 8004dac:	4603      	mov	r3, r0
 8004dae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004db2:	e015      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004db8:	3328      	adds	r3, #40	; 0x28
 8004dba:	2101      	movs	r1, #1
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f001 fa4d 	bl	800625c <RCCEx_PLL3_Config>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004dc8:	e00a      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004dd0:	e006      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004dd2:	bf00      	nop
 8004dd4:	e004      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004dd6:	bf00      	nop
 8004dd8:	e002      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004dda:	bf00      	nop
 8004ddc:	e000      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004dde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004de0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10b      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004de8:	4ba3      	ldr	r3, [pc, #652]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dec:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004df4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004df8:	4a9f      	ldr	r2, [pc, #636]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dfa:	430b      	orrs	r3, r1
 8004dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8004dfe:	e003      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004e14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004e1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e22:	460b      	mov	r3, r1
 8004e24:	4313      	orrs	r3, r2
 8004e26:	d037      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e32:	d00e      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e38:	d816      	bhi.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d018      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004e3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e42:	d111      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e44:	4b8c      	ldr	r3, [pc, #560]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	4a8b      	ldr	r2, [pc, #556]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e50:	e00f      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e56:	3308      	adds	r3, #8
 8004e58:	2101      	movs	r1, #1
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f001 f94c 	bl	80060f8 <RCCEx_PLL2_Config>
 8004e60:	4603      	mov	r3, r0
 8004e62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e66:	e004      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e6e:	e000      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10a      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e7a:	4b7f      	ldr	r3, [pc, #508]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e88:	4a7b      	ldr	r2, [pc, #492]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e8a:	430b      	orrs	r3, r1
 8004e8c:	6513      	str	r3, [r2, #80]	; 0x50
 8004e8e:	e003      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004eae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	d039      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d81c      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004ec2:	a201      	add	r2, pc, #4	; (adr r2, 8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec8:	08004f05 	.word	0x08004f05
 8004ecc:	08004ed9 	.word	0x08004ed9
 8004ed0:	08004ee7 	.word	0x08004ee7
 8004ed4:	08004f05 	.word	0x08004f05
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ed8:	4b67      	ldr	r3, [pc, #412]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	4a66      	ldr	r2, [pc, #408]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ee2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ee4:	e00f      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eea:	3308      	adds	r3, #8
 8004eec:	2102      	movs	r1, #2
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f001 f902 	bl	80060f8 <RCCEx_PLL2_Config>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004efa:	e004      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f02:	e000      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10a      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f0e:	4b5a      	ldr	r3, [pc, #360]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	f023 0103 	bic.w	r1, r3, #3
 8004f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f1c:	4a56      	ldr	r2, [pc, #344]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f22:	e003      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004f38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f42:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004f46:	460b      	mov	r3, r1
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f000 809f 	beq.w	800508c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f4e:	4b4b      	ldr	r3, [pc, #300]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a4a      	ldr	r2, [pc, #296]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f5a:	f7fc fa7f 	bl	800145c <HAL_GetTick>
 8004f5e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f62:	e00b      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f64:	f7fc fa7a 	bl	800145c <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b64      	cmp	r3, #100	; 0x64
 8004f72:	d903      	bls.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f7a:	e005      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f7c:	4b3f      	ldr	r3, [pc, #252]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0ed      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004f88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d179      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f90:	4b39      	ldr	r3, [pc, #228]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f9c:	4053      	eors	r3, r2
 8004f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d015      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fa6:	4b34      	ldr	r3, [pc, #208]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fb2:	4b31      	ldr	r3, [pc, #196]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb6:	4a30      	ldr	r2, [pc, #192]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fbc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fbe:	4b2e      	ldr	r3, [pc, #184]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc2:	4a2d      	ldr	r2, [pc, #180]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fc8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004fca:	4a2b      	ldr	r2, [pc, #172]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fd0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fde:	d118      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe0:	f7fc fa3c 	bl	800145c <HAL_GetTick>
 8004fe4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fe8:	e00d      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fea:	f7fc fa37 	bl	800145c <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ff4:	1ad2      	subs	r2, r2, r3
 8004ff6:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d903      	bls.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005004:	e005      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005006:	4b1c      	ldr	r3, [pc, #112]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0eb      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005012:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005016:	2b00      	cmp	r3, #0
 8005018:	d129      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800501a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800501e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800502a:	d10e      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800502c:	4b12      	ldr	r3, [pc, #72]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005038:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800503c:	091a      	lsrs	r2, r3, #4
 800503e:	4b10      	ldr	r3, [pc, #64]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005040:	4013      	ands	r3, r2
 8005042:	4a0d      	ldr	r2, [pc, #52]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005044:	430b      	orrs	r3, r1
 8005046:	6113      	str	r3, [r2, #16]
 8005048:	e005      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800504a:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	4a0a      	ldr	r2, [pc, #40]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005050:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005054:	6113      	str	r3, [r2, #16]
 8005056:	4b08      	ldr	r3, [pc, #32]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005058:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800505a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800505e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005066:	4a04      	ldr	r2, [pc, #16]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005068:	430b      	orrs	r3, r1
 800506a:	6713      	str	r3, [r2, #112]	; 0x70
 800506c:	e00e      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800506e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005072:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005076:	e009      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005078:	58024400 	.word	0x58024400
 800507c:	58024800 	.word	0x58024800
 8005080:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005084:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005088:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800508c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005094:	f002 0301 	and.w	r3, r2, #1
 8005098:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800509c:	2300      	movs	r3, #0
 800509e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4313      	orrs	r3, r2
 80050aa:	f000 8089 	beq.w	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80050ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050b4:	2b28      	cmp	r3, #40	; 0x28
 80050b6:	d86b      	bhi.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80050b8:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	08005199 	.word	0x08005199
 80050c4:	08005191 	.word	0x08005191
 80050c8:	08005191 	.word	0x08005191
 80050cc:	08005191 	.word	0x08005191
 80050d0:	08005191 	.word	0x08005191
 80050d4:	08005191 	.word	0x08005191
 80050d8:	08005191 	.word	0x08005191
 80050dc:	08005191 	.word	0x08005191
 80050e0:	08005165 	.word	0x08005165
 80050e4:	08005191 	.word	0x08005191
 80050e8:	08005191 	.word	0x08005191
 80050ec:	08005191 	.word	0x08005191
 80050f0:	08005191 	.word	0x08005191
 80050f4:	08005191 	.word	0x08005191
 80050f8:	08005191 	.word	0x08005191
 80050fc:	08005191 	.word	0x08005191
 8005100:	0800517b 	.word	0x0800517b
 8005104:	08005191 	.word	0x08005191
 8005108:	08005191 	.word	0x08005191
 800510c:	08005191 	.word	0x08005191
 8005110:	08005191 	.word	0x08005191
 8005114:	08005191 	.word	0x08005191
 8005118:	08005191 	.word	0x08005191
 800511c:	08005191 	.word	0x08005191
 8005120:	08005199 	.word	0x08005199
 8005124:	08005191 	.word	0x08005191
 8005128:	08005191 	.word	0x08005191
 800512c:	08005191 	.word	0x08005191
 8005130:	08005191 	.word	0x08005191
 8005134:	08005191 	.word	0x08005191
 8005138:	08005191 	.word	0x08005191
 800513c:	08005191 	.word	0x08005191
 8005140:	08005199 	.word	0x08005199
 8005144:	08005191 	.word	0x08005191
 8005148:	08005191 	.word	0x08005191
 800514c:	08005191 	.word	0x08005191
 8005150:	08005191 	.word	0x08005191
 8005154:	08005191 	.word	0x08005191
 8005158:	08005191 	.word	0x08005191
 800515c:	08005191 	.word	0x08005191
 8005160:	08005199 	.word	0x08005199
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005168:	3308      	adds	r3, #8
 800516a:	2101      	movs	r1, #1
 800516c:	4618      	mov	r0, r3
 800516e:	f000 ffc3 	bl	80060f8 <RCCEx_PLL2_Config>
 8005172:	4603      	mov	r3, r0
 8005174:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005178:	e00f      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800517a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800517e:	3328      	adds	r3, #40	; 0x28
 8005180:	2101      	movs	r1, #1
 8005182:	4618      	mov	r0, r3
 8005184:	f001 f86a 	bl	800625c <RCCEx_PLL3_Config>
 8005188:	4603      	mov	r3, r0
 800518a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800518e:	e004      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005196:	e000      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800519a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10a      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80051a2:	4bbf      	ldr	r3, [pc, #764]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80051aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051b0:	4abb      	ldr	r2, [pc, #748]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051b2:	430b      	orrs	r3, r1
 80051b4:	6553      	str	r3, [r2, #84]	; 0x54
 80051b6:	e003      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80051c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f002 0302 	and.w	r3, r2, #2
 80051cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051d0:	2300      	movs	r3, #0
 80051d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80051d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80051da:	460b      	mov	r3, r1
 80051dc:	4313      	orrs	r3, r2
 80051de:	d041      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80051e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051e6:	2b05      	cmp	r3, #5
 80051e8:	d824      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80051ea:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	0800523d 	.word	0x0800523d
 80051f4:	08005209 	.word	0x08005209
 80051f8:	0800521f 	.word	0x0800521f
 80051fc:	0800523d 	.word	0x0800523d
 8005200:	0800523d 	.word	0x0800523d
 8005204:	0800523d 	.word	0x0800523d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800520c:	3308      	adds	r3, #8
 800520e:	2101      	movs	r1, #1
 8005210:	4618      	mov	r0, r3
 8005212:	f000 ff71 	bl	80060f8 <RCCEx_PLL2_Config>
 8005216:	4603      	mov	r3, r0
 8005218:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800521c:	e00f      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800521e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005222:	3328      	adds	r3, #40	; 0x28
 8005224:	2101      	movs	r1, #1
 8005226:	4618      	mov	r0, r3
 8005228:	f001 f818 	bl	800625c <RCCEx_PLL3_Config>
 800522c:	4603      	mov	r3, r0
 800522e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005232:	e004      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800523a:	e000      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800523c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800523e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10a      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005246:	4b96      	ldr	r3, [pc, #600]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524a:	f023 0107 	bic.w	r1, r3, #7
 800524e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005252:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005254:	4a92      	ldr	r2, [pc, #584]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005256:	430b      	orrs	r3, r1
 8005258:	6553      	str	r3, [r2, #84]	; 0x54
 800525a:	e003      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005260:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526c:	f002 0304 	and.w	r3, r2, #4
 8005270:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005274:	2300      	movs	r3, #0
 8005276:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800527a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800527e:	460b      	mov	r3, r1
 8005280:	4313      	orrs	r3, r2
 8005282:	d044      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800528c:	2b05      	cmp	r3, #5
 800528e:	d825      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005290:	a201      	add	r2, pc, #4	; (adr r2, 8005298 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005296:	bf00      	nop
 8005298:	080052e5 	.word	0x080052e5
 800529c:	080052b1 	.word	0x080052b1
 80052a0:	080052c7 	.word	0x080052c7
 80052a4:	080052e5 	.word	0x080052e5
 80052a8:	080052e5 	.word	0x080052e5
 80052ac:	080052e5 	.word	0x080052e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052b4:	3308      	adds	r3, #8
 80052b6:	2101      	movs	r1, #1
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 ff1d 	bl	80060f8 <RCCEx_PLL2_Config>
 80052be:	4603      	mov	r3, r0
 80052c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80052c4:	e00f      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ca:	3328      	adds	r3, #40	; 0x28
 80052cc:	2101      	movs	r1, #1
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 ffc4 	bl	800625c <RCCEx_PLL3_Config>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80052da:	e004      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052e2:	e000      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80052e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10b      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052ee:	4b6c      	ldr	r3, [pc, #432]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f2:	f023 0107 	bic.w	r1, r3, #7
 80052f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052fe:	4a68      	ldr	r2, [pc, #416]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005300:	430b      	orrs	r3, r1
 8005302:	6593      	str	r3, [r2, #88]	; 0x58
 8005304:	e003      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005306:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800530a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800530e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005316:	f002 0320 	and.w	r3, r2, #32
 800531a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800531e:	2300      	movs	r3, #0
 8005320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005328:	460b      	mov	r3, r1
 800532a:	4313      	orrs	r3, r2
 800532c:	d055      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800532e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005336:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800533a:	d033      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800533c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005340:	d82c      	bhi.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005346:	d02f      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534c:	d826      	bhi.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800534e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005352:	d02b      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005354:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005358:	d820      	bhi.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800535a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800535e:	d012      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005364:	d81a      	bhi.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d022      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800536a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800536e:	d115      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005374:	3308      	adds	r3, #8
 8005376:	2100      	movs	r1, #0
 8005378:	4618      	mov	r0, r3
 800537a:	f000 febd 	bl	80060f8 <RCCEx_PLL2_Config>
 800537e:	4603      	mov	r3, r0
 8005380:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005384:	e015      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800538a:	3328      	adds	r3, #40	; 0x28
 800538c:	2102      	movs	r1, #2
 800538e:	4618      	mov	r0, r3
 8005390:	f000 ff64 	bl	800625c <RCCEx_PLL3_Config>
 8005394:	4603      	mov	r3, r0
 8005396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800539a:	e00a      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053a2:	e006      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053a4:	bf00      	nop
 80053a6:	e004      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053a8:	bf00      	nop
 80053aa:	e002      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053ac:	bf00      	nop
 80053ae:	e000      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10b      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053ba:	4b39      	ldr	r3, [pc, #228]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053be:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80053c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ca:	4a35      	ldr	r2, [pc, #212]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053cc:	430b      	orrs	r3, r1
 80053ce:	6553      	str	r3, [r2, #84]	; 0x54
 80053d0:	e003      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80053da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80053e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053ea:	2300      	movs	r3, #0
 80053ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80053f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4313      	orrs	r3, r2
 80053f8:	d058      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80053fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005402:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005406:	d033      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005408:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800540c:	d82c      	bhi.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800540e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005412:	d02f      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005418:	d826      	bhi.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800541a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800541e:	d02b      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005420:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005424:	d820      	bhi.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800542a:	d012      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800542c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005430:	d81a      	bhi.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005432:	2b00      	cmp	r3, #0
 8005434:	d022      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800543a:	d115      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800543c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005440:	3308      	adds	r3, #8
 8005442:	2100      	movs	r1, #0
 8005444:	4618      	mov	r0, r3
 8005446:	f000 fe57 	bl	80060f8 <RCCEx_PLL2_Config>
 800544a:	4603      	mov	r3, r0
 800544c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005450:	e015      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005456:	3328      	adds	r3, #40	; 0x28
 8005458:	2102      	movs	r1, #2
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fefe 	bl	800625c <RCCEx_PLL3_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005466:	e00a      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800546e:	e006      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005470:	bf00      	nop
 8005472:	e004      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005474:	bf00      	nop
 8005476:	e002      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005478:	bf00      	nop
 800547a:	e000      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800547c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800547e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10e      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005486:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800548e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005496:	4a02      	ldr	r2, [pc, #8]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005498:	430b      	orrs	r3, r1
 800549a:	6593      	str	r3, [r2, #88]	; 0x58
 800549c:	e006      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800549e:	bf00      	nop
 80054a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80054b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054bc:	2300      	movs	r3, #0
 80054be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80054c2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80054c6:	460b      	mov	r3, r1
 80054c8:	4313      	orrs	r3, r2
 80054ca:	d055      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80054cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80054d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80054d8:	d033      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80054da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80054de:	d82c      	bhi.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80054e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054e4:	d02f      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80054e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ea:	d826      	bhi.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80054ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80054f0:	d02b      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80054f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80054f6:	d820      	bhi.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80054f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054fc:	d012      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80054fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005502:	d81a      	bhi.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d022      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800550c:	d115      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800550e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005512:	3308      	adds	r3, #8
 8005514:	2100      	movs	r1, #0
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fdee 	bl	80060f8 <RCCEx_PLL2_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005522:	e015      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005528:	3328      	adds	r3, #40	; 0x28
 800552a:	2102      	movs	r1, #2
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fe95 	bl	800625c <RCCEx_PLL3_Config>
 8005532:	4603      	mov	r3, r0
 8005534:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005538:	e00a      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005540:	e006      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005542:	bf00      	nop
 8005544:	e004      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005546:	bf00      	nop
 8005548:	e002      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800554a:	bf00      	nop
 800554c:	e000      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800554e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005550:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10b      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005558:	4ba1      	ldr	r3, [pc, #644]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800555a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005564:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005568:	4a9d      	ldr	r2, [pc, #628]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800556a:	430b      	orrs	r3, r1
 800556c:	6593      	str	r3, [r2, #88]	; 0x58
 800556e:	e003      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005570:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005574:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	f002 0308 	and.w	r3, r2, #8
 8005584:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005588:	2300      	movs	r3, #0
 800558a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800558e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005592:	460b      	mov	r3, r1
 8005594:	4313      	orrs	r3, r2
 8005596:	d01e      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800559c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a4:	d10c      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055aa:	3328      	adds	r3, #40	; 0x28
 80055ac:	2102      	movs	r1, #2
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fe54 	bl	800625c <RCCEx_PLL3_Config>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80055c0:	4b87      	ldr	r3, [pc, #540]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055d0:	4a83      	ldr	r2, [pc, #524]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055d2:	430b      	orrs	r3, r1
 80055d4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	f002 0310 	and.w	r3, r2, #16
 80055e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055e6:	2300      	movs	r3, #0
 80055e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80055ec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80055f0:	460b      	mov	r3, r1
 80055f2:	4313      	orrs	r3, r2
 80055f4:	d01e      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80055f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005602:	d10c      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005608:	3328      	adds	r3, #40	; 0x28
 800560a:	2102      	movs	r1, #2
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fe25 	bl	800625c <RCCEx_PLL3_Config>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800561e:	4b70      	ldr	r3, [pc, #448]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005622:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800562a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800562e:	4a6c      	ldr	r2, [pc, #432]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005630:	430b      	orrs	r3, r1
 8005632:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005644:	2300      	movs	r3, #0
 8005646:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800564a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800564e:	460b      	mov	r3, r1
 8005650:	4313      	orrs	r3, r2
 8005652:	d03e      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005658:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800565c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005660:	d022      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005662:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005666:	d81b      	bhi.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800566c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005670:	d00b      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005672:	e015      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005678:	3308      	adds	r3, #8
 800567a:	2100      	movs	r1, #0
 800567c:	4618      	mov	r0, r3
 800567e:	f000 fd3b 	bl	80060f8 <RCCEx_PLL2_Config>
 8005682:	4603      	mov	r3, r0
 8005684:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005688:	e00f      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800568a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800568e:	3328      	adds	r3, #40	; 0x28
 8005690:	2102      	movs	r1, #2
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fde2 	bl	800625c <RCCEx_PLL3_Config>
 8005698:	4603      	mov	r3, r0
 800569a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800569e:	e004      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056a6:	e000      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80056a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10b      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056b2:	4b4b      	ldr	r3, [pc, #300]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80056ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80056c2:	4a47      	ldr	r2, [pc, #284]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056c4:	430b      	orrs	r3, r1
 80056c6:	6593      	str	r3, [r2, #88]	; 0x58
 80056c8:	e003      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056da:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80056de:	67bb      	str	r3, [r7, #120]	; 0x78
 80056e0:	2300      	movs	r3, #0
 80056e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056e4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80056e8:	460b      	mov	r3, r1
 80056ea:	4313      	orrs	r3, r2
 80056ec:	d03b      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80056ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056fa:	d01f      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80056fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005700:	d818      	bhi.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005706:	d003      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005708:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800570c:	d007      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800570e:	e011      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005710:	4b33      	ldr	r3, [pc, #204]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	4a32      	ldr	r2, [pc, #200]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800571a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800571c:	e00f      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800571e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005722:	3328      	adds	r3, #40	; 0x28
 8005724:	2101      	movs	r1, #1
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fd98 	bl	800625c <RCCEx_PLL3_Config>
 800572c:	4603      	mov	r3, r0
 800572e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005732:	e004      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800573a:	e000      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800573c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800573e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10b      	bne.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005746:	4b26      	ldr	r3, [pc, #152]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800574e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005756:	4a22      	ldr	r2, [pc, #136]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005758:	430b      	orrs	r3, r1
 800575a:	6553      	str	r3, [r2, #84]	; 0x54
 800575c:	e003      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800575e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005762:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005772:	673b      	str	r3, [r7, #112]	; 0x70
 8005774:	2300      	movs	r3, #0
 8005776:	677b      	str	r3, [r7, #116]	; 0x74
 8005778:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800577c:	460b      	mov	r3, r1
 800577e:	4313      	orrs	r3, r2
 8005780:	d034      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800578c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005790:	d007      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005792:	e011      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005794:	4b12      	ldr	r3, [pc, #72]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005798:	4a11      	ldr	r2, [pc, #68]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800579a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800579e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057a0:	e00e      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057a6:	3308      	adds	r3, #8
 80057a8:	2102      	movs	r1, #2
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fca4 	bl	80060f8 <RCCEx_PLL2_Config>
 80057b0:	4603      	mov	r3, r0
 80057b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057b6:	e003      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10d      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80057c8:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d6:	4a02      	ldr	r2, [pc, #8]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057d8:	430b      	orrs	r3, r1
 80057da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057dc:	e006      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80057de:	bf00      	nop
 80057e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80057f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80057fa:	2300      	movs	r3, #0
 80057fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005802:	460b      	mov	r3, r1
 8005804:	4313      	orrs	r3, r2
 8005806:	d00c      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800580c:	3328      	adds	r3, #40	; 0x28
 800580e:	2102      	movs	r1, #2
 8005810:	4618      	mov	r0, r3
 8005812:	f000 fd23 	bl	800625c <RCCEx_PLL3_Config>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800582e:	663b      	str	r3, [r7, #96]	; 0x60
 8005830:	2300      	movs	r3, #0
 8005832:	667b      	str	r3, [r7, #100]	; 0x64
 8005834:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005838:	460b      	mov	r3, r1
 800583a:	4313      	orrs	r3, r2
 800583c:	d038      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800583e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800584a:	d018      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800584c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005850:	d811      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005856:	d014      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800585c:	d80b      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800585e:	2b00      	cmp	r3, #0
 8005860:	d011      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005866:	d106      	bne.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005868:	4bc3      	ldr	r3, [pc, #780]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800586a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586c:	4ac2      	ldr	r2, [pc, #776]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800586e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005872:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005874:	e008      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800587c:	e004      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800587e:	bf00      	nop
 8005880:	e002      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005882:	bf00      	nop
 8005884:	e000      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005888:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10b      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005890:	4bb9      	ldr	r3, [pc, #740]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005894:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800589c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058a0:	4ab5      	ldr	r2, [pc, #724]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058a2:	430b      	orrs	r3, r1
 80058a4:	6553      	str	r3, [r2, #84]	; 0x54
 80058a6:	e003      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80058bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80058be:	2300      	movs	r3, #0
 80058c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058c2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80058c6:	460b      	mov	r3, r1
 80058c8:	4313      	orrs	r3, r2
 80058ca:	d009      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80058cc:	4baa      	ldr	r3, [pc, #680]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80058d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058da:	4aa7      	ldr	r2, [pc, #668]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058dc:	430b      	orrs	r3, r1
 80058de:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80058e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80058ec:	653b      	str	r3, [r7, #80]	; 0x50
 80058ee:	2300      	movs	r3, #0
 80058f0:	657b      	str	r3, [r7, #84]	; 0x54
 80058f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80058f6:	460b      	mov	r3, r1
 80058f8:	4313      	orrs	r3, r2
 80058fa:	d00a      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80058fc:	4b9e      	ldr	r3, [pc, #632]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005908:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800590c:	4a9a      	ldr	r2, [pc, #616]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800590e:	430b      	orrs	r3, r1
 8005910:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800591e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005920:	2300      	movs	r3, #0
 8005922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005924:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005928:	460b      	mov	r3, r1
 800592a:	4313      	orrs	r3, r2
 800592c:	d009      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800592e:	4b92      	ldr	r3, [pc, #584]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005932:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800593a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800593c:	4a8e      	ldr	r2, [pc, #568]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800593e:	430b      	orrs	r3, r1
 8005940:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800594e:	643b      	str	r3, [r7, #64]	; 0x40
 8005950:	2300      	movs	r3, #0
 8005952:	647b      	str	r3, [r7, #68]	; 0x44
 8005954:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005958:	460b      	mov	r3, r1
 800595a:	4313      	orrs	r3, r2
 800595c:	d00e      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800595e:	4b86      	ldr	r3, [pc, #536]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	4a85      	ldr	r2, [pc, #532]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005964:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005968:	6113      	str	r3, [r2, #16]
 800596a:	4b83      	ldr	r3, [pc, #524]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800596c:	6919      	ldr	r1, [r3, #16]
 800596e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005972:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005976:	4a80      	ldr	r2, [pc, #512]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005978:	430b      	orrs	r3, r1
 800597a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800597c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005984:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005988:	63bb      	str	r3, [r7, #56]	; 0x38
 800598a:	2300      	movs	r3, #0
 800598c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800598e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005992:	460b      	mov	r3, r1
 8005994:	4313      	orrs	r3, r2
 8005996:	d009      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005998:	4b77      	ldr	r3, [pc, #476]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800599a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800599c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80059a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a6:	4a74      	ldr	r2, [pc, #464]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059a8:	430b      	orrs	r3, r1
 80059aa:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80059b8:	633b      	str	r3, [r7, #48]	; 0x30
 80059ba:	2300      	movs	r3, #0
 80059bc:	637b      	str	r3, [r7, #52]	; 0x34
 80059be:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80059c2:	460b      	mov	r3, r1
 80059c4:	4313      	orrs	r3, r2
 80059c6:	d00a      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059c8:	4b6b      	ldr	r3, [pc, #428]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059cc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80059d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059d8:	4a67      	ldr	r2, [pc, #412]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059da:	430b      	orrs	r3, r1
 80059dc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80059de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e6:	2100      	movs	r1, #0
 80059e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80059f4:	460b      	mov	r3, r1
 80059f6:	4313      	orrs	r3, r2
 80059f8:	d011      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059fe:	3308      	adds	r3, #8
 8005a00:	2100      	movs	r1, #0
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 fb78 	bl	80060f8 <RCCEx_PLL2_Config>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a26:	2100      	movs	r1, #0
 8005a28:	6239      	str	r1, [r7, #32]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a30:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a34:	460b      	mov	r3, r1
 8005a36:	4313      	orrs	r3, r2
 8005a38:	d011      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a3e:	3308      	adds	r3, #8
 8005a40:	2101      	movs	r1, #1
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fb58 	bl	80060f8 <RCCEx_PLL2_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a66:	2100      	movs	r1, #0
 8005a68:	61b9      	str	r1, [r7, #24]
 8005a6a:	f003 0304 	and.w	r3, r3, #4
 8005a6e:	61fb      	str	r3, [r7, #28]
 8005a70:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a74:	460b      	mov	r3, r1
 8005a76:	4313      	orrs	r3, r2
 8005a78:	d011      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a7e:	3308      	adds	r3, #8
 8005a80:	2102      	movs	r1, #2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fb38 	bl	80060f8 <RCCEx_PLL2_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	6139      	str	r1, [r7, #16]
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	d011      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005abe:	3328      	adds	r3, #40	; 0x28
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fbca 	bl	800625c <RCCEx_PLL3_Config>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005ace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ada:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005af4:	460b      	mov	r3, r1
 8005af6:	4313      	orrs	r3, r2
 8005af8:	d011      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005afe:	3328      	adds	r3, #40	; 0x28
 8005b00:	2101      	movs	r1, #1
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fbaa 	bl	800625c <RCCEx_PLL3_Config>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b26:	2100      	movs	r1, #0
 8005b28:	6039      	str	r1, [r7, #0]
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	607b      	str	r3, [r7, #4]
 8005b30:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b34:	460b      	mov	r3, r1
 8005b36:	4313      	orrs	r3, r2
 8005b38:	d011      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b3e:	3328      	adds	r3, #40	; 0x28
 8005b40:	2102      	movs	r1, #2
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fb8a 	bl	800625c <RCCEx_PLL3_Config>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005b5e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	e000      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005b72:	46bd      	mov	sp, r7
 8005b74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b78:	58024400 	.word	0x58024400

08005b7c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005b80:	f7fe fd96 	bl	80046b0 <HAL_RCC_GetHCLKFreq>
 8005b84:	4602      	mov	r2, r0
 8005b86:	4b06      	ldr	r3, [pc, #24]	; (8005ba0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	091b      	lsrs	r3, r3, #4
 8005b8c:	f003 0307 	and.w	r3, r3, #7
 8005b90:	4904      	ldr	r1, [pc, #16]	; (8005ba4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005b92:	5ccb      	ldrb	r3, [r1, r3]
 8005b94:	f003 031f 	and.w	r3, r3, #31
 8005b98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	58024400 	.word	0x58024400
 8005ba4:	080090d0 	.word	0x080090d0

08005ba8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b089      	sub	sp, #36	; 0x24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bb0:	4ba1      	ldr	r3, [pc, #644]	; (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	f003 0303 	and.w	r3, r3, #3
 8005bb8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005bba:	4b9f      	ldr	r3, [pc, #636]	; (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbe:	0b1b      	lsrs	r3, r3, #12
 8005bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bc4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005bc6:	4b9c      	ldr	r3, [pc, #624]	; (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bca:	091b      	lsrs	r3, r3, #4
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005bd2:	4b99      	ldr	r3, [pc, #612]	; (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd6:	08db      	lsrs	r3, r3, #3
 8005bd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	fb02 f303 	mul.w	r3, r2, r3
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 8111 	beq.w	8005e18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	f000 8083 	beq.w	8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	f200 80a1 	bhi.w	8005d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d056      	beq.n	8005cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005c12:	e099      	b.n	8005d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c14:	4b88      	ldr	r3, [pc, #544]	; (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0320 	and.w	r3, r3, #32
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d02d      	beq.n	8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c20:	4b85      	ldr	r3, [pc, #532]	; (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	08db      	lsrs	r3, r3, #3
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	4a84      	ldr	r2, [pc, #528]	; (8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c30:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	ee07 3a90 	vmov	s15, r3
 8005c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4a:	4b7b      	ldr	r3, [pc, #492]	; (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c52:	ee07 3a90 	vmov	s15, r3
 8005c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005c7a:	e087      	b.n	8005d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	ee07 3a90 	vmov	s15, r3
 8005c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005e44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8e:	4b6a      	ldr	r3, [pc, #424]	; (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c96:	ee07 3a90 	vmov	s15, r3
 8005c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ca2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cbe:	e065      	b.n	8005d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd2:	4b59      	ldr	r3, [pc, #356]	; (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ce6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d02:	e043      	b.n	8005d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005e4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d16:	4b48      	ldr	r3, [pc, #288]	; (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d1e:	ee07 3a90 	vmov	s15, r3
 8005d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d46:	e021      	b.n	8005d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d5a:	4b37      	ldr	r3, [pc, #220]	; (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005d8c:	4b2a      	ldr	r3, [pc, #168]	; (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d90:	0a5b      	lsrs	r3, r3, #9
 8005d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005da2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005da6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005db2:	ee17 2a90 	vmov	r2, s15
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005dba:	4b1f      	ldr	r3, [pc, #124]	; (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbe:	0c1b      	lsrs	r3, r3, #16
 8005dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dc4:	ee07 3a90 	vmov	s15, r3
 8005dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005de0:	ee17 2a90 	vmov	r2, s15
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005de8:	4b13      	ldr	r3, [pc, #76]	; (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dec:	0e1b      	lsrs	r3, r3, #24
 8005dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005df2:	ee07 3a90 	vmov	s15, r3
 8005df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e02:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e0e:	ee17 2a90 	vmov	r2, s15
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e16:	e008      	b.n	8005e2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	609a      	str	r2, [r3, #8]
}
 8005e2a:	bf00      	nop
 8005e2c:	3724      	adds	r7, #36	; 0x24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	58024400 	.word	0x58024400
 8005e3c:	03d09000 	.word	0x03d09000
 8005e40:	46000000 	.word	0x46000000
 8005e44:	4c742400 	.word	0x4c742400
 8005e48:	4a742400 	.word	0x4a742400
 8005e4c:	4af42400 	.word	0x4af42400

08005e50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b089      	sub	sp, #36	; 0x24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e58:	4ba1      	ldr	r3, [pc, #644]	; (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5c:	f003 0303 	and.w	r3, r3, #3
 8005e60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005e62:	4b9f      	ldr	r3, [pc, #636]	; (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e66:	0d1b      	lsrs	r3, r3, #20
 8005e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e6e:	4b9c      	ldr	r3, [pc, #624]	; (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	0a1b      	lsrs	r3, r3, #8
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005e7a:	4b99      	ldr	r3, [pc, #612]	; (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7e:	08db      	lsrs	r3, r3, #3
 8005e80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	fb02 f303 	mul.w	r3, r2, r3
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 8111 	beq.w	80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	f000 8083 	beq.w	8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	f200 80a1 	bhi.w	8005ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d003      	beq.n	8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d056      	beq.n	8005f68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005eba:	e099      	b.n	8005ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ebc:	4b88      	ldr	r3, [pc, #544]	; (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d02d      	beq.n	8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ec8:	4b85      	ldr	r3, [pc, #532]	; (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	08db      	lsrs	r3, r3, #3
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	4a84      	ldr	r2, [pc, #528]	; (80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	ee07 3a90 	vmov	s15, r3
 8005ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef2:	4b7b      	ldr	r3, [pc, #492]	; (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005efa:	ee07 3a90 	vmov	s15, r3
 8005efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f06:	eddf 5a78 	vldr	s11, [pc, #480]	; 80060e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f22:	e087      	b.n	8006034 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80060ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f36:	4b6a      	ldr	r3, [pc, #424]	; (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80060e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f66:	e065      	b.n	8006034 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f7a:	4b59      	ldr	r3, [pc, #356]	; (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80060e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005faa:	e043      	b.n	8006034 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80060f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fbe:	4b48      	ldr	r3, [pc, #288]	; (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fd2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80060e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fee:	e021      	b.n	8006034 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006002:	4b37      	ldr	r3, [pc, #220]	; (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006012:	ed97 6a03 	vldr	s12, [r7, #12]
 8006016:	eddf 5a34 	vldr	s11, [pc, #208]	; 80060e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800601a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800601e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800602a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800602e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006032:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006034:	4b2a      	ldr	r3, [pc, #168]	; (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006038:	0a5b      	lsrs	r3, r3, #9
 800603a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800604a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800604e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800605a:	ee17 2a90 	vmov	r2, s15
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006062:	4b1f      	ldr	r3, [pc, #124]	; (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	0c1b      	lsrs	r3, r3, #16
 8006068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800606c:	ee07 3a90 	vmov	s15, r3
 8006070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006074:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006078:	ee37 7a87 	vadd.f32	s14, s15, s14
 800607c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006088:	ee17 2a90 	vmov	r2, s15
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006090:	4b13      	ldr	r3, [pc, #76]	; (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006094:	0e1b      	lsrs	r3, r3, #24
 8006096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800609a:	ee07 3a90 	vmov	s15, r3
 800609e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80060ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060b6:	ee17 2a90 	vmov	r2, s15
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80060be:	e008      	b.n	80060d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	609a      	str	r2, [r3, #8]
}
 80060d2:	bf00      	nop
 80060d4:	3724      	adds	r7, #36	; 0x24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	58024400 	.word	0x58024400
 80060e4:	03d09000 	.word	0x03d09000
 80060e8:	46000000 	.word	0x46000000
 80060ec:	4c742400 	.word	0x4c742400
 80060f0:	4a742400 	.word	0x4a742400
 80060f4:	4af42400 	.word	0x4af42400

080060f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006106:	4b53      	ldr	r3, [pc, #332]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 8006108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	2b03      	cmp	r3, #3
 8006110:	d101      	bne.n	8006116 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e099      	b.n	800624a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006116:	4b4f      	ldr	r3, [pc, #316]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a4e      	ldr	r2, [pc, #312]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 800611c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006122:	f7fb f99b 	bl	800145c <HAL_GetTick>
 8006126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006128:	e008      	b.n	800613c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800612a:	f7fb f997 	bl	800145c <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d901      	bls.n	800613c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e086      	b.n	800624a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800613c:	4b45      	ldr	r3, [pc, #276]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1f0      	bne.n	800612a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006148:	4b42      	ldr	r3, [pc, #264]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 800614a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	031b      	lsls	r3, r3, #12
 8006156:	493f      	ldr	r1, [pc, #252]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 8006158:	4313      	orrs	r3, r2
 800615a:	628b      	str	r3, [r1, #40]	; 0x28
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	3b01      	subs	r3, #1
 8006162:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	3b01      	subs	r3, #1
 800616c:	025b      	lsls	r3, r3, #9
 800616e:	b29b      	uxth	r3, r3
 8006170:	431a      	orrs	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	3b01      	subs	r3, #1
 8006178:	041b      	lsls	r3, r3, #16
 800617a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800617e:	431a      	orrs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	3b01      	subs	r3, #1
 8006186:	061b      	lsls	r3, r3, #24
 8006188:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800618c:	4931      	ldr	r1, [pc, #196]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 800618e:	4313      	orrs	r3, r2
 8006190:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006192:	4b30      	ldr	r3, [pc, #192]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 8006194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006196:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	492d      	ldr	r1, [pc, #180]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80061a4:	4b2b      	ldr	r3, [pc, #172]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a8:	f023 0220 	bic.w	r2, r3, #32
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	4928      	ldr	r1, [pc, #160]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80061b6:	4b27      	ldr	r3, [pc, #156]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ba:	4a26      	ldr	r2, [pc, #152]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061bc:	f023 0310 	bic.w	r3, r3, #16
 80061c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80061c2:	4b24      	ldr	r3, [pc, #144]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061c6:	4b24      	ldr	r3, [pc, #144]	; (8006258 <RCCEx_PLL2_Config+0x160>)
 80061c8:	4013      	ands	r3, r2
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	69d2      	ldr	r2, [r2, #28]
 80061ce:	00d2      	lsls	r2, r2, #3
 80061d0:	4920      	ldr	r1, [pc, #128]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80061d6:	4b1f      	ldr	r3, [pc, #124]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061da:	4a1e      	ldr	r2, [pc, #120]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061dc:	f043 0310 	orr.w	r3, r3, #16
 80061e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d106      	bne.n	80061f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80061e8:	4b1a      	ldr	r3, [pc, #104]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	4a19      	ldr	r2, [pc, #100]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80061f4:	e00f      	b.n	8006216 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d106      	bne.n	800620a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80061fc:	4b15      	ldr	r3, [pc, #84]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	4a14      	ldr	r2, [pc, #80]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 8006202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006206:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006208:	e005      	b.n	8006216 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800620a:	4b12      	ldr	r3, [pc, #72]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 800620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620e:	4a11      	ldr	r2, [pc, #68]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 8006210:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006214:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006216:	4b0f      	ldr	r3, [pc, #60]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a0e      	ldr	r2, [pc, #56]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 800621c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006222:	f7fb f91b 	bl	800145c <HAL_GetTick>
 8006226:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006228:	e008      	b.n	800623c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800622a:	f7fb f917 	bl	800145c <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b02      	cmp	r3, #2
 8006236:	d901      	bls.n	800623c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e006      	b.n	800624a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800623c:	4b05      	ldr	r3, [pc, #20]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0f0      	beq.n	800622a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	58024400 	.word	0x58024400
 8006258:	ffff0007 	.word	0xffff0007

0800625c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800626a:	4b53      	ldr	r3, [pc, #332]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 800626c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	2b03      	cmp	r3, #3
 8006274:	d101      	bne.n	800627a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e099      	b.n	80063ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800627a:	4b4f      	ldr	r3, [pc, #316]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a4e      	ldr	r2, [pc, #312]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006286:	f7fb f8e9 	bl	800145c <HAL_GetTick>
 800628a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800628c:	e008      	b.n	80062a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800628e:	f7fb f8e5 	bl	800145c <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	2b02      	cmp	r3, #2
 800629a:	d901      	bls.n	80062a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e086      	b.n	80063ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062a0:	4b45      	ldr	r3, [pc, #276]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1f0      	bne.n	800628e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80062ac:	4b42      	ldr	r3, [pc, #264]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 80062ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	051b      	lsls	r3, r3, #20
 80062ba:	493f      	ldr	r1, [pc, #252]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	628b      	str	r3, [r1, #40]	; 0x28
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	025b      	lsls	r3, r3, #9
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	3b01      	subs	r3, #1
 80062dc:	041b      	lsls	r3, r3, #16
 80062de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	061b      	lsls	r3, r3, #24
 80062ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80062f0:	4931      	ldr	r1, [pc, #196]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80062f6:	4b30      	ldr	r3, [pc, #192]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	492d      	ldr	r1, [pc, #180]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006304:	4313      	orrs	r3, r2
 8006306:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006308:	4b2b      	ldr	r3, [pc, #172]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 800630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	4928      	ldr	r1, [pc, #160]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006316:	4313      	orrs	r3, r2
 8006318:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800631a:	4b27      	ldr	r3, [pc, #156]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 800631c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631e:	4a26      	ldr	r2, [pc, #152]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006324:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006326:	4b24      	ldr	r3, [pc, #144]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800632a:	4b24      	ldr	r3, [pc, #144]	; (80063bc <RCCEx_PLL3_Config+0x160>)
 800632c:	4013      	ands	r3, r2
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	69d2      	ldr	r2, [r2, #28]
 8006332:	00d2      	lsls	r2, r2, #3
 8006334:	4920      	ldr	r1, [pc, #128]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006336:	4313      	orrs	r3, r2
 8006338:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800633a:	4b1f      	ldr	r3, [pc, #124]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 800633c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633e:	4a1e      	ldr	r2, [pc, #120]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006344:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d106      	bne.n	800635a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800634c:	4b1a      	ldr	r3, [pc, #104]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 800634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006350:	4a19      	ldr	r2, [pc, #100]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006352:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006356:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006358:	e00f      	b.n	800637a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d106      	bne.n	800636e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006360:	4b15      	ldr	r3, [pc, #84]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	4a14      	ldr	r2, [pc, #80]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006366:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800636a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800636c:	e005      	b.n	800637a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800636e:	4b12      	ldr	r3, [pc, #72]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006372:	4a11      	ldr	r2, [pc, #68]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006378:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800637a:	4b0f      	ldr	r3, [pc, #60]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a0e      	ldr	r2, [pc, #56]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006386:	f7fb f869 	bl	800145c <HAL_GetTick>
 800638a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800638c:	e008      	b.n	80063a0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800638e:	f7fb f865 	bl	800145c <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d901      	bls.n	80063a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e006      	b.n	80063ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063a0:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0f0      	beq.n	800638e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	58024400 	.word	0x58024400
 80063bc:	ffff0007 	.word	0xffff0007

080063c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e049      	b.n	8006466 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d106      	bne.n	80063ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7fa fde2 	bl	8000fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3304      	adds	r3, #4
 80063fc:	4619      	mov	r1, r3
 80063fe:	4610      	mov	r0, r2
 8006400:	f000 fd5e 	bl	8006ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b01      	cmp	r3, #1
 8006482:	d001      	beq.n	8006488 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e04c      	b.n	8006522 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a26      	ldr	r2, [pc, #152]	; (8006530 <HAL_TIM_Base_Start+0xc0>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d022      	beq.n	80064e0 <HAL_TIM_Base_Start+0x70>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a2:	d01d      	beq.n	80064e0 <HAL_TIM_Base_Start+0x70>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a22      	ldr	r2, [pc, #136]	; (8006534 <HAL_TIM_Base_Start+0xc4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d018      	beq.n	80064e0 <HAL_TIM_Base_Start+0x70>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a21      	ldr	r2, [pc, #132]	; (8006538 <HAL_TIM_Base_Start+0xc8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d013      	beq.n	80064e0 <HAL_TIM_Base_Start+0x70>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a1f      	ldr	r2, [pc, #124]	; (800653c <HAL_TIM_Base_Start+0xcc>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d00e      	beq.n	80064e0 <HAL_TIM_Base_Start+0x70>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1e      	ldr	r2, [pc, #120]	; (8006540 <HAL_TIM_Base_Start+0xd0>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d009      	beq.n	80064e0 <HAL_TIM_Base_Start+0x70>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a1c      	ldr	r2, [pc, #112]	; (8006544 <HAL_TIM_Base_Start+0xd4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d004      	beq.n	80064e0 <HAL_TIM_Base_Start+0x70>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a1b      	ldr	r2, [pc, #108]	; (8006548 <HAL_TIM_Base_Start+0xd8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d115      	bne.n	800650c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	4b19      	ldr	r3, [pc, #100]	; (800654c <HAL_TIM_Base_Start+0xdc>)
 80064e8:	4013      	ands	r3, r2
 80064ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b06      	cmp	r3, #6
 80064f0:	d015      	beq.n	800651e <HAL_TIM_Base_Start+0xae>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f8:	d011      	beq.n	800651e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f042 0201 	orr.w	r2, r2, #1
 8006508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650a:	e008      	b.n	800651e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f042 0201 	orr.w	r2, r2, #1
 800651a:	601a      	str	r2, [r3, #0]
 800651c:	e000      	b.n	8006520 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800651e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	40010000 	.word	0x40010000
 8006534:	40000400 	.word	0x40000400
 8006538:	40000800 	.word	0x40000800
 800653c:	40000c00 	.word	0x40000c00
 8006540:	40010400 	.word	0x40010400
 8006544:	40001800 	.word	0x40001800
 8006548:	40014000 	.word	0x40014000
 800654c:	00010007 	.word	0x00010007

08006550 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b01      	cmp	r3, #1
 8006562:	d001      	beq.n	8006568 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e054      	b.n	8006612 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0201 	orr.w	r2, r2, #1
 800657e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a26      	ldr	r2, [pc, #152]	; (8006620 <HAL_TIM_Base_Start_IT+0xd0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d022      	beq.n	80065d0 <HAL_TIM_Base_Start_IT+0x80>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006592:	d01d      	beq.n	80065d0 <HAL_TIM_Base_Start_IT+0x80>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a22      	ldr	r2, [pc, #136]	; (8006624 <HAL_TIM_Base_Start_IT+0xd4>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d018      	beq.n	80065d0 <HAL_TIM_Base_Start_IT+0x80>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a21      	ldr	r2, [pc, #132]	; (8006628 <HAL_TIM_Base_Start_IT+0xd8>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d013      	beq.n	80065d0 <HAL_TIM_Base_Start_IT+0x80>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a1f      	ldr	r2, [pc, #124]	; (800662c <HAL_TIM_Base_Start_IT+0xdc>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d00e      	beq.n	80065d0 <HAL_TIM_Base_Start_IT+0x80>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a1e      	ldr	r2, [pc, #120]	; (8006630 <HAL_TIM_Base_Start_IT+0xe0>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d009      	beq.n	80065d0 <HAL_TIM_Base_Start_IT+0x80>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a1c      	ldr	r2, [pc, #112]	; (8006634 <HAL_TIM_Base_Start_IT+0xe4>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d004      	beq.n	80065d0 <HAL_TIM_Base_Start_IT+0x80>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a1b      	ldr	r2, [pc, #108]	; (8006638 <HAL_TIM_Base_Start_IT+0xe8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d115      	bne.n	80065fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689a      	ldr	r2, [r3, #8]
 80065d6:	4b19      	ldr	r3, [pc, #100]	; (800663c <HAL_TIM_Base_Start_IT+0xec>)
 80065d8:	4013      	ands	r3, r2
 80065da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b06      	cmp	r3, #6
 80065e0:	d015      	beq.n	800660e <HAL_TIM_Base_Start_IT+0xbe>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e8:	d011      	beq.n	800660e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f042 0201 	orr.w	r2, r2, #1
 80065f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fa:	e008      	b.n	800660e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0201 	orr.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	e000      	b.n	8006610 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800660e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	40010000 	.word	0x40010000
 8006624:	40000400 	.word	0x40000400
 8006628:	40000800 	.word	0x40000800
 800662c:	40000c00 	.word	0x40000c00
 8006630:	40010400 	.word	0x40010400
 8006634:	40001800 	.word	0x40001800
 8006638:	40014000 	.word	0x40014000
 800663c:	00010007 	.word	0x00010007

08006640 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0201 	bic.w	r2, r2, #1
 8006656:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6a1a      	ldr	r2, [r3, #32]
 800665e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006662:	4013      	ands	r3, r2
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10f      	bne.n	8006688 <HAL_TIM_Base_Stop_IT+0x48>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6a1a      	ldr	r2, [r3, #32]
 800666e:	f240 4344 	movw	r3, #1092	; 0x444
 8006672:	4013      	ands	r3, r2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d107      	bne.n	8006688 <HAL_TIM_Base_Stop_IT+0x48>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f022 0201 	bic.w	r2, r2, #1
 8006686:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b082      	sub	sp, #8
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e049      	b.n	8006744 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d106      	bne.n	80066ca <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f841 	bl	800674c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2202      	movs	r2, #2
 80066ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	3304      	adds	r3, #4
 80066da:	4619      	mov	r1, r3
 80066dc:	4610      	mov	r0, r2
 80066de:	f000 fbef 	bl	8006ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d109      	bne.n	8006784 <HAL_TIM_OC_Start+0x24>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b01      	cmp	r3, #1
 800677a:	bf14      	ite	ne
 800677c:	2301      	movne	r3, #1
 800677e:	2300      	moveq	r3, #0
 8006780:	b2db      	uxtb	r3, r3
 8006782:	e03c      	b.n	80067fe <HAL_TIM_OC_Start+0x9e>
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2b04      	cmp	r3, #4
 8006788:	d109      	bne.n	800679e <HAL_TIM_OC_Start+0x3e>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b01      	cmp	r3, #1
 8006794:	bf14      	ite	ne
 8006796:	2301      	movne	r3, #1
 8006798:	2300      	moveq	r3, #0
 800679a:	b2db      	uxtb	r3, r3
 800679c:	e02f      	b.n	80067fe <HAL_TIM_OC_Start+0x9e>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d109      	bne.n	80067b8 <HAL_TIM_OC_Start+0x58>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	bf14      	ite	ne
 80067b0:	2301      	movne	r3, #1
 80067b2:	2300      	moveq	r3, #0
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	e022      	b.n	80067fe <HAL_TIM_OC_Start+0x9e>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2b0c      	cmp	r3, #12
 80067bc:	d109      	bne.n	80067d2 <HAL_TIM_OC_Start+0x72>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	bf14      	ite	ne
 80067ca:	2301      	movne	r3, #1
 80067cc:	2300      	moveq	r3, #0
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	e015      	b.n	80067fe <HAL_TIM_OC_Start+0x9e>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b10      	cmp	r3, #16
 80067d6:	d109      	bne.n	80067ec <HAL_TIM_OC_Start+0x8c>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	bf14      	ite	ne
 80067e4:	2301      	movne	r3, #1
 80067e6:	2300      	moveq	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	e008      	b.n	80067fe <HAL_TIM_OC_Start+0x9e>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	bf14      	ite	ne
 80067f8:	2301      	movne	r3, #1
 80067fa:	2300      	moveq	r3, #0
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e0a1      	b.n	800694a <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d104      	bne.n	8006816 <HAL_TIM_OC_Start+0xb6>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006814:	e023      	b.n	800685e <HAL_TIM_OC_Start+0xfe>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b04      	cmp	r3, #4
 800681a:	d104      	bne.n	8006826 <HAL_TIM_OC_Start+0xc6>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006824:	e01b      	b.n	800685e <HAL_TIM_OC_Start+0xfe>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b08      	cmp	r3, #8
 800682a:	d104      	bne.n	8006836 <HAL_TIM_OC_Start+0xd6>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006834:	e013      	b.n	800685e <HAL_TIM_OC_Start+0xfe>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b0c      	cmp	r3, #12
 800683a:	d104      	bne.n	8006846 <HAL_TIM_OC_Start+0xe6>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006844:	e00b      	b.n	800685e <HAL_TIM_OC_Start+0xfe>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b10      	cmp	r3, #16
 800684a:	d104      	bne.n	8006856 <HAL_TIM_OC_Start+0xf6>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006854:	e003      	b.n	800685e <HAL_TIM_OC_Start+0xfe>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2202      	movs	r2, #2
 800685a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2201      	movs	r2, #1
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f000 ff44 	bl	80076f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a38      	ldr	r2, [pc, #224]	; (8006954 <HAL_TIM_OC_Start+0x1f4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d013      	beq.n	800689e <HAL_TIM_OC_Start+0x13e>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a37      	ldr	r2, [pc, #220]	; (8006958 <HAL_TIM_OC_Start+0x1f8>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d00e      	beq.n	800689e <HAL_TIM_OC_Start+0x13e>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a35      	ldr	r2, [pc, #212]	; (800695c <HAL_TIM_OC_Start+0x1fc>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d009      	beq.n	800689e <HAL_TIM_OC_Start+0x13e>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a34      	ldr	r2, [pc, #208]	; (8006960 <HAL_TIM_OC_Start+0x200>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d004      	beq.n	800689e <HAL_TIM_OC_Start+0x13e>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a32      	ldr	r2, [pc, #200]	; (8006964 <HAL_TIM_OC_Start+0x204>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d101      	bne.n	80068a2 <HAL_TIM_OC_Start+0x142>
 800689e:	2301      	movs	r3, #1
 80068a0:	e000      	b.n	80068a4 <HAL_TIM_OC_Start+0x144>
 80068a2:	2300      	movs	r3, #0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d007      	beq.n	80068b8 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a25      	ldr	r2, [pc, #148]	; (8006954 <HAL_TIM_OC_Start+0x1f4>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d022      	beq.n	8006908 <HAL_TIM_OC_Start+0x1a8>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ca:	d01d      	beq.n	8006908 <HAL_TIM_OC_Start+0x1a8>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a25      	ldr	r2, [pc, #148]	; (8006968 <HAL_TIM_OC_Start+0x208>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d018      	beq.n	8006908 <HAL_TIM_OC_Start+0x1a8>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a24      	ldr	r2, [pc, #144]	; (800696c <HAL_TIM_OC_Start+0x20c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d013      	beq.n	8006908 <HAL_TIM_OC_Start+0x1a8>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a22      	ldr	r2, [pc, #136]	; (8006970 <HAL_TIM_OC_Start+0x210>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00e      	beq.n	8006908 <HAL_TIM_OC_Start+0x1a8>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a1a      	ldr	r2, [pc, #104]	; (8006958 <HAL_TIM_OC_Start+0x1f8>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d009      	beq.n	8006908 <HAL_TIM_OC_Start+0x1a8>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a1e      	ldr	r2, [pc, #120]	; (8006974 <HAL_TIM_OC_Start+0x214>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d004      	beq.n	8006908 <HAL_TIM_OC_Start+0x1a8>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a16      	ldr	r2, [pc, #88]	; (800695c <HAL_TIM_OC_Start+0x1fc>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d115      	bne.n	8006934 <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689a      	ldr	r2, [r3, #8]
 800690e:	4b1a      	ldr	r3, [pc, #104]	; (8006978 <HAL_TIM_OC_Start+0x218>)
 8006910:	4013      	ands	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b06      	cmp	r3, #6
 8006918:	d015      	beq.n	8006946 <HAL_TIM_OC_Start+0x1e6>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006920:	d011      	beq.n	8006946 <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f042 0201 	orr.w	r2, r2, #1
 8006930:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006932:	e008      	b.n	8006946 <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0201 	orr.w	r2, r2, #1
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	e000      	b.n	8006948 <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006946:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	40010000 	.word	0x40010000
 8006958:	40010400 	.word	0x40010400
 800695c:	40014000 	.word	0x40014000
 8006960:	40014400 	.word	0x40014400
 8006964:	40014800 	.word	0x40014800
 8006968:	40000400 	.word	0x40000400
 800696c:	40000800 	.word	0x40000800
 8006970:	40000c00 	.word	0x40000c00
 8006974:	40001800 	.word	0x40001800
 8006978:	00010007 	.word	0x00010007

0800697c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d020      	beq.n	80069e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d01b      	beq.n	80069e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f06f 0202 	mvn.w	r2, #2
 80069b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fa5c 	bl	8006e84 <HAL_TIM_IC_CaptureCallback>
 80069cc:	e005      	b.n	80069da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fa4e 	bl	8006e70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fa5f 	bl	8006e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d020      	beq.n	8006a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f003 0304 	and.w	r3, r3, #4
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d01b      	beq.n	8006a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f06f 0204 	mvn.w	r2, #4
 80069fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2202      	movs	r2, #2
 8006a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fa36 	bl	8006e84 <HAL_TIM_IC_CaptureCallback>
 8006a18:	e005      	b.n	8006a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa28 	bl	8006e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fa39 	bl	8006e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d020      	beq.n	8006a78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f003 0308 	and.w	r3, r3, #8
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d01b      	beq.n	8006a78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f06f 0208 	mvn.w	r2, #8
 8006a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2204      	movs	r2, #4
 8006a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	f003 0303 	and.w	r3, r3, #3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fa10 	bl	8006e84 <HAL_TIM_IC_CaptureCallback>
 8006a64:	e005      	b.n	8006a72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fa02 	bl	8006e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fa13 	bl	8006e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f003 0310 	and.w	r3, r3, #16
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d020      	beq.n	8006ac4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f003 0310 	and.w	r3, r3, #16
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d01b      	beq.n	8006ac4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f06f 0210 	mvn.w	r2, #16
 8006a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2208      	movs	r2, #8
 8006a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f9ea 	bl	8006e84 <HAL_TIM_IC_CaptureCallback>
 8006ab0:	e005      	b.n	8006abe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f9dc 	bl	8006e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f9ed 	bl	8006e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00c      	beq.n	8006ae8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d007      	beq.n	8006ae8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f06f 0201 	mvn.w	r2, #1
 8006ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7fa f9b8 	bl	8000e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d104      	bne.n	8006afc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00c      	beq.n	8006b16 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d007      	beq.n	8006b16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fead 	bl	8007870 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00c      	beq.n	8006b3a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d007      	beq.n	8006b3a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fea5 	bl	8007884 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00c      	beq.n	8006b5e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d007      	beq.n	8006b5e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f9a7 	bl	8006eac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f003 0320 	and.w	r3, r3, #32
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00c      	beq.n	8006b82 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f003 0320 	and.w	r3, r3, #32
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d007      	beq.n	8006b82 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f06f 0220 	mvn.w	r2, #32
 8006b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fe6d 	bl	800785c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b82:	bf00      	nop
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d101      	bne.n	8006baa <HAL_TIM_OC_ConfigChannel+0x1e>
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	e066      	b.n	8006c78 <HAL_TIM_OC_ConfigChannel+0xec>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b14      	cmp	r3, #20
 8006bb6:	d857      	bhi.n	8006c68 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006bb8:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbe:	bf00      	nop
 8006bc0:	08006c15 	.word	0x08006c15
 8006bc4:	08006c69 	.word	0x08006c69
 8006bc8:	08006c69 	.word	0x08006c69
 8006bcc:	08006c69 	.word	0x08006c69
 8006bd0:	08006c23 	.word	0x08006c23
 8006bd4:	08006c69 	.word	0x08006c69
 8006bd8:	08006c69 	.word	0x08006c69
 8006bdc:	08006c69 	.word	0x08006c69
 8006be0:	08006c31 	.word	0x08006c31
 8006be4:	08006c69 	.word	0x08006c69
 8006be8:	08006c69 	.word	0x08006c69
 8006bec:	08006c69 	.word	0x08006c69
 8006bf0:	08006c3f 	.word	0x08006c3f
 8006bf4:	08006c69 	.word	0x08006c69
 8006bf8:	08006c69 	.word	0x08006c69
 8006bfc:	08006c69 	.word	0x08006c69
 8006c00:	08006c4d 	.word	0x08006c4d
 8006c04:	08006c69 	.word	0x08006c69
 8006c08:	08006c69 	.word	0x08006c69
 8006c0c:	08006c69 	.word	0x08006c69
 8006c10:	08006c5b 	.word	0x08006c5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68b9      	ldr	r1, [r7, #8]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 f9f6 	bl	800700c <TIM_OC1_SetConfig>
      break;
 8006c20:	e025      	b.n	8006c6e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68b9      	ldr	r1, [r7, #8]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 fa7f 	bl	800712c <TIM_OC2_SetConfig>
      break;
 8006c2e:	e01e      	b.n	8006c6e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68b9      	ldr	r1, [r7, #8]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 fb02 	bl	8007240 <TIM_OC3_SetConfig>
      break;
 8006c3c:	e017      	b.n	8006c6e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68b9      	ldr	r1, [r7, #8]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 fb83 	bl	8007350 <TIM_OC4_SetConfig>
      break;
 8006c4a:	e010      	b.n	8006c6e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68b9      	ldr	r1, [r7, #8]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 fbe6 	bl	8007424 <TIM_OC5_SetConfig>
      break;
 8006c58:	e009      	b.n	8006c6e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68b9      	ldr	r1, [r7, #8]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 fc43 	bl	80074ec <TIM_OC6_SetConfig>
      break;
 8006c66:	e002      	b.n	8006c6e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3718      	adds	r7, #24
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_TIM_ConfigClockSource+0x1c>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e0dc      	b.n	8006e56 <HAL_TIM_ConfigClockSource+0x1d6>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	4b6a      	ldr	r3, [pc, #424]	; (8006e60 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006cb8:	4013      	ands	r3, r2
 8006cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a64      	ldr	r2, [pc, #400]	; (8006e64 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	f000 80a9 	beq.w	8006e2a <HAL_TIM_ConfigClockSource+0x1aa>
 8006cd8:	4a62      	ldr	r2, [pc, #392]	; (8006e64 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	f200 80ae 	bhi.w	8006e3c <HAL_TIM_ConfigClockSource+0x1bc>
 8006ce0:	4a61      	ldr	r2, [pc, #388]	; (8006e68 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	f000 80a1 	beq.w	8006e2a <HAL_TIM_ConfigClockSource+0x1aa>
 8006ce8:	4a5f      	ldr	r2, [pc, #380]	; (8006e68 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	f200 80a6 	bhi.w	8006e3c <HAL_TIM_ConfigClockSource+0x1bc>
 8006cf0:	4a5e      	ldr	r2, [pc, #376]	; (8006e6c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	f000 8099 	beq.w	8006e2a <HAL_TIM_ConfigClockSource+0x1aa>
 8006cf8:	4a5c      	ldr	r2, [pc, #368]	; (8006e6c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	f200 809e 	bhi.w	8006e3c <HAL_TIM_ConfigClockSource+0x1bc>
 8006d00:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006d04:	f000 8091 	beq.w	8006e2a <HAL_TIM_ConfigClockSource+0x1aa>
 8006d08:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006d0c:	f200 8096 	bhi.w	8006e3c <HAL_TIM_ConfigClockSource+0x1bc>
 8006d10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d14:	f000 8089 	beq.w	8006e2a <HAL_TIM_ConfigClockSource+0x1aa>
 8006d18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d1c:	f200 808e 	bhi.w	8006e3c <HAL_TIM_ConfigClockSource+0x1bc>
 8006d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d24:	d03e      	beq.n	8006da4 <HAL_TIM_ConfigClockSource+0x124>
 8006d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d2a:	f200 8087 	bhi.w	8006e3c <HAL_TIM_ConfigClockSource+0x1bc>
 8006d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d32:	f000 8086 	beq.w	8006e42 <HAL_TIM_ConfigClockSource+0x1c2>
 8006d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d3a:	d87f      	bhi.n	8006e3c <HAL_TIM_ConfigClockSource+0x1bc>
 8006d3c:	2b70      	cmp	r3, #112	; 0x70
 8006d3e:	d01a      	beq.n	8006d76 <HAL_TIM_ConfigClockSource+0xf6>
 8006d40:	2b70      	cmp	r3, #112	; 0x70
 8006d42:	d87b      	bhi.n	8006e3c <HAL_TIM_ConfigClockSource+0x1bc>
 8006d44:	2b60      	cmp	r3, #96	; 0x60
 8006d46:	d050      	beq.n	8006dea <HAL_TIM_ConfigClockSource+0x16a>
 8006d48:	2b60      	cmp	r3, #96	; 0x60
 8006d4a:	d877      	bhi.n	8006e3c <HAL_TIM_ConfigClockSource+0x1bc>
 8006d4c:	2b50      	cmp	r3, #80	; 0x50
 8006d4e:	d03c      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x14a>
 8006d50:	2b50      	cmp	r3, #80	; 0x50
 8006d52:	d873      	bhi.n	8006e3c <HAL_TIM_ConfigClockSource+0x1bc>
 8006d54:	2b40      	cmp	r3, #64	; 0x40
 8006d56:	d058      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0x18a>
 8006d58:	2b40      	cmp	r3, #64	; 0x40
 8006d5a:	d86f      	bhi.n	8006e3c <HAL_TIM_ConfigClockSource+0x1bc>
 8006d5c:	2b30      	cmp	r3, #48	; 0x30
 8006d5e:	d064      	beq.n	8006e2a <HAL_TIM_ConfigClockSource+0x1aa>
 8006d60:	2b30      	cmp	r3, #48	; 0x30
 8006d62:	d86b      	bhi.n	8006e3c <HAL_TIM_ConfigClockSource+0x1bc>
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	d060      	beq.n	8006e2a <HAL_TIM_ConfigClockSource+0x1aa>
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	d867      	bhi.n	8006e3c <HAL_TIM_ConfigClockSource+0x1bc>
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d05c      	beq.n	8006e2a <HAL_TIM_ConfigClockSource+0x1aa>
 8006d70:	2b10      	cmp	r3, #16
 8006d72:	d05a      	beq.n	8006e2a <HAL_TIM_ConfigClockSource+0x1aa>
 8006d74:	e062      	b.n	8006e3c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d86:	f000 fc95 	bl	80076b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	609a      	str	r2, [r3, #8]
      break;
 8006da2:	e04f      	b.n	8006e44 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006db4:	f000 fc7e 	bl	80076b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689a      	ldr	r2, [r3, #8]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dc6:	609a      	str	r2, [r3, #8]
      break;
 8006dc8:	e03c      	b.n	8006e44 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f000 fbee 	bl	80075b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2150      	movs	r1, #80	; 0x50
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 fc48 	bl	8007678 <TIM_ITRx_SetConfig>
      break;
 8006de8:	e02c      	b.n	8006e44 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006df6:	461a      	mov	r2, r3
 8006df8:	f000 fc0d 	bl	8007616 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2160      	movs	r1, #96	; 0x60
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 fc38 	bl	8007678 <TIM_ITRx_SetConfig>
      break;
 8006e08:	e01c      	b.n	8006e44 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e16:	461a      	mov	r2, r3
 8006e18:	f000 fbce 	bl	80075b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2140      	movs	r1, #64	; 0x40
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 fc28 	bl	8007678 <TIM_ITRx_SetConfig>
      break;
 8006e28:	e00c      	b.n	8006e44 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4619      	mov	r1, r3
 8006e34:	4610      	mov	r0, r2
 8006e36:	f000 fc1f 	bl	8007678 <TIM_ITRx_SetConfig>
      break;
 8006e3a:	e003      	b.n	8006e44 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e40:	e000      	b.n	8006e44 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006e42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	ffceff88 	.word	0xffceff88
 8006e64:	00100040 	.word	0x00100040
 8006e68:	00100030 	.word	0x00100030
 8006e6c:	00100020 	.word	0x00100020

08006e70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a46      	ldr	r2, [pc, #280]	; (8006fec <TIM_Base_SetConfig+0x12c>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d013      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ede:	d00f      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a43      	ldr	r2, [pc, #268]	; (8006ff0 <TIM_Base_SetConfig+0x130>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d00b      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a42      	ldr	r2, [pc, #264]	; (8006ff4 <TIM_Base_SetConfig+0x134>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d007      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a41      	ldr	r2, [pc, #260]	; (8006ff8 <TIM_Base_SetConfig+0x138>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d003      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a40      	ldr	r2, [pc, #256]	; (8006ffc <TIM_Base_SetConfig+0x13c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d108      	bne.n	8006f12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a35      	ldr	r2, [pc, #212]	; (8006fec <TIM_Base_SetConfig+0x12c>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d01f      	beq.n	8006f5a <TIM_Base_SetConfig+0x9a>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f20:	d01b      	beq.n	8006f5a <TIM_Base_SetConfig+0x9a>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a32      	ldr	r2, [pc, #200]	; (8006ff0 <TIM_Base_SetConfig+0x130>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d017      	beq.n	8006f5a <TIM_Base_SetConfig+0x9a>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a31      	ldr	r2, [pc, #196]	; (8006ff4 <TIM_Base_SetConfig+0x134>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d013      	beq.n	8006f5a <TIM_Base_SetConfig+0x9a>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a30      	ldr	r2, [pc, #192]	; (8006ff8 <TIM_Base_SetConfig+0x138>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d00f      	beq.n	8006f5a <TIM_Base_SetConfig+0x9a>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a2f      	ldr	r2, [pc, #188]	; (8006ffc <TIM_Base_SetConfig+0x13c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d00b      	beq.n	8006f5a <TIM_Base_SetConfig+0x9a>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a2e      	ldr	r2, [pc, #184]	; (8007000 <TIM_Base_SetConfig+0x140>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d007      	beq.n	8006f5a <TIM_Base_SetConfig+0x9a>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a2d      	ldr	r2, [pc, #180]	; (8007004 <TIM_Base_SetConfig+0x144>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d003      	beq.n	8006f5a <TIM_Base_SetConfig+0x9a>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a2c      	ldr	r2, [pc, #176]	; (8007008 <TIM_Base_SetConfig+0x148>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d108      	bne.n	8006f6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a16      	ldr	r2, [pc, #88]	; (8006fec <TIM_Base_SetConfig+0x12c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d00f      	beq.n	8006fb8 <TIM_Base_SetConfig+0xf8>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a18      	ldr	r2, [pc, #96]	; (8006ffc <TIM_Base_SetConfig+0x13c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d00b      	beq.n	8006fb8 <TIM_Base_SetConfig+0xf8>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a17      	ldr	r2, [pc, #92]	; (8007000 <TIM_Base_SetConfig+0x140>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d007      	beq.n	8006fb8 <TIM_Base_SetConfig+0xf8>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a16      	ldr	r2, [pc, #88]	; (8007004 <TIM_Base_SetConfig+0x144>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d003      	beq.n	8006fb8 <TIM_Base_SetConfig+0xf8>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a15      	ldr	r2, [pc, #84]	; (8007008 <TIM_Base_SetConfig+0x148>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d103      	bne.n	8006fc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	691a      	ldr	r2, [r3, #16]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d105      	bne.n	8006fde <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	f023 0201 	bic.w	r2, r3, #1
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	611a      	str	r2, [r3, #16]
  }
}
 8006fde:	bf00      	nop
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	40010000 	.word	0x40010000
 8006ff0:	40000400 	.word	0x40000400
 8006ff4:	40000800 	.word	0x40000800
 8006ff8:	40000c00 	.word	0x40000c00
 8006ffc:	40010400 	.word	0x40010400
 8007000:	40014000 	.word	0x40014000
 8007004:	40014400 	.word	0x40014400
 8007008:	40014800 	.word	0x40014800

0800700c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800700c:	b480      	push	{r7}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	f023 0201 	bic.w	r2, r3, #1
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	4b37      	ldr	r3, [pc, #220]	; (8007114 <TIM_OC1_SetConfig+0x108>)
 8007038:	4013      	ands	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f023 0303 	bic.w	r3, r3, #3
 8007042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	4313      	orrs	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f023 0302 	bic.w	r3, r3, #2
 8007054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	4313      	orrs	r3, r2
 800705e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a2d      	ldr	r2, [pc, #180]	; (8007118 <TIM_OC1_SetConfig+0x10c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d00f      	beq.n	8007088 <TIM_OC1_SetConfig+0x7c>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a2c      	ldr	r2, [pc, #176]	; (800711c <TIM_OC1_SetConfig+0x110>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d00b      	beq.n	8007088 <TIM_OC1_SetConfig+0x7c>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a2b      	ldr	r2, [pc, #172]	; (8007120 <TIM_OC1_SetConfig+0x114>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d007      	beq.n	8007088 <TIM_OC1_SetConfig+0x7c>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a2a      	ldr	r2, [pc, #168]	; (8007124 <TIM_OC1_SetConfig+0x118>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d003      	beq.n	8007088 <TIM_OC1_SetConfig+0x7c>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a29      	ldr	r2, [pc, #164]	; (8007128 <TIM_OC1_SetConfig+0x11c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d10c      	bne.n	80070a2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f023 0308 	bic.w	r3, r3, #8
 800708e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	4313      	orrs	r3, r2
 8007098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f023 0304 	bic.w	r3, r3, #4
 80070a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a1c      	ldr	r2, [pc, #112]	; (8007118 <TIM_OC1_SetConfig+0x10c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d00f      	beq.n	80070ca <TIM_OC1_SetConfig+0xbe>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a1b      	ldr	r2, [pc, #108]	; (800711c <TIM_OC1_SetConfig+0x110>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00b      	beq.n	80070ca <TIM_OC1_SetConfig+0xbe>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a1a      	ldr	r2, [pc, #104]	; (8007120 <TIM_OC1_SetConfig+0x114>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d007      	beq.n	80070ca <TIM_OC1_SetConfig+0xbe>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a19      	ldr	r2, [pc, #100]	; (8007124 <TIM_OC1_SetConfig+0x118>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d003      	beq.n	80070ca <TIM_OC1_SetConfig+0xbe>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a18      	ldr	r2, [pc, #96]	; (8007128 <TIM_OC1_SetConfig+0x11c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d111      	bne.n	80070ee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	621a      	str	r2, [r3, #32]
}
 8007108:	bf00      	nop
 800710a:	371c      	adds	r7, #28
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	fffeff8f 	.word	0xfffeff8f
 8007118:	40010000 	.word	0x40010000
 800711c:	40010400 	.word	0x40010400
 8007120:	40014000 	.word	0x40014000
 8007124:	40014400 	.word	0x40014400
 8007128:	40014800 	.word	0x40014800

0800712c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	f023 0210 	bic.w	r2, r3, #16
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4b34      	ldr	r3, [pc, #208]	; (8007228 <TIM_OC2_SetConfig+0xfc>)
 8007158:	4013      	ands	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	021b      	lsls	r3, r3, #8
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	4313      	orrs	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f023 0320 	bic.w	r3, r3, #32
 8007176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	011b      	lsls	r3, r3, #4
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	4313      	orrs	r3, r2
 8007182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a29      	ldr	r2, [pc, #164]	; (800722c <TIM_OC2_SetConfig+0x100>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d003      	beq.n	8007194 <TIM_OC2_SetConfig+0x68>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a28      	ldr	r2, [pc, #160]	; (8007230 <TIM_OC2_SetConfig+0x104>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d10d      	bne.n	80071b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800719a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	011b      	lsls	r3, r3, #4
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a1e      	ldr	r2, [pc, #120]	; (800722c <TIM_OC2_SetConfig+0x100>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d00f      	beq.n	80071d8 <TIM_OC2_SetConfig+0xac>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a1d      	ldr	r2, [pc, #116]	; (8007230 <TIM_OC2_SetConfig+0x104>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d00b      	beq.n	80071d8 <TIM_OC2_SetConfig+0xac>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a1c      	ldr	r2, [pc, #112]	; (8007234 <TIM_OC2_SetConfig+0x108>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d007      	beq.n	80071d8 <TIM_OC2_SetConfig+0xac>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a1b      	ldr	r2, [pc, #108]	; (8007238 <TIM_OC2_SetConfig+0x10c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d003      	beq.n	80071d8 <TIM_OC2_SetConfig+0xac>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a1a      	ldr	r2, [pc, #104]	; (800723c <TIM_OC2_SetConfig+0x110>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d113      	bne.n	8007200 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	621a      	str	r2, [r3, #32]
}
 800721a:	bf00      	nop
 800721c:	371c      	adds	r7, #28
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	feff8fff 	.word	0xfeff8fff
 800722c:	40010000 	.word	0x40010000
 8007230:	40010400 	.word	0x40010400
 8007234:	40014000 	.word	0x40014000
 8007238:	40014400 	.word	0x40014400
 800723c:	40014800 	.word	0x40014800

08007240 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007240:	b480      	push	{r7}
 8007242:	b087      	sub	sp, #28
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a1b      	ldr	r3, [r3, #32]
 8007254:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	4b33      	ldr	r3, [pc, #204]	; (8007338 <TIM_OC3_SetConfig+0xf8>)
 800726c:	4013      	ands	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 0303 	bic.w	r3, r3, #3
 8007276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	4313      	orrs	r3, r2
 8007280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	021b      	lsls	r3, r3, #8
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	4313      	orrs	r3, r2
 8007294:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a28      	ldr	r2, [pc, #160]	; (800733c <TIM_OC3_SetConfig+0xfc>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d003      	beq.n	80072a6 <TIM_OC3_SetConfig+0x66>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a27      	ldr	r2, [pc, #156]	; (8007340 <TIM_OC3_SetConfig+0x100>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d10d      	bne.n	80072c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	021b      	lsls	r3, r3, #8
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a1d      	ldr	r2, [pc, #116]	; (800733c <TIM_OC3_SetConfig+0xfc>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d00f      	beq.n	80072ea <TIM_OC3_SetConfig+0xaa>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a1c      	ldr	r2, [pc, #112]	; (8007340 <TIM_OC3_SetConfig+0x100>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d00b      	beq.n	80072ea <TIM_OC3_SetConfig+0xaa>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a1b      	ldr	r2, [pc, #108]	; (8007344 <TIM_OC3_SetConfig+0x104>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d007      	beq.n	80072ea <TIM_OC3_SetConfig+0xaa>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a1a      	ldr	r2, [pc, #104]	; (8007348 <TIM_OC3_SetConfig+0x108>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d003      	beq.n	80072ea <TIM_OC3_SetConfig+0xaa>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a19      	ldr	r2, [pc, #100]	; (800734c <TIM_OC3_SetConfig+0x10c>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d113      	bne.n	8007312 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	011b      	lsls	r3, r3, #4
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	4313      	orrs	r3, r2
 8007304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	011b      	lsls	r3, r3, #4
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	4313      	orrs	r3, r2
 8007310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	685a      	ldr	r2, [r3, #4]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	621a      	str	r2, [r3, #32]
}
 800732c:	bf00      	nop
 800732e:	371c      	adds	r7, #28
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	fffeff8f 	.word	0xfffeff8f
 800733c:	40010000 	.word	0x40010000
 8007340:	40010400 	.word	0x40010400
 8007344:	40014000 	.word	0x40014000
 8007348:	40014400 	.word	0x40014400
 800734c:	40014800 	.word	0x40014800

08007350 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007350:	b480      	push	{r7}
 8007352:	b087      	sub	sp, #28
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	4b24      	ldr	r3, [pc, #144]	; (800740c <TIM_OC4_SetConfig+0xbc>)
 800737c:	4013      	ands	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	021b      	lsls	r3, r3, #8
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4313      	orrs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800739a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	031b      	lsls	r3, r3, #12
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a19      	ldr	r2, [pc, #100]	; (8007410 <TIM_OC4_SetConfig+0xc0>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d00f      	beq.n	80073d0 <TIM_OC4_SetConfig+0x80>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a18      	ldr	r2, [pc, #96]	; (8007414 <TIM_OC4_SetConfig+0xc4>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d00b      	beq.n	80073d0 <TIM_OC4_SetConfig+0x80>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a17      	ldr	r2, [pc, #92]	; (8007418 <TIM_OC4_SetConfig+0xc8>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d007      	beq.n	80073d0 <TIM_OC4_SetConfig+0x80>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a16      	ldr	r2, [pc, #88]	; (800741c <TIM_OC4_SetConfig+0xcc>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d003      	beq.n	80073d0 <TIM_OC4_SetConfig+0x80>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a15      	ldr	r2, [pc, #84]	; (8007420 <TIM_OC4_SetConfig+0xd0>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d109      	bne.n	80073e4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	019b      	lsls	r3, r3, #6
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	621a      	str	r2, [r3, #32]
}
 80073fe:	bf00      	nop
 8007400:	371c      	adds	r7, #28
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	feff8fff 	.word	0xfeff8fff
 8007410:	40010000 	.word	0x40010000
 8007414:	40010400 	.word	0x40010400
 8007418:	40014000 	.word	0x40014000
 800741c:	40014400 	.word	0x40014400
 8007420:	40014800 	.word	0x40014800

08007424 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007424:	b480      	push	{r7}
 8007426:	b087      	sub	sp, #28
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a1b      	ldr	r3, [r3, #32]
 8007438:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	4b21      	ldr	r3, [pc, #132]	; (80074d4 <TIM_OC5_SetConfig+0xb0>)
 8007450:	4013      	ands	r3, r2
 8007452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	4313      	orrs	r3, r2
 800745c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007464:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	041b      	lsls	r3, r3, #16
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	4313      	orrs	r3, r2
 8007470:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a18      	ldr	r2, [pc, #96]	; (80074d8 <TIM_OC5_SetConfig+0xb4>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d00f      	beq.n	800749a <TIM_OC5_SetConfig+0x76>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a17      	ldr	r2, [pc, #92]	; (80074dc <TIM_OC5_SetConfig+0xb8>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d00b      	beq.n	800749a <TIM_OC5_SetConfig+0x76>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a16      	ldr	r2, [pc, #88]	; (80074e0 <TIM_OC5_SetConfig+0xbc>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d007      	beq.n	800749a <TIM_OC5_SetConfig+0x76>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a15      	ldr	r2, [pc, #84]	; (80074e4 <TIM_OC5_SetConfig+0xc0>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d003      	beq.n	800749a <TIM_OC5_SetConfig+0x76>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a14      	ldr	r2, [pc, #80]	; (80074e8 <TIM_OC5_SetConfig+0xc4>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d109      	bne.n	80074ae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	021b      	lsls	r3, r3, #8
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	621a      	str	r2, [r3, #32]
}
 80074c8:	bf00      	nop
 80074ca:	371c      	adds	r7, #28
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr
 80074d4:	fffeff8f 	.word	0xfffeff8f
 80074d8:	40010000 	.word	0x40010000
 80074dc:	40010400 	.word	0x40010400
 80074e0:	40014000 	.word	0x40014000
 80074e4:	40014400 	.word	0x40014400
 80074e8:	40014800 	.word	0x40014800

080074ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a1b      	ldr	r3, [r3, #32]
 8007500:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	4b22      	ldr	r3, [pc, #136]	; (80075a0 <TIM_OC6_SetConfig+0xb4>)
 8007518:	4013      	ands	r3, r2
 800751a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	021b      	lsls	r3, r3, #8
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	4313      	orrs	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800752e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	051b      	lsls	r3, r3, #20
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	4313      	orrs	r3, r2
 800753a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a19      	ldr	r2, [pc, #100]	; (80075a4 <TIM_OC6_SetConfig+0xb8>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d00f      	beq.n	8007564 <TIM_OC6_SetConfig+0x78>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a18      	ldr	r2, [pc, #96]	; (80075a8 <TIM_OC6_SetConfig+0xbc>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d00b      	beq.n	8007564 <TIM_OC6_SetConfig+0x78>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a17      	ldr	r2, [pc, #92]	; (80075ac <TIM_OC6_SetConfig+0xc0>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d007      	beq.n	8007564 <TIM_OC6_SetConfig+0x78>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a16      	ldr	r2, [pc, #88]	; (80075b0 <TIM_OC6_SetConfig+0xc4>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d003      	beq.n	8007564 <TIM_OC6_SetConfig+0x78>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a15      	ldr	r2, [pc, #84]	; (80075b4 <TIM_OC6_SetConfig+0xc8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d109      	bne.n	8007578 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800756a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	029b      	lsls	r3, r3, #10
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	4313      	orrs	r3, r2
 8007576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	621a      	str	r2, [r3, #32]
}
 8007592:	bf00      	nop
 8007594:	371c      	adds	r7, #28
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	feff8fff 	.word	0xfeff8fff
 80075a4:	40010000 	.word	0x40010000
 80075a8:	40010400 	.word	0x40010400
 80075ac:	40014000 	.word	0x40014000
 80075b0:	40014400 	.word	0x40014400
 80075b4:	40014800 	.word	0x40014800

080075b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6a1b      	ldr	r3, [r3, #32]
 80075c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	f023 0201 	bic.w	r2, r3, #1
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	011b      	lsls	r3, r3, #4
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f023 030a 	bic.w	r3, r3, #10
 80075f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	621a      	str	r2, [r3, #32]
}
 800760a:	bf00      	nop
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007616:	b480      	push	{r7}
 8007618:	b087      	sub	sp, #28
 800761a:	af00      	add	r7, sp, #0
 800761c:	60f8      	str	r0, [r7, #12]
 800761e:	60b9      	str	r1, [r7, #8]
 8007620:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	f023 0210 	bic.w	r2, r3, #16
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007640:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	031b      	lsls	r3, r3, #12
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	4313      	orrs	r3, r2
 800764a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007652:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	011b      	lsls	r3, r3, #4
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	4313      	orrs	r3, r2
 800765c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	621a      	str	r2, [r3, #32]
}
 800766a:	bf00      	nop
 800766c:	371c      	adds	r7, #28
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
	...

08007678 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	4b09      	ldr	r3, [pc, #36]	; (80076b0 <TIM_ITRx_SetConfig+0x38>)
 800768c:	4013      	ands	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4313      	orrs	r3, r2
 8007696:	f043 0307 	orr.w	r3, r3, #7
 800769a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	609a      	str	r2, [r3, #8]
}
 80076a2:	bf00      	nop
 80076a4:	3714      	adds	r7, #20
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	ffcfff8f 	.word	0xffcfff8f

080076b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
 80076c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	021a      	lsls	r2, r3, #8
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	431a      	orrs	r2, r3
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	4313      	orrs	r3, r2
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	4313      	orrs	r3, r2
 80076e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	609a      	str	r2, [r3, #8]
}
 80076e8:	bf00      	nop
 80076ea:	371c      	adds	r7, #28
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f003 031f 	and.w	r3, r3, #31
 8007706:	2201      	movs	r2, #1
 8007708:	fa02 f303 	lsl.w	r3, r2, r3
 800770c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6a1a      	ldr	r2, [r3, #32]
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	43db      	mvns	r3, r3
 8007716:	401a      	ands	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6a1a      	ldr	r2, [r3, #32]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f003 031f 	and.w	r3, r3, #31
 8007726:	6879      	ldr	r1, [r7, #4]
 8007728:	fa01 f303 	lsl.w	r3, r1, r3
 800772c:	431a      	orrs	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	621a      	str	r2, [r3, #32]
}
 8007732:	bf00      	nop
 8007734:	371c      	adds	r7, #28
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
	...

08007740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007750:	2b01      	cmp	r3, #1
 8007752:	d101      	bne.n	8007758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007754:	2302      	movs	r3, #2
 8007756:	e06d      	b.n	8007834 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2202      	movs	r2, #2
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a30      	ldr	r2, [pc, #192]	; (8007840 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d004      	beq.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a2f      	ldr	r2, [pc, #188]	; (8007844 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d108      	bne.n	800779e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007792:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	4313      	orrs	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a20      	ldr	r2, [pc, #128]	; (8007840 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d022      	beq.n	8007808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ca:	d01d      	beq.n	8007808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a1d      	ldr	r2, [pc, #116]	; (8007848 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d018      	beq.n	8007808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a1c      	ldr	r2, [pc, #112]	; (800784c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d013      	beq.n	8007808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a1a      	ldr	r2, [pc, #104]	; (8007850 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d00e      	beq.n	8007808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a15      	ldr	r2, [pc, #84]	; (8007844 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d009      	beq.n	8007808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a16      	ldr	r2, [pc, #88]	; (8007854 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d004      	beq.n	8007808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a15      	ldr	r2, [pc, #84]	; (8007858 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d10c      	bne.n	8007822 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800780e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	4313      	orrs	r3, r2
 8007818:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	40010000 	.word	0x40010000
 8007844:	40010400 	.word	0x40010400
 8007848:	40000400 	.word	0x40000400
 800784c:	40000800 	.word	0x40000800
 8007850:	40000c00 	.word	0x40000c00
 8007854:	40001800 	.word	0x40001800
 8007858:	40014000 	.word	0x40014000

0800785c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d101      	bne.n	80078aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e042      	b.n	8007930 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d106      	bne.n	80078c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7f9 fbe9 	bl	8001094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2224      	movs	r2, #36	; 0x24
 80078c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 0201 	bic.w	r2, r2, #1
 80078d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d002      	beq.n	80078e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fd90 	bl	8008408 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f825 	bl	8007938 <UART_SetConfig>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d101      	bne.n	80078f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e01b      	b.n	8007930 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007906:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	689a      	ldr	r2, [r3, #8]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007916:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f042 0201 	orr.w	r2, r2, #1
 8007926:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fe0f 	bl	800854c <UART_CheckIdleState>
 800792e:	4603      	mov	r3, r0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800793c:	b092      	sub	sp, #72	; 0x48
 800793e:	af00      	add	r7, sp, #0
 8007940:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	431a      	orrs	r2, r3
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	431a      	orrs	r2, r3
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	69db      	ldr	r3, [r3, #28]
 800795c:	4313      	orrs	r3, r2
 800795e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	4bbe      	ldr	r3, [pc, #760]	; (8007c60 <UART_SetConfig+0x328>)
 8007968:	4013      	ands	r3, r2
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	6812      	ldr	r2, [r2, #0]
 800796e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007970:	430b      	orrs	r3, r1
 8007972:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	68da      	ldr	r2, [r3, #12]
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	430a      	orrs	r2, r1
 8007988:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4ab3      	ldr	r2, [pc, #716]	; (8007c64 <UART_SetConfig+0x32c>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d004      	beq.n	80079a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	6a1b      	ldr	r3, [r3, #32]
 800799e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079a0:	4313      	orrs	r3, r2
 80079a2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689a      	ldr	r2, [r3, #8]
 80079aa:	4baf      	ldr	r3, [pc, #700]	; (8007c68 <UART_SetConfig+0x330>)
 80079ac:	4013      	ands	r3, r2
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	6812      	ldr	r2, [r2, #0]
 80079b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079b4:	430b      	orrs	r3, r1
 80079b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079be:	f023 010f 	bic.w	r1, r3, #15
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4aa6      	ldr	r2, [pc, #664]	; (8007c6c <UART_SetConfig+0x334>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d177      	bne.n	8007ac8 <UART_SetConfig+0x190>
 80079d8:	4ba5      	ldr	r3, [pc, #660]	; (8007c70 <UART_SetConfig+0x338>)
 80079da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079e0:	2b28      	cmp	r3, #40	; 0x28
 80079e2:	d86d      	bhi.n	8007ac0 <UART_SetConfig+0x188>
 80079e4:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <UART_SetConfig+0xb4>)
 80079e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ea:	bf00      	nop
 80079ec:	08007a91 	.word	0x08007a91
 80079f0:	08007ac1 	.word	0x08007ac1
 80079f4:	08007ac1 	.word	0x08007ac1
 80079f8:	08007ac1 	.word	0x08007ac1
 80079fc:	08007ac1 	.word	0x08007ac1
 8007a00:	08007ac1 	.word	0x08007ac1
 8007a04:	08007ac1 	.word	0x08007ac1
 8007a08:	08007ac1 	.word	0x08007ac1
 8007a0c:	08007a99 	.word	0x08007a99
 8007a10:	08007ac1 	.word	0x08007ac1
 8007a14:	08007ac1 	.word	0x08007ac1
 8007a18:	08007ac1 	.word	0x08007ac1
 8007a1c:	08007ac1 	.word	0x08007ac1
 8007a20:	08007ac1 	.word	0x08007ac1
 8007a24:	08007ac1 	.word	0x08007ac1
 8007a28:	08007ac1 	.word	0x08007ac1
 8007a2c:	08007aa1 	.word	0x08007aa1
 8007a30:	08007ac1 	.word	0x08007ac1
 8007a34:	08007ac1 	.word	0x08007ac1
 8007a38:	08007ac1 	.word	0x08007ac1
 8007a3c:	08007ac1 	.word	0x08007ac1
 8007a40:	08007ac1 	.word	0x08007ac1
 8007a44:	08007ac1 	.word	0x08007ac1
 8007a48:	08007ac1 	.word	0x08007ac1
 8007a4c:	08007aa9 	.word	0x08007aa9
 8007a50:	08007ac1 	.word	0x08007ac1
 8007a54:	08007ac1 	.word	0x08007ac1
 8007a58:	08007ac1 	.word	0x08007ac1
 8007a5c:	08007ac1 	.word	0x08007ac1
 8007a60:	08007ac1 	.word	0x08007ac1
 8007a64:	08007ac1 	.word	0x08007ac1
 8007a68:	08007ac1 	.word	0x08007ac1
 8007a6c:	08007ab1 	.word	0x08007ab1
 8007a70:	08007ac1 	.word	0x08007ac1
 8007a74:	08007ac1 	.word	0x08007ac1
 8007a78:	08007ac1 	.word	0x08007ac1
 8007a7c:	08007ac1 	.word	0x08007ac1
 8007a80:	08007ac1 	.word	0x08007ac1
 8007a84:	08007ac1 	.word	0x08007ac1
 8007a88:	08007ac1 	.word	0x08007ac1
 8007a8c:	08007ab9 	.word	0x08007ab9
 8007a90:	2301      	movs	r3, #1
 8007a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a96:	e222      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007a98:	2304      	movs	r3, #4
 8007a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a9e:	e21e      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007aa0:	2308      	movs	r3, #8
 8007aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aa6:	e21a      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007aa8:	2310      	movs	r3, #16
 8007aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aae:	e216      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007ab0:	2320      	movs	r3, #32
 8007ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ab6:	e212      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007ab8:	2340      	movs	r3, #64	; 0x40
 8007aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007abe:	e20e      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007ac0:	2380      	movs	r3, #128	; 0x80
 8007ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ac6:	e20a      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a69      	ldr	r2, [pc, #420]	; (8007c74 <UART_SetConfig+0x33c>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d130      	bne.n	8007b34 <UART_SetConfig+0x1fc>
 8007ad2:	4b67      	ldr	r3, [pc, #412]	; (8007c70 <UART_SetConfig+0x338>)
 8007ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad6:	f003 0307 	and.w	r3, r3, #7
 8007ada:	2b05      	cmp	r3, #5
 8007adc:	d826      	bhi.n	8007b2c <UART_SetConfig+0x1f4>
 8007ade:	a201      	add	r2, pc, #4	; (adr r2, 8007ae4 <UART_SetConfig+0x1ac>)
 8007ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae4:	08007afd 	.word	0x08007afd
 8007ae8:	08007b05 	.word	0x08007b05
 8007aec:	08007b0d 	.word	0x08007b0d
 8007af0:	08007b15 	.word	0x08007b15
 8007af4:	08007b1d 	.word	0x08007b1d
 8007af8:	08007b25 	.word	0x08007b25
 8007afc:	2300      	movs	r3, #0
 8007afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b02:	e1ec      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007b04:	2304      	movs	r3, #4
 8007b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b0a:	e1e8      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007b0c:	2308      	movs	r3, #8
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b12:	e1e4      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007b14:	2310      	movs	r3, #16
 8007b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b1a:	e1e0      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007b1c:	2320      	movs	r3, #32
 8007b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b22:	e1dc      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007b24:	2340      	movs	r3, #64	; 0x40
 8007b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b2a:	e1d8      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007b2c:	2380      	movs	r3, #128	; 0x80
 8007b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b32:	e1d4      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a4f      	ldr	r2, [pc, #316]	; (8007c78 <UART_SetConfig+0x340>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d130      	bne.n	8007ba0 <UART_SetConfig+0x268>
 8007b3e:	4b4c      	ldr	r3, [pc, #304]	; (8007c70 <UART_SetConfig+0x338>)
 8007b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b42:	f003 0307 	and.w	r3, r3, #7
 8007b46:	2b05      	cmp	r3, #5
 8007b48:	d826      	bhi.n	8007b98 <UART_SetConfig+0x260>
 8007b4a:	a201      	add	r2, pc, #4	; (adr r2, 8007b50 <UART_SetConfig+0x218>)
 8007b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b50:	08007b69 	.word	0x08007b69
 8007b54:	08007b71 	.word	0x08007b71
 8007b58:	08007b79 	.word	0x08007b79
 8007b5c:	08007b81 	.word	0x08007b81
 8007b60:	08007b89 	.word	0x08007b89
 8007b64:	08007b91 	.word	0x08007b91
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b6e:	e1b6      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007b70:	2304      	movs	r3, #4
 8007b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b76:	e1b2      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007b78:	2308      	movs	r3, #8
 8007b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b7e:	e1ae      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007b80:	2310      	movs	r3, #16
 8007b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b86:	e1aa      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007b88:	2320      	movs	r3, #32
 8007b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b8e:	e1a6      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007b90:	2340      	movs	r3, #64	; 0x40
 8007b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b96:	e1a2      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007b98:	2380      	movs	r3, #128	; 0x80
 8007b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b9e:	e19e      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a35      	ldr	r2, [pc, #212]	; (8007c7c <UART_SetConfig+0x344>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d130      	bne.n	8007c0c <UART_SetConfig+0x2d4>
 8007baa:	4b31      	ldr	r3, [pc, #196]	; (8007c70 <UART_SetConfig+0x338>)
 8007bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bae:	f003 0307 	and.w	r3, r3, #7
 8007bb2:	2b05      	cmp	r3, #5
 8007bb4:	d826      	bhi.n	8007c04 <UART_SetConfig+0x2cc>
 8007bb6:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <UART_SetConfig+0x284>)
 8007bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbc:	08007bd5 	.word	0x08007bd5
 8007bc0:	08007bdd 	.word	0x08007bdd
 8007bc4:	08007be5 	.word	0x08007be5
 8007bc8:	08007bed 	.word	0x08007bed
 8007bcc:	08007bf5 	.word	0x08007bf5
 8007bd0:	08007bfd 	.word	0x08007bfd
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bda:	e180      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007bdc:	2304      	movs	r3, #4
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007be2:	e17c      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007be4:	2308      	movs	r3, #8
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bea:	e178      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007bec:	2310      	movs	r3, #16
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bf2:	e174      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007bf4:	2320      	movs	r3, #32
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bfa:	e170      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007bfc:	2340      	movs	r3, #64	; 0x40
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c02:	e16c      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007c04:	2380      	movs	r3, #128	; 0x80
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c0a:	e168      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a1b      	ldr	r2, [pc, #108]	; (8007c80 <UART_SetConfig+0x348>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d142      	bne.n	8007c9c <UART_SetConfig+0x364>
 8007c16:	4b16      	ldr	r3, [pc, #88]	; (8007c70 <UART_SetConfig+0x338>)
 8007c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c1a:	f003 0307 	and.w	r3, r3, #7
 8007c1e:	2b05      	cmp	r3, #5
 8007c20:	d838      	bhi.n	8007c94 <UART_SetConfig+0x35c>
 8007c22:	a201      	add	r2, pc, #4	; (adr r2, 8007c28 <UART_SetConfig+0x2f0>)
 8007c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c28:	08007c41 	.word	0x08007c41
 8007c2c:	08007c49 	.word	0x08007c49
 8007c30:	08007c51 	.word	0x08007c51
 8007c34:	08007c59 	.word	0x08007c59
 8007c38:	08007c85 	.word	0x08007c85
 8007c3c:	08007c8d 	.word	0x08007c8d
 8007c40:	2300      	movs	r3, #0
 8007c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c46:	e14a      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007c48:	2304      	movs	r3, #4
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c4e:	e146      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007c50:	2308      	movs	r3, #8
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c56:	e142      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007c58:	2310      	movs	r3, #16
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c5e:	e13e      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007c60:	cfff69f3 	.word	0xcfff69f3
 8007c64:	58000c00 	.word	0x58000c00
 8007c68:	11fff4ff 	.word	0x11fff4ff
 8007c6c:	40011000 	.word	0x40011000
 8007c70:	58024400 	.word	0x58024400
 8007c74:	40004400 	.word	0x40004400
 8007c78:	40004800 	.word	0x40004800
 8007c7c:	40004c00 	.word	0x40004c00
 8007c80:	40005000 	.word	0x40005000
 8007c84:	2320      	movs	r3, #32
 8007c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c8a:	e128      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007c8c:	2340      	movs	r3, #64	; 0x40
 8007c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c92:	e124      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007c94:	2380      	movs	r3, #128	; 0x80
 8007c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c9a:	e120      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4acb      	ldr	r2, [pc, #812]	; (8007fd0 <UART_SetConfig+0x698>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d176      	bne.n	8007d94 <UART_SetConfig+0x45c>
 8007ca6:	4bcb      	ldr	r3, [pc, #812]	; (8007fd4 <UART_SetConfig+0x69c>)
 8007ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007caa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cae:	2b28      	cmp	r3, #40	; 0x28
 8007cb0:	d86c      	bhi.n	8007d8c <UART_SetConfig+0x454>
 8007cb2:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <UART_SetConfig+0x380>)
 8007cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb8:	08007d5d 	.word	0x08007d5d
 8007cbc:	08007d8d 	.word	0x08007d8d
 8007cc0:	08007d8d 	.word	0x08007d8d
 8007cc4:	08007d8d 	.word	0x08007d8d
 8007cc8:	08007d8d 	.word	0x08007d8d
 8007ccc:	08007d8d 	.word	0x08007d8d
 8007cd0:	08007d8d 	.word	0x08007d8d
 8007cd4:	08007d8d 	.word	0x08007d8d
 8007cd8:	08007d65 	.word	0x08007d65
 8007cdc:	08007d8d 	.word	0x08007d8d
 8007ce0:	08007d8d 	.word	0x08007d8d
 8007ce4:	08007d8d 	.word	0x08007d8d
 8007ce8:	08007d8d 	.word	0x08007d8d
 8007cec:	08007d8d 	.word	0x08007d8d
 8007cf0:	08007d8d 	.word	0x08007d8d
 8007cf4:	08007d8d 	.word	0x08007d8d
 8007cf8:	08007d6d 	.word	0x08007d6d
 8007cfc:	08007d8d 	.word	0x08007d8d
 8007d00:	08007d8d 	.word	0x08007d8d
 8007d04:	08007d8d 	.word	0x08007d8d
 8007d08:	08007d8d 	.word	0x08007d8d
 8007d0c:	08007d8d 	.word	0x08007d8d
 8007d10:	08007d8d 	.word	0x08007d8d
 8007d14:	08007d8d 	.word	0x08007d8d
 8007d18:	08007d75 	.word	0x08007d75
 8007d1c:	08007d8d 	.word	0x08007d8d
 8007d20:	08007d8d 	.word	0x08007d8d
 8007d24:	08007d8d 	.word	0x08007d8d
 8007d28:	08007d8d 	.word	0x08007d8d
 8007d2c:	08007d8d 	.word	0x08007d8d
 8007d30:	08007d8d 	.word	0x08007d8d
 8007d34:	08007d8d 	.word	0x08007d8d
 8007d38:	08007d7d 	.word	0x08007d7d
 8007d3c:	08007d8d 	.word	0x08007d8d
 8007d40:	08007d8d 	.word	0x08007d8d
 8007d44:	08007d8d 	.word	0x08007d8d
 8007d48:	08007d8d 	.word	0x08007d8d
 8007d4c:	08007d8d 	.word	0x08007d8d
 8007d50:	08007d8d 	.word	0x08007d8d
 8007d54:	08007d8d 	.word	0x08007d8d
 8007d58:	08007d85 	.word	0x08007d85
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d62:	e0bc      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007d64:	2304      	movs	r3, #4
 8007d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d6a:	e0b8      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007d6c:	2308      	movs	r3, #8
 8007d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d72:	e0b4      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007d74:	2310      	movs	r3, #16
 8007d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d7a:	e0b0      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007d7c:	2320      	movs	r3, #32
 8007d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d82:	e0ac      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007d84:	2340      	movs	r3, #64	; 0x40
 8007d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d8a:	e0a8      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007d8c:	2380      	movs	r3, #128	; 0x80
 8007d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d92:	e0a4      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a8f      	ldr	r2, [pc, #572]	; (8007fd8 <UART_SetConfig+0x6a0>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d130      	bne.n	8007e00 <UART_SetConfig+0x4c8>
 8007d9e:	4b8d      	ldr	r3, [pc, #564]	; (8007fd4 <UART_SetConfig+0x69c>)
 8007da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da2:	f003 0307 	and.w	r3, r3, #7
 8007da6:	2b05      	cmp	r3, #5
 8007da8:	d826      	bhi.n	8007df8 <UART_SetConfig+0x4c0>
 8007daa:	a201      	add	r2, pc, #4	; (adr r2, 8007db0 <UART_SetConfig+0x478>)
 8007dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db0:	08007dc9 	.word	0x08007dc9
 8007db4:	08007dd1 	.word	0x08007dd1
 8007db8:	08007dd9 	.word	0x08007dd9
 8007dbc:	08007de1 	.word	0x08007de1
 8007dc0:	08007de9 	.word	0x08007de9
 8007dc4:	08007df1 	.word	0x08007df1
 8007dc8:	2300      	movs	r3, #0
 8007dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dce:	e086      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007dd0:	2304      	movs	r3, #4
 8007dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dd6:	e082      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007dd8:	2308      	movs	r3, #8
 8007dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dde:	e07e      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007de0:	2310      	movs	r3, #16
 8007de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007de6:	e07a      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007de8:	2320      	movs	r3, #32
 8007dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dee:	e076      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007df0:	2340      	movs	r3, #64	; 0x40
 8007df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007df6:	e072      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007df8:	2380      	movs	r3, #128	; 0x80
 8007dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dfe:	e06e      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a75      	ldr	r2, [pc, #468]	; (8007fdc <UART_SetConfig+0x6a4>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d130      	bne.n	8007e6c <UART_SetConfig+0x534>
 8007e0a:	4b72      	ldr	r3, [pc, #456]	; (8007fd4 <UART_SetConfig+0x69c>)
 8007e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e0e:	f003 0307 	and.w	r3, r3, #7
 8007e12:	2b05      	cmp	r3, #5
 8007e14:	d826      	bhi.n	8007e64 <UART_SetConfig+0x52c>
 8007e16:	a201      	add	r2, pc, #4	; (adr r2, 8007e1c <UART_SetConfig+0x4e4>)
 8007e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1c:	08007e35 	.word	0x08007e35
 8007e20:	08007e3d 	.word	0x08007e3d
 8007e24:	08007e45 	.word	0x08007e45
 8007e28:	08007e4d 	.word	0x08007e4d
 8007e2c:	08007e55 	.word	0x08007e55
 8007e30:	08007e5d 	.word	0x08007e5d
 8007e34:	2300      	movs	r3, #0
 8007e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e3a:	e050      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007e3c:	2304      	movs	r3, #4
 8007e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e42:	e04c      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007e44:	2308      	movs	r3, #8
 8007e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e4a:	e048      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007e4c:	2310      	movs	r3, #16
 8007e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e52:	e044      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007e54:	2320      	movs	r3, #32
 8007e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e5a:	e040      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007e5c:	2340      	movs	r3, #64	; 0x40
 8007e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e62:	e03c      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007e64:	2380      	movs	r3, #128	; 0x80
 8007e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e6a:	e038      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a5b      	ldr	r2, [pc, #364]	; (8007fe0 <UART_SetConfig+0x6a8>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d130      	bne.n	8007ed8 <UART_SetConfig+0x5a0>
 8007e76:	4b57      	ldr	r3, [pc, #348]	; (8007fd4 <UART_SetConfig+0x69c>)
 8007e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e7a:	f003 0307 	and.w	r3, r3, #7
 8007e7e:	2b05      	cmp	r3, #5
 8007e80:	d826      	bhi.n	8007ed0 <UART_SetConfig+0x598>
 8007e82:	a201      	add	r2, pc, #4	; (adr r2, 8007e88 <UART_SetConfig+0x550>)
 8007e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e88:	08007ea1 	.word	0x08007ea1
 8007e8c:	08007ea9 	.word	0x08007ea9
 8007e90:	08007eb1 	.word	0x08007eb1
 8007e94:	08007eb9 	.word	0x08007eb9
 8007e98:	08007ec1 	.word	0x08007ec1
 8007e9c:	08007ec9 	.word	0x08007ec9
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ea6:	e01a      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007ea8:	2304      	movs	r3, #4
 8007eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eae:	e016      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007eb0:	2308      	movs	r3, #8
 8007eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eb6:	e012      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007eb8:	2310      	movs	r3, #16
 8007eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ebe:	e00e      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007ec0:	2320      	movs	r3, #32
 8007ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ec6:	e00a      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007ec8:	2340      	movs	r3, #64	; 0x40
 8007eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ece:	e006      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007ed0:	2380      	movs	r3, #128	; 0x80
 8007ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ed6:	e002      	b.n	8007ede <UART_SetConfig+0x5a6>
 8007ed8:	2380      	movs	r3, #128	; 0x80
 8007eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a3f      	ldr	r2, [pc, #252]	; (8007fe0 <UART_SetConfig+0x6a8>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	f040 80f8 	bne.w	80080da <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007eea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007eee:	2b20      	cmp	r3, #32
 8007ef0:	dc46      	bgt.n	8007f80 <UART_SetConfig+0x648>
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	f2c0 8082 	blt.w	8007ffc <UART_SetConfig+0x6c4>
 8007ef8:	3b02      	subs	r3, #2
 8007efa:	2b1e      	cmp	r3, #30
 8007efc:	d87e      	bhi.n	8007ffc <UART_SetConfig+0x6c4>
 8007efe:	a201      	add	r2, pc, #4	; (adr r2, 8007f04 <UART_SetConfig+0x5cc>)
 8007f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f04:	08007f87 	.word	0x08007f87
 8007f08:	08007ffd 	.word	0x08007ffd
 8007f0c:	08007f8f 	.word	0x08007f8f
 8007f10:	08007ffd 	.word	0x08007ffd
 8007f14:	08007ffd 	.word	0x08007ffd
 8007f18:	08007ffd 	.word	0x08007ffd
 8007f1c:	08007f9f 	.word	0x08007f9f
 8007f20:	08007ffd 	.word	0x08007ffd
 8007f24:	08007ffd 	.word	0x08007ffd
 8007f28:	08007ffd 	.word	0x08007ffd
 8007f2c:	08007ffd 	.word	0x08007ffd
 8007f30:	08007ffd 	.word	0x08007ffd
 8007f34:	08007ffd 	.word	0x08007ffd
 8007f38:	08007ffd 	.word	0x08007ffd
 8007f3c:	08007faf 	.word	0x08007faf
 8007f40:	08007ffd 	.word	0x08007ffd
 8007f44:	08007ffd 	.word	0x08007ffd
 8007f48:	08007ffd 	.word	0x08007ffd
 8007f4c:	08007ffd 	.word	0x08007ffd
 8007f50:	08007ffd 	.word	0x08007ffd
 8007f54:	08007ffd 	.word	0x08007ffd
 8007f58:	08007ffd 	.word	0x08007ffd
 8007f5c:	08007ffd 	.word	0x08007ffd
 8007f60:	08007ffd 	.word	0x08007ffd
 8007f64:	08007ffd 	.word	0x08007ffd
 8007f68:	08007ffd 	.word	0x08007ffd
 8007f6c:	08007ffd 	.word	0x08007ffd
 8007f70:	08007ffd 	.word	0x08007ffd
 8007f74:	08007ffd 	.word	0x08007ffd
 8007f78:	08007ffd 	.word	0x08007ffd
 8007f7c:	08007fef 	.word	0x08007fef
 8007f80:	2b40      	cmp	r3, #64	; 0x40
 8007f82:	d037      	beq.n	8007ff4 <UART_SetConfig+0x6bc>
 8007f84:	e03a      	b.n	8007ffc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007f86:	f7fd fdf9 	bl	8005b7c <HAL_RCCEx_GetD3PCLK1Freq>
 8007f8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f8c:	e03c      	b.n	8008008 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fd fe08 	bl	8005ba8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f9c:	e034      	b.n	8008008 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f9e:	f107 0318 	add.w	r3, r7, #24
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fd ff54 	bl	8005e50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fac:	e02c      	b.n	8008008 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fae:	4b09      	ldr	r3, [pc, #36]	; (8007fd4 <UART_SetConfig+0x69c>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 0320 	and.w	r3, r3, #32
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d016      	beq.n	8007fe8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007fba:	4b06      	ldr	r3, [pc, #24]	; (8007fd4 <UART_SetConfig+0x69c>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	08db      	lsrs	r3, r3, #3
 8007fc0:	f003 0303 	and.w	r3, r3, #3
 8007fc4:	4a07      	ldr	r2, [pc, #28]	; (8007fe4 <UART_SetConfig+0x6ac>)
 8007fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8007fca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007fcc:	e01c      	b.n	8008008 <UART_SetConfig+0x6d0>
 8007fce:	bf00      	nop
 8007fd0:	40011400 	.word	0x40011400
 8007fd4:	58024400 	.word	0x58024400
 8007fd8:	40007800 	.word	0x40007800
 8007fdc:	40007c00 	.word	0x40007c00
 8007fe0:	58000c00 	.word	0x58000c00
 8007fe4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007fe8:	4b9d      	ldr	r3, [pc, #628]	; (8008260 <UART_SetConfig+0x928>)
 8007fea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fec:	e00c      	b.n	8008008 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007fee:	4b9d      	ldr	r3, [pc, #628]	; (8008264 <UART_SetConfig+0x92c>)
 8007ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ff2:	e009      	b.n	8008008 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ff4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ffa:	e005      	b.n	8008008 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008006:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800800a:	2b00      	cmp	r3, #0
 800800c:	f000 81de 	beq.w	80083cc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008014:	4a94      	ldr	r2, [pc, #592]	; (8008268 <UART_SetConfig+0x930>)
 8008016:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800801a:	461a      	mov	r2, r3
 800801c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800801e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008022:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	685a      	ldr	r2, [r3, #4]
 8008028:	4613      	mov	r3, r2
 800802a:	005b      	lsls	r3, r3, #1
 800802c:	4413      	add	r3, r2
 800802e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008030:	429a      	cmp	r2, r3
 8008032:	d305      	bcc.n	8008040 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800803a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800803c:	429a      	cmp	r2, r3
 800803e:	d903      	bls.n	8008048 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008046:	e1c1      	b.n	80083cc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800804a:	2200      	movs	r2, #0
 800804c:	60bb      	str	r3, [r7, #8]
 800804e:	60fa      	str	r2, [r7, #12]
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008054:	4a84      	ldr	r2, [pc, #528]	; (8008268 <UART_SetConfig+0x930>)
 8008056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800805a:	b29b      	uxth	r3, r3
 800805c:	2200      	movs	r2, #0
 800805e:	603b      	str	r3, [r7, #0]
 8008060:	607a      	str	r2, [r7, #4]
 8008062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008066:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800806a:	f7f8 f935 	bl	80002d8 <__aeabi_uldivmod>
 800806e:	4602      	mov	r2, r0
 8008070:	460b      	mov	r3, r1
 8008072:	4610      	mov	r0, r2
 8008074:	4619      	mov	r1, r3
 8008076:	f04f 0200 	mov.w	r2, #0
 800807a:	f04f 0300 	mov.w	r3, #0
 800807e:	020b      	lsls	r3, r1, #8
 8008080:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008084:	0202      	lsls	r2, r0, #8
 8008086:	6979      	ldr	r1, [r7, #20]
 8008088:	6849      	ldr	r1, [r1, #4]
 800808a:	0849      	lsrs	r1, r1, #1
 800808c:	2000      	movs	r0, #0
 800808e:	460c      	mov	r4, r1
 8008090:	4605      	mov	r5, r0
 8008092:	eb12 0804 	adds.w	r8, r2, r4
 8008096:	eb43 0905 	adc.w	r9, r3, r5
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	469a      	mov	sl, r3
 80080a2:	4693      	mov	fp, r2
 80080a4:	4652      	mov	r2, sl
 80080a6:	465b      	mov	r3, fp
 80080a8:	4640      	mov	r0, r8
 80080aa:	4649      	mov	r1, r9
 80080ac:	f7f8 f914 	bl	80002d8 <__aeabi_uldivmod>
 80080b0:	4602      	mov	r2, r0
 80080b2:	460b      	mov	r3, r1
 80080b4:	4613      	mov	r3, r2
 80080b6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80080b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080be:	d308      	bcc.n	80080d2 <UART_SetConfig+0x79a>
 80080c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080c6:	d204      	bcs.n	80080d2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080ce:	60da      	str	r2, [r3, #12]
 80080d0:	e17c      	b.n	80083cc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80080d8:	e178      	b.n	80083cc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	69db      	ldr	r3, [r3, #28]
 80080de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080e2:	f040 80c5 	bne.w	8008270 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80080e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80080ea:	2b20      	cmp	r3, #32
 80080ec:	dc48      	bgt.n	8008180 <UART_SetConfig+0x848>
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	db7b      	blt.n	80081ea <UART_SetConfig+0x8b2>
 80080f2:	2b20      	cmp	r3, #32
 80080f4:	d879      	bhi.n	80081ea <UART_SetConfig+0x8b2>
 80080f6:	a201      	add	r2, pc, #4	; (adr r2, 80080fc <UART_SetConfig+0x7c4>)
 80080f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fc:	08008187 	.word	0x08008187
 8008100:	0800818f 	.word	0x0800818f
 8008104:	080081eb 	.word	0x080081eb
 8008108:	080081eb 	.word	0x080081eb
 800810c:	08008197 	.word	0x08008197
 8008110:	080081eb 	.word	0x080081eb
 8008114:	080081eb 	.word	0x080081eb
 8008118:	080081eb 	.word	0x080081eb
 800811c:	080081a7 	.word	0x080081a7
 8008120:	080081eb 	.word	0x080081eb
 8008124:	080081eb 	.word	0x080081eb
 8008128:	080081eb 	.word	0x080081eb
 800812c:	080081eb 	.word	0x080081eb
 8008130:	080081eb 	.word	0x080081eb
 8008134:	080081eb 	.word	0x080081eb
 8008138:	080081eb 	.word	0x080081eb
 800813c:	080081b7 	.word	0x080081b7
 8008140:	080081eb 	.word	0x080081eb
 8008144:	080081eb 	.word	0x080081eb
 8008148:	080081eb 	.word	0x080081eb
 800814c:	080081eb 	.word	0x080081eb
 8008150:	080081eb 	.word	0x080081eb
 8008154:	080081eb 	.word	0x080081eb
 8008158:	080081eb 	.word	0x080081eb
 800815c:	080081eb 	.word	0x080081eb
 8008160:	080081eb 	.word	0x080081eb
 8008164:	080081eb 	.word	0x080081eb
 8008168:	080081eb 	.word	0x080081eb
 800816c:	080081eb 	.word	0x080081eb
 8008170:	080081eb 	.word	0x080081eb
 8008174:	080081eb 	.word	0x080081eb
 8008178:	080081eb 	.word	0x080081eb
 800817c:	080081dd 	.word	0x080081dd
 8008180:	2b40      	cmp	r3, #64	; 0x40
 8008182:	d02e      	beq.n	80081e2 <UART_SetConfig+0x8aa>
 8008184:	e031      	b.n	80081ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008186:	f7fc fac3 	bl	8004710 <HAL_RCC_GetPCLK1Freq>
 800818a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800818c:	e033      	b.n	80081f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800818e:	f7fc fad5 	bl	800473c <HAL_RCC_GetPCLK2Freq>
 8008192:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008194:	e02f      	b.n	80081f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800819a:	4618      	mov	r0, r3
 800819c:	f7fd fd04 	bl	8005ba8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80081a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081a4:	e027      	b.n	80081f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081a6:	f107 0318 	add.w	r3, r7, #24
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fd fe50 	bl	8005e50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081b4:	e01f      	b.n	80081f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081b6:	4b2d      	ldr	r3, [pc, #180]	; (800826c <UART_SetConfig+0x934>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0320 	and.w	r3, r3, #32
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d009      	beq.n	80081d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081c2:	4b2a      	ldr	r3, [pc, #168]	; (800826c <UART_SetConfig+0x934>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	08db      	lsrs	r3, r3, #3
 80081c8:	f003 0303 	and.w	r3, r3, #3
 80081cc:	4a24      	ldr	r2, [pc, #144]	; (8008260 <UART_SetConfig+0x928>)
 80081ce:	fa22 f303 	lsr.w	r3, r2, r3
 80081d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081d4:	e00f      	b.n	80081f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80081d6:	4b22      	ldr	r3, [pc, #136]	; (8008260 <UART_SetConfig+0x928>)
 80081d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081da:	e00c      	b.n	80081f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081dc:	4b21      	ldr	r3, [pc, #132]	; (8008264 <UART_SetConfig+0x92c>)
 80081de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081e0:	e009      	b.n	80081f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081e8:	e005      	b.n	80081f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80081ea:	2300      	movs	r3, #0
 80081ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80081f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 80e7 	beq.w	80083cc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	4a19      	ldr	r2, [pc, #100]	; (8008268 <UART_SetConfig+0x930>)
 8008204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008208:	461a      	mov	r2, r3
 800820a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800820c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008210:	005a      	lsls	r2, r3, #1
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	085b      	lsrs	r3, r3, #1
 8008218:	441a      	add	r2, r3
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008222:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008226:	2b0f      	cmp	r3, #15
 8008228:	d916      	bls.n	8008258 <UART_SetConfig+0x920>
 800822a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008230:	d212      	bcs.n	8008258 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008234:	b29b      	uxth	r3, r3
 8008236:	f023 030f 	bic.w	r3, r3, #15
 800823a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823e:	085b      	lsrs	r3, r3, #1
 8008240:	b29b      	uxth	r3, r3
 8008242:	f003 0307 	and.w	r3, r3, #7
 8008246:	b29a      	uxth	r2, r3
 8008248:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800824a:	4313      	orrs	r3, r2
 800824c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008254:	60da      	str	r2, [r3, #12]
 8008256:	e0b9      	b.n	80083cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800825e:	e0b5      	b.n	80083cc <UART_SetConfig+0xa94>
 8008260:	03d09000 	.word	0x03d09000
 8008264:	003d0900 	.word	0x003d0900
 8008268:	080090e8 	.word	0x080090e8
 800826c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008270:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008274:	2b20      	cmp	r3, #32
 8008276:	dc49      	bgt.n	800830c <UART_SetConfig+0x9d4>
 8008278:	2b00      	cmp	r3, #0
 800827a:	db7c      	blt.n	8008376 <UART_SetConfig+0xa3e>
 800827c:	2b20      	cmp	r3, #32
 800827e:	d87a      	bhi.n	8008376 <UART_SetConfig+0xa3e>
 8008280:	a201      	add	r2, pc, #4	; (adr r2, 8008288 <UART_SetConfig+0x950>)
 8008282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008286:	bf00      	nop
 8008288:	08008313 	.word	0x08008313
 800828c:	0800831b 	.word	0x0800831b
 8008290:	08008377 	.word	0x08008377
 8008294:	08008377 	.word	0x08008377
 8008298:	08008323 	.word	0x08008323
 800829c:	08008377 	.word	0x08008377
 80082a0:	08008377 	.word	0x08008377
 80082a4:	08008377 	.word	0x08008377
 80082a8:	08008333 	.word	0x08008333
 80082ac:	08008377 	.word	0x08008377
 80082b0:	08008377 	.word	0x08008377
 80082b4:	08008377 	.word	0x08008377
 80082b8:	08008377 	.word	0x08008377
 80082bc:	08008377 	.word	0x08008377
 80082c0:	08008377 	.word	0x08008377
 80082c4:	08008377 	.word	0x08008377
 80082c8:	08008343 	.word	0x08008343
 80082cc:	08008377 	.word	0x08008377
 80082d0:	08008377 	.word	0x08008377
 80082d4:	08008377 	.word	0x08008377
 80082d8:	08008377 	.word	0x08008377
 80082dc:	08008377 	.word	0x08008377
 80082e0:	08008377 	.word	0x08008377
 80082e4:	08008377 	.word	0x08008377
 80082e8:	08008377 	.word	0x08008377
 80082ec:	08008377 	.word	0x08008377
 80082f0:	08008377 	.word	0x08008377
 80082f4:	08008377 	.word	0x08008377
 80082f8:	08008377 	.word	0x08008377
 80082fc:	08008377 	.word	0x08008377
 8008300:	08008377 	.word	0x08008377
 8008304:	08008377 	.word	0x08008377
 8008308:	08008369 	.word	0x08008369
 800830c:	2b40      	cmp	r3, #64	; 0x40
 800830e:	d02e      	beq.n	800836e <UART_SetConfig+0xa36>
 8008310:	e031      	b.n	8008376 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008312:	f7fc f9fd 	bl	8004710 <HAL_RCC_GetPCLK1Freq>
 8008316:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008318:	e033      	b.n	8008382 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800831a:	f7fc fa0f 	bl	800473c <HAL_RCC_GetPCLK2Freq>
 800831e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008320:	e02f      	b.n	8008382 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008326:	4618      	mov	r0, r3
 8008328:	f7fd fc3e 	bl	8005ba8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008330:	e027      	b.n	8008382 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008332:	f107 0318 	add.w	r3, r7, #24
 8008336:	4618      	mov	r0, r3
 8008338:	f7fd fd8a 	bl	8005e50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008340:	e01f      	b.n	8008382 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008342:	4b2d      	ldr	r3, [pc, #180]	; (80083f8 <UART_SetConfig+0xac0>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 0320 	and.w	r3, r3, #32
 800834a:	2b00      	cmp	r3, #0
 800834c:	d009      	beq.n	8008362 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800834e:	4b2a      	ldr	r3, [pc, #168]	; (80083f8 <UART_SetConfig+0xac0>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	08db      	lsrs	r3, r3, #3
 8008354:	f003 0303 	and.w	r3, r3, #3
 8008358:	4a28      	ldr	r2, [pc, #160]	; (80083fc <UART_SetConfig+0xac4>)
 800835a:	fa22 f303 	lsr.w	r3, r2, r3
 800835e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008360:	e00f      	b.n	8008382 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008362:	4b26      	ldr	r3, [pc, #152]	; (80083fc <UART_SetConfig+0xac4>)
 8008364:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008366:	e00c      	b.n	8008382 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008368:	4b25      	ldr	r3, [pc, #148]	; (8008400 <UART_SetConfig+0xac8>)
 800836a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800836c:	e009      	b.n	8008382 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800836e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008374:	e005      	b.n	8008382 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008380:	bf00      	nop
    }

    if (pclk != 0U)
 8008382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008384:	2b00      	cmp	r3, #0
 8008386:	d021      	beq.n	80083cc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	4a1d      	ldr	r2, [pc, #116]	; (8008404 <UART_SetConfig+0xacc>)
 800838e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008392:	461a      	mov	r2, r3
 8008394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008396:	fbb3 f2f2 	udiv	r2, r3, r2
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	085b      	lsrs	r3, r3, #1
 80083a0:	441a      	add	r2, r3
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083aa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ae:	2b0f      	cmp	r3, #15
 80083b0:	d909      	bls.n	80083c6 <UART_SetConfig+0xa8e>
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083b8:	d205      	bcs.n	80083c6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	b29a      	uxth	r2, r3
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	60da      	str	r2, [r3, #12]
 80083c4:	e002      	b.n	80083cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	2200      	movs	r2, #0
 80083e0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2200      	movs	r2, #0
 80083e6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80083e8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3748      	adds	r7, #72	; 0x48
 80083f0:	46bd      	mov	sp, r7
 80083f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083f6:	bf00      	nop
 80083f8:	58024400 	.word	0x58024400
 80083fc:	03d09000 	.word	0x03d09000
 8008400:	003d0900 	.word	0x003d0900
 8008404:	080090e8 	.word	0x080090e8

08008408 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008414:	f003 0308 	and.w	r3, r3, #8
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00a      	beq.n	8008432 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	430a      	orrs	r2, r1
 8008430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00a      	beq.n	8008454 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	430a      	orrs	r2, r1
 8008452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008458:	f003 0302 	and.w	r3, r3, #2
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00a      	beq.n	8008476 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	430a      	orrs	r2, r1
 8008474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847a:	f003 0304 	and.w	r3, r3, #4
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00a      	beq.n	8008498 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	430a      	orrs	r2, r1
 8008496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849c:	f003 0310 	and.w	r3, r3, #16
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00a      	beq.n	80084ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	430a      	orrs	r2, r1
 80084b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084be:	f003 0320 	and.w	r3, r3, #32
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00a      	beq.n	80084dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	430a      	orrs	r2, r1
 80084da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d01a      	beq.n	800851e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	430a      	orrs	r2, r1
 80084fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008506:	d10a      	bne.n	800851e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	430a      	orrs	r2, r1
 800851c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00a      	beq.n	8008540 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	430a      	orrs	r2, r1
 800853e:	605a      	str	r2, [r3, #4]
  }
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b098      	sub	sp, #96	; 0x60
 8008550:	af02      	add	r7, sp, #8
 8008552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800855c:	f7f8 ff7e 	bl	800145c <HAL_GetTick>
 8008560:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0308 	and.w	r3, r3, #8
 800856c:	2b08      	cmp	r3, #8
 800856e:	d12f      	bne.n	80085d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008570:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008578:	2200      	movs	r2, #0
 800857a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f88e 	bl	80086a0 <UART_WaitOnFlagUntilTimeout>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d022      	beq.n	80085d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008592:	e853 3f00 	ldrex	r3, [r3]
 8008596:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800859a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800859e:	653b      	str	r3, [r7, #80]	; 0x50
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	461a      	mov	r2, r3
 80085a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085a8:	647b      	str	r3, [r7, #68]	; 0x44
 80085aa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085b0:	e841 2300 	strex	r3, r2, [r1]
 80085b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1e6      	bne.n	800858a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2220      	movs	r2, #32
 80085c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085cc:	2303      	movs	r3, #3
 80085ce:	e063      	b.n	8008698 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0304 	and.w	r3, r3, #4
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d149      	bne.n	8008672 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085e6:	2200      	movs	r2, #0
 80085e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f857 	bl	80086a0 <UART_WaitOnFlagUntilTimeout>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d03c      	beq.n	8008672 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008600:	e853 3f00 	ldrex	r3, [r3]
 8008604:	623b      	str	r3, [r7, #32]
   return(result);
 8008606:	6a3b      	ldr	r3, [r7, #32]
 8008608:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800860c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	461a      	mov	r2, r3
 8008614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008616:	633b      	str	r3, [r7, #48]	; 0x30
 8008618:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800861c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800861e:	e841 2300 	strex	r3, r2, [r1]
 8008622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1e6      	bne.n	80085f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3308      	adds	r3, #8
 8008630:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	e853 3f00 	ldrex	r3, [r3]
 8008638:	60fb      	str	r3, [r7, #12]
   return(result);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f023 0301 	bic.w	r3, r3, #1
 8008640:	64bb      	str	r3, [r7, #72]	; 0x48
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	3308      	adds	r3, #8
 8008648:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800864a:	61fa      	str	r2, [r7, #28]
 800864c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	69b9      	ldr	r1, [r7, #24]
 8008650:	69fa      	ldr	r2, [r7, #28]
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	617b      	str	r3, [r7, #20]
   return(result);
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e5      	bne.n	800862a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2220      	movs	r2, #32
 8008662:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e012      	b.n	8008698 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2220      	movs	r2, #32
 8008676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2220      	movs	r2, #32
 800867e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3758      	adds	r7, #88	; 0x58
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	603b      	str	r3, [r7, #0]
 80086ac:	4613      	mov	r3, r2
 80086ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086b0:	e04f      	b.n	8008752 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b8:	d04b      	beq.n	8008752 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086ba:	f7f8 fecf 	bl	800145c <HAL_GetTick>
 80086be:	4602      	mov	r2, r0
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d302      	bcc.n	80086d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e04e      	b.n	8008772 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 0304 	and.w	r3, r3, #4
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d037      	beq.n	8008752 <UART_WaitOnFlagUntilTimeout+0xb2>
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	2b80      	cmp	r3, #128	; 0x80
 80086e6:	d034      	beq.n	8008752 <UART_WaitOnFlagUntilTimeout+0xb2>
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2b40      	cmp	r3, #64	; 0x40
 80086ec:	d031      	beq.n	8008752 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	69db      	ldr	r3, [r3, #28]
 80086f4:	f003 0308 	and.w	r3, r3, #8
 80086f8:	2b08      	cmp	r3, #8
 80086fa:	d110      	bne.n	800871e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2208      	movs	r2, #8
 8008702:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f000 f839 	bl	800877c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2208      	movs	r2, #8
 800870e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e029      	b.n	8008772 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	69db      	ldr	r3, [r3, #28]
 8008724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800872c:	d111      	bne.n	8008752 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008736:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f000 f81f 	bl	800877c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2220      	movs	r2, #32
 8008742:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e00f      	b.n	8008772 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	69da      	ldr	r2, [r3, #28]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	4013      	ands	r3, r2
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	429a      	cmp	r2, r3
 8008760:	bf0c      	ite	eq
 8008762:	2301      	moveq	r3, #1
 8008764:	2300      	movne	r3, #0
 8008766:	b2db      	uxtb	r3, r3
 8008768:	461a      	mov	r2, r3
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	429a      	cmp	r2, r3
 800876e:	d0a0      	beq.n	80086b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
	...

0800877c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800877c:	b480      	push	{r7}
 800877e:	b095      	sub	sp, #84	; 0x54
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878c:	e853 3f00 	ldrex	r3, [r3]
 8008790:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008794:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008798:	64fb      	str	r3, [r7, #76]	; 0x4c
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	461a      	mov	r2, r3
 80087a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087a2:	643b      	str	r3, [r7, #64]	; 0x40
 80087a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087aa:	e841 2300 	strex	r3, r2, [r1]
 80087ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1e6      	bne.n	8008784 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3308      	adds	r3, #8
 80087bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	e853 3f00 	ldrex	r3, [r3]
 80087c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80087c6:	69fa      	ldr	r2, [r7, #28]
 80087c8:	4b1e      	ldr	r3, [pc, #120]	; (8008844 <UART_EndRxTransfer+0xc8>)
 80087ca:	4013      	ands	r3, r2
 80087cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3308      	adds	r3, #8
 80087d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087de:	e841 2300 	strex	r3, r2, [r1]
 80087e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1e5      	bne.n	80087b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d118      	bne.n	8008824 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	e853 3f00 	ldrex	r3, [r3]
 80087fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	f023 0310 	bic.w	r3, r3, #16
 8008806:	647b      	str	r3, [r7, #68]	; 0x44
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	461a      	mov	r2, r3
 800880e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008810:	61bb      	str	r3, [r7, #24]
 8008812:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008814:	6979      	ldr	r1, [r7, #20]
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	e841 2300 	strex	r3, r2, [r1]
 800881c:	613b      	str	r3, [r7, #16]
   return(result);
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1e6      	bne.n	80087f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2220      	movs	r2, #32
 8008828:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008838:	bf00      	nop
 800883a:	3754      	adds	r7, #84	; 0x54
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	effffffe 	.word	0xeffffffe

08008848 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008856:	2b01      	cmp	r3, #1
 8008858:	d101      	bne.n	800885e <HAL_UARTEx_DisableFifoMode+0x16>
 800885a:	2302      	movs	r3, #2
 800885c:	e027      	b.n	80088ae <HAL_UARTEx_DisableFifoMode+0x66>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2224      	movs	r2, #36	; 0x24
 800886a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f022 0201 	bic.w	r2, r2, #1
 8008884:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800888c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2220      	movs	r2, #32
 80088a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3714      	adds	r7, #20
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b084      	sub	sp, #16
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d101      	bne.n	80088d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80088ce:	2302      	movs	r3, #2
 80088d0:	e02d      	b.n	800892e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2224      	movs	r2, #36	; 0x24
 80088de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f022 0201 	bic.w	r2, r2, #1
 80088f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	683a      	ldr	r2, [r7, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f850 	bl	80089b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2220      	movs	r2, #32
 8008920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b084      	sub	sp, #16
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008946:	2b01      	cmp	r3, #1
 8008948:	d101      	bne.n	800894e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800894a:	2302      	movs	r3, #2
 800894c:	e02d      	b.n	80089aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2224      	movs	r2, #36	; 0x24
 800895a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f022 0201 	bic.w	r2, r2, #1
 8008974:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	430a      	orrs	r2, r1
 8008988:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f812 	bl	80089b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2220      	movs	r2, #32
 800899c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
	...

080089b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d108      	bne.n	80089d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80089d4:	e031      	b.n	8008a3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80089d6:	2310      	movs	r3, #16
 80089d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80089da:	2310      	movs	r3, #16
 80089dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	0e5b      	lsrs	r3, r3, #25
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	f003 0307 	and.w	r3, r3, #7
 80089ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	0f5b      	lsrs	r3, r3, #29
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	f003 0307 	and.w	r3, r3, #7
 80089fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089fe:	7bbb      	ldrb	r3, [r7, #14]
 8008a00:	7b3a      	ldrb	r2, [r7, #12]
 8008a02:	4911      	ldr	r1, [pc, #68]	; (8008a48 <UARTEx_SetNbDataToProcess+0x94>)
 8008a04:	5c8a      	ldrb	r2, [r1, r2]
 8008a06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a0a:	7b3a      	ldrb	r2, [r7, #12]
 8008a0c:	490f      	ldr	r1, [pc, #60]	; (8008a4c <UARTEx_SetNbDataToProcess+0x98>)
 8008a0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a10:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
 8008a1e:	7b7a      	ldrb	r2, [r7, #13]
 8008a20:	4909      	ldr	r1, [pc, #36]	; (8008a48 <UARTEx_SetNbDataToProcess+0x94>)
 8008a22:	5c8a      	ldrb	r2, [r1, r2]
 8008a24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a28:	7b7a      	ldrb	r2, [r7, #13]
 8008a2a:	4908      	ldr	r1, [pc, #32]	; (8008a4c <UARTEx_SetNbDataToProcess+0x98>)
 8008a2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008a3a:	bf00      	nop
 8008a3c:	3714      	adds	r7, #20
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	08009100 	.word	0x08009100
 8008a4c:	08009108 	.word	0x08009108

08008a50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a50:	b084      	sub	sp, #16
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b084      	sub	sp, #16
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	f107 001c 	add.w	r0, r7, #28
 8008a5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a62:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d121      	bne.n	8008aae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68da      	ldr	r2, [r3, #12]
 8008a7a:	4b2c      	ldr	r3, [pc, #176]	; (8008b2c <USB_CoreInit+0xdc>)
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d105      	bne.n	8008aa2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 faaa 	bl	8008ffc <USB_CoreReset>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	73fb      	strb	r3, [r7, #15]
 8008aac:	e01b      	b.n	8008ae6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fa9e 	bl	8008ffc <USB_CoreReset>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008ac4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d106      	bne.n	8008ada <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	639a      	str	r2, [r3, #56]	; 0x38
 8008ad8:	e005      	b.n	8008ae6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ade:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008ae6:	7fbb      	ldrb	r3, [r7, #30]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d116      	bne.n	8008b1a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008af0:	b29a      	uxth	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008afa:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <USB_CoreInit+0xe0>)
 8008afc:	4313      	orrs	r3, r2
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f043 0206 	orr.w	r2, r3, #6
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	f043 0220 	orr.w	r2, r3, #32
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b26:	b004      	add	sp, #16
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	ffbdffbf 	.word	0xffbdffbf
 8008b30:	03ee0000 	.word	0x03ee0000

08008b34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f023 0201 	bic.w	r2, r3, #1
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b084      	sub	sp, #16
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	460b      	mov	r3, r1
 8008b60:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b72:	78fb      	ldrb	r3, [r7, #3]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d115      	bne.n	8008ba4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008b84:	200a      	movs	r0, #10
 8008b86:	f7f8 fc75 	bl	8001474 <HAL_Delay>
      ms += 10U;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	330a      	adds	r3, #10
 8008b8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fa25 	bl	8008fe0 <USB_GetMode>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d01e      	beq.n	8008bda <USB_SetCurrentMode+0x84>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2bc7      	cmp	r3, #199	; 0xc7
 8008ba0:	d9f0      	bls.n	8008b84 <USB_SetCurrentMode+0x2e>
 8008ba2:	e01a      	b.n	8008bda <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ba4:	78fb      	ldrb	r3, [r7, #3]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d115      	bne.n	8008bd6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008bb6:	200a      	movs	r0, #10
 8008bb8:	f7f8 fc5c 	bl	8001474 <HAL_Delay>
      ms += 10U;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	330a      	adds	r3, #10
 8008bc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fa0c 	bl	8008fe0 <USB_GetMode>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d005      	beq.n	8008bda <USB_SetCurrentMode+0x84>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2bc7      	cmp	r3, #199	; 0xc7
 8008bd2:	d9f0      	bls.n	8008bb6 <USB_SetCurrentMode+0x60>
 8008bd4:	e001      	b.n	8008bda <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e005      	b.n	8008be6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2bc8      	cmp	r3, #200	; 0xc8
 8008bde:	d101      	bne.n	8008be4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e000      	b.n	8008be6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
	...

08008bf0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bf0:	b084      	sub	sp, #16
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b086      	sub	sp, #24
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008bfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	613b      	str	r3, [r7, #16]
 8008c0e:	e009      	b.n	8008c24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	3340      	adds	r3, #64	; 0x40
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	4413      	add	r3, r2
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	3301      	adds	r3, #1
 8008c22:	613b      	str	r3, [r7, #16]
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	2b0e      	cmp	r3, #14
 8008c28:	d9f2      	bls.n	8008c10 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008c2a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d11c      	bne.n	8008c6c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c40:	f043 0302 	orr.w	r3, r3, #2
 8008c44:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	e005      	b.n	8008c78 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c70:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c7e:	461a      	mov	r2, r3
 8008c80:	2300      	movs	r3, #0
 8008c82:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c84:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d10d      	bne.n	8008ca8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d104      	bne.n	8008c9e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c94:	2100      	movs	r1, #0
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f968 	bl	8008f6c <USB_SetDevSpeed>
 8008c9c:	e008      	b.n	8008cb0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f963 	bl	8008f6c <USB_SetDevSpeed>
 8008ca6:	e003      	b.n	8008cb0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ca8:	2103      	movs	r1, #3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f95e 	bl	8008f6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008cb0:	2110      	movs	r1, #16
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f8fa 	bl	8008eac <USB_FlushTxFifo>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f924 	bl	8008f10 <USB_FlushRxFifo>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd8:	461a      	mov	r2, r3
 8008cda:	2300      	movs	r3, #0
 8008cdc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	613b      	str	r3, [r7, #16]
 8008cfa:	e043      	b.n	8008d84 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d12:	d118      	bne.n	8008d46 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d10a      	bne.n	8008d30 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	015a      	lsls	r2, r3, #5
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	4413      	add	r3, r2
 8008d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d26:	461a      	mov	r2, r3
 8008d28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d2c:	6013      	str	r3, [r2, #0]
 8008d2e:	e013      	b.n	8008d58 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d42:	6013      	str	r3, [r2, #0]
 8008d44:	e008      	b.n	8008d58 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d52:	461a      	mov	r2, r3
 8008d54:	2300      	movs	r3, #0
 8008d56:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	015a      	lsls	r2, r3, #5
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	4413      	add	r3, r2
 8008d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d64:	461a      	mov	r2, r3
 8008d66:	2300      	movs	r3, #0
 8008d68:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	015a      	lsls	r2, r3, #5
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	4413      	add	r3, r2
 8008d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d76:	461a      	mov	r2, r3
 8008d78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	3301      	adds	r3, #1
 8008d82:	613b      	str	r3, [r7, #16]
 8008d84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d88:	461a      	mov	r2, r3
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d3b5      	bcc.n	8008cfc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d90:	2300      	movs	r3, #0
 8008d92:	613b      	str	r3, [r7, #16]
 8008d94:	e043      	b.n	8008e1e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	015a      	lsls	r2, r3, #5
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008da8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dac:	d118      	bne.n	8008de0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10a      	bne.n	8008dca <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008dc6:	6013      	str	r3, [r2, #0]
 8008dc8:	e013      	b.n	8008df2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	015a      	lsls	r2, r3, #5
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ddc:	6013      	str	r3, [r2, #0]
 8008dde:	e008      	b.n	8008df2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	015a      	lsls	r2, r3, #5
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	4413      	add	r3, r2
 8008de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dec:	461a      	mov	r2, r3
 8008dee:	2300      	movs	r3, #0
 8008df0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	015a      	lsls	r2, r3, #5
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	4413      	add	r3, r2
 8008dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dfe:	461a      	mov	r2, r3
 8008e00:	2300      	movs	r3, #0
 8008e02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	015a      	lsls	r2, r3, #5
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e10:	461a      	mov	r2, r3
 8008e12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	613b      	str	r3, [r7, #16]
 8008e1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e22:	461a      	mov	r2, r3
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d3b5      	bcc.n	8008d96 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e3c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008e4a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d105      	bne.n	8008e60 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	f043 0210 	orr.w	r2, r3, #16
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	699a      	ldr	r2, [r3, #24]
 8008e64:	4b0f      	ldr	r3, [pc, #60]	; (8008ea4 <USB_DevInit+0x2b4>)
 8008e66:	4313      	orrs	r3, r2
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008e6c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d005      	beq.n	8008e80 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	f043 0208 	orr.w	r2, r3, #8
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008e80:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d105      	bne.n	8008e94 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	699a      	ldr	r2, [r3, #24]
 8008e8c:	4b06      	ldr	r3, [pc, #24]	; (8008ea8 <USB_DevInit+0x2b8>)
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3718      	adds	r7, #24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ea0:	b004      	add	sp, #16
 8008ea2:	4770      	bx	lr
 8008ea4:	803c3800 	.word	0x803c3800
 8008ea8:	40000004 	.word	0x40000004

08008eac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008ec6:	d901      	bls.n	8008ecc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e01b      	b.n	8008f04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	daf2      	bge.n	8008eba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	019b      	lsls	r3, r3, #6
 8008edc:	f043 0220 	orr.w	r2, r3, #32
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008ef0:	d901      	bls.n	8008ef6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	e006      	b.n	8008f04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	f003 0320 	and.w	r3, r3, #32
 8008efe:	2b20      	cmp	r3, #32
 8008f00:	d0f0      	beq.n	8008ee4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3714      	adds	r7, #20
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008f28:	d901      	bls.n	8008f2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	e018      	b.n	8008f60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	daf2      	bge.n	8008f1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008f36:	2300      	movs	r3, #0
 8008f38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2210      	movs	r2, #16
 8008f3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3301      	adds	r3, #1
 8008f44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008f4c:	d901      	bls.n	8008f52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e006      	b.n	8008f60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	f003 0310 	and.w	r3, r3, #16
 8008f5a:	2b10      	cmp	r3, #16
 8008f5c:	d0f0      	beq.n	8008f40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3714      	adds	r7, #20
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	460b      	mov	r3, r1
 8008f76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	78fb      	ldrb	r3, [r7, #3]
 8008f86:	68f9      	ldr	r1, [r7, #12]
 8008f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3714      	adds	r7, #20
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b085      	sub	sp, #20
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008fb8:	f023 0303 	bic.w	r3, r3, #3
 8008fbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fcc:	f043 0302 	orr.w	r3, r3, #2
 8008fd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	695b      	ldr	r3, [r3, #20]
 8008fec:	f003 0301 	and.w	r3, r3, #1
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009004:	2300      	movs	r3, #0
 8009006:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	3301      	adds	r3, #1
 800900c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009014:	d901      	bls.n	800901a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e01b      	b.n	8009052 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	2b00      	cmp	r3, #0
 8009020:	daf2      	bge.n	8009008 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009022:	2300      	movs	r3, #0
 8009024:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	f043 0201 	orr.w	r2, r3, #1
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	3301      	adds	r3, #1
 8009036:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800903e:	d901      	bls.n	8009044 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009040:	2303      	movs	r3, #3
 8009042:	e006      	b.n	8009052 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	f003 0301 	and.w	r3, r3, #1
 800904c:	2b01      	cmp	r3, #1
 800904e:	d0f0      	beq.n	8009032 <USB_CoreReset+0x36>

  return HAL_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3714      	adds	r7, #20
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <memset>:
 800905e:	4402      	add	r2, r0
 8009060:	4603      	mov	r3, r0
 8009062:	4293      	cmp	r3, r2
 8009064:	d100      	bne.n	8009068 <memset+0xa>
 8009066:	4770      	bx	lr
 8009068:	f803 1b01 	strb.w	r1, [r3], #1
 800906c:	e7f9      	b.n	8009062 <memset+0x4>
	...

08009070 <__libc_init_array>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	4d0d      	ldr	r5, [pc, #52]	; (80090a8 <__libc_init_array+0x38>)
 8009074:	4c0d      	ldr	r4, [pc, #52]	; (80090ac <__libc_init_array+0x3c>)
 8009076:	1b64      	subs	r4, r4, r5
 8009078:	10a4      	asrs	r4, r4, #2
 800907a:	2600      	movs	r6, #0
 800907c:	42a6      	cmp	r6, r4
 800907e:	d109      	bne.n	8009094 <__libc_init_array+0x24>
 8009080:	4d0b      	ldr	r5, [pc, #44]	; (80090b0 <__libc_init_array+0x40>)
 8009082:	4c0c      	ldr	r4, [pc, #48]	; (80090b4 <__libc_init_array+0x44>)
 8009084:	f000 f818 	bl	80090b8 <_init>
 8009088:	1b64      	subs	r4, r4, r5
 800908a:	10a4      	asrs	r4, r4, #2
 800908c:	2600      	movs	r6, #0
 800908e:	42a6      	cmp	r6, r4
 8009090:	d105      	bne.n	800909e <__libc_init_array+0x2e>
 8009092:	bd70      	pop	{r4, r5, r6, pc}
 8009094:	f855 3b04 	ldr.w	r3, [r5], #4
 8009098:	4798      	blx	r3
 800909a:	3601      	adds	r6, #1
 800909c:	e7ee      	b.n	800907c <__libc_init_array+0xc>
 800909e:	f855 3b04 	ldr.w	r3, [r5], #4
 80090a2:	4798      	blx	r3
 80090a4:	3601      	adds	r6, #1
 80090a6:	e7f2      	b.n	800908e <__libc_init_array+0x1e>
 80090a8:	08009118 	.word	0x08009118
 80090ac:	08009118 	.word	0x08009118
 80090b0:	08009118 	.word	0x08009118
 80090b4:	0800911c 	.word	0x0800911c

080090b8 <_init>:
 80090b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ba:	bf00      	nop
 80090bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090be:	bc08      	pop	{r3}
 80090c0:	469e      	mov	lr, r3
 80090c2:	4770      	bx	lr

080090c4 <_fini>:
 80090c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c6:	bf00      	nop
 80090c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ca:	bc08      	pop	{r3}
 80090cc:	469e      	mov	lr, r3
 80090ce:	4770      	bx	lr
