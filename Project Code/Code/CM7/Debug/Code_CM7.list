
Code_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009620  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080098b8  080098b8  000198b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098f8  080098f8  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  080098f8  080098f8  000198f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009900  08009900  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009900  08009900  00019900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009904  08009904  00019904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  24000000  08009908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  24000034  0800993c  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240006e0  0800993c  000206e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a97e  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fdd  00000000  00000000  0003aa23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  0003da00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001035  00000000  00000000  0003eeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003abbc  00000000  00000000  0003feed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c2af  00000000  00000000  0007aaa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00186233  00000000  00000000  00096d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005944  00000000  00000000  0021cf8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  002228d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000034 	.word	0x24000034
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080098a0 	.word	0x080098a0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000038 	.word	0x24000038
 80002d4:	080098a0 	.word	0x080098a0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b35      	ldr	r3, [pc, #212]	; (80007e4 <main+0xe4>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 fbff 	bl	8000f2c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fded 	bl	800130c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f865 	bl	8000800 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000736:	4b2b      	ldr	r3, [pc, #172]	; (80007e4 <main+0xe4>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a29      	ldr	r2, [pc, #164]	; (80007e4 <main+0xe4>)
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <main+0xe4>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000754:	2000      	movs	r0, #0
 8000756:	f003 fa4d 	bl	8003bf4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f003 fa63 	bl	8003c28 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000766:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <main+0xe4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x80>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x6a>
if ( timeout < 0 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x8a>
{
Error_Handler();
 8000786:	f000 fbd1 	bl	8000f2c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 fa15 	bl	8000bb8 <MX_GPIO_Init>
  MX_DMA_Init();
 800078e:	f000 f9f3 	bl	8000b78 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000792:	f000 f9bf 	bl	8000b14 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000796:	f000 f8fd 	bl	8000994 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800079a:	f000 f96f 	bl	8000a7c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800079e:	f000 f8ad 	bl	80008fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  GPIOB->ODR = 0x00;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <main+0xe8>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  HAL_Delay(500);
 80007a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ac:	f000 fe40 	bl	8001430 <HAL_Delay>
  HAL_TIM_Base_Start(&htim3);
 80007b0:	480e      	ldr	r0, [pc, #56]	; (80007ec <main+0xec>)
 80007b2:	f006 fa51 	bl	8006c58 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 80007b6:	2100      	movs	r1, #0
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <main+0xec>)
 80007ba:	f006 fbc5 	bl	8006f48 <HAL_TIM_OC_Start>
  hdma_tim3_ch1.XferCpltCallback = endof_scan_line;
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <main+0xf0>)
 80007c0:	4a0c      	ldr	r2, [pc, #48]	; (80007f4 <main+0xf4>)
 80007c2:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_DMA_Start_IT(&hdma_tim3_ch1, (uint32_t)test_frame, (uint32_t) &GPIOB->ODR, 15);
 80007c4:	490c      	ldr	r1, [pc, #48]	; (80007f8 <main+0xf8>)
 80007c6:	230f      	movs	r3, #15
 80007c8:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <main+0xfc>)
 80007ca:	4809      	ldr	r0, [pc, #36]	; (80007f0 <main+0xf0>)
 80007cc:	f001 facc 	bl	8001d68 <HAL_DMA_Start_IT>
  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC1);
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <main+0xec>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	68da      	ldr	r2, [r3, #12]
 80007d6:	4b05      	ldr	r3, [pc, #20]	; (80007ec <main+0xec>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007de:	60da      	str	r2, [r3, #12]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <main+0xe0>
 80007e2:	bf00      	nop
 80007e4:	58024400 	.word	0x58024400
 80007e8:	58020400 	.word	0x58020400
 80007ec:	2400009c 	.word	0x2400009c
 80007f0:	240000e8 	.word	0x240000e8
 80007f4:	08000d79 	.word	0x08000d79
 80007f8:	24000008 	.word	0x24000008
 80007fc:	58020414 	.word	0x58020414

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b09c      	sub	sp, #112	; 0x70
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	224c      	movs	r2, #76	; 0x4c
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f009 f819 	bl	8009846 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2220      	movs	r2, #32
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f009 f813 	bl	8009846 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000820:	2004      	movs	r0, #4
 8000822:	f003 fb45 	bl	8003eb0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000826:	2300      	movs	r3, #0
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	4b32      	ldr	r3, [pc, #200]	; (80008f4 <SystemClock_Config+0xf4>)
 800082c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082e:	4a31      	ldr	r2, [pc, #196]	; (80008f4 <SystemClock_Config+0xf4>)
 8000830:	f023 0301 	bic.w	r3, r3, #1
 8000834:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000836:	4b2f      	ldr	r3, [pc, #188]	; (80008f4 <SystemClock_Config+0xf4>)
 8000838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	4b2d      	ldr	r3, [pc, #180]	; (80008f8 <SystemClock_Config+0xf8>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000848:	4a2b      	ldr	r2, [pc, #172]	; (80008f8 <SystemClock_Config+0xf8>)
 800084a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <SystemClock_Config+0xf8>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800085c:	bf00      	nop
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <SystemClock_Config+0xf8>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800086a:	d1f8      	bne.n	800085e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800086c:	2301      	movs	r3, #1
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000870:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000876:	2302      	movs	r3, #2
 8000878:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087a:	2302      	movs	r3, #2
 800087c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800087e:	2301      	movs	r3, #1
 8000880:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000882:	2312      	movs	r3, #18
 8000884:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000886:	2302      	movs	r3, #2
 8000888:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800088a:	2302      	movs	r3, #2
 800088c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800088e:	2302      	movs	r3, #2
 8000890:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000892:	230c      	movs	r3, #12
 8000894:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000896:	2302      	movs	r3, #2
 8000898:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800089a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800089e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a4:	4618      	mov	r0, r3
 80008a6:	f003 fb6d 	bl	8003f84 <HAL_RCC_OscConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008b0:	f000 fb3c 	bl	8000f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b4:	233f      	movs	r3, #63	; 0x3f
 80008b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b8:	2303      	movs	r3, #3
 80008ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008c4:	2340      	movs	r3, #64	; 0x40
 80008c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008c8:	2340      	movs	r3, #64	; 0x40
 80008ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008d2:	2340      	movs	r3, #64	; 0x40
 80008d4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2101      	movs	r1, #1
 80008da:	4618      	mov	r0, r3
 80008dc:	f003 ffac 	bl	8004838 <HAL_RCC_ClockConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0xea>
  {
    Error_Handler();
 80008e6:	f000 fb21 	bl	8000f2c <Error_Handler>
  }
}
 80008ea:	bf00      	nop
 80008ec:	3770      	adds	r7, #112	; 0x70
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	58000400 	.word	0x58000400
 80008f8:	58024800 	.word	0x58024800

080008fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800091a:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <MX_TIM2_Init+0x94>)
 800091c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000920:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000922:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_TIM2_Init+0x94>)
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <MX_TIM2_Init+0x94>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_TIM2_Init+0x94>)
 8000930:	2201      	movs	r2, #1
 8000932:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000934:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_TIM2_Init+0x94>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_TIM2_Init+0x94>)
 800093c:	2280      	movs	r2, #128	; 0x80
 800093e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000940:	4813      	ldr	r0, [pc, #76]	; (8000990 <MX_TIM2_Init+0x94>)
 8000942:	f006 f931 	bl	8006ba8 <HAL_TIM_Base_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800094c:	f000 faee 	bl	8000f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000954:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000956:	f107 0310 	add.w	r3, r7, #16
 800095a:	4619      	mov	r1, r3
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <MX_TIM2_Init+0x94>)
 800095e:	f006 fd83 	bl	8007468 <HAL_TIM_ConfigClockSource>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000968:	f000 fae0 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_TIM2_Init+0x94>)
 800097a:	f007 fad5 	bl	8007f28 <HAL_TIMEx_MasterConfigSynchronization>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000984:	f000 fad2 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	3720      	adds	r7, #32
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	24000050 	.word	0x24000050

08000994 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08e      	sub	sp, #56	; 0x38
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b4:	463b      	mov	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]
 80009c2:	615a      	str	r2, [r3, #20]
 80009c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009c6:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <MX_TIM3_Init+0xe0>)
 80009c8:	4a2b      	ldr	r2, [pc, #172]	; (8000a78 <MX_TIM3_Init+0xe4>)
 80009ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009cc:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <MX_TIM3_Init+0xe0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d2:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <MX_TIM3_Init+0xe0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5;
 80009d8:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <MX_TIM3_Init+0xe0>)
 80009da:	2205      	movs	r2, #5
 80009dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009de:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <MX_TIM3_Init+0xe0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009e4:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <MX_TIM3_Init+0xe0>)
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009ea:	4822      	ldr	r0, [pc, #136]	; (8000a74 <MX_TIM3_Init+0xe0>)
 80009ec:	f006 f8dc 	bl	8006ba8 <HAL_TIM_Base_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80009f6:	f000 fa99 	bl	8000f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a04:	4619      	mov	r1, r3
 8000a06:	481b      	ldr	r0, [pc, #108]	; (8000a74 <MX_TIM3_Init+0xe0>)
 8000a08:	f006 fd2e 	bl	8007468 <HAL_TIM_ConfigClockSource>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a12:	f000 fa8b 	bl	8000f2c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000a16:	4817      	ldr	r0, [pc, #92]	; (8000a74 <MX_TIM3_Init+0xe0>)
 8000a18:	f006 fa35 	bl	8006e86 <HAL_TIM_OC_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a22:	f000 fa83 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	480f      	ldr	r0, [pc, #60]	; (8000a74 <MX_TIM3_Init+0xe0>)
 8000a36:	f007 fa77 	bl	8007f28 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a40:	f000 fa74 	bl	8000f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a44:	2300      	movs	r3, #0
 8000a46:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	2200      	movs	r2, #0
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4806      	ldr	r0, [pc, #24]	; (8000a74 <MX_TIM3_Init+0xe0>)
 8000a5c:	f006 fc8a 	bl	8007374 <HAL_TIM_OC_ConfigChannel>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000a66:	f000 fa61 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	3738      	adds	r7, #56	; 0x38
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2400009c 	.word	0x2400009c
 8000a78:	40000400 	.word	0x40000400

08000a7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a80:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000a82:	4a23      	ldr	r2, [pc, #140]	; (8000b10 <MX_USART3_UART_Init+0x94>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ac4:	4811      	ldr	r0, [pc, #68]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000ac6:	f007 fadb 	bl	8008080 <HAL_UART_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ad0:	f000 fa2c 	bl	8000f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	480d      	ldr	r0, [pc, #52]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000ad8:	f008 fae3 	bl	80090a2 <HAL_UARTEx_SetTxFifoThreshold>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ae2:	f000 fa23 	bl	8000f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4808      	ldr	r0, [pc, #32]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000aea:	f008 fb18 	bl	800911e <HAL_UARTEx_SetRxFifoThreshold>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000af4:	f000 fa1a 	bl	8000f2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000afa:	f008 fa99 	bl	8009030 <HAL_UARTEx_DisableFifoMode>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b04:	f000 fa12 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	24000160 	.word	0x24000160
 8000b10:	40004800 	.word	0x40004800

08000b14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b1a:	4a16      	ldr	r2, [pc, #88]	; (8000b74 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b20:	2209      	movs	r2, #9
 8000b22:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b26:	2202      	movs	r2, #2
 8000b28:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b32:	2202      	movs	r2, #2
 8000b34:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5c:	f003 f878 	bl	8003c50 <HAL_PCD_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b66:	f000 f9e1 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	240001f4 	.word	0x240001f4
 8000b74:	40080000 	.word	0x40080000

08000b78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <MX_DMA_Init+0x3c>)
 8000b80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b84:	4a0b      	ldr	r2, [pc, #44]	; (8000bb4 <MX_DMA_Init+0x3c>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_DMA_Init+0x3c>)
 8000b90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	200b      	movs	r0, #11
 8000ba2:	f000 fd50 	bl	8001646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ba6:	200b      	movs	r0, #11
 8000ba8:	f000 fd67 	bl	800167a <HAL_NVIC_EnableIRQ>

}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	58024400 	.word	0x58024400

08000bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	4b64      	ldr	r3, [pc, #400]	; (8000d60 <MX_GPIO_Init+0x1a8>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	4a62      	ldr	r2, [pc, #392]	; (8000d60 <MX_GPIO_Init+0x1a8>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bde:	4b60      	ldr	r3, [pc, #384]	; (8000d60 <MX_GPIO_Init+0x1a8>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	61bb      	str	r3, [r7, #24]
 8000bea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bec:	4b5c      	ldr	r3, [pc, #368]	; (8000d60 <MX_GPIO_Init+0x1a8>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	4a5b      	ldr	r2, [pc, #364]	; (8000d60 <MX_GPIO_Init+0x1a8>)
 8000bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfc:	4b58      	ldr	r3, [pc, #352]	; (8000d60 <MX_GPIO_Init+0x1a8>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b55      	ldr	r3, [pc, #340]	; (8000d60 <MX_GPIO_Init+0x1a8>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c10:	4a53      	ldr	r2, [pc, #332]	; (8000d60 <MX_GPIO_Init+0x1a8>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1a:	4b51      	ldr	r3, [pc, #324]	; (8000d60 <MX_GPIO_Init+0x1a8>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c28:	4b4d      	ldr	r3, [pc, #308]	; (8000d60 <MX_GPIO_Init+0x1a8>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2e:	4a4c      	ldr	r2, [pc, #304]	; (8000d60 <MX_GPIO_Init+0x1a8>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c38:	4b49      	ldr	r3, [pc, #292]	; (8000d60 <MX_GPIO_Init+0x1a8>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c46:	4b46      	ldr	r3, [pc, #280]	; (8000d60 <MX_GPIO_Init+0x1a8>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4c:	4a44      	ldr	r2, [pc, #272]	; (8000d60 <MX_GPIO_Init+0x1a8>)
 8000c4e:	f043 0310 	orr.w	r3, r3, #16
 8000c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c56:	4b42      	ldr	r3, [pc, #264]	; (8000d60 <MX_GPIO_Init+0x1a8>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5c:	f003 0310 	and.w	r3, r3, #16
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c64:	4b3e      	ldr	r3, [pc, #248]	; (8000d60 <MX_GPIO_Init+0x1a8>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6a:	4a3d      	ldr	r2, [pc, #244]	; (8000d60 <MX_GPIO_Init+0x1a8>)
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c74:	4b3a      	ldr	r3, [pc, #232]	; (8000d60 <MX_GPIO_Init+0x1a8>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7a:	f003 0308 	and.w	r3, r3, #8
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c82:	4b37      	ldr	r3, [pc, #220]	; (8000d60 <MX_GPIO_Init+0x1a8>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c88:	4a35      	ldr	r2, [pc, #212]	; (8000d60 <MX_GPIO_Init+0x1a8>)
 8000c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c92:	4b33      	ldr	r3, [pc, #204]	; (8000d60 <MX_GPIO_Init+0x1a8>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ca6:	482f      	ldr	r0, [pc, #188]	; (8000d64 <MX_GPIO_Init+0x1ac>)
 8000ca8:	f002 ff8a 	bl	8003bc0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8000cac:	2201      	movs	r2, #1
 8000cae:	f248 0103 	movw	r1, #32771	; 0x8003
 8000cb2:	482d      	ldr	r0, [pc, #180]	; (8000d68 <MX_GPIO_Init+0x1b0>)
 8000cb4:	f002 ff84 	bl	8003bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cb8:	2332      	movs	r3, #50	; 0x32
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc8:	230b      	movs	r3, #11
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4826      	ldr	r0, [pc, #152]	; (8000d6c <MX_GPIO_Init+0x1b4>)
 8000cd4:	f002 fdc4 	bl	8003860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000cd8:	2386      	movs	r3, #134	; 0x86
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce8:	230b      	movs	r3, #11
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	481f      	ldr	r0, [pc, #124]	; (8000d70 <MX_GPIO_Init+0x1b8>)
 8000cf4:	f002 fdb4 	bl	8003860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cfc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4814      	ldr	r0, [pc, #80]	; (8000d64 <MX_GPIO_Init+0x1ac>)
 8000d12:	f002 fda5 	bl	8003860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8000d16:	f248 0303 	movw	r3, #32771	; 0x8003
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480e      	ldr	r0, [pc, #56]	; (8000d68 <MX_GPIO_Init+0x1b0>)
 8000d30:	f002 fd96 	bl	8003860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d34:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d46:	230b      	movs	r3, #11
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4808      	ldr	r0, [pc, #32]	; (8000d74 <MX_GPIO_Init+0x1bc>)
 8000d52:	f002 fd85 	bl	8003860 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d56:	bf00      	nop
 8000d58:	3730      	adds	r7, #48	; 0x30
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	58024400 	.word	0x58024400
 8000d64:	58020400 	.word	0x58020400
 8000d68:	58021000 	.word	0x58021000
 8000d6c:	58020800 	.word	0x58020800
 8000d70:	58020000 	.word	0x58020000
 8000d74:	58021800 	.word	0x58021800

08000d78 <endof_scan_line>:

/* USER CODE BEGIN 4 */
void endof_scan_line(DMA_HandleTypeDef* _hdma){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

	GPIOB->ODR = 0x00;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <endof_scan_line+0x78>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <endof_scan_line+0x7c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <endof_scan_line+0x80>)
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d903      	bls.n	8000d9a <endof_scan_line+0x22>
 8000d92:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <endof_scan_line+0x84>)
 8000d94:	2220      	movs	r2, #32
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	e020      	b.n	8000ddc <endof_scan_line+0x64>
 8000d9a:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <endof_scan_line+0x7c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <endof_scan_line+0x88>)
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d903      	bls.n	8000dae <endof_scan_line+0x36>
 8000da6:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <endof_scan_line+0x8c>)
 8000da8:	2320      	movs	r3, #32
 8000daa:	60d3      	str	r3, [r2, #12]
 8000dac:	e016      	b.n	8000ddc <endof_scan_line+0x64>
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <endof_scan_line+0x7c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <endof_scan_line+0x90>)
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d903      	bls.n	8000dc2 <endof_scan_line+0x4a>
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <endof_scan_line+0x8c>)
 8000dbc:	2320      	movs	r3, #32
 8000dbe:	6093      	str	r3, [r2, #8]
 8000dc0:	e00c      	b.n	8000ddc <endof_scan_line+0x64>
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <endof_scan_line+0x7c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <endof_scan_line+0x94>)
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d903      	bls.n	8000dd6 <endof_scan_line+0x5e>
 8000dce:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <endof_scan_line+0x98>)
 8000dd0:	2320      	movs	r3, #32
 8000dd2:	60d3      	str	r3, [r2, #12]
 8000dd4:	e002      	b.n	8000ddc <endof_scan_line+0x64>
 8000dd6:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <endof_scan_line+0x98>)
 8000dd8:	2320      	movs	r3, #32
 8000dda:	6093      	str	r3, [r2, #8]

	// Setup for Hsync sequence
//	start_Hsync_Sequence();
	pulse_iter = 0;
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <endof_scan_line+0x9c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 8000de2:	480d      	ldr	r0, [pc, #52]	; (8000e18 <endof_scan_line+0xa0>)
 8000de4:	f005 ffa8 	bl	8006d38 <HAL_TIM_Base_Start_IT>
	return;
 8000de8:	bf00      	nop
}
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	58020400 	.word	0x58020400
 8000df4:	240000e8 	.word	0x240000e8
 8000df8:	400204b8 	.word	0x400204b8
 8000dfc:	58025400 	.word	0x58025400
 8000e00:	40020458 	.word	0x40020458
 8000e04:	40020400 	.word	0x40020400
 8000e08:	400200b8 	.word	0x400200b8
 8000e0c:	40020058 	.word	0x40020058
 8000e10:	40020000 	.word	0x40020000
 8000e14:	240006d8 	.word	0x240006d8
 8000e18:	24000050 	.word	0x24000050

08000e1c <HAL_TIM_PeriodElapsedCallback>:

	HAL_TIM_Base_Start_IT(&htim2);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

	if(htim == &htim2){
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a3d      	ldr	r2, [pc, #244]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d172      	bne.n	8000f12 <HAL_TIM_PeriodElapsedCallback+0xf6>

		if (pulse_iter == 0x00){
 8000e2c:	4b3c      	ldr	r3, [pc, #240]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d108      	bne.n	8000e46 <HAL_TIM_PeriodElapsedCallback+0x2a>
			GPIOE->ODR = 0x8001;
 8000e34:	4b3b      	ldr	r3, [pc, #236]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e36:	f248 0201 	movw	r2, #32769	; 0x8001
 8000e3a:	615a      	str	r2, [r3, #20]
//			TIM2->ARR = 45;
			TIM2->ARR = 39;
 8000e3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e40:	2227      	movs	r2, #39	; 0x27
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e44:	e05f      	b.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0xea>
		}
		else if (pulse_iter == 0x01){
 8000e46:	4b36      	ldr	r3, [pc, #216]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d109      	bne.n	8000e62 <HAL_TIM_PeriodElapsedCallback+0x46>
			GPIOE->ODR = 0x8001;
 8000e4e:	4b35      	ldr	r3, [pc, #212]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e50:	f248 0201 	movw	r2, #32769	; 0x8001
 8000e54:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 285;
 8000e56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e5a:	f240 121d 	movw	r2, #285	; 0x11d
 8000e5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e60:	e051      	b.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0xea>
		}
		else if (pulse_iter == 0x02){
 8000e62:	4b2f      	ldr	r3, [pc, #188]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d107      	bne.n	8000e7a <HAL_TIM_PeriodElapsedCallback+0x5e>

			GPIOE->ODR = 0x0001;
 8000e6a:	4b2e      	ldr	r3, [pc, #184]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 143;
 8000e70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e74:	228f      	movs	r2, #143	; 0x8f
 8000e76:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e78:	e045      	b.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0xea>
		}
		else if (pulse_iter == 0x03){
 8000e7a:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d108      	bne.n	8000e94 <HAL_TIM_PeriodElapsedCallback+0x78>

			GPIOE->ODR = 0x8001;
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e84:	f248 0201 	movw	r2, #32769	; 0x8001
 8000e88:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 1;
 8000e8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e8e:	2201      	movs	r2, #1
 8000e90:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e92:	e038      	b.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0xea>
		}


		else if (pulse_iter == 0x10){
 8000e94:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	2b10      	cmp	r3, #16
 8000e9a:	d109      	bne.n	8000eb0 <HAL_TIM_PeriodElapsedCallback+0x94>
			GPIOE->ODR = 0x8001;
 8000e9c:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e9e:	f248 0201 	movw	r2, #32769	; 0x8001
 8000ea2:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 23827;
 8000ea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ea8:	f645 5213 	movw	r2, #23827	; 0x5d13
 8000eac:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eae:	e02a      	b.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0xea>
		}
		else if (pulse_iter == 0x11){
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	2b11      	cmp	r3, #17
 8000eb6:	d109      	bne.n	8000ecc <HAL_TIM_PeriodElapsedCallback+0xb0>
			GPIOE->ODR = 0x8001;
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000eba:	f248 0201 	movw	r2, #32769	; 0x8001
 8000ebe:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 4751;
 8000ec0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec4:	f241 228f 	movw	r2, #4751	; 0x128f
 8000ec8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eca:	e01c      	b.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0xea>
		}
		else if (pulse_iter == 0x12){
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	2b12      	cmp	r3, #18
 8000ed2:	d108      	bne.n	8000ee6 <HAL_TIM_PeriodElapsedCallback+0xca>
			GPIOE->ODR = 0x8000;
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000ed6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000eda:	615a      	str	r2, [r3, #20]
//			TIM2->ARR = 78675;
			TIM2->ARR = 79599;
 8000edc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee0:	4a11      	ldr	r2, [pc, #68]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ee4:	e00f      	b.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0xea>
		}
		else if (pulse_iter == 0x13){
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	2b13      	cmp	r3, #19
 8000eec:	d108      	bne.n	8000f00 <HAL_TIM_PeriodElapsedCallback+0xe4>
			GPIOE->ODR = 0x8001;
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000ef0:	f248 0201 	movw	r2, #32769	; 0x8001
 8000ef4:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 1;
 8000ef6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000efa:	2201      	movs	r2, #1
 8000efc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000efe:	e002      	b.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0xea>
		}



		else{
			HAL_TIM_Base_Stop_IT(&htim2);
 8000f00:	4806      	ldr	r0, [pc, #24]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000f02:	f005 ff91 	bl	8006e28 <HAL_TIM_Base_Stop_IT>

		}

//		TIM2->ARR = pulse_sequence[pulse_iter];
		pulse_iter++;
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f10:	801a      	strh	r2, [r3, #0]


	}

}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	24000050 	.word	0x24000050
 8000f20:	240006d8 	.word	0x240006d8
 8000f24:	58021000 	.word	0x58021000
 8000f28:	000136ef 	.word	0x000136ef

08000f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f30:	b672      	cpsid	i
}
 8000f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <Error_Handler+0x8>
	...

08000f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_MspInit+0x30>)
 8000f40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f44:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <HAL_MspInit+0x30>)
 8000f46:	f043 0302 	orr.w	r3, r3, #2
 8000f4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_MspInit+0x30>)
 8000f50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	58024400 	.word	0x58024400

08000f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f7c:	d117      	bne.n	8000fae <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f7e:	4b30      	ldr	r3, [pc, #192]	; (8001040 <HAL_TIM_Base_MspInit+0xd4>)
 8000f80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f84:	4a2e      	ldr	r2, [pc, #184]	; (8001040 <HAL_TIM_Base_MspInit+0xd4>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <HAL_TIM_Base_MspInit+0xd4>)
 8000f90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	201c      	movs	r0, #28
 8000fa2:	f000 fb50 	bl	8001646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fa6:	201c      	movs	r0, #28
 8000fa8:	f000 fb67 	bl	800167a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fac:	e043      	b.n	8001036 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a24      	ldr	r2, [pc, #144]	; (8001044 <HAL_TIM_Base_MspInit+0xd8>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d13e      	bne.n	8001036 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fb8:	4b21      	ldr	r3, [pc, #132]	; (8001040 <HAL_TIM_Base_MspInit+0xd4>)
 8000fba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fbe:	4a20      	ldr	r2, [pc, #128]	; (8001040 <HAL_TIM_Base_MspInit+0xd4>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <HAL_TIM_Base_MspInit+0xd4>)
 8000fca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1.Instance = DMA1_Stream0;
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <HAL_TIM_Base_MspInit+0xdc>)
 8000fd8:	4a1c      	ldr	r2, [pc, #112]	; (800104c <HAL_TIM_Base_MspInit+0xe0>)
 8000fda:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <HAL_TIM_Base_MspInit+0xdc>)
 8000fde:	2217      	movs	r2, #23
 8000fe0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <HAL_TIM_Base_MspInit+0xdc>)
 8000fe4:	2240      	movs	r2, #64	; 0x40
 8000fe6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_TIM_Base_MspInit+0xdc>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <HAL_TIM_Base_MspInit+0xdc>)
 8000ff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ff4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_TIM_Base_MspInit+0xdc>)
 8000ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ffc:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_TIM_Base_MspInit+0xdc>)
 8001000:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001004:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <HAL_TIM_Base_MspInit+0xdc>)
 8001008:	2200      	movs	r2, #0
 800100a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_TIM_Base_MspInit+0xdc>)
 800100e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001012:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_TIM_Base_MspInit+0xdc>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800101a:	480b      	ldr	r0, [pc, #44]	; (8001048 <HAL_TIM_Base_MspInit+0xdc>)
 800101c:	f000 fb48 	bl	80016b0 <HAL_DMA_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_TIM_Base_MspInit+0xbe>
      Error_Handler();
 8001026:	f7ff ff81 	bl	8000f2c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <HAL_TIM_Base_MspInit+0xdc>)
 800102e:	625a      	str	r2, [r3, #36]	; 0x24
 8001030:	4a05      	ldr	r2, [pc, #20]	; (8001048 <HAL_TIM_Base_MspInit+0xdc>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	58024400 	.word	0x58024400
 8001044:	40000400 	.word	0x40000400
 8001048:	240000e8 	.word	0x240000e8
 800104c:	40020010 	.word	0x40020010

08001050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b0ba      	sub	sp, #232	; 0xe8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	22c0      	movs	r2, #192	; 0xc0
 800106e:	2100      	movs	r1, #0
 8001070:	4618      	mov	r0, r3
 8001072:	f008 fbe8 	bl	8009846 <memset>
  if(huart->Instance==USART3)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a27      	ldr	r2, [pc, #156]	; (8001118 <HAL_UART_MspInit+0xc8>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d146      	bne.n	800110e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001080:	f04f 0202 	mov.w	r2, #2
 8001084:	f04f 0300 	mov.w	r3, #0
 8001088:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001092:	f107 0310 	add.w	r3, r7, #16
 8001096:	4618      	mov	r0, r3
 8001098:	f003 ff5a 	bl	8004f50 <HAL_RCCEx_PeriphCLKConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010a2:	f7ff ff43 	bl	8000f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010a6:	4b1d      	ldr	r3, [pc, #116]	; (800111c <HAL_UART_MspInit+0xcc>)
 80010a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010ac:	4a1b      	ldr	r2, [pc, #108]	; (800111c <HAL_UART_MspInit+0xcc>)
 80010ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <HAL_UART_MspInit+0xcc>)
 80010b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_UART_MspInit+0xcc>)
 80010c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ca:	4a14      	ldr	r2, [pc, #80]	; (800111c <HAL_UART_MspInit+0xcc>)
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <HAL_UART_MspInit+0xcc>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010da:	f003 0308 	and.w	r3, r3, #8
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010fc:	2307      	movs	r3, #7
 80010fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001102:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <HAL_UART_MspInit+0xd0>)
 800110a:	f002 fba9 	bl	8003860 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800110e:	bf00      	nop
 8001110:	37e8      	adds	r7, #232	; 0xe8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40004800 	.word	0x40004800
 800111c:	58024400 	.word	0x58024400
 8001120:	58020c00 	.word	0x58020c00

08001124 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b0ba      	sub	sp, #232	; 0xe8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	22c0      	movs	r2, #192	; 0xc0
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f008 fb7e 	bl	8009846 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a38      	ldr	r2, [pc, #224]	; (8001230 <HAL_PCD_MspInit+0x10c>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d169      	bne.n	8001228 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001154:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001160:	2301      	movs	r3, #1
 8001162:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001164:	2312      	movs	r3, #18
 8001166:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001168:	2302      	movs	r3, #2
 800116a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 800116c:	2303      	movs	r3, #3
 800116e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001170:	2302      	movs	r3, #2
 8001172:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001174:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001178:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 800117a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800117e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001180:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001184:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	4618      	mov	r0, r3
 800118e:	f003 fedf 	bl	8004f50 <HAL_RCCEx_PeriphCLKConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8001198:	f7ff fec8 	bl	8000f2c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800119c:	f002 fee2 	bl	8003f64 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <HAL_PCD_MspInit+0x110>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a6:	4a23      	ldr	r2, [pc, #140]	; (8001234 <HAL_PCD_MspInit+0x110>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b0:	4b20      	ldr	r3, [pc, #128]	; (8001234 <HAL_PCD_MspInit+0x110>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80011be:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80011c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80011d8:	230a      	movs	r3, #10
 80011da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011e2:	4619      	mov	r1, r3
 80011e4:	4814      	ldr	r0, [pc, #80]	; (8001238 <HAL_PCD_MspInit+0x114>)
 80011e6:	f002 fb3b 	bl	8003860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001202:	4619      	mov	r1, r3
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <HAL_PCD_MspInit+0x114>)
 8001206:	f002 fb2b 	bl	8003860 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <HAL_PCD_MspInit+0x110>)
 800120c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001210:	4a08      	ldr	r2, [pc, #32]	; (8001234 <HAL_PCD_MspInit+0x110>)
 8001212:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001216:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_PCD_MspInit+0x110>)
 800121c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001228:	bf00      	nop
 800122a:	37e8      	adds	r7, #232	; 0xe8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40080000 	.word	0x40080000
 8001234:	58024400 	.word	0x58024400
 8001238:	58020000 	.word	0x58020000

0800123c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <NMI_Handler+0x4>

08001242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <MemManage_Handler+0x4>

0800124e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <UsageFault_Handler+0x4>

0800125a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001288:	f000 f8b2 	bl	80013f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <DMA1_Stream0_IRQHandler+0x10>)
 8001296:	f000 ffd1 	bl	800223c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	240000e8 	.word	0x240000e8

080012a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <TIM2_IRQHandler+0x10>)
 80012aa:	f005 ff5b 	bl	8007164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	24000050 	.word	0x24000050

080012b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012bc:	f7ff f98a 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c0:	480c      	ldr	r0, [pc, #48]	; (80012f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012c2:	490d      	ldr	r1, [pc, #52]	; (80012f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c4:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d8:	4c0a      	ldr	r4, [pc, #40]	; (8001304 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e6:	f008 fab7 	bl	8009858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ea:	f7ff fa09 	bl	8000700 <main>
  bx  lr
 80012ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012f0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012f8:	24000034 	.word	0x24000034
  ldr r2, =_sidata
 80012fc:	08009908 	.word	0x08009908
  ldr r2, =_sbss
 8001300:	24000034 	.word	0x24000034
  ldr r4, =_ebss
 8001304:	240006e0 	.word	0x240006e0

08001308 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC3_IRQHandler>
	...

0800130c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001312:	2003      	movs	r0, #3
 8001314:	f000 f98c 	bl	8001630 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001318:	f003 fc44 	bl	8004ba4 <HAL_RCC_GetSysClockFreq>
 800131c:	4602      	mov	r2, r0
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_Init+0x68>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	0a1b      	lsrs	r3, r3, #8
 8001324:	f003 030f 	and.w	r3, r3, #15
 8001328:	4913      	ldr	r1, [pc, #76]	; (8001378 <HAL_Init+0x6c>)
 800132a:	5ccb      	ldrb	r3, [r1, r3]
 800132c:	f003 031f 	and.w	r3, r3, #31
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
 8001334:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_Init+0x68>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <HAL_Init+0x6c>)
 8001340:	5cd3      	ldrb	r3, [r2, r3]
 8001342:	f003 031f 	and.w	r3, r3, #31
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	fa22 f303 	lsr.w	r3, r2, r3
 800134c:	4a0b      	ldr	r2, [pc, #44]	; (800137c <HAL_Init+0x70>)
 800134e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001350:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <HAL_Init+0x74>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001356:	2000      	movs	r0, #0
 8001358:	f000 f814 	bl	8001384 <HAL_InitTick>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e002      	b.n	800136c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001366:	f7ff fde7 	bl	8000f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	58024400 	.word	0x58024400
 8001378:	080098b8 	.word	0x080098b8
 800137c:	24000004 	.word	0x24000004
 8001380:	24000000 	.word	0x24000000

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_InitTick+0x60>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e021      	b.n	80013dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <HAL_InitTick+0x64>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HAL_InitTick+0x60>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f971 	bl	8001696 <HAL_SYSTICK_Config>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00e      	b.n	80013dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b0f      	cmp	r3, #15
 80013c2:	d80a      	bhi.n	80013da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c4:	2200      	movs	r2, #0
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f000 f93b 	bl	8001646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d0:	4a06      	ldr	r2, [pc, #24]	; (80013ec <HAL_InitTick+0x68>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e000      	b.n	80013dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	24000030 	.word	0x24000030
 80013e8:	24000000 	.word	0x24000000
 80013ec:	2400002c 	.word	0x2400002c

080013f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_IncTick+0x20>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x24>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_IncTick+0x24>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	24000030 	.word	0x24000030
 8001414:	240006dc 	.word	0x240006dc

08001418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <HAL_GetTick+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	240006dc 	.word	0x240006dc

08001430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001438:	f7ff ffee 	bl	8001418 <HAL_GetTick>
 800143c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001448:	d005      	beq.n	8001456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_Delay+0x44>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001456:	bf00      	nop
 8001458:	f7ff ffde 	bl	8001418 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	429a      	cmp	r2, r3
 8001466:	d8f7      	bhi.n	8001458 <HAL_Delay+0x28>
  {
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	24000030 	.word	0x24000030

08001478 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <HAL_GetREVID+0x14>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0c1b      	lsrs	r3, r3, #16
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	5c001000 	.word	0x5c001000

08001490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <__NVIC_SetPriorityGrouping+0x40>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ac:	4013      	ands	r3, r2
 80014ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <__NVIC_SetPriorityGrouping+0x40>)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	60d3      	str	r3, [r2, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00
 80014d4:	05fa0000 	.word	0x05fa0000

080014d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <__NVIC_GetPriorityGrouping+0x18>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	f003 0307 	and.w	r3, r3, #7
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001502:	2b00      	cmp	r3, #0
 8001504:	db0b      	blt.n	800151e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	f003 021f 	and.w	r2, r3, #31
 800150c:	4907      	ldr	r1, [pc, #28]	; (800152c <__NVIC_EnableIRQ+0x38>)
 800150e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001512:	095b      	lsrs	r3, r3, #5
 8001514:	2001      	movs	r0, #1
 8001516:	fa00 f202 	lsl.w	r2, r0, r2
 800151a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000e100 	.word	0xe000e100

08001530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800153c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001540:	2b00      	cmp	r3, #0
 8001542:	db0a      	blt.n	800155a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	b2da      	uxtb	r2, r3
 8001548:	490c      	ldr	r1, [pc, #48]	; (800157c <__NVIC_SetPriority+0x4c>)
 800154a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800154e:	0112      	lsls	r2, r2, #4
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	440b      	add	r3, r1
 8001554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001558:	e00a      	b.n	8001570 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4908      	ldr	r1, [pc, #32]	; (8001580 <__NVIC_SetPriority+0x50>)
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	3b04      	subs	r3, #4
 8001568:	0112      	lsls	r2, r2, #4
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	440b      	add	r3, r1
 800156e:	761a      	strb	r2, [r3, #24]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000e100 	.word	0xe000e100
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f1c3 0307 	rsb	r3, r3, #7
 800159e:	2b04      	cmp	r3, #4
 80015a0:	bf28      	it	cs
 80015a2:	2304      	movcs	r3, #4
 80015a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3304      	adds	r3, #4
 80015aa:	2b06      	cmp	r3, #6
 80015ac:	d902      	bls.n	80015b4 <NVIC_EncodePriority+0x30>
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3b03      	subs	r3, #3
 80015b2:	e000      	b.n	80015b6 <NVIC_EncodePriority+0x32>
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43da      	mvns	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	401a      	ands	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015cc:	f04f 31ff 	mov.w	r1, #4294967295
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	43d9      	mvns	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	4313      	orrs	r3, r2
         );
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3724      	adds	r7, #36	; 0x24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015fc:	d301      	bcc.n	8001602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fe:	2301      	movs	r3, #1
 8001600:	e00f      	b.n	8001622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <SysTick_Config+0x40>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160a:	210f      	movs	r1, #15
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f7ff ff8e 	bl	8001530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <SysTick_Config+0x40>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <SysTick_Config+0x40>)
 800161c:	2207      	movs	r2, #7
 800161e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	e000e010 	.word	0xe000e010

08001630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ff29 	bl	8001490 <__NVIC_SetPriorityGrouping>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b086      	sub	sp, #24
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001654:	f7ff ff40 	bl	80014d8 <__NVIC_GetPriorityGrouping>
 8001658:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	6978      	ldr	r0, [r7, #20]
 8001660:	f7ff ff90 	bl	8001584 <NVIC_EncodePriority>
 8001664:	4602      	mov	r2, r0
 8001666:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff5f 	bl	8001530 <__NVIC_SetPriority>
}
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001684:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff33 	bl	80014f4 <__NVIC_EnableIRQ>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ffa4 	bl	80015ec <SysTick_Config>
 80016a4:	4603      	mov	r3, r0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80016b8:	f7ff feae 	bl	8001418 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e316      	b.n	8001cf6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a66      	ldr	r2, [pc, #408]	; (8001868 <HAL_DMA_Init+0x1b8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d04a      	beq.n	8001768 <HAL_DMA_Init+0xb8>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a65      	ldr	r2, [pc, #404]	; (800186c <HAL_DMA_Init+0x1bc>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d045      	beq.n	8001768 <HAL_DMA_Init+0xb8>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a63      	ldr	r2, [pc, #396]	; (8001870 <HAL_DMA_Init+0x1c0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d040      	beq.n	8001768 <HAL_DMA_Init+0xb8>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a62      	ldr	r2, [pc, #392]	; (8001874 <HAL_DMA_Init+0x1c4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d03b      	beq.n	8001768 <HAL_DMA_Init+0xb8>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a60      	ldr	r2, [pc, #384]	; (8001878 <HAL_DMA_Init+0x1c8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d036      	beq.n	8001768 <HAL_DMA_Init+0xb8>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a5f      	ldr	r2, [pc, #380]	; (800187c <HAL_DMA_Init+0x1cc>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d031      	beq.n	8001768 <HAL_DMA_Init+0xb8>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a5d      	ldr	r2, [pc, #372]	; (8001880 <HAL_DMA_Init+0x1d0>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d02c      	beq.n	8001768 <HAL_DMA_Init+0xb8>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a5c      	ldr	r2, [pc, #368]	; (8001884 <HAL_DMA_Init+0x1d4>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d027      	beq.n	8001768 <HAL_DMA_Init+0xb8>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a5a      	ldr	r2, [pc, #360]	; (8001888 <HAL_DMA_Init+0x1d8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d022      	beq.n	8001768 <HAL_DMA_Init+0xb8>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a59      	ldr	r2, [pc, #356]	; (800188c <HAL_DMA_Init+0x1dc>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d01d      	beq.n	8001768 <HAL_DMA_Init+0xb8>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a57      	ldr	r2, [pc, #348]	; (8001890 <HAL_DMA_Init+0x1e0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d018      	beq.n	8001768 <HAL_DMA_Init+0xb8>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a56      	ldr	r2, [pc, #344]	; (8001894 <HAL_DMA_Init+0x1e4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d013      	beq.n	8001768 <HAL_DMA_Init+0xb8>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a54      	ldr	r2, [pc, #336]	; (8001898 <HAL_DMA_Init+0x1e8>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d00e      	beq.n	8001768 <HAL_DMA_Init+0xb8>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a53      	ldr	r2, [pc, #332]	; (800189c <HAL_DMA_Init+0x1ec>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d009      	beq.n	8001768 <HAL_DMA_Init+0xb8>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a51      	ldr	r2, [pc, #324]	; (80018a0 <HAL_DMA_Init+0x1f0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d004      	beq.n	8001768 <HAL_DMA_Init+0xb8>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a50      	ldr	r2, [pc, #320]	; (80018a4 <HAL_DMA_Init+0x1f4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d101      	bne.n	800176c <HAL_DMA_Init+0xbc>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <HAL_DMA_Init+0xbe>
 800176c:	2300      	movs	r3, #0
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 813b 	beq.w	80019ea <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2202      	movs	r2, #2
 8001778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a37      	ldr	r2, [pc, #220]	; (8001868 <HAL_DMA_Init+0x1b8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d04a      	beq.n	8001824 <HAL_DMA_Init+0x174>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a36      	ldr	r2, [pc, #216]	; (800186c <HAL_DMA_Init+0x1bc>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d045      	beq.n	8001824 <HAL_DMA_Init+0x174>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a34      	ldr	r2, [pc, #208]	; (8001870 <HAL_DMA_Init+0x1c0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d040      	beq.n	8001824 <HAL_DMA_Init+0x174>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a33      	ldr	r2, [pc, #204]	; (8001874 <HAL_DMA_Init+0x1c4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d03b      	beq.n	8001824 <HAL_DMA_Init+0x174>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a31      	ldr	r2, [pc, #196]	; (8001878 <HAL_DMA_Init+0x1c8>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d036      	beq.n	8001824 <HAL_DMA_Init+0x174>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a30      	ldr	r2, [pc, #192]	; (800187c <HAL_DMA_Init+0x1cc>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d031      	beq.n	8001824 <HAL_DMA_Init+0x174>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a2e      	ldr	r2, [pc, #184]	; (8001880 <HAL_DMA_Init+0x1d0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d02c      	beq.n	8001824 <HAL_DMA_Init+0x174>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a2d      	ldr	r2, [pc, #180]	; (8001884 <HAL_DMA_Init+0x1d4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d027      	beq.n	8001824 <HAL_DMA_Init+0x174>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a2b      	ldr	r2, [pc, #172]	; (8001888 <HAL_DMA_Init+0x1d8>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d022      	beq.n	8001824 <HAL_DMA_Init+0x174>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a2a      	ldr	r2, [pc, #168]	; (800188c <HAL_DMA_Init+0x1dc>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d01d      	beq.n	8001824 <HAL_DMA_Init+0x174>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a28      	ldr	r2, [pc, #160]	; (8001890 <HAL_DMA_Init+0x1e0>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d018      	beq.n	8001824 <HAL_DMA_Init+0x174>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a27      	ldr	r2, [pc, #156]	; (8001894 <HAL_DMA_Init+0x1e4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d013      	beq.n	8001824 <HAL_DMA_Init+0x174>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a25      	ldr	r2, [pc, #148]	; (8001898 <HAL_DMA_Init+0x1e8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00e      	beq.n	8001824 <HAL_DMA_Init+0x174>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a24      	ldr	r2, [pc, #144]	; (800189c <HAL_DMA_Init+0x1ec>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d009      	beq.n	8001824 <HAL_DMA_Init+0x174>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a22      	ldr	r2, [pc, #136]	; (80018a0 <HAL_DMA_Init+0x1f0>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d004      	beq.n	8001824 <HAL_DMA_Init+0x174>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a21      	ldr	r2, [pc, #132]	; (80018a4 <HAL_DMA_Init+0x1f4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d108      	bne.n	8001836 <HAL_DMA_Init+0x186>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0201 	bic.w	r2, r2, #1
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	e007      	b.n	8001846 <HAL_DMA_Init+0x196>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0201 	bic.w	r2, r2, #1
 8001844:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001846:	e02f      	b.n	80018a8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001848:	f7ff fde6 	bl	8001418 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b05      	cmp	r3, #5
 8001854:	d928      	bls.n	80018a8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2220      	movs	r2, #32
 800185a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2203      	movs	r2, #3
 8001860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e246      	b.n	8001cf6 <HAL_DMA_Init+0x646>
 8001868:	40020010 	.word	0x40020010
 800186c:	40020028 	.word	0x40020028
 8001870:	40020040 	.word	0x40020040
 8001874:	40020058 	.word	0x40020058
 8001878:	40020070 	.word	0x40020070
 800187c:	40020088 	.word	0x40020088
 8001880:	400200a0 	.word	0x400200a0
 8001884:	400200b8 	.word	0x400200b8
 8001888:	40020410 	.word	0x40020410
 800188c:	40020428 	.word	0x40020428
 8001890:	40020440 	.word	0x40020440
 8001894:	40020458 	.word	0x40020458
 8001898:	40020470 	.word	0x40020470
 800189c:	40020488 	.word	0x40020488
 80018a0:	400204a0 	.word	0x400204a0
 80018a4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1c8      	bne.n	8001848 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4b83      	ldr	r3, [pc, #524]	; (8001ad0 <HAL_DMA_Init+0x420>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80018ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018da:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d107      	bne.n	800190c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	4313      	orrs	r3, r2
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4313      	orrs	r3, r2
 800190a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800190c:	4b71      	ldr	r3, [pc, #452]	; (8001ad4 <HAL_DMA_Init+0x424>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b71      	ldr	r3, [pc, #452]	; (8001ad8 <HAL_DMA_Init+0x428>)
 8001912:	4013      	ands	r3, r2
 8001914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001918:	d328      	bcc.n	800196c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b28      	cmp	r3, #40	; 0x28
 8001920:	d903      	bls.n	800192a <HAL_DMA_Init+0x27a>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b2e      	cmp	r3, #46	; 0x2e
 8001928:	d917      	bls.n	800195a <HAL_DMA_Init+0x2aa>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b3e      	cmp	r3, #62	; 0x3e
 8001930:	d903      	bls.n	800193a <HAL_DMA_Init+0x28a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b42      	cmp	r3, #66	; 0x42
 8001938:	d90f      	bls.n	800195a <HAL_DMA_Init+0x2aa>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b46      	cmp	r3, #70	; 0x46
 8001940:	d903      	bls.n	800194a <HAL_DMA_Init+0x29a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b48      	cmp	r3, #72	; 0x48
 8001948:	d907      	bls.n	800195a <HAL_DMA_Init+0x2aa>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b4e      	cmp	r3, #78	; 0x4e
 8001950:	d905      	bls.n	800195e <HAL_DMA_Init+0x2ae>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b52      	cmp	r3, #82	; 0x52
 8001958:	d801      	bhi.n	800195e <HAL_DMA_Init+0x2ae>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <HAL_DMA_Init+0x2b0>
 800195e:	2300      	movs	r3, #0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800196a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f023 0307 	bic.w	r3, r3, #7
 8001982:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	4313      	orrs	r3, r2
 800198c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	2b04      	cmp	r3, #4
 8001994:	d117      	bne.n	80019c6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4313      	orrs	r3, r2
 800199e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00e      	beq.n	80019c6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f001 fdcf 	bl	800354c <DMA_CheckFifoParam>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d008      	beq.n	80019c6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2240      	movs	r2, #64	; 0x40
 80019b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e197      	b.n	8001cf6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f001 fd0a 	bl	80033e8 <DMA_CalcBaseAndBitshift>
 80019d4:	4603      	mov	r3, r0
 80019d6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	223f      	movs	r2, #63	; 0x3f
 80019e2:	409a      	lsls	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	e0cd      	b.n	8001b86 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a3b      	ldr	r2, [pc, #236]	; (8001adc <HAL_DMA_Init+0x42c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d022      	beq.n	8001a3a <HAL_DMA_Init+0x38a>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a39      	ldr	r2, [pc, #228]	; (8001ae0 <HAL_DMA_Init+0x430>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d01d      	beq.n	8001a3a <HAL_DMA_Init+0x38a>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a38      	ldr	r2, [pc, #224]	; (8001ae4 <HAL_DMA_Init+0x434>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d018      	beq.n	8001a3a <HAL_DMA_Init+0x38a>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a36      	ldr	r2, [pc, #216]	; (8001ae8 <HAL_DMA_Init+0x438>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d013      	beq.n	8001a3a <HAL_DMA_Init+0x38a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a35      	ldr	r2, [pc, #212]	; (8001aec <HAL_DMA_Init+0x43c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d00e      	beq.n	8001a3a <HAL_DMA_Init+0x38a>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a33      	ldr	r2, [pc, #204]	; (8001af0 <HAL_DMA_Init+0x440>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d009      	beq.n	8001a3a <HAL_DMA_Init+0x38a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a32      	ldr	r2, [pc, #200]	; (8001af4 <HAL_DMA_Init+0x444>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d004      	beq.n	8001a3a <HAL_DMA_Init+0x38a>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a30      	ldr	r2, [pc, #192]	; (8001af8 <HAL_DMA_Init+0x448>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d101      	bne.n	8001a3e <HAL_DMA_Init+0x38e>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <HAL_DMA_Init+0x390>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 8097 	beq.w	8001b74 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a24      	ldr	r2, [pc, #144]	; (8001adc <HAL_DMA_Init+0x42c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d021      	beq.n	8001a94 <HAL_DMA_Init+0x3e4>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a22      	ldr	r2, [pc, #136]	; (8001ae0 <HAL_DMA_Init+0x430>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d01c      	beq.n	8001a94 <HAL_DMA_Init+0x3e4>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a21      	ldr	r2, [pc, #132]	; (8001ae4 <HAL_DMA_Init+0x434>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d017      	beq.n	8001a94 <HAL_DMA_Init+0x3e4>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a1f      	ldr	r2, [pc, #124]	; (8001ae8 <HAL_DMA_Init+0x438>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d012      	beq.n	8001a94 <HAL_DMA_Init+0x3e4>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1e      	ldr	r2, [pc, #120]	; (8001aec <HAL_DMA_Init+0x43c>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d00d      	beq.n	8001a94 <HAL_DMA_Init+0x3e4>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1c      	ldr	r2, [pc, #112]	; (8001af0 <HAL_DMA_Init+0x440>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d008      	beq.n	8001a94 <HAL_DMA_Init+0x3e4>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a1b      	ldr	r2, [pc, #108]	; (8001af4 <HAL_DMA_Init+0x444>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d003      	beq.n	8001a94 <HAL_DMA_Init+0x3e4>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a19      	ldr	r2, [pc, #100]	; (8001af8 <HAL_DMA_Init+0x448>)
 8001a92:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <HAL_DMA_Init+0x44c>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b40      	cmp	r3, #64	; 0x40
 8001aba:	d021      	beq.n	8001b00 <HAL_DMA_Init+0x450>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b80      	cmp	r3, #128	; 0x80
 8001ac2:	d102      	bne.n	8001aca <HAL_DMA_Init+0x41a>
 8001ac4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ac8:	e01b      	b.n	8001b02 <HAL_DMA_Init+0x452>
 8001aca:	2300      	movs	r3, #0
 8001acc:	e019      	b.n	8001b02 <HAL_DMA_Init+0x452>
 8001ace:	bf00      	nop
 8001ad0:	fe10803f 	.word	0xfe10803f
 8001ad4:	5c001000 	.word	0x5c001000
 8001ad8:	ffff0000 	.word	0xffff0000
 8001adc:	58025408 	.word	0x58025408
 8001ae0:	5802541c 	.word	0x5802541c
 8001ae4:	58025430 	.word	0x58025430
 8001ae8:	58025444 	.word	0x58025444
 8001aec:	58025458 	.word	0x58025458
 8001af0:	5802546c 	.word	0x5802546c
 8001af4:	58025480 	.word	0x58025480
 8001af8:	58025494 	.word	0x58025494
 8001afc:	fffe000f 	.word	0xfffe000f
 8001b00:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68d2      	ldr	r2, [r2, #12]
 8001b06:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b30:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b6e      	ldr	r3, [pc, #440]	; (8001d00 <HAL_DMA_Init+0x650>)
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a6e      	ldr	r2, [pc, #440]	; (8001d04 <HAL_DMA_Init+0x654>)
 8001b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b50:	091b      	lsrs	r3, r3, #4
 8001b52:	009a      	lsls	r2, r3, #2
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f001 fc45 	bl	80033e8 <DMA_CalcBaseAndBitshift>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	e008      	b.n	8001b86 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2240      	movs	r2, #64	; 0x40
 8001b78:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e0b7      	b.n	8001cf6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a5f      	ldr	r2, [pc, #380]	; (8001d08 <HAL_DMA_Init+0x658>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d072      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a5d      	ldr	r2, [pc, #372]	; (8001d0c <HAL_DMA_Init+0x65c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d06d      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a5c      	ldr	r2, [pc, #368]	; (8001d10 <HAL_DMA_Init+0x660>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d068      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a5a      	ldr	r2, [pc, #360]	; (8001d14 <HAL_DMA_Init+0x664>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d063      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a59      	ldr	r2, [pc, #356]	; (8001d18 <HAL_DMA_Init+0x668>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d05e      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a57      	ldr	r2, [pc, #348]	; (8001d1c <HAL_DMA_Init+0x66c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d059      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a56      	ldr	r2, [pc, #344]	; (8001d20 <HAL_DMA_Init+0x670>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d054      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a54      	ldr	r2, [pc, #336]	; (8001d24 <HAL_DMA_Init+0x674>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d04f      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a53      	ldr	r2, [pc, #332]	; (8001d28 <HAL_DMA_Init+0x678>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d04a      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a51      	ldr	r2, [pc, #324]	; (8001d2c <HAL_DMA_Init+0x67c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d045      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a50      	ldr	r2, [pc, #320]	; (8001d30 <HAL_DMA_Init+0x680>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d040      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a4e      	ldr	r2, [pc, #312]	; (8001d34 <HAL_DMA_Init+0x684>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d03b      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a4d      	ldr	r2, [pc, #308]	; (8001d38 <HAL_DMA_Init+0x688>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d036      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a4b      	ldr	r2, [pc, #300]	; (8001d3c <HAL_DMA_Init+0x68c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d031      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a4a      	ldr	r2, [pc, #296]	; (8001d40 <HAL_DMA_Init+0x690>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d02c      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a48      	ldr	r2, [pc, #288]	; (8001d44 <HAL_DMA_Init+0x694>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d027      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a47      	ldr	r2, [pc, #284]	; (8001d48 <HAL_DMA_Init+0x698>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d022      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a45      	ldr	r2, [pc, #276]	; (8001d4c <HAL_DMA_Init+0x69c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d01d      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a44      	ldr	r2, [pc, #272]	; (8001d50 <HAL_DMA_Init+0x6a0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d018      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a42      	ldr	r2, [pc, #264]	; (8001d54 <HAL_DMA_Init+0x6a4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d013      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a41      	ldr	r2, [pc, #260]	; (8001d58 <HAL_DMA_Init+0x6a8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d00e      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a3f      	ldr	r2, [pc, #252]	; (8001d5c <HAL_DMA_Init+0x6ac>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d009      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a3e      	ldr	r2, [pc, #248]	; (8001d60 <HAL_DMA_Init+0x6b0>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d004      	beq.n	8001c76 <HAL_DMA_Init+0x5c6>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a3c      	ldr	r2, [pc, #240]	; (8001d64 <HAL_DMA_Init+0x6b4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d101      	bne.n	8001c7a <HAL_DMA_Init+0x5ca>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_DMA_Init+0x5cc>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d032      	beq.n	8001ce6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f001 fcdf 	bl	8003644 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b80      	cmp	r3, #128	; 0x80
 8001c8c:	d102      	bne.n	8001c94 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ca8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d010      	beq.n	8001cd4 <HAL_DMA_Init+0x624>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d80c      	bhi.n	8001cd4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f001 fd5c 	bl	8003778 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	e008      	b.n	8001ce6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	a7fdabf8 	.word	0xa7fdabf8
 8001d04:	cccccccd 	.word	0xcccccccd
 8001d08:	40020010 	.word	0x40020010
 8001d0c:	40020028 	.word	0x40020028
 8001d10:	40020040 	.word	0x40020040
 8001d14:	40020058 	.word	0x40020058
 8001d18:	40020070 	.word	0x40020070
 8001d1c:	40020088 	.word	0x40020088
 8001d20:	400200a0 	.word	0x400200a0
 8001d24:	400200b8 	.word	0x400200b8
 8001d28:	40020410 	.word	0x40020410
 8001d2c:	40020428 	.word	0x40020428
 8001d30:	40020440 	.word	0x40020440
 8001d34:	40020458 	.word	0x40020458
 8001d38:	40020470 	.word	0x40020470
 8001d3c:	40020488 	.word	0x40020488
 8001d40:	400204a0 	.word	0x400204a0
 8001d44:	400204b8 	.word	0x400204b8
 8001d48:	58025408 	.word	0x58025408
 8001d4c:	5802541c 	.word	0x5802541c
 8001d50:	58025430 	.word	0x58025430
 8001d54:	58025444 	.word	0x58025444
 8001d58:	58025458 	.word	0x58025458
 8001d5c:	5802546c 	.word	0x5802546c
 8001d60:	58025480 	.word	0x58025480
 8001d64:	58025494 	.word	0x58025494

08001d68 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e226      	b.n	80021d2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_DMA_Start_IT+0x2a>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e21f      	b.n	80021d2 <HAL_DMA_Start_IT+0x46a>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	f040 820a 	bne.w	80021bc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a68      	ldr	r2, [pc, #416]	; (8001f5c <HAL_DMA_Start_IT+0x1f4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d04a      	beq.n	8001e56 <HAL_DMA_Start_IT+0xee>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a66      	ldr	r2, [pc, #408]	; (8001f60 <HAL_DMA_Start_IT+0x1f8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d045      	beq.n	8001e56 <HAL_DMA_Start_IT+0xee>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a65      	ldr	r2, [pc, #404]	; (8001f64 <HAL_DMA_Start_IT+0x1fc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d040      	beq.n	8001e56 <HAL_DMA_Start_IT+0xee>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a63      	ldr	r2, [pc, #396]	; (8001f68 <HAL_DMA_Start_IT+0x200>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d03b      	beq.n	8001e56 <HAL_DMA_Start_IT+0xee>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a62      	ldr	r2, [pc, #392]	; (8001f6c <HAL_DMA_Start_IT+0x204>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d036      	beq.n	8001e56 <HAL_DMA_Start_IT+0xee>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a60      	ldr	r2, [pc, #384]	; (8001f70 <HAL_DMA_Start_IT+0x208>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d031      	beq.n	8001e56 <HAL_DMA_Start_IT+0xee>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a5f      	ldr	r2, [pc, #380]	; (8001f74 <HAL_DMA_Start_IT+0x20c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d02c      	beq.n	8001e56 <HAL_DMA_Start_IT+0xee>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a5d      	ldr	r2, [pc, #372]	; (8001f78 <HAL_DMA_Start_IT+0x210>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d027      	beq.n	8001e56 <HAL_DMA_Start_IT+0xee>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a5c      	ldr	r2, [pc, #368]	; (8001f7c <HAL_DMA_Start_IT+0x214>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d022      	beq.n	8001e56 <HAL_DMA_Start_IT+0xee>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a5a      	ldr	r2, [pc, #360]	; (8001f80 <HAL_DMA_Start_IT+0x218>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d01d      	beq.n	8001e56 <HAL_DMA_Start_IT+0xee>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a59      	ldr	r2, [pc, #356]	; (8001f84 <HAL_DMA_Start_IT+0x21c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d018      	beq.n	8001e56 <HAL_DMA_Start_IT+0xee>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a57      	ldr	r2, [pc, #348]	; (8001f88 <HAL_DMA_Start_IT+0x220>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d013      	beq.n	8001e56 <HAL_DMA_Start_IT+0xee>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a56      	ldr	r2, [pc, #344]	; (8001f8c <HAL_DMA_Start_IT+0x224>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d00e      	beq.n	8001e56 <HAL_DMA_Start_IT+0xee>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a54      	ldr	r2, [pc, #336]	; (8001f90 <HAL_DMA_Start_IT+0x228>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d009      	beq.n	8001e56 <HAL_DMA_Start_IT+0xee>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a53      	ldr	r2, [pc, #332]	; (8001f94 <HAL_DMA_Start_IT+0x22c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d004      	beq.n	8001e56 <HAL_DMA_Start_IT+0xee>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a51      	ldr	r2, [pc, #324]	; (8001f98 <HAL_DMA_Start_IT+0x230>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d108      	bne.n	8001e68 <HAL_DMA_Start_IT+0x100>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0201 	bic.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	e007      	b.n	8001e78 <HAL_DMA_Start_IT+0x110>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f001 f906 	bl	8003090 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a34      	ldr	r2, [pc, #208]	; (8001f5c <HAL_DMA_Start_IT+0x1f4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d04a      	beq.n	8001f24 <HAL_DMA_Start_IT+0x1bc>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a33      	ldr	r2, [pc, #204]	; (8001f60 <HAL_DMA_Start_IT+0x1f8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d045      	beq.n	8001f24 <HAL_DMA_Start_IT+0x1bc>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a31      	ldr	r2, [pc, #196]	; (8001f64 <HAL_DMA_Start_IT+0x1fc>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d040      	beq.n	8001f24 <HAL_DMA_Start_IT+0x1bc>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a30      	ldr	r2, [pc, #192]	; (8001f68 <HAL_DMA_Start_IT+0x200>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d03b      	beq.n	8001f24 <HAL_DMA_Start_IT+0x1bc>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a2e      	ldr	r2, [pc, #184]	; (8001f6c <HAL_DMA_Start_IT+0x204>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d036      	beq.n	8001f24 <HAL_DMA_Start_IT+0x1bc>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a2d      	ldr	r2, [pc, #180]	; (8001f70 <HAL_DMA_Start_IT+0x208>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d031      	beq.n	8001f24 <HAL_DMA_Start_IT+0x1bc>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a2b      	ldr	r2, [pc, #172]	; (8001f74 <HAL_DMA_Start_IT+0x20c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d02c      	beq.n	8001f24 <HAL_DMA_Start_IT+0x1bc>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a2a      	ldr	r2, [pc, #168]	; (8001f78 <HAL_DMA_Start_IT+0x210>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d027      	beq.n	8001f24 <HAL_DMA_Start_IT+0x1bc>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a28      	ldr	r2, [pc, #160]	; (8001f7c <HAL_DMA_Start_IT+0x214>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d022      	beq.n	8001f24 <HAL_DMA_Start_IT+0x1bc>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a27      	ldr	r2, [pc, #156]	; (8001f80 <HAL_DMA_Start_IT+0x218>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d01d      	beq.n	8001f24 <HAL_DMA_Start_IT+0x1bc>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a25      	ldr	r2, [pc, #148]	; (8001f84 <HAL_DMA_Start_IT+0x21c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d018      	beq.n	8001f24 <HAL_DMA_Start_IT+0x1bc>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a24      	ldr	r2, [pc, #144]	; (8001f88 <HAL_DMA_Start_IT+0x220>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d013      	beq.n	8001f24 <HAL_DMA_Start_IT+0x1bc>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a22      	ldr	r2, [pc, #136]	; (8001f8c <HAL_DMA_Start_IT+0x224>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00e      	beq.n	8001f24 <HAL_DMA_Start_IT+0x1bc>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a21      	ldr	r2, [pc, #132]	; (8001f90 <HAL_DMA_Start_IT+0x228>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d009      	beq.n	8001f24 <HAL_DMA_Start_IT+0x1bc>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <HAL_DMA_Start_IT+0x22c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d004      	beq.n	8001f24 <HAL_DMA_Start_IT+0x1bc>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a1e      	ldr	r2, [pc, #120]	; (8001f98 <HAL_DMA_Start_IT+0x230>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d101      	bne.n	8001f28 <HAL_DMA_Start_IT+0x1c0>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_DMA_Start_IT+0x1c2>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d036      	beq.n	8001f9c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f023 021e 	bic.w	r2, r3, #30
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0216 	orr.w	r2, r2, #22
 8001f40:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d03e      	beq.n	8001fc8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0208 	orr.w	r2, r2, #8
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	e035      	b.n	8001fc8 <HAL_DMA_Start_IT+0x260>
 8001f5c:	40020010 	.word	0x40020010
 8001f60:	40020028 	.word	0x40020028
 8001f64:	40020040 	.word	0x40020040
 8001f68:	40020058 	.word	0x40020058
 8001f6c:	40020070 	.word	0x40020070
 8001f70:	40020088 	.word	0x40020088
 8001f74:	400200a0 	.word	0x400200a0
 8001f78:	400200b8 	.word	0x400200b8
 8001f7c:	40020410 	.word	0x40020410
 8001f80:	40020428 	.word	0x40020428
 8001f84:	40020440 	.word	0x40020440
 8001f88:	40020458 	.word	0x40020458
 8001f8c:	40020470 	.word	0x40020470
 8001f90:	40020488 	.word	0x40020488
 8001f94:	400204a0 	.word	0x400204a0
 8001f98:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 020e 	bic.w	r2, r3, #14
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 020a 	orr.w	r2, r2, #10
 8001fae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d007      	beq.n	8001fc8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0204 	orr.w	r2, r2, #4
 8001fc6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a83      	ldr	r2, [pc, #524]	; (80021dc <HAL_DMA_Start_IT+0x474>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d072      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a82      	ldr	r2, [pc, #520]	; (80021e0 <HAL_DMA_Start_IT+0x478>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d06d      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a80      	ldr	r2, [pc, #512]	; (80021e4 <HAL_DMA_Start_IT+0x47c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d068      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a7f      	ldr	r2, [pc, #508]	; (80021e8 <HAL_DMA_Start_IT+0x480>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d063      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a7d      	ldr	r2, [pc, #500]	; (80021ec <HAL_DMA_Start_IT+0x484>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d05e      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a7c      	ldr	r2, [pc, #496]	; (80021f0 <HAL_DMA_Start_IT+0x488>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d059      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a7a      	ldr	r2, [pc, #488]	; (80021f4 <HAL_DMA_Start_IT+0x48c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d054      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a79      	ldr	r2, [pc, #484]	; (80021f8 <HAL_DMA_Start_IT+0x490>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d04f      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a77      	ldr	r2, [pc, #476]	; (80021fc <HAL_DMA_Start_IT+0x494>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d04a      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a76      	ldr	r2, [pc, #472]	; (8002200 <HAL_DMA_Start_IT+0x498>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d045      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a74      	ldr	r2, [pc, #464]	; (8002204 <HAL_DMA_Start_IT+0x49c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d040      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a73      	ldr	r2, [pc, #460]	; (8002208 <HAL_DMA_Start_IT+0x4a0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d03b      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a71      	ldr	r2, [pc, #452]	; (800220c <HAL_DMA_Start_IT+0x4a4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d036      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a70      	ldr	r2, [pc, #448]	; (8002210 <HAL_DMA_Start_IT+0x4a8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d031      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a6e      	ldr	r2, [pc, #440]	; (8002214 <HAL_DMA_Start_IT+0x4ac>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d02c      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a6d      	ldr	r2, [pc, #436]	; (8002218 <HAL_DMA_Start_IT+0x4b0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d027      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a6b      	ldr	r2, [pc, #428]	; (800221c <HAL_DMA_Start_IT+0x4b4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d022      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a6a      	ldr	r2, [pc, #424]	; (8002220 <HAL_DMA_Start_IT+0x4b8>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d01d      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a68      	ldr	r2, [pc, #416]	; (8002224 <HAL_DMA_Start_IT+0x4bc>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d018      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a67      	ldr	r2, [pc, #412]	; (8002228 <HAL_DMA_Start_IT+0x4c0>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d013      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a65      	ldr	r2, [pc, #404]	; (800222c <HAL_DMA_Start_IT+0x4c4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00e      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a64      	ldr	r2, [pc, #400]	; (8002230 <HAL_DMA_Start_IT+0x4c8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d009      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a62      	ldr	r2, [pc, #392]	; (8002234 <HAL_DMA_Start_IT+0x4cc>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d004      	beq.n	80020b8 <HAL_DMA_Start_IT+0x350>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a61      	ldr	r2, [pc, #388]	; (8002238 <HAL_DMA_Start_IT+0x4d0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d101      	bne.n	80020bc <HAL_DMA_Start_IT+0x354>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <HAL_DMA_Start_IT+0x356>
 80020bc:	2300      	movs	r3, #0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01a      	beq.n	80020f8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020de:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020f6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a37      	ldr	r2, [pc, #220]	; (80021dc <HAL_DMA_Start_IT+0x474>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d04a      	beq.n	8002198 <HAL_DMA_Start_IT+0x430>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a36      	ldr	r2, [pc, #216]	; (80021e0 <HAL_DMA_Start_IT+0x478>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d045      	beq.n	8002198 <HAL_DMA_Start_IT+0x430>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a34      	ldr	r2, [pc, #208]	; (80021e4 <HAL_DMA_Start_IT+0x47c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d040      	beq.n	8002198 <HAL_DMA_Start_IT+0x430>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a33      	ldr	r2, [pc, #204]	; (80021e8 <HAL_DMA_Start_IT+0x480>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d03b      	beq.n	8002198 <HAL_DMA_Start_IT+0x430>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a31      	ldr	r2, [pc, #196]	; (80021ec <HAL_DMA_Start_IT+0x484>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d036      	beq.n	8002198 <HAL_DMA_Start_IT+0x430>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a30      	ldr	r2, [pc, #192]	; (80021f0 <HAL_DMA_Start_IT+0x488>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d031      	beq.n	8002198 <HAL_DMA_Start_IT+0x430>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a2e      	ldr	r2, [pc, #184]	; (80021f4 <HAL_DMA_Start_IT+0x48c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d02c      	beq.n	8002198 <HAL_DMA_Start_IT+0x430>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a2d      	ldr	r2, [pc, #180]	; (80021f8 <HAL_DMA_Start_IT+0x490>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d027      	beq.n	8002198 <HAL_DMA_Start_IT+0x430>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a2b      	ldr	r2, [pc, #172]	; (80021fc <HAL_DMA_Start_IT+0x494>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d022      	beq.n	8002198 <HAL_DMA_Start_IT+0x430>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a2a      	ldr	r2, [pc, #168]	; (8002200 <HAL_DMA_Start_IT+0x498>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d01d      	beq.n	8002198 <HAL_DMA_Start_IT+0x430>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a28      	ldr	r2, [pc, #160]	; (8002204 <HAL_DMA_Start_IT+0x49c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d018      	beq.n	8002198 <HAL_DMA_Start_IT+0x430>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a27      	ldr	r2, [pc, #156]	; (8002208 <HAL_DMA_Start_IT+0x4a0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d013      	beq.n	8002198 <HAL_DMA_Start_IT+0x430>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a25      	ldr	r2, [pc, #148]	; (800220c <HAL_DMA_Start_IT+0x4a4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d00e      	beq.n	8002198 <HAL_DMA_Start_IT+0x430>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a24      	ldr	r2, [pc, #144]	; (8002210 <HAL_DMA_Start_IT+0x4a8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d009      	beq.n	8002198 <HAL_DMA_Start_IT+0x430>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a22      	ldr	r2, [pc, #136]	; (8002214 <HAL_DMA_Start_IT+0x4ac>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d004      	beq.n	8002198 <HAL_DMA_Start_IT+0x430>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a21      	ldr	r2, [pc, #132]	; (8002218 <HAL_DMA_Start_IT+0x4b0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d108      	bne.n	80021aa <HAL_DMA_Start_IT+0x442>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0201 	orr.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	e012      	b.n	80021d0 <HAL_DMA_Start_IT+0x468>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0201 	orr.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	e009      	b.n	80021d0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80021d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40020010 	.word	0x40020010
 80021e0:	40020028 	.word	0x40020028
 80021e4:	40020040 	.word	0x40020040
 80021e8:	40020058 	.word	0x40020058
 80021ec:	40020070 	.word	0x40020070
 80021f0:	40020088 	.word	0x40020088
 80021f4:	400200a0 	.word	0x400200a0
 80021f8:	400200b8 	.word	0x400200b8
 80021fc:	40020410 	.word	0x40020410
 8002200:	40020428 	.word	0x40020428
 8002204:	40020440 	.word	0x40020440
 8002208:	40020458 	.word	0x40020458
 800220c:	40020470 	.word	0x40020470
 8002210:	40020488 	.word	0x40020488
 8002214:	400204a0 	.word	0x400204a0
 8002218:	400204b8 	.word	0x400204b8
 800221c:	58025408 	.word	0x58025408
 8002220:	5802541c 	.word	0x5802541c
 8002224:	58025430 	.word	0x58025430
 8002228:	58025444 	.word	0x58025444
 800222c:	58025458 	.word	0x58025458
 8002230:	5802546c 	.word	0x5802546c
 8002234:	58025480 	.word	0x58025480
 8002238:	58025494 	.word	0x58025494

0800223c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002248:	4b67      	ldr	r3, [pc, #412]	; (80023e8 <HAL_DMA_IRQHandler+0x1ac>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a67      	ldr	r2, [pc, #412]	; (80023ec <HAL_DMA_IRQHandler+0x1b0>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	0a9b      	lsrs	r3, r3, #10
 8002254:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002260:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a5f      	ldr	r2, [pc, #380]	; (80023f0 <HAL_DMA_IRQHandler+0x1b4>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d04a      	beq.n	800230e <HAL_DMA_IRQHandler+0xd2>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a5d      	ldr	r2, [pc, #372]	; (80023f4 <HAL_DMA_IRQHandler+0x1b8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d045      	beq.n	800230e <HAL_DMA_IRQHandler+0xd2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a5c      	ldr	r2, [pc, #368]	; (80023f8 <HAL_DMA_IRQHandler+0x1bc>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d040      	beq.n	800230e <HAL_DMA_IRQHandler+0xd2>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a5a      	ldr	r2, [pc, #360]	; (80023fc <HAL_DMA_IRQHandler+0x1c0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d03b      	beq.n	800230e <HAL_DMA_IRQHandler+0xd2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a59      	ldr	r2, [pc, #356]	; (8002400 <HAL_DMA_IRQHandler+0x1c4>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d036      	beq.n	800230e <HAL_DMA_IRQHandler+0xd2>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a57      	ldr	r2, [pc, #348]	; (8002404 <HAL_DMA_IRQHandler+0x1c8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d031      	beq.n	800230e <HAL_DMA_IRQHandler+0xd2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a56      	ldr	r2, [pc, #344]	; (8002408 <HAL_DMA_IRQHandler+0x1cc>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d02c      	beq.n	800230e <HAL_DMA_IRQHandler+0xd2>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a54      	ldr	r2, [pc, #336]	; (800240c <HAL_DMA_IRQHandler+0x1d0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d027      	beq.n	800230e <HAL_DMA_IRQHandler+0xd2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a53      	ldr	r2, [pc, #332]	; (8002410 <HAL_DMA_IRQHandler+0x1d4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d022      	beq.n	800230e <HAL_DMA_IRQHandler+0xd2>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a51      	ldr	r2, [pc, #324]	; (8002414 <HAL_DMA_IRQHandler+0x1d8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01d      	beq.n	800230e <HAL_DMA_IRQHandler+0xd2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a50      	ldr	r2, [pc, #320]	; (8002418 <HAL_DMA_IRQHandler+0x1dc>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d018      	beq.n	800230e <HAL_DMA_IRQHandler+0xd2>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a4e      	ldr	r2, [pc, #312]	; (800241c <HAL_DMA_IRQHandler+0x1e0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d013      	beq.n	800230e <HAL_DMA_IRQHandler+0xd2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a4d      	ldr	r2, [pc, #308]	; (8002420 <HAL_DMA_IRQHandler+0x1e4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d00e      	beq.n	800230e <HAL_DMA_IRQHandler+0xd2>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a4b      	ldr	r2, [pc, #300]	; (8002424 <HAL_DMA_IRQHandler+0x1e8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d009      	beq.n	800230e <HAL_DMA_IRQHandler+0xd2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a4a      	ldr	r2, [pc, #296]	; (8002428 <HAL_DMA_IRQHandler+0x1ec>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d004      	beq.n	800230e <HAL_DMA_IRQHandler+0xd2>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a48      	ldr	r2, [pc, #288]	; (800242c <HAL_DMA_IRQHandler+0x1f0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d101      	bne.n	8002312 <HAL_DMA_IRQHandler+0xd6>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <HAL_DMA_IRQHandler+0xd8>
 8002312:	2300      	movs	r3, #0
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 842b 	beq.w	8002b70 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	2208      	movs	r2, #8
 8002324:	409a      	lsls	r2, r3
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 80a2 	beq.w	8002474 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a2e      	ldr	r2, [pc, #184]	; (80023f0 <HAL_DMA_IRQHandler+0x1b4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d04a      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x194>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a2d      	ldr	r2, [pc, #180]	; (80023f4 <HAL_DMA_IRQHandler+0x1b8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d045      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x194>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a2b      	ldr	r2, [pc, #172]	; (80023f8 <HAL_DMA_IRQHandler+0x1bc>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d040      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x194>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a2a      	ldr	r2, [pc, #168]	; (80023fc <HAL_DMA_IRQHandler+0x1c0>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d03b      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x194>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a28      	ldr	r2, [pc, #160]	; (8002400 <HAL_DMA_IRQHandler+0x1c4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d036      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x194>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a27      	ldr	r2, [pc, #156]	; (8002404 <HAL_DMA_IRQHandler+0x1c8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d031      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x194>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a25      	ldr	r2, [pc, #148]	; (8002408 <HAL_DMA_IRQHandler+0x1cc>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d02c      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x194>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a24      	ldr	r2, [pc, #144]	; (800240c <HAL_DMA_IRQHandler+0x1d0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d027      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x194>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a22      	ldr	r2, [pc, #136]	; (8002410 <HAL_DMA_IRQHandler+0x1d4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d022      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x194>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a21      	ldr	r2, [pc, #132]	; (8002414 <HAL_DMA_IRQHandler+0x1d8>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d01d      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x194>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a1f      	ldr	r2, [pc, #124]	; (8002418 <HAL_DMA_IRQHandler+0x1dc>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d018      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x194>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a1e      	ldr	r2, [pc, #120]	; (800241c <HAL_DMA_IRQHandler+0x1e0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d013      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x194>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a1c      	ldr	r2, [pc, #112]	; (8002420 <HAL_DMA_IRQHandler+0x1e4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00e      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x194>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1b      	ldr	r2, [pc, #108]	; (8002424 <HAL_DMA_IRQHandler+0x1e8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d009      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x194>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a19      	ldr	r2, [pc, #100]	; (8002428 <HAL_DMA_IRQHandler+0x1ec>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d004      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x194>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a18      	ldr	r2, [pc, #96]	; (800242c <HAL_DMA_IRQHandler+0x1f0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d12f      	bne.n	8002430 <HAL_DMA_IRQHandler+0x1f4>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b00      	cmp	r3, #0
 80023dc:	bf14      	ite	ne
 80023de:	2301      	movne	r3, #1
 80023e0:	2300      	moveq	r3, #0
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	e02e      	b.n	8002444 <HAL_DMA_IRQHandler+0x208>
 80023e6:	bf00      	nop
 80023e8:	24000000 	.word	0x24000000
 80023ec:	1b4e81b5 	.word	0x1b4e81b5
 80023f0:	40020010 	.word	0x40020010
 80023f4:	40020028 	.word	0x40020028
 80023f8:	40020040 	.word	0x40020040
 80023fc:	40020058 	.word	0x40020058
 8002400:	40020070 	.word	0x40020070
 8002404:	40020088 	.word	0x40020088
 8002408:	400200a0 	.word	0x400200a0
 800240c:	400200b8 	.word	0x400200b8
 8002410:	40020410 	.word	0x40020410
 8002414:	40020428 	.word	0x40020428
 8002418:	40020440 	.word	0x40020440
 800241c:	40020458 	.word	0x40020458
 8002420:	40020470 	.word	0x40020470
 8002424:	40020488 	.word	0x40020488
 8002428:	400204a0 	.word	0x400204a0
 800242c:	400204b8 	.word	0x400204b8
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	bf14      	ite	ne
 800243e:	2301      	movne	r3, #1
 8002440:	2300      	moveq	r3, #0
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d015      	beq.n	8002474 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0204 	bic.w	r2, r2, #4
 8002456:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	2208      	movs	r2, #8
 8002462:	409a      	lsls	r2, r3
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246c:	f043 0201 	orr.w	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	fa22 f303 	lsr.w	r3, r2, r3
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d06e      	beq.n	8002568 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a69      	ldr	r2, [pc, #420]	; (8002634 <HAL_DMA_IRQHandler+0x3f8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d04a      	beq.n	800252a <HAL_DMA_IRQHandler+0x2ee>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a67      	ldr	r2, [pc, #412]	; (8002638 <HAL_DMA_IRQHandler+0x3fc>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d045      	beq.n	800252a <HAL_DMA_IRQHandler+0x2ee>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a66      	ldr	r2, [pc, #408]	; (800263c <HAL_DMA_IRQHandler+0x400>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d040      	beq.n	800252a <HAL_DMA_IRQHandler+0x2ee>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a64      	ldr	r2, [pc, #400]	; (8002640 <HAL_DMA_IRQHandler+0x404>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d03b      	beq.n	800252a <HAL_DMA_IRQHandler+0x2ee>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a63      	ldr	r2, [pc, #396]	; (8002644 <HAL_DMA_IRQHandler+0x408>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d036      	beq.n	800252a <HAL_DMA_IRQHandler+0x2ee>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a61      	ldr	r2, [pc, #388]	; (8002648 <HAL_DMA_IRQHandler+0x40c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d031      	beq.n	800252a <HAL_DMA_IRQHandler+0x2ee>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a60      	ldr	r2, [pc, #384]	; (800264c <HAL_DMA_IRQHandler+0x410>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d02c      	beq.n	800252a <HAL_DMA_IRQHandler+0x2ee>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a5e      	ldr	r2, [pc, #376]	; (8002650 <HAL_DMA_IRQHandler+0x414>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d027      	beq.n	800252a <HAL_DMA_IRQHandler+0x2ee>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a5d      	ldr	r2, [pc, #372]	; (8002654 <HAL_DMA_IRQHandler+0x418>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d022      	beq.n	800252a <HAL_DMA_IRQHandler+0x2ee>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a5b      	ldr	r2, [pc, #364]	; (8002658 <HAL_DMA_IRQHandler+0x41c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d01d      	beq.n	800252a <HAL_DMA_IRQHandler+0x2ee>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a5a      	ldr	r2, [pc, #360]	; (800265c <HAL_DMA_IRQHandler+0x420>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d018      	beq.n	800252a <HAL_DMA_IRQHandler+0x2ee>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a58      	ldr	r2, [pc, #352]	; (8002660 <HAL_DMA_IRQHandler+0x424>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d013      	beq.n	800252a <HAL_DMA_IRQHandler+0x2ee>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a57      	ldr	r2, [pc, #348]	; (8002664 <HAL_DMA_IRQHandler+0x428>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d00e      	beq.n	800252a <HAL_DMA_IRQHandler+0x2ee>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a55      	ldr	r2, [pc, #340]	; (8002668 <HAL_DMA_IRQHandler+0x42c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d009      	beq.n	800252a <HAL_DMA_IRQHandler+0x2ee>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a54      	ldr	r2, [pc, #336]	; (800266c <HAL_DMA_IRQHandler+0x430>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d004      	beq.n	800252a <HAL_DMA_IRQHandler+0x2ee>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a52      	ldr	r2, [pc, #328]	; (8002670 <HAL_DMA_IRQHandler+0x434>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d10a      	bne.n	8002540 <HAL_DMA_IRQHandler+0x304>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002534:	2b00      	cmp	r3, #0
 8002536:	bf14      	ite	ne
 8002538:	2301      	movne	r3, #1
 800253a:	2300      	moveq	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	e003      	b.n	8002548 <HAL_DMA_IRQHandler+0x30c>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2300      	movs	r3, #0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00d      	beq.n	8002568 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	2201      	movs	r2, #1
 8002556:	409a      	lsls	r2, r3
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002560:	f043 0202 	orr.w	r2, r3, #2
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256c:	f003 031f 	and.w	r3, r3, #31
 8002570:	2204      	movs	r2, #4
 8002572:	409a      	lsls	r2, r3
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 808f 	beq.w	800269c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a2c      	ldr	r2, [pc, #176]	; (8002634 <HAL_DMA_IRQHandler+0x3f8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d04a      	beq.n	800261e <HAL_DMA_IRQHandler+0x3e2>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a2a      	ldr	r2, [pc, #168]	; (8002638 <HAL_DMA_IRQHandler+0x3fc>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d045      	beq.n	800261e <HAL_DMA_IRQHandler+0x3e2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a29      	ldr	r2, [pc, #164]	; (800263c <HAL_DMA_IRQHandler+0x400>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d040      	beq.n	800261e <HAL_DMA_IRQHandler+0x3e2>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a27      	ldr	r2, [pc, #156]	; (8002640 <HAL_DMA_IRQHandler+0x404>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d03b      	beq.n	800261e <HAL_DMA_IRQHandler+0x3e2>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a26      	ldr	r2, [pc, #152]	; (8002644 <HAL_DMA_IRQHandler+0x408>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d036      	beq.n	800261e <HAL_DMA_IRQHandler+0x3e2>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a24      	ldr	r2, [pc, #144]	; (8002648 <HAL_DMA_IRQHandler+0x40c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d031      	beq.n	800261e <HAL_DMA_IRQHandler+0x3e2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a23      	ldr	r2, [pc, #140]	; (800264c <HAL_DMA_IRQHandler+0x410>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d02c      	beq.n	800261e <HAL_DMA_IRQHandler+0x3e2>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a21      	ldr	r2, [pc, #132]	; (8002650 <HAL_DMA_IRQHandler+0x414>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d027      	beq.n	800261e <HAL_DMA_IRQHandler+0x3e2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a20      	ldr	r2, [pc, #128]	; (8002654 <HAL_DMA_IRQHandler+0x418>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d022      	beq.n	800261e <HAL_DMA_IRQHandler+0x3e2>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1e      	ldr	r2, [pc, #120]	; (8002658 <HAL_DMA_IRQHandler+0x41c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d01d      	beq.n	800261e <HAL_DMA_IRQHandler+0x3e2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a1d      	ldr	r2, [pc, #116]	; (800265c <HAL_DMA_IRQHandler+0x420>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d018      	beq.n	800261e <HAL_DMA_IRQHandler+0x3e2>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a1b      	ldr	r2, [pc, #108]	; (8002660 <HAL_DMA_IRQHandler+0x424>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d013      	beq.n	800261e <HAL_DMA_IRQHandler+0x3e2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a1a      	ldr	r2, [pc, #104]	; (8002664 <HAL_DMA_IRQHandler+0x428>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d00e      	beq.n	800261e <HAL_DMA_IRQHandler+0x3e2>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a18      	ldr	r2, [pc, #96]	; (8002668 <HAL_DMA_IRQHandler+0x42c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d009      	beq.n	800261e <HAL_DMA_IRQHandler+0x3e2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a17      	ldr	r2, [pc, #92]	; (800266c <HAL_DMA_IRQHandler+0x430>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d004      	beq.n	800261e <HAL_DMA_IRQHandler+0x3e2>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a15      	ldr	r2, [pc, #84]	; (8002670 <HAL_DMA_IRQHandler+0x434>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d12a      	bne.n	8002674 <HAL_DMA_IRQHandler+0x438>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf14      	ite	ne
 800262c:	2301      	movne	r3, #1
 800262e:	2300      	moveq	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	e023      	b.n	800267c <HAL_DMA_IRQHandler+0x440>
 8002634:	40020010 	.word	0x40020010
 8002638:	40020028 	.word	0x40020028
 800263c:	40020040 	.word	0x40020040
 8002640:	40020058 	.word	0x40020058
 8002644:	40020070 	.word	0x40020070
 8002648:	40020088 	.word	0x40020088
 800264c:	400200a0 	.word	0x400200a0
 8002650:	400200b8 	.word	0x400200b8
 8002654:	40020410 	.word	0x40020410
 8002658:	40020428 	.word	0x40020428
 800265c:	40020440 	.word	0x40020440
 8002660:	40020458 	.word	0x40020458
 8002664:	40020470 	.word	0x40020470
 8002668:	40020488 	.word	0x40020488
 800266c:	400204a0 	.word	0x400204a0
 8002670:	400204b8 	.word	0x400204b8
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2300      	movs	r3, #0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00d      	beq.n	800269c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	2204      	movs	r2, #4
 800268a:	409a      	lsls	r2, r3
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002694:	f043 0204 	orr.w	r2, r3, #4
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	2210      	movs	r2, #16
 80026a6:	409a      	lsls	r2, r3
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80a6 	beq.w	80027fe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a85      	ldr	r2, [pc, #532]	; (80028cc <HAL_DMA_IRQHandler+0x690>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d04a      	beq.n	8002752 <HAL_DMA_IRQHandler+0x516>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a83      	ldr	r2, [pc, #524]	; (80028d0 <HAL_DMA_IRQHandler+0x694>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d045      	beq.n	8002752 <HAL_DMA_IRQHandler+0x516>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a82      	ldr	r2, [pc, #520]	; (80028d4 <HAL_DMA_IRQHandler+0x698>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d040      	beq.n	8002752 <HAL_DMA_IRQHandler+0x516>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a80      	ldr	r2, [pc, #512]	; (80028d8 <HAL_DMA_IRQHandler+0x69c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d03b      	beq.n	8002752 <HAL_DMA_IRQHandler+0x516>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a7f      	ldr	r2, [pc, #508]	; (80028dc <HAL_DMA_IRQHandler+0x6a0>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d036      	beq.n	8002752 <HAL_DMA_IRQHandler+0x516>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a7d      	ldr	r2, [pc, #500]	; (80028e0 <HAL_DMA_IRQHandler+0x6a4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d031      	beq.n	8002752 <HAL_DMA_IRQHandler+0x516>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a7c      	ldr	r2, [pc, #496]	; (80028e4 <HAL_DMA_IRQHandler+0x6a8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d02c      	beq.n	8002752 <HAL_DMA_IRQHandler+0x516>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a7a      	ldr	r2, [pc, #488]	; (80028e8 <HAL_DMA_IRQHandler+0x6ac>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d027      	beq.n	8002752 <HAL_DMA_IRQHandler+0x516>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a79      	ldr	r2, [pc, #484]	; (80028ec <HAL_DMA_IRQHandler+0x6b0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d022      	beq.n	8002752 <HAL_DMA_IRQHandler+0x516>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a77      	ldr	r2, [pc, #476]	; (80028f0 <HAL_DMA_IRQHandler+0x6b4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d01d      	beq.n	8002752 <HAL_DMA_IRQHandler+0x516>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a76      	ldr	r2, [pc, #472]	; (80028f4 <HAL_DMA_IRQHandler+0x6b8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d018      	beq.n	8002752 <HAL_DMA_IRQHandler+0x516>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a74      	ldr	r2, [pc, #464]	; (80028f8 <HAL_DMA_IRQHandler+0x6bc>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d013      	beq.n	8002752 <HAL_DMA_IRQHandler+0x516>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a73      	ldr	r2, [pc, #460]	; (80028fc <HAL_DMA_IRQHandler+0x6c0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00e      	beq.n	8002752 <HAL_DMA_IRQHandler+0x516>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a71      	ldr	r2, [pc, #452]	; (8002900 <HAL_DMA_IRQHandler+0x6c4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d009      	beq.n	8002752 <HAL_DMA_IRQHandler+0x516>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a70      	ldr	r2, [pc, #448]	; (8002904 <HAL_DMA_IRQHandler+0x6c8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d004      	beq.n	8002752 <HAL_DMA_IRQHandler+0x516>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a6e      	ldr	r2, [pc, #440]	; (8002908 <HAL_DMA_IRQHandler+0x6cc>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d10a      	bne.n	8002768 <HAL_DMA_IRQHandler+0x52c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b00      	cmp	r3, #0
 800275e:	bf14      	ite	ne
 8002760:	2301      	movne	r3, #1
 8002762:	2300      	moveq	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	e009      	b.n	800277c <HAL_DMA_IRQHandler+0x540>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b00      	cmp	r3, #0
 8002774:	bf14      	ite	ne
 8002776:	2301      	movne	r3, #1
 8002778:	2300      	moveq	r3, #0
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d03e      	beq.n	80027fe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	f003 031f 	and.w	r3, r3, #31
 8002788:	2210      	movs	r2, #16
 800278a:	409a      	lsls	r2, r3
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d018      	beq.n	80027d0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d108      	bne.n	80027be <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d024      	beq.n	80027fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	4798      	blx	r3
 80027bc:	e01f      	b.n	80027fe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d01b      	beq.n	80027fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	4798      	blx	r3
 80027ce:	e016      	b.n	80027fe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d107      	bne.n	80027ee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0208 	bic.w	r2, r2, #8
 80027ec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002802:	f003 031f 	and.w	r3, r3, #31
 8002806:	2220      	movs	r2, #32
 8002808:	409a      	lsls	r2, r3
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 8110 	beq.w	8002a34 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a2c      	ldr	r2, [pc, #176]	; (80028cc <HAL_DMA_IRQHandler+0x690>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d04a      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x678>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a2b      	ldr	r2, [pc, #172]	; (80028d0 <HAL_DMA_IRQHandler+0x694>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d045      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x678>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a29      	ldr	r2, [pc, #164]	; (80028d4 <HAL_DMA_IRQHandler+0x698>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d040      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x678>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a28      	ldr	r2, [pc, #160]	; (80028d8 <HAL_DMA_IRQHandler+0x69c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d03b      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x678>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a26      	ldr	r2, [pc, #152]	; (80028dc <HAL_DMA_IRQHandler+0x6a0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d036      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x678>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a25      	ldr	r2, [pc, #148]	; (80028e0 <HAL_DMA_IRQHandler+0x6a4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d031      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x678>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a23      	ldr	r2, [pc, #140]	; (80028e4 <HAL_DMA_IRQHandler+0x6a8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d02c      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x678>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a22      	ldr	r2, [pc, #136]	; (80028e8 <HAL_DMA_IRQHandler+0x6ac>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d027      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x678>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a20      	ldr	r2, [pc, #128]	; (80028ec <HAL_DMA_IRQHandler+0x6b0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d022      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x678>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a1f      	ldr	r2, [pc, #124]	; (80028f0 <HAL_DMA_IRQHandler+0x6b4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d01d      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x678>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1d      	ldr	r2, [pc, #116]	; (80028f4 <HAL_DMA_IRQHandler+0x6b8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d018      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x678>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a1c      	ldr	r2, [pc, #112]	; (80028f8 <HAL_DMA_IRQHandler+0x6bc>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d013      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x678>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1a      	ldr	r2, [pc, #104]	; (80028fc <HAL_DMA_IRQHandler+0x6c0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00e      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x678>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a19      	ldr	r2, [pc, #100]	; (8002900 <HAL_DMA_IRQHandler+0x6c4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d009      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x678>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a17      	ldr	r2, [pc, #92]	; (8002904 <HAL_DMA_IRQHandler+0x6c8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x678>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a16      	ldr	r2, [pc, #88]	; (8002908 <HAL_DMA_IRQHandler+0x6cc>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d12b      	bne.n	800290c <HAL_DMA_IRQHandler+0x6d0>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bf14      	ite	ne
 80028c2:	2301      	movne	r3, #1
 80028c4:	2300      	moveq	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	e02a      	b.n	8002920 <HAL_DMA_IRQHandler+0x6e4>
 80028ca:	bf00      	nop
 80028cc:	40020010 	.word	0x40020010
 80028d0:	40020028 	.word	0x40020028
 80028d4:	40020040 	.word	0x40020040
 80028d8:	40020058 	.word	0x40020058
 80028dc:	40020070 	.word	0x40020070
 80028e0:	40020088 	.word	0x40020088
 80028e4:	400200a0 	.word	0x400200a0
 80028e8:	400200b8 	.word	0x400200b8
 80028ec:	40020410 	.word	0x40020410
 80028f0:	40020428 	.word	0x40020428
 80028f4:	40020440 	.word	0x40020440
 80028f8:	40020458 	.word	0x40020458
 80028fc:	40020470 	.word	0x40020470
 8002900:	40020488 	.word	0x40020488
 8002904:	400204a0 	.word	0x400204a0
 8002908:	400204b8 	.word	0x400204b8
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	bf14      	ite	ne
 800291a:	2301      	movne	r3, #1
 800291c:	2300      	moveq	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8087 	beq.w	8002a34 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	2220      	movs	r2, #32
 8002930:	409a      	lsls	r2, r3
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b04      	cmp	r3, #4
 8002940:	d139      	bne.n	80029b6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0216 	bic.w	r2, r2, #22
 8002950:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002960:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	2b00      	cmp	r3, #0
 8002968:	d103      	bne.n	8002972 <HAL_DMA_IRQHandler+0x736>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296e:	2b00      	cmp	r3, #0
 8002970:	d007      	beq.n	8002982 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0208 	bic.w	r2, r2, #8
 8002980:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	223f      	movs	r2, #63	; 0x3f
 800298c:	409a      	lsls	r2, r3
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 834a 	beq.w	8003040 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	4798      	blx	r3
          }
          return;
 80029b4:	e344      	b.n	8003040 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d018      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d108      	bne.n	80029e4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d02c      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	4798      	blx	r3
 80029e2:	e027      	b.n	8002a34 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d023      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	4798      	blx	r3
 80029f4:	e01e      	b.n	8002a34 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10f      	bne.n	8002a24 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0210 	bic.w	r2, r2, #16
 8002a12:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 8306 	beq.w	800304a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 8088 	beq.w	8002b5c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2204      	movs	r2, #4
 8002a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a7a      	ldr	r2, [pc, #488]	; (8002c44 <HAL_DMA_IRQHandler+0xa08>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d04a      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x8b8>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a79      	ldr	r2, [pc, #484]	; (8002c48 <HAL_DMA_IRQHandler+0xa0c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d045      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x8b8>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a77      	ldr	r2, [pc, #476]	; (8002c4c <HAL_DMA_IRQHandler+0xa10>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d040      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x8b8>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a76      	ldr	r2, [pc, #472]	; (8002c50 <HAL_DMA_IRQHandler+0xa14>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d03b      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x8b8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a74      	ldr	r2, [pc, #464]	; (8002c54 <HAL_DMA_IRQHandler+0xa18>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d036      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x8b8>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a73      	ldr	r2, [pc, #460]	; (8002c58 <HAL_DMA_IRQHandler+0xa1c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d031      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x8b8>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a71      	ldr	r2, [pc, #452]	; (8002c5c <HAL_DMA_IRQHandler+0xa20>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d02c      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x8b8>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a70      	ldr	r2, [pc, #448]	; (8002c60 <HAL_DMA_IRQHandler+0xa24>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d027      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x8b8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a6e      	ldr	r2, [pc, #440]	; (8002c64 <HAL_DMA_IRQHandler+0xa28>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d022      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x8b8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a6d      	ldr	r2, [pc, #436]	; (8002c68 <HAL_DMA_IRQHandler+0xa2c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d01d      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x8b8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a6b      	ldr	r2, [pc, #428]	; (8002c6c <HAL_DMA_IRQHandler+0xa30>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d018      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x8b8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a6a      	ldr	r2, [pc, #424]	; (8002c70 <HAL_DMA_IRQHandler+0xa34>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d013      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x8b8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a68      	ldr	r2, [pc, #416]	; (8002c74 <HAL_DMA_IRQHandler+0xa38>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00e      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x8b8>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a67      	ldr	r2, [pc, #412]	; (8002c78 <HAL_DMA_IRQHandler+0xa3c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d009      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x8b8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a65      	ldr	r2, [pc, #404]	; (8002c7c <HAL_DMA_IRQHandler+0xa40>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d004      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x8b8>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a64      	ldr	r2, [pc, #400]	; (8002c80 <HAL_DMA_IRQHandler+0xa44>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d108      	bne.n	8002b06 <HAL_DMA_IRQHandler+0x8ca>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	e007      	b.n	8002b16 <HAL_DMA_IRQHandler+0x8da>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0201 	bic.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d307      	bcc.n	8002b32 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f2      	bne.n	8002b16 <HAL_DMA_IRQHandler+0x8da>
 8002b30:	e000      	b.n	8002b34 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002b32:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d004      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2203      	movs	r2, #3
 8002b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002b4a:	e003      	b.n	8002b54 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 8272 	beq.w	800304a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
 8002b6e:	e26c      	b.n	800304a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a43      	ldr	r2, [pc, #268]	; (8002c84 <HAL_DMA_IRQHandler+0xa48>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d022      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x984>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a42      	ldr	r2, [pc, #264]	; (8002c88 <HAL_DMA_IRQHandler+0xa4c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d01d      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x984>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a40      	ldr	r2, [pc, #256]	; (8002c8c <HAL_DMA_IRQHandler+0xa50>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d018      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x984>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a3f      	ldr	r2, [pc, #252]	; (8002c90 <HAL_DMA_IRQHandler+0xa54>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d013      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x984>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a3d      	ldr	r2, [pc, #244]	; (8002c94 <HAL_DMA_IRQHandler+0xa58>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d00e      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x984>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a3c      	ldr	r2, [pc, #240]	; (8002c98 <HAL_DMA_IRQHandler+0xa5c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d009      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x984>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a3a      	ldr	r2, [pc, #232]	; (8002c9c <HAL_DMA_IRQHandler+0xa60>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d004      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x984>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a39      	ldr	r2, [pc, #228]	; (8002ca0 <HAL_DMA_IRQHandler+0xa64>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d101      	bne.n	8002bc4 <HAL_DMA_IRQHandler+0x988>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <HAL_DMA_IRQHandler+0x98a>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 823f 	beq.w	800304a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	2204      	movs	r2, #4
 8002bde:	409a      	lsls	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 80cd 	beq.w	8002d84 <HAL_DMA_IRQHandler+0xb48>
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80c7 	beq.w	8002d84 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	2204      	movs	r2, #4
 8002c00:	409a      	lsls	r2, r3
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d049      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 8210 	beq.w	8003044 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c2c:	e20a      	b.n	8003044 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8206 	beq.w	8003044 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c40:	e200      	b.n	8003044 <HAL_DMA_IRQHandler+0xe08>
 8002c42:	bf00      	nop
 8002c44:	40020010 	.word	0x40020010
 8002c48:	40020028 	.word	0x40020028
 8002c4c:	40020040 	.word	0x40020040
 8002c50:	40020058 	.word	0x40020058
 8002c54:	40020070 	.word	0x40020070
 8002c58:	40020088 	.word	0x40020088
 8002c5c:	400200a0 	.word	0x400200a0
 8002c60:	400200b8 	.word	0x400200b8
 8002c64:	40020410 	.word	0x40020410
 8002c68:	40020428 	.word	0x40020428
 8002c6c:	40020440 	.word	0x40020440
 8002c70:	40020458 	.word	0x40020458
 8002c74:	40020470 	.word	0x40020470
 8002c78:	40020488 	.word	0x40020488
 8002c7c:	400204a0 	.word	0x400204a0
 8002c80:	400204b8 	.word	0x400204b8
 8002c84:	58025408 	.word	0x58025408
 8002c88:	5802541c 	.word	0x5802541c
 8002c8c:	58025430 	.word	0x58025430
 8002c90:	58025444 	.word	0x58025444
 8002c94:	58025458 	.word	0x58025458
 8002c98:	5802546c 	.word	0x5802546c
 8002c9c:	58025480 	.word	0x58025480
 8002ca0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d160      	bne.n	8002d70 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a7f      	ldr	r2, [pc, #508]	; (8002eb0 <HAL_DMA_IRQHandler+0xc74>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d04a      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xb12>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a7d      	ldr	r2, [pc, #500]	; (8002eb4 <HAL_DMA_IRQHandler+0xc78>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d045      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xb12>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a7c      	ldr	r2, [pc, #496]	; (8002eb8 <HAL_DMA_IRQHandler+0xc7c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d040      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xb12>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a7a      	ldr	r2, [pc, #488]	; (8002ebc <HAL_DMA_IRQHandler+0xc80>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d03b      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xb12>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a79      	ldr	r2, [pc, #484]	; (8002ec0 <HAL_DMA_IRQHandler+0xc84>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d036      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xb12>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a77      	ldr	r2, [pc, #476]	; (8002ec4 <HAL_DMA_IRQHandler+0xc88>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d031      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xb12>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a76      	ldr	r2, [pc, #472]	; (8002ec8 <HAL_DMA_IRQHandler+0xc8c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d02c      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xb12>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a74      	ldr	r2, [pc, #464]	; (8002ecc <HAL_DMA_IRQHandler+0xc90>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d027      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xb12>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a73      	ldr	r2, [pc, #460]	; (8002ed0 <HAL_DMA_IRQHandler+0xc94>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d022      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xb12>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a71      	ldr	r2, [pc, #452]	; (8002ed4 <HAL_DMA_IRQHandler+0xc98>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d01d      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xb12>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a70      	ldr	r2, [pc, #448]	; (8002ed8 <HAL_DMA_IRQHandler+0xc9c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d018      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xb12>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a6e      	ldr	r2, [pc, #440]	; (8002edc <HAL_DMA_IRQHandler+0xca0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d013      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xb12>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6d      	ldr	r2, [pc, #436]	; (8002ee0 <HAL_DMA_IRQHandler+0xca4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00e      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xb12>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a6b      	ldr	r2, [pc, #428]	; (8002ee4 <HAL_DMA_IRQHandler+0xca8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d009      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xb12>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a6a      	ldr	r2, [pc, #424]	; (8002ee8 <HAL_DMA_IRQHandler+0xcac>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d004      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xb12>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a68      	ldr	r2, [pc, #416]	; (8002eec <HAL_DMA_IRQHandler+0xcb0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d108      	bne.n	8002d60 <HAL_DMA_IRQHandler+0xb24>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0208 	bic.w	r2, r2, #8
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	e007      	b.n	8002d70 <HAL_DMA_IRQHandler+0xb34>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0204 	bic.w	r2, r2, #4
 8002d6e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8165 	beq.w	8003044 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d82:	e15f      	b.n	8003044 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	409a      	lsls	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80c5 	beq.w	8002f24 <HAL_DMA_IRQHandler+0xce8>
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80bf 	beq.w	8002f24 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	2202      	movs	r2, #2
 8002db0:	409a      	lsls	r2, r3
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d018      	beq.n	8002df2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 813a 	beq.w	8003048 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ddc:	e134      	b.n	8003048 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 8130 	beq.w	8003048 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002df0:	e12a      	b.n	8003048 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f040 8089 	bne.w	8002f10 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a2b      	ldr	r2, [pc, #172]	; (8002eb0 <HAL_DMA_IRQHandler+0xc74>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d04a      	beq.n	8002e9e <HAL_DMA_IRQHandler+0xc62>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a29      	ldr	r2, [pc, #164]	; (8002eb4 <HAL_DMA_IRQHandler+0xc78>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d045      	beq.n	8002e9e <HAL_DMA_IRQHandler+0xc62>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a28      	ldr	r2, [pc, #160]	; (8002eb8 <HAL_DMA_IRQHandler+0xc7c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d040      	beq.n	8002e9e <HAL_DMA_IRQHandler+0xc62>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a26      	ldr	r2, [pc, #152]	; (8002ebc <HAL_DMA_IRQHandler+0xc80>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d03b      	beq.n	8002e9e <HAL_DMA_IRQHandler+0xc62>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a25      	ldr	r2, [pc, #148]	; (8002ec0 <HAL_DMA_IRQHandler+0xc84>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d036      	beq.n	8002e9e <HAL_DMA_IRQHandler+0xc62>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a23      	ldr	r2, [pc, #140]	; (8002ec4 <HAL_DMA_IRQHandler+0xc88>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d031      	beq.n	8002e9e <HAL_DMA_IRQHandler+0xc62>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a22      	ldr	r2, [pc, #136]	; (8002ec8 <HAL_DMA_IRQHandler+0xc8c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d02c      	beq.n	8002e9e <HAL_DMA_IRQHandler+0xc62>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a20      	ldr	r2, [pc, #128]	; (8002ecc <HAL_DMA_IRQHandler+0xc90>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d027      	beq.n	8002e9e <HAL_DMA_IRQHandler+0xc62>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1f      	ldr	r2, [pc, #124]	; (8002ed0 <HAL_DMA_IRQHandler+0xc94>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d022      	beq.n	8002e9e <HAL_DMA_IRQHandler+0xc62>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <HAL_DMA_IRQHandler+0xc98>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d01d      	beq.n	8002e9e <HAL_DMA_IRQHandler+0xc62>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1c      	ldr	r2, [pc, #112]	; (8002ed8 <HAL_DMA_IRQHandler+0xc9c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d018      	beq.n	8002e9e <HAL_DMA_IRQHandler+0xc62>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1a      	ldr	r2, [pc, #104]	; (8002edc <HAL_DMA_IRQHandler+0xca0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_DMA_IRQHandler+0xc62>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a19      	ldr	r2, [pc, #100]	; (8002ee0 <HAL_DMA_IRQHandler+0xca4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00e      	beq.n	8002e9e <HAL_DMA_IRQHandler+0xc62>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a17      	ldr	r2, [pc, #92]	; (8002ee4 <HAL_DMA_IRQHandler+0xca8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d009      	beq.n	8002e9e <HAL_DMA_IRQHandler+0xc62>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a16      	ldr	r2, [pc, #88]	; (8002ee8 <HAL_DMA_IRQHandler+0xcac>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_DMA_IRQHandler+0xc62>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a14      	ldr	r2, [pc, #80]	; (8002eec <HAL_DMA_IRQHandler+0xcb0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d128      	bne.n	8002ef0 <HAL_DMA_IRQHandler+0xcb4>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0214 	bic.w	r2, r2, #20
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	e027      	b.n	8002f00 <HAL_DMA_IRQHandler+0xcc4>
 8002eb0:	40020010 	.word	0x40020010
 8002eb4:	40020028 	.word	0x40020028
 8002eb8:	40020040 	.word	0x40020040
 8002ebc:	40020058 	.word	0x40020058
 8002ec0:	40020070 	.word	0x40020070
 8002ec4:	40020088 	.word	0x40020088
 8002ec8:	400200a0 	.word	0x400200a0
 8002ecc:	400200b8 	.word	0x400200b8
 8002ed0:	40020410 	.word	0x40020410
 8002ed4:	40020428 	.word	0x40020428
 8002ed8:	40020440 	.word	0x40020440
 8002edc:	40020458 	.word	0x40020458
 8002ee0:	40020470 	.word	0x40020470
 8002ee4:	40020488 	.word	0x40020488
 8002ee8:	400204a0 	.word	0x400204a0
 8002eec:	400204b8 	.word	0x400204b8
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 020a 	bic.w	r2, r2, #10
 8002efe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 8097 	beq.w	8003048 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f22:	e091      	b.n	8003048 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f28:	f003 031f 	and.w	r3, r3, #31
 8002f2c:	2208      	movs	r2, #8
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 8088 	beq.w	800304a <HAL_DMA_IRQHandler+0xe0e>
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 8082 	beq.w	800304a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a41      	ldr	r2, [pc, #260]	; (8003050 <HAL_DMA_IRQHandler+0xe14>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d04a      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0xdaa>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a3f      	ldr	r2, [pc, #252]	; (8003054 <HAL_DMA_IRQHandler+0xe18>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d045      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0xdaa>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a3e      	ldr	r2, [pc, #248]	; (8003058 <HAL_DMA_IRQHandler+0xe1c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d040      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0xdaa>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a3c      	ldr	r2, [pc, #240]	; (800305c <HAL_DMA_IRQHandler+0xe20>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d03b      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0xdaa>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a3b      	ldr	r2, [pc, #236]	; (8003060 <HAL_DMA_IRQHandler+0xe24>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d036      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0xdaa>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a39      	ldr	r2, [pc, #228]	; (8003064 <HAL_DMA_IRQHandler+0xe28>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d031      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0xdaa>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a38      	ldr	r2, [pc, #224]	; (8003068 <HAL_DMA_IRQHandler+0xe2c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d02c      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0xdaa>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a36      	ldr	r2, [pc, #216]	; (800306c <HAL_DMA_IRQHandler+0xe30>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d027      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0xdaa>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a35      	ldr	r2, [pc, #212]	; (8003070 <HAL_DMA_IRQHandler+0xe34>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d022      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0xdaa>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a33      	ldr	r2, [pc, #204]	; (8003074 <HAL_DMA_IRQHandler+0xe38>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d01d      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0xdaa>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a32      	ldr	r2, [pc, #200]	; (8003078 <HAL_DMA_IRQHandler+0xe3c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d018      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0xdaa>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a30      	ldr	r2, [pc, #192]	; (800307c <HAL_DMA_IRQHandler+0xe40>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d013      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0xdaa>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2f      	ldr	r2, [pc, #188]	; (8003080 <HAL_DMA_IRQHandler+0xe44>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d00e      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0xdaa>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a2d      	ldr	r2, [pc, #180]	; (8003084 <HAL_DMA_IRQHandler+0xe48>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d009      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0xdaa>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a2c      	ldr	r2, [pc, #176]	; (8003088 <HAL_DMA_IRQHandler+0xe4c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d004      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0xdaa>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a2a      	ldr	r2, [pc, #168]	; (800308c <HAL_DMA_IRQHandler+0xe50>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d108      	bne.n	8002ff8 <HAL_DMA_IRQHandler+0xdbc>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 021c 	bic.w	r2, r2, #28
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	e007      	b.n	8003008 <HAL_DMA_IRQHandler+0xdcc>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 020e 	bic.w	r2, r2, #14
 8003006:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	2201      	movs	r2, #1
 8003012:	409a      	lsls	r2, r3
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003032:	2b00      	cmp	r3, #0
 8003034:	d009      	beq.n	800304a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	4798      	blx	r3
 800303e:	e004      	b.n	800304a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003040:	bf00      	nop
 8003042:	e002      	b.n	800304a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003044:	bf00      	nop
 8003046:	e000      	b.n	800304a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003048:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800304a:	3728      	adds	r7, #40	; 0x28
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40020010 	.word	0x40020010
 8003054:	40020028 	.word	0x40020028
 8003058:	40020040 	.word	0x40020040
 800305c:	40020058 	.word	0x40020058
 8003060:	40020070 	.word	0x40020070
 8003064:	40020088 	.word	0x40020088
 8003068:	400200a0 	.word	0x400200a0
 800306c:	400200b8 	.word	0x400200b8
 8003070:	40020410 	.word	0x40020410
 8003074:	40020428 	.word	0x40020428
 8003078:	40020440 	.word	0x40020440
 800307c:	40020458 	.word	0x40020458
 8003080:	40020470 	.word	0x40020470
 8003084:	40020488 	.word	0x40020488
 8003088:	400204a0 	.word	0x400204a0
 800308c:	400204b8 	.word	0x400204b8

08003090 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
 800309c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a7f      	ldr	r2, [pc, #508]	; (80032ac <DMA_SetConfig+0x21c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d072      	beq.n	800319a <DMA_SetConfig+0x10a>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a7d      	ldr	r2, [pc, #500]	; (80032b0 <DMA_SetConfig+0x220>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d06d      	beq.n	800319a <DMA_SetConfig+0x10a>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7c      	ldr	r2, [pc, #496]	; (80032b4 <DMA_SetConfig+0x224>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d068      	beq.n	800319a <DMA_SetConfig+0x10a>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a7a      	ldr	r2, [pc, #488]	; (80032b8 <DMA_SetConfig+0x228>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d063      	beq.n	800319a <DMA_SetConfig+0x10a>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a79      	ldr	r2, [pc, #484]	; (80032bc <DMA_SetConfig+0x22c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d05e      	beq.n	800319a <DMA_SetConfig+0x10a>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a77      	ldr	r2, [pc, #476]	; (80032c0 <DMA_SetConfig+0x230>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d059      	beq.n	800319a <DMA_SetConfig+0x10a>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a76      	ldr	r2, [pc, #472]	; (80032c4 <DMA_SetConfig+0x234>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d054      	beq.n	800319a <DMA_SetConfig+0x10a>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a74      	ldr	r2, [pc, #464]	; (80032c8 <DMA_SetConfig+0x238>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d04f      	beq.n	800319a <DMA_SetConfig+0x10a>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a73      	ldr	r2, [pc, #460]	; (80032cc <DMA_SetConfig+0x23c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d04a      	beq.n	800319a <DMA_SetConfig+0x10a>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a71      	ldr	r2, [pc, #452]	; (80032d0 <DMA_SetConfig+0x240>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d045      	beq.n	800319a <DMA_SetConfig+0x10a>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a70      	ldr	r2, [pc, #448]	; (80032d4 <DMA_SetConfig+0x244>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d040      	beq.n	800319a <DMA_SetConfig+0x10a>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a6e      	ldr	r2, [pc, #440]	; (80032d8 <DMA_SetConfig+0x248>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d03b      	beq.n	800319a <DMA_SetConfig+0x10a>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6d      	ldr	r2, [pc, #436]	; (80032dc <DMA_SetConfig+0x24c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d036      	beq.n	800319a <DMA_SetConfig+0x10a>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a6b      	ldr	r2, [pc, #428]	; (80032e0 <DMA_SetConfig+0x250>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d031      	beq.n	800319a <DMA_SetConfig+0x10a>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a6a      	ldr	r2, [pc, #424]	; (80032e4 <DMA_SetConfig+0x254>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d02c      	beq.n	800319a <DMA_SetConfig+0x10a>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a68      	ldr	r2, [pc, #416]	; (80032e8 <DMA_SetConfig+0x258>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d027      	beq.n	800319a <DMA_SetConfig+0x10a>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a67      	ldr	r2, [pc, #412]	; (80032ec <DMA_SetConfig+0x25c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d022      	beq.n	800319a <DMA_SetConfig+0x10a>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a65      	ldr	r2, [pc, #404]	; (80032f0 <DMA_SetConfig+0x260>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d01d      	beq.n	800319a <DMA_SetConfig+0x10a>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a64      	ldr	r2, [pc, #400]	; (80032f4 <DMA_SetConfig+0x264>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d018      	beq.n	800319a <DMA_SetConfig+0x10a>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a62      	ldr	r2, [pc, #392]	; (80032f8 <DMA_SetConfig+0x268>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d013      	beq.n	800319a <DMA_SetConfig+0x10a>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a61      	ldr	r2, [pc, #388]	; (80032fc <DMA_SetConfig+0x26c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00e      	beq.n	800319a <DMA_SetConfig+0x10a>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a5f      	ldr	r2, [pc, #380]	; (8003300 <DMA_SetConfig+0x270>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d009      	beq.n	800319a <DMA_SetConfig+0x10a>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a5e      	ldr	r2, [pc, #376]	; (8003304 <DMA_SetConfig+0x274>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d004      	beq.n	800319a <DMA_SetConfig+0x10a>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a5c      	ldr	r2, [pc, #368]	; (8003308 <DMA_SetConfig+0x278>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d101      	bne.n	800319e <DMA_SetConfig+0x10e>
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <DMA_SetConfig+0x110>
 800319e:	2300      	movs	r3, #0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00d      	beq.n	80031c0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80031ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d004      	beq.n	80031c0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80031be:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a39      	ldr	r2, [pc, #228]	; (80032ac <DMA_SetConfig+0x21c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d04a      	beq.n	8003260 <DMA_SetConfig+0x1d0>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a38      	ldr	r2, [pc, #224]	; (80032b0 <DMA_SetConfig+0x220>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d045      	beq.n	8003260 <DMA_SetConfig+0x1d0>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a36      	ldr	r2, [pc, #216]	; (80032b4 <DMA_SetConfig+0x224>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d040      	beq.n	8003260 <DMA_SetConfig+0x1d0>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a35      	ldr	r2, [pc, #212]	; (80032b8 <DMA_SetConfig+0x228>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d03b      	beq.n	8003260 <DMA_SetConfig+0x1d0>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a33      	ldr	r2, [pc, #204]	; (80032bc <DMA_SetConfig+0x22c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d036      	beq.n	8003260 <DMA_SetConfig+0x1d0>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a32      	ldr	r2, [pc, #200]	; (80032c0 <DMA_SetConfig+0x230>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d031      	beq.n	8003260 <DMA_SetConfig+0x1d0>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a30      	ldr	r2, [pc, #192]	; (80032c4 <DMA_SetConfig+0x234>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d02c      	beq.n	8003260 <DMA_SetConfig+0x1d0>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a2f      	ldr	r2, [pc, #188]	; (80032c8 <DMA_SetConfig+0x238>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d027      	beq.n	8003260 <DMA_SetConfig+0x1d0>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a2d      	ldr	r2, [pc, #180]	; (80032cc <DMA_SetConfig+0x23c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d022      	beq.n	8003260 <DMA_SetConfig+0x1d0>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a2c      	ldr	r2, [pc, #176]	; (80032d0 <DMA_SetConfig+0x240>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d01d      	beq.n	8003260 <DMA_SetConfig+0x1d0>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a2a      	ldr	r2, [pc, #168]	; (80032d4 <DMA_SetConfig+0x244>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d018      	beq.n	8003260 <DMA_SetConfig+0x1d0>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a29      	ldr	r2, [pc, #164]	; (80032d8 <DMA_SetConfig+0x248>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d013      	beq.n	8003260 <DMA_SetConfig+0x1d0>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a27      	ldr	r2, [pc, #156]	; (80032dc <DMA_SetConfig+0x24c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00e      	beq.n	8003260 <DMA_SetConfig+0x1d0>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a26      	ldr	r2, [pc, #152]	; (80032e0 <DMA_SetConfig+0x250>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d009      	beq.n	8003260 <DMA_SetConfig+0x1d0>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a24      	ldr	r2, [pc, #144]	; (80032e4 <DMA_SetConfig+0x254>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d004      	beq.n	8003260 <DMA_SetConfig+0x1d0>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a23      	ldr	r2, [pc, #140]	; (80032e8 <DMA_SetConfig+0x258>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d101      	bne.n	8003264 <DMA_SetConfig+0x1d4>
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <DMA_SetConfig+0x1d6>
 8003264:	2300      	movs	r3, #0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d059      	beq.n	800331e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326e:	f003 031f 	and.w	r3, r3, #31
 8003272:	223f      	movs	r2, #63	; 0x3f
 8003274:	409a      	lsls	r2, r3
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003288:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b40      	cmp	r3, #64	; 0x40
 8003298:	d138      	bne.n	800330c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80032aa:	e086      	b.n	80033ba <DMA_SetConfig+0x32a>
 80032ac:	40020010 	.word	0x40020010
 80032b0:	40020028 	.word	0x40020028
 80032b4:	40020040 	.word	0x40020040
 80032b8:	40020058 	.word	0x40020058
 80032bc:	40020070 	.word	0x40020070
 80032c0:	40020088 	.word	0x40020088
 80032c4:	400200a0 	.word	0x400200a0
 80032c8:	400200b8 	.word	0x400200b8
 80032cc:	40020410 	.word	0x40020410
 80032d0:	40020428 	.word	0x40020428
 80032d4:	40020440 	.word	0x40020440
 80032d8:	40020458 	.word	0x40020458
 80032dc:	40020470 	.word	0x40020470
 80032e0:	40020488 	.word	0x40020488
 80032e4:	400204a0 	.word	0x400204a0
 80032e8:	400204b8 	.word	0x400204b8
 80032ec:	58025408 	.word	0x58025408
 80032f0:	5802541c 	.word	0x5802541c
 80032f4:	58025430 	.word	0x58025430
 80032f8:	58025444 	.word	0x58025444
 80032fc:	58025458 	.word	0x58025458
 8003300:	5802546c 	.word	0x5802546c
 8003304:	58025480 	.word	0x58025480
 8003308:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	60da      	str	r2, [r3, #12]
}
 800331c:	e04d      	b.n	80033ba <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a29      	ldr	r2, [pc, #164]	; (80033c8 <DMA_SetConfig+0x338>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d022      	beq.n	800336e <DMA_SetConfig+0x2de>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a27      	ldr	r2, [pc, #156]	; (80033cc <DMA_SetConfig+0x33c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d01d      	beq.n	800336e <DMA_SetConfig+0x2de>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a26      	ldr	r2, [pc, #152]	; (80033d0 <DMA_SetConfig+0x340>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d018      	beq.n	800336e <DMA_SetConfig+0x2de>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a24      	ldr	r2, [pc, #144]	; (80033d4 <DMA_SetConfig+0x344>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d013      	beq.n	800336e <DMA_SetConfig+0x2de>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a23      	ldr	r2, [pc, #140]	; (80033d8 <DMA_SetConfig+0x348>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00e      	beq.n	800336e <DMA_SetConfig+0x2de>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a21      	ldr	r2, [pc, #132]	; (80033dc <DMA_SetConfig+0x34c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d009      	beq.n	800336e <DMA_SetConfig+0x2de>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a20      	ldr	r2, [pc, #128]	; (80033e0 <DMA_SetConfig+0x350>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d004      	beq.n	800336e <DMA_SetConfig+0x2de>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a1e      	ldr	r2, [pc, #120]	; (80033e4 <DMA_SetConfig+0x354>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d101      	bne.n	8003372 <DMA_SetConfig+0x2e2>
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <DMA_SetConfig+0x2e4>
 8003372:	2300      	movs	r3, #0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d020      	beq.n	80033ba <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2201      	movs	r2, #1
 8003382:	409a      	lsls	r2, r3
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b40      	cmp	r3, #64	; 0x40
 8003396:	d108      	bne.n	80033aa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	60da      	str	r2, [r3, #12]
}
 80033a8:	e007      	b.n	80033ba <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	60da      	str	r2, [r3, #12]
}
 80033ba:	bf00      	nop
 80033bc:	371c      	adds	r7, #28
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	58025408 	.word	0x58025408
 80033cc:	5802541c 	.word	0x5802541c
 80033d0:	58025430 	.word	0x58025430
 80033d4:	58025444 	.word	0x58025444
 80033d8:	58025458 	.word	0x58025458
 80033dc:	5802546c 	.word	0x5802546c
 80033e0:	58025480 	.word	0x58025480
 80033e4:	58025494 	.word	0x58025494

080033e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a42      	ldr	r2, [pc, #264]	; (8003500 <DMA_CalcBaseAndBitshift+0x118>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d04a      	beq.n	8003490 <DMA_CalcBaseAndBitshift+0xa8>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a41      	ldr	r2, [pc, #260]	; (8003504 <DMA_CalcBaseAndBitshift+0x11c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d045      	beq.n	8003490 <DMA_CalcBaseAndBitshift+0xa8>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a3f      	ldr	r2, [pc, #252]	; (8003508 <DMA_CalcBaseAndBitshift+0x120>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d040      	beq.n	8003490 <DMA_CalcBaseAndBitshift+0xa8>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a3e      	ldr	r2, [pc, #248]	; (800350c <DMA_CalcBaseAndBitshift+0x124>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d03b      	beq.n	8003490 <DMA_CalcBaseAndBitshift+0xa8>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a3c      	ldr	r2, [pc, #240]	; (8003510 <DMA_CalcBaseAndBitshift+0x128>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d036      	beq.n	8003490 <DMA_CalcBaseAndBitshift+0xa8>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a3b      	ldr	r2, [pc, #236]	; (8003514 <DMA_CalcBaseAndBitshift+0x12c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d031      	beq.n	8003490 <DMA_CalcBaseAndBitshift+0xa8>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a39      	ldr	r2, [pc, #228]	; (8003518 <DMA_CalcBaseAndBitshift+0x130>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d02c      	beq.n	8003490 <DMA_CalcBaseAndBitshift+0xa8>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a38      	ldr	r2, [pc, #224]	; (800351c <DMA_CalcBaseAndBitshift+0x134>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d027      	beq.n	8003490 <DMA_CalcBaseAndBitshift+0xa8>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a36      	ldr	r2, [pc, #216]	; (8003520 <DMA_CalcBaseAndBitshift+0x138>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d022      	beq.n	8003490 <DMA_CalcBaseAndBitshift+0xa8>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a35      	ldr	r2, [pc, #212]	; (8003524 <DMA_CalcBaseAndBitshift+0x13c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d01d      	beq.n	8003490 <DMA_CalcBaseAndBitshift+0xa8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a33      	ldr	r2, [pc, #204]	; (8003528 <DMA_CalcBaseAndBitshift+0x140>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d018      	beq.n	8003490 <DMA_CalcBaseAndBitshift+0xa8>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a32      	ldr	r2, [pc, #200]	; (800352c <DMA_CalcBaseAndBitshift+0x144>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d013      	beq.n	8003490 <DMA_CalcBaseAndBitshift+0xa8>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a30      	ldr	r2, [pc, #192]	; (8003530 <DMA_CalcBaseAndBitshift+0x148>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00e      	beq.n	8003490 <DMA_CalcBaseAndBitshift+0xa8>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a2f      	ldr	r2, [pc, #188]	; (8003534 <DMA_CalcBaseAndBitshift+0x14c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d009      	beq.n	8003490 <DMA_CalcBaseAndBitshift+0xa8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a2d      	ldr	r2, [pc, #180]	; (8003538 <DMA_CalcBaseAndBitshift+0x150>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d004      	beq.n	8003490 <DMA_CalcBaseAndBitshift+0xa8>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a2c      	ldr	r2, [pc, #176]	; (800353c <DMA_CalcBaseAndBitshift+0x154>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d101      	bne.n	8003494 <DMA_CalcBaseAndBitshift+0xac>
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <DMA_CalcBaseAndBitshift+0xae>
 8003494:	2300      	movs	r3, #0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d024      	beq.n	80034e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	3b10      	subs	r3, #16
 80034a2:	4a27      	ldr	r2, [pc, #156]	; (8003540 <DMA_CalcBaseAndBitshift+0x158>)
 80034a4:	fba2 2303 	umull	r2, r3, r2, r3
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	4a24      	ldr	r2, [pc, #144]	; (8003544 <DMA_CalcBaseAndBitshift+0x15c>)
 80034b4:	5cd3      	ldrb	r3, [r2, r3]
 80034b6:	461a      	mov	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d908      	bls.n	80034d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <DMA_CalcBaseAndBitshift+0x160>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	1d1a      	adds	r2, r3, #4
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	659a      	str	r2, [r3, #88]	; 0x58
 80034d2:	e00d      	b.n	80034f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <DMA_CalcBaseAndBitshift+0x160>)
 80034dc:	4013      	ands	r3, r2
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6593      	str	r3, [r2, #88]	; 0x58
 80034e2:	e005      	b.n	80034f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40020010 	.word	0x40020010
 8003504:	40020028 	.word	0x40020028
 8003508:	40020040 	.word	0x40020040
 800350c:	40020058 	.word	0x40020058
 8003510:	40020070 	.word	0x40020070
 8003514:	40020088 	.word	0x40020088
 8003518:	400200a0 	.word	0x400200a0
 800351c:	400200b8 	.word	0x400200b8
 8003520:	40020410 	.word	0x40020410
 8003524:	40020428 	.word	0x40020428
 8003528:	40020440 	.word	0x40020440
 800352c:	40020458 	.word	0x40020458
 8003530:	40020470 	.word	0x40020470
 8003534:	40020488 	.word	0x40020488
 8003538:	400204a0 	.word	0x400204a0
 800353c:	400204b8 	.word	0x400204b8
 8003540:	aaaaaaab 	.word	0xaaaaaaab
 8003544:	080098c8 	.word	0x080098c8
 8003548:	fffffc00 	.word	0xfffffc00

0800354c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d120      	bne.n	80035a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	2b03      	cmp	r3, #3
 8003566:	d858      	bhi.n	800361a <DMA_CheckFifoParam+0xce>
 8003568:	a201      	add	r2, pc, #4	; (adr r2, 8003570 <DMA_CheckFifoParam+0x24>)
 800356a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356e:	bf00      	nop
 8003570:	08003581 	.word	0x08003581
 8003574:	08003593 	.word	0x08003593
 8003578:	08003581 	.word	0x08003581
 800357c:	0800361b 	.word	0x0800361b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d048      	beq.n	800361e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003590:	e045      	b.n	800361e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003596:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800359a:	d142      	bne.n	8003622 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80035a0:	e03f      	b.n	8003622 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035aa:	d123      	bne.n	80035f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d838      	bhi.n	8003626 <DMA_CheckFifoParam+0xda>
 80035b4:	a201      	add	r2, pc, #4	; (adr r2, 80035bc <DMA_CheckFifoParam+0x70>)
 80035b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ba:	bf00      	nop
 80035bc:	080035cd 	.word	0x080035cd
 80035c0:	080035d3 	.word	0x080035d3
 80035c4:	080035cd 	.word	0x080035cd
 80035c8:	080035e5 	.word	0x080035e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	73fb      	strb	r3, [r7, #15]
        break;
 80035d0:	e030      	b.n	8003634 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d025      	beq.n	800362a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80035e2:	e022      	b.n	800362a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035ec:	d11f      	bne.n	800362e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80035f2:	e01c      	b.n	800362e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d902      	bls.n	8003602 <DMA_CheckFifoParam+0xb6>
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d003      	beq.n	8003608 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003600:	e018      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
        break;
 8003606:	e015      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00e      	beq.n	8003632 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
    break;
 8003618:	e00b      	b.n	8003632 <DMA_CheckFifoParam+0xe6>
        break;
 800361a:	bf00      	nop
 800361c:	e00a      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
        break;
 800361e:	bf00      	nop
 8003620:	e008      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
        break;
 8003622:	bf00      	nop
 8003624:	e006      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
        break;
 8003626:	bf00      	nop
 8003628:	e004      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
        break;
 800362a:	bf00      	nop
 800362c:	e002      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
        break;
 800362e:	bf00      	nop
 8003630:	e000      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
    break;
 8003632:	bf00      	nop
    }
  }

  return status;
 8003634:	7bfb      	ldrb	r3, [r7, #15]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop

08003644 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a38      	ldr	r2, [pc, #224]	; (8003738 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d022      	beq.n	80036a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a36      	ldr	r2, [pc, #216]	; (800373c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01d      	beq.n	80036a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a35      	ldr	r2, [pc, #212]	; (8003740 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d018      	beq.n	80036a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a33      	ldr	r2, [pc, #204]	; (8003744 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a32      	ldr	r2, [pc, #200]	; (8003748 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00e      	beq.n	80036a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a30      	ldr	r2, [pc, #192]	; (800374c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d009      	beq.n	80036a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a2f      	ldr	r2, [pc, #188]	; (8003750 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d004      	beq.n	80036a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a2d      	ldr	r2, [pc, #180]	; (8003754 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d101      	bne.n	80036a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80036a6:	2300      	movs	r3, #0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d01a      	beq.n	80036e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	3b08      	subs	r3, #8
 80036b4:	4a28      	ldr	r2, [pc, #160]	; (8003758 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4b26      	ldr	r3, [pc, #152]	; (800375c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	461a      	mov	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a24      	ldr	r2, [pc, #144]	; (8003760 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80036d0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	2201      	movs	r2, #1
 80036da:	409a      	lsls	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80036e0:	e024      	b.n	800372c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	3b10      	subs	r3, #16
 80036ea:	4a1e      	ldr	r2, [pc, #120]	; (8003764 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80036ec:	fba2 2303 	umull	r2, r3, r2, r3
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4a1c      	ldr	r2, [pc, #112]	; (8003768 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d806      	bhi.n	800370a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4a1b      	ldr	r2, [pc, #108]	; (800376c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d902      	bls.n	800370a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	3308      	adds	r3, #8
 8003708:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4b18      	ldr	r3, [pc, #96]	; (8003770 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	461a      	mov	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a16      	ldr	r2, [pc, #88]	; (8003774 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800371c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	2201      	movs	r2, #1
 8003726:	409a      	lsls	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	58025408 	.word	0x58025408
 800373c:	5802541c 	.word	0x5802541c
 8003740:	58025430 	.word	0x58025430
 8003744:	58025444 	.word	0x58025444
 8003748:	58025458 	.word	0x58025458
 800374c:	5802546c 	.word	0x5802546c
 8003750:	58025480 	.word	0x58025480
 8003754:	58025494 	.word	0x58025494
 8003758:	cccccccd 	.word	0xcccccccd
 800375c:	16009600 	.word	0x16009600
 8003760:	58025880 	.word	0x58025880
 8003764:	aaaaaaab 	.word	0xaaaaaaab
 8003768:	400204b8 	.word	0x400204b8
 800376c:	4002040f 	.word	0x4002040f
 8003770:	10008200 	.word	0x10008200
 8003774:	40020880 	.word	0x40020880

08003778 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d04a      	beq.n	8003824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b08      	cmp	r3, #8
 8003792:	d847      	bhi.n	8003824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a25      	ldr	r2, [pc, #148]	; (8003830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d022      	beq.n	80037e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a24      	ldr	r2, [pc, #144]	; (8003834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d01d      	beq.n	80037e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a22      	ldr	r2, [pc, #136]	; (8003838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d018      	beq.n	80037e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a21      	ldr	r2, [pc, #132]	; (800383c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d013      	beq.n	80037e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a1f      	ldr	r2, [pc, #124]	; (8003840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00e      	beq.n	80037e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1e      	ldr	r2, [pc, #120]	; (8003844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d009      	beq.n	80037e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a1c      	ldr	r2, [pc, #112]	; (8003848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d004      	beq.n	80037e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1b      	ldr	r2, [pc, #108]	; (800384c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d101      	bne.n	80037e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80037e8:	2300      	movs	r3, #0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4b17      	ldr	r3, [pc, #92]	; (8003850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	461a      	mov	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a15      	ldr	r2, [pc, #84]	; (8003854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003800:	671a      	str	r2, [r3, #112]	; 0x70
 8003802:	e009      	b.n	8003818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	4b14      	ldr	r3, [pc, #80]	; (8003858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	461a      	mov	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a11      	ldr	r2, [pc, #68]	; (800385c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003816:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	3b01      	subs	r3, #1
 800381c:	2201      	movs	r2, #1
 800381e:	409a      	lsls	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	58025408 	.word	0x58025408
 8003834:	5802541c 	.word	0x5802541c
 8003838:	58025430 	.word	0x58025430
 800383c:	58025444 	.word	0x58025444
 8003840:	58025458 	.word	0x58025458
 8003844:	5802546c 	.word	0x5802546c
 8003848:	58025480 	.word	0x58025480
 800384c:	58025494 	.word	0x58025494
 8003850:	1600963f 	.word	0x1600963f
 8003854:	58025940 	.word	0x58025940
 8003858:	1000823f 	.word	0x1000823f
 800385c:	40020940 	.word	0x40020940

08003860 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003860:	b480      	push	{r7}
 8003862:	b089      	sub	sp, #36	; 0x24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800386e:	4b89      	ldr	r3, [pc, #548]	; (8003a94 <HAL_GPIO_Init+0x234>)
 8003870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003872:	e194      	b.n	8003b9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	2101      	movs	r1, #1
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	fa01 f303 	lsl.w	r3, r1, r3
 8003880:	4013      	ands	r3, r2
 8003882:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8186 	beq.w	8003b98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 0303 	and.w	r3, r3, #3
 8003894:	2b01      	cmp	r3, #1
 8003896:	d005      	beq.n	80038a4 <HAL_GPIO_Init+0x44>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d130      	bne.n	8003906 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	2203      	movs	r2, #3
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4013      	ands	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038da:	2201      	movs	r2, #1
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	43db      	mvns	r3, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4013      	ands	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	091b      	lsrs	r3, r3, #4
 80038f0:	f003 0201 	and.w	r2, r3, #1
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b03      	cmp	r3, #3
 8003910:	d017      	beq.n	8003942 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	2203      	movs	r2, #3
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43db      	mvns	r3, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4013      	ands	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4313      	orrs	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d123      	bne.n	8003996 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	08da      	lsrs	r2, r3, #3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3208      	adds	r2, #8
 8003956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	220f      	movs	r2, #15
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4313      	orrs	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	08da      	lsrs	r2, r3, #3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3208      	adds	r2, #8
 8003990:	69b9      	ldr	r1, [r7, #24]
 8003992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	2203      	movs	r2, #3
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 0203 	and.w	r2, r3, #3
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80e0 	beq.w	8003b98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d8:	4b2f      	ldr	r3, [pc, #188]	; (8003a98 <HAL_GPIO_Init+0x238>)
 80039da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039de:	4a2e      	ldr	r2, [pc, #184]	; (8003a98 <HAL_GPIO_Init+0x238>)
 80039e0:	f043 0302 	orr.w	r3, r3, #2
 80039e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80039e8:	4b2b      	ldr	r3, [pc, #172]	; (8003a98 <HAL_GPIO_Init+0x238>)
 80039ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039f6:	4a29      	ldr	r2, [pc, #164]	; (8003a9c <HAL_GPIO_Init+0x23c>)
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	089b      	lsrs	r3, r3, #2
 80039fc:	3302      	adds	r3, #2
 80039fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	220f      	movs	r2, #15
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43db      	mvns	r3, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4013      	ands	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a20      	ldr	r2, [pc, #128]	; (8003aa0 <HAL_GPIO_Init+0x240>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d052      	beq.n	8003ac8 <HAL_GPIO_Init+0x268>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a1f      	ldr	r2, [pc, #124]	; (8003aa4 <HAL_GPIO_Init+0x244>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d031      	beq.n	8003a8e <HAL_GPIO_Init+0x22e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a1e      	ldr	r2, [pc, #120]	; (8003aa8 <HAL_GPIO_Init+0x248>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d02b      	beq.n	8003a8a <HAL_GPIO_Init+0x22a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a1d      	ldr	r2, [pc, #116]	; (8003aac <HAL_GPIO_Init+0x24c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d025      	beq.n	8003a86 <HAL_GPIO_Init+0x226>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a1c      	ldr	r2, [pc, #112]	; (8003ab0 <HAL_GPIO_Init+0x250>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d01f      	beq.n	8003a82 <HAL_GPIO_Init+0x222>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a1b      	ldr	r2, [pc, #108]	; (8003ab4 <HAL_GPIO_Init+0x254>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d019      	beq.n	8003a7e <HAL_GPIO_Init+0x21e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a1a      	ldr	r2, [pc, #104]	; (8003ab8 <HAL_GPIO_Init+0x258>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d013      	beq.n	8003a7a <HAL_GPIO_Init+0x21a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a19      	ldr	r2, [pc, #100]	; (8003abc <HAL_GPIO_Init+0x25c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00d      	beq.n	8003a76 <HAL_GPIO_Init+0x216>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <HAL_GPIO_Init+0x260>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d007      	beq.n	8003a72 <HAL_GPIO_Init+0x212>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a17      	ldr	r2, [pc, #92]	; (8003ac4 <HAL_GPIO_Init+0x264>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d101      	bne.n	8003a6e <HAL_GPIO_Init+0x20e>
 8003a6a:	2309      	movs	r3, #9
 8003a6c:	e02d      	b.n	8003aca <HAL_GPIO_Init+0x26a>
 8003a6e:	230a      	movs	r3, #10
 8003a70:	e02b      	b.n	8003aca <HAL_GPIO_Init+0x26a>
 8003a72:	2308      	movs	r3, #8
 8003a74:	e029      	b.n	8003aca <HAL_GPIO_Init+0x26a>
 8003a76:	2307      	movs	r3, #7
 8003a78:	e027      	b.n	8003aca <HAL_GPIO_Init+0x26a>
 8003a7a:	2306      	movs	r3, #6
 8003a7c:	e025      	b.n	8003aca <HAL_GPIO_Init+0x26a>
 8003a7e:	2305      	movs	r3, #5
 8003a80:	e023      	b.n	8003aca <HAL_GPIO_Init+0x26a>
 8003a82:	2304      	movs	r3, #4
 8003a84:	e021      	b.n	8003aca <HAL_GPIO_Init+0x26a>
 8003a86:	2303      	movs	r3, #3
 8003a88:	e01f      	b.n	8003aca <HAL_GPIO_Init+0x26a>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e01d      	b.n	8003aca <HAL_GPIO_Init+0x26a>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e01b      	b.n	8003aca <HAL_GPIO_Init+0x26a>
 8003a92:	bf00      	nop
 8003a94:	58000080 	.word	0x58000080
 8003a98:	58024400 	.word	0x58024400
 8003a9c:	58000400 	.word	0x58000400
 8003aa0:	58020000 	.word	0x58020000
 8003aa4:	58020400 	.word	0x58020400
 8003aa8:	58020800 	.word	0x58020800
 8003aac:	58020c00 	.word	0x58020c00
 8003ab0:	58021000 	.word	0x58021000
 8003ab4:	58021400 	.word	0x58021400
 8003ab8:	58021800 	.word	0x58021800
 8003abc:	58021c00 	.word	0x58021c00
 8003ac0:	58022000 	.word	0x58022000
 8003ac4:	58022400 	.word	0x58022400
 8003ac8:	2300      	movs	r3, #0
 8003aca:	69fa      	ldr	r2, [r7, #28]
 8003acc:	f002 0203 	and.w	r2, r2, #3
 8003ad0:	0092      	lsls	r2, r2, #2
 8003ad2:	4093      	lsls	r3, r2
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ada:	4938      	ldr	r1, [pc, #224]	; (8003bbc <HAL_GPIO_Init+0x35c>)
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	089b      	lsrs	r3, r3, #2
 8003ae0:	3302      	adds	r3, #2
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	43db      	mvns	r3, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4013      	ands	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	43db      	mvns	r3, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f47f ae63 	bne.w	8003874 <HAL_GPIO_Init+0x14>
  }
}
 8003bae:	bf00      	nop
 8003bb0:	bf00      	nop
 8003bb2:	3724      	adds	r7, #36	; 0x24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	58000400 	.word	0x58000400

08003bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	807b      	strh	r3, [r7, #2]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bd0:	787b      	ldrb	r3, [r7, #1]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bd6:	887a      	ldrh	r2, [r7, #2]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003bdc:	e003      	b.n	8003be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003bde:	887b      	ldrh	r3, [r7, #2]
 8003be0:	041a      	lsls	r2, r3, #16
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	619a      	str	r2, [r3, #24]
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003bfc:	4a08      	ldr	r2, [pc, #32]	; (8003c20 <HAL_HSEM_FastTake+0x2c>)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3320      	adds	r3, #32
 8003c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c06:	4a07      	ldr	r2, [pc, #28]	; (8003c24 <HAL_HSEM_FastTake+0x30>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d101      	bne.n	8003c10 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	e000      	b.n	8003c12 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	58026400 	.word	0x58026400
 8003c24:	80000300 	.word	0x80000300

08003c28 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003c32:	4906      	ldr	r1, [pc, #24]	; (8003c4c <HAL_HSEM_Release+0x24>)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	58026400 	.word	0x58026400

08003c50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e0fe      	b.n	8003e60 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fd fa54 	bl	8001124 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2203      	movs	r2, #3
 8003c80:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f005 fb47 	bl	800931c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	7c1a      	ldrb	r2, [r3, #16]
 8003c96:	f88d 2000 	strb.w	r2, [sp]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c9e:	f005 facb 	bl	8009238 <USB_CoreInit>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0d5      	b.n	8003e60 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f005 fb3f 	bl	800933e <USB_SetCurrentMode>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d005      	beq.n	8003cd2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e0c6      	b.n	8003e60 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	73fb      	strb	r3, [r7, #15]
 8003cd6:	e04a      	b.n	8003d6e <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003cd8:	7bfa      	ldrb	r2, [r7, #15]
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	3315      	adds	r3, #21
 8003ce8:	2201      	movs	r2, #1
 8003cea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003cec:	7bfa      	ldrb	r2, [r7, #15]
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	3314      	adds	r3, #20
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d00:	7bfa      	ldrb	r2, [r7, #15]
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	b298      	uxth	r0, r3
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	332e      	adds	r3, #46	; 0x2e
 8003d14:	4602      	mov	r2, r0
 8003d16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d18:	7bfa      	ldrb	r2, [r7, #15]
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	3318      	adds	r3, #24
 8003d28:	2200      	movs	r2, #0
 8003d2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d2c:	7bfa      	ldrb	r2, [r7, #15]
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	4613      	mov	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	331c      	adds	r3, #28
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d40:	7bfa      	ldrb	r2, [r7, #15]
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	3320      	adds	r3, #32
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d54:	7bfa      	ldrb	r2, [r7, #15]
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	3324      	adds	r3, #36	; 0x24
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	73fb      	strb	r3, [r7, #15]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	791b      	ldrb	r3, [r3, #4]
 8003d72:	7bfa      	ldrb	r2, [r7, #15]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d3af      	bcc.n	8003cd8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d78:	2300      	movs	r3, #0
 8003d7a:	73fb      	strb	r3, [r7, #15]
 8003d7c:	e044      	b.n	8003e08 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d7e:	7bfa      	ldrb	r2, [r7, #15]
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003d90:	2200      	movs	r2, #0
 8003d92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d94:	7bfa      	ldrb	r2, [r7, #15]
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003da6:	7bfa      	ldrb	r2, [r7, #15]
 8003da8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003daa:	7bfa      	ldrb	r2, [r7, #15]
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003dc0:	7bfa      	ldrb	r2, [r7, #15]
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	4413      	add	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003dd6:	7bfa      	ldrb	r2, [r7, #15]
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003dec:	7bfa      	ldrb	r2, [r7, #15]
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	3301      	adds	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	791b      	ldrb	r3, [r3, #4]
 8003e0c:	7bfa      	ldrb	r2, [r7, #15]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d3b5      	bcc.n	8003d7e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	7c1a      	ldrb	r2, [r3, #16]
 8003e1a:	f88d 2000 	strb.w	r2, [sp]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e22:	f005 fad9 	bl	80093d8 <USB_DevInit>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e013      	b.n	8003e60 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	7b1b      	ldrb	r3, [r3, #12]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d102      	bne.n	8003e54 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f80a 	bl	8003e68 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f005 fc94 	bl	8009786 <USB_DevDisconnect>

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e96:	4b05      	ldr	r3, [pc, #20]	; (8003eac <HAL_PCDEx_ActivateLPM+0x44>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	10000003 	.word	0x10000003

08003eb0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003eb8:	4b29      	ldr	r3, [pc, #164]	; (8003f60 <HAL_PWREx_ConfigSupply+0xb0>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	2b06      	cmp	r3, #6
 8003ec2:	d00a      	beq.n	8003eda <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003ec4:	4b26      	ldr	r3, [pc, #152]	; (8003f60 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d001      	beq.n	8003ed6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e040      	b.n	8003f58 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e03e      	b.n	8003f58 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003eda:	4b21      	ldr	r3, [pc, #132]	; (8003f60 <HAL_PWREx_ConfigSupply+0xb0>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003ee2:	491f      	ldr	r1, [pc, #124]	; (8003f60 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003eea:	f7fd fa95 	bl	8001418 <HAL_GetTick>
 8003eee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ef0:	e009      	b.n	8003f06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ef2:	f7fd fa91 	bl	8001418 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f00:	d901      	bls.n	8003f06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e028      	b.n	8003f58 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f06:	4b16      	ldr	r3, [pc, #88]	; (8003f60 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f12:	d1ee      	bne.n	8003ef2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b1e      	cmp	r3, #30
 8003f18:	d008      	beq.n	8003f2c <HAL_PWREx_ConfigSupply+0x7c>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b2e      	cmp	r3, #46	; 0x2e
 8003f1e:	d005      	beq.n	8003f2c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b1d      	cmp	r3, #29
 8003f24:	d002      	beq.n	8003f2c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b2d      	cmp	r3, #45	; 0x2d
 8003f2a:	d114      	bne.n	8003f56 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003f2c:	f7fd fa74 	bl	8001418 <HAL_GetTick>
 8003f30:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003f32:	e009      	b.n	8003f48 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f34:	f7fd fa70 	bl	8001418 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f42:	d901      	bls.n	8003f48 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e007      	b.n	8003f58 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003f48:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f54:	d1ee      	bne.n	8003f34 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	58024800 	.word	0x58024800

08003f64 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4a04      	ldr	r2, [pc, #16]	; (8003f80 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f72:	60d3      	str	r3, [r2, #12]
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	58024800 	.word	0x58024800

08003f84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08c      	sub	sp, #48	; 0x30
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d102      	bne.n	8003f98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	f000 bc48 	b.w	8004828 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 8088 	beq.w	80040b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fa6:	4b99      	ldr	r3, [pc, #612]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fb0:	4b96      	ldr	r3, [pc, #600]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	2b10      	cmp	r3, #16
 8003fba:	d007      	beq.n	8003fcc <HAL_RCC_OscConfig+0x48>
 8003fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbe:	2b18      	cmp	r3, #24
 8003fc0:	d111      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x62>
 8003fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc4:	f003 0303 	and.w	r3, r3, #3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d10c      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fcc:	4b8f      	ldr	r3, [pc, #572]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d06d      	beq.n	80040b4 <HAL_RCC_OscConfig+0x130>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d169      	bne.n	80040b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f000 bc21 	b.w	8004828 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fee:	d106      	bne.n	8003ffe <HAL_RCC_OscConfig+0x7a>
 8003ff0:	4b86      	ldr	r3, [pc, #536]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a85      	ldr	r2, [pc, #532]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8003ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	e02e      	b.n	800405c <HAL_RCC_OscConfig+0xd8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10c      	bne.n	8004020 <HAL_RCC_OscConfig+0x9c>
 8004006:	4b81      	ldr	r3, [pc, #516]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a80      	ldr	r2, [pc, #512]	; (800420c <HAL_RCC_OscConfig+0x288>)
 800400c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	4b7e      	ldr	r3, [pc, #504]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a7d      	ldr	r2, [pc, #500]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8004018:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	e01d      	b.n	800405c <HAL_RCC_OscConfig+0xd8>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004028:	d10c      	bne.n	8004044 <HAL_RCC_OscConfig+0xc0>
 800402a:	4b78      	ldr	r3, [pc, #480]	; (800420c <HAL_RCC_OscConfig+0x288>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a77      	ldr	r2, [pc, #476]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8004030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	4b75      	ldr	r3, [pc, #468]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a74      	ldr	r2, [pc, #464]	; (800420c <HAL_RCC_OscConfig+0x288>)
 800403c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e00b      	b.n	800405c <HAL_RCC_OscConfig+0xd8>
 8004044:	4b71      	ldr	r3, [pc, #452]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a70      	ldr	r2, [pc, #448]	; (800420c <HAL_RCC_OscConfig+0x288>)
 800404a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	4b6e      	ldr	r3, [pc, #440]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a6d      	ldr	r2, [pc, #436]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8004056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800405a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d013      	beq.n	800408c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7fd f9d8 	bl	8001418 <HAL_GetTick>
 8004068:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800406c:	f7fd f9d4 	bl	8001418 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b64      	cmp	r3, #100	; 0x64
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e3d4      	b.n	8004828 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800407e:	4b63      	ldr	r3, [pc, #396]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCC_OscConfig+0xe8>
 800408a:	e014      	b.n	80040b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7fd f9c4 	bl	8001418 <HAL_GetTick>
 8004090:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004094:	f7fd f9c0 	bl	8001418 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	; 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e3c0      	b.n	8004828 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040a6:	4b59      	ldr	r3, [pc, #356]	; (800420c <HAL_RCC_OscConfig+0x288>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x110>
 80040b2:	e000      	b.n	80040b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 80ca 	beq.w	8004258 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040c4:	4b51      	ldr	r3, [pc, #324]	; (800420c <HAL_RCC_OscConfig+0x288>)
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040ce:	4b4f      	ldr	r3, [pc, #316]	; (800420c <HAL_RCC_OscConfig+0x288>)
 80040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d007      	beq.n	80040ea <HAL_RCC_OscConfig+0x166>
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	2b18      	cmp	r3, #24
 80040de:	d156      	bne.n	800418e <HAL_RCC_OscConfig+0x20a>
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d151      	bne.n	800418e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040ea:	4b48      	ldr	r3, [pc, #288]	; (800420c <HAL_RCC_OscConfig+0x288>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <HAL_RCC_OscConfig+0x17e>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e392      	b.n	8004828 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004102:	4b42      	ldr	r3, [pc, #264]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 0219 	bic.w	r2, r3, #25
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	493f      	ldr	r1, [pc, #252]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8004110:	4313      	orrs	r3, r2
 8004112:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004114:	f7fd f980 	bl	8001418 <HAL_GetTick>
 8004118:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800411c:	f7fd f97c 	bl	8001418 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e37c      	b.n	8004828 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800412e:	4b37      	ldr	r3, [pc, #220]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800413a:	f7fd f99d 	bl	8001478 <HAL_GetREVID>
 800413e:	4603      	mov	r3, r0
 8004140:	f241 0203 	movw	r2, #4099	; 0x1003
 8004144:	4293      	cmp	r3, r2
 8004146:	d817      	bhi.n	8004178 <HAL_RCC_OscConfig+0x1f4>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	2b40      	cmp	r3, #64	; 0x40
 800414e:	d108      	bne.n	8004162 <HAL_RCC_OscConfig+0x1de>
 8004150:	4b2e      	ldr	r3, [pc, #184]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004158:	4a2c      	ldr	r2, [pc, #176]	; (800420c <HAL_RCC_OscConfig+0x288>)
 800415a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800415e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004160:	e07a      	b.n	8004258 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004162:	4b2a      	ldr	r3, [pc, #168]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	031b      	lsls	r3, r3, #12
 8004170:	4926      	ldr	r1, [pc, #152]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8004172:	4313      	orrs	r3, r2
 8004174:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004176:	e06f      	b.n	8004258 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004178:	4b24      	ldr	r3, [pc, #144]	; (800420c <HAL_RCC_OscConfig+0x288>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	061b      	lsls	r3, r3, #24
 8004186:	4921      	ldr	r1, [pc, #132]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8004188:	4313      	orrs	r3, r2
 800418a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800418c:	e064      	b.n	8004258 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d047      	beq.n	8004226 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004196:	4b1d      	ldr	r3, [pc, #116]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f023 0219 	bic.w	r2, r3, #25
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	491a      	ldr	r1, [pc, #104]	; (800420c <HAL_RCC_OscConfig+0x288>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fd f936 	bl	8001418 <HAL_GetTick>
 80041ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b0:	f7fd f932 	bl	8001418 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e332      	b.n	8004828 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041c2:	4b12      	ldr	r3, [pc, #72]	; (800420c <HAL_RCC_OscConfig+0x288>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0f0      	beq.n	80041b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ce:	f7fd f953 	bl	8001478 <HAL_GetREVID>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80041d8:	4293      	cmp	r3, r2
 80041da:	d819      	bhi.n	8004210 <HAL_RCC_OscConfig+0x28c>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	2b40      	cmp	r3, #64	; 0x40
 80041e2:	d108      	bne.n	80041f6 <HAL_RCC_OscConfig+0x272>
 80041e4:	4b09      	ldr	r3, [pc, #36]	; (800420c <HAL_RCC_OscConfig+0x288>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80041ec:	4a07      	ldr	r2, [pc, #28]	; (800420c <HAL_RCC_OscConfig+0x288>)
 80041ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f2:	6053      	str	r3, [r2, #4]
 80041f4:	e030      	b.n	8004258 <HAL_RCC_OscConfig+0x2d4>
 80041f6:	4b05      	ldr	r3, [pc, #20]	; (800420c <HAL_RCC_OscConfig+0x288>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	031b      	lsls	r3, r3, #12
 8004204:	4901      	ldr	r1, [pc, #4]	; (800420c <HAL_RCC_OscConfig+0x288>)
 8004206:	4313      	orrs	r3, r2
 8004208:	604b      	str	r3, [r1, #4]
 800420a:	e025      	b.n	8004258 <HAL_RCC_OscConfig+0x2d4>
 800420c:	58024400 	.word	0x58024400
 8004210:	4b9a      	ldr	r3, [pc, #616]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	061b      	lsls	r3, r3, #24
 800421e:	4997      	ldr	r1, [pc, #604]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 8004220:	4313      	orrs	r3, r2
 8004222:	604b      	str	r3, [r1, #4]
 8004224:	e018      	b.n	8004258 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004226:	4b95      	ldr	r3, [pc, #596]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a94      	ldr	r2, [pc, #592]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004232:	f7fd f8f1 	bl	8001418 <HAL_GetTick>
 8004236:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800423a:	f7fd f8ed 	bl	8001418 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e2ed      	b.n	8004828 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800424c:	4b8b      	ldr	r3, [pc, #556]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1f0      	bne.n	800423a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 80a9 	beq.w	80043b8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004266:	4b85      	ldr	r3, [pc, #532]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800426e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004270:	4b82      	ldr	r3, [pc, #520]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 8004272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004274:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b08      	cmp	r3, #8
 800427a:	d007      	beq.n	800428c <HAL_RCC_OscConfig+0x308>
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	2b18      	cmp	r3, #24
 8004280:	d13a      	bne.n	80042f8 <HAL_RCC_OscConfig+0x374>
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f003 0303 	and.w	r3, r3, #3
 8004288:	2b01      	cmp	r3, #1
 800428a:	d135      	bne.n	80042f8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800428c:	4b7b      	ldr	r3, [pc, #492]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <HAL_RCC_OscConfig+0x320>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	2b80      	cmp	r3, #128	; 0x80
 800429e:	d001      	beq.n	80042a4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e2c1      	b.n	8004828 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042a4:	f7fd f8e8 	bl	8001478 <HAL_GetREVID>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d817      	bhi.n	80042e2 <HAL_RCC_OscConfig+0x35e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	2b20      	cmp	r3, #32
 80042b8:	d108      	bne.n	80042cc <HAL_RCC_OscConfig+0x348>
 80042ba:	4b70      	ldr	r3, [pc, #448]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80042c2:	4a6e      	ldr	r2, [pc, #440]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 80042c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042c8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042ca:	e075      	b.n	80043b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042cc:	4b6b      	ldr	r3, [pc, #428]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	069b      	lsls	r3, r3, #26
 80042da:	4968      	ldr	r1, [pc, #416]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042e0:	e06a      	b.n	80043b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042e2:	4b66      	ldr	r3, [pc, #408]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	061b      	lsls	r3, r3, #24
 80042f0:	4962      	ldr	r1, [pc, #392]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042f6:	e05f      	b.n	80043b8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d042      	beq.n	8004386 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004300:	4b5e      	ldr	r3, [pc, #376]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a5d      	ldr	r2, [pc, #372]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 8004306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800430a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430c:	f7fd f884 	bl	8001418 <HAL_GetTick>
 8004310:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004314:	f7fd f880 	bl	8001418 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e280      	b.n	8004828 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004326:	4b55      	ldr	r3, [pc, #340]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f0      	beq.n	8004314 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004332:	f7fd f8a1 	bl	8001478 <HAL_GetREVID>
 8004336:	4603      	mov	r3, r0
 8004338:	f241 0203 	movw	r2, #4099	; 0x1003
 800433c:	4293      	cmp	r3, r2
 800433e:	d817      	bhi.n	8004370 <HAL_RCC_OscConfig+0x3ec>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	2b20      	cmp	r3, #32
 8004346:	d108      	bne.n	800435a <HAL_RCC_OscConfig+0x3d6>
 8004348:	4b4c      	ldr	r3, [pc, #304]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004350:	4a4a      	ldr	r2, [pc, #296]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 8004352:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004356:	6053      	str	r3, [r2, #4]
 8004358:	e02e      	b.n	80043b8 <HAL_RCC_OscConfig+0x434>
 800435a:	4b48      	ldr	r3, [pc, #288]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	069b      	lsls	r3, r3, #26
 8004368:	4944      	ldr	r1, [pc, #272]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 800436a:	4313      	orrs	r3, r2
 800436c:	604b      	str	r3, [r1, #4]
 800436e:	e023      	b.n	80043b8 <HAL_RCC_OscConfig+0x434>
 8004370:	4b42      	ldr	r3, [pc, #264]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	061b      	lsls	r3, r3, #24
 800437e:	493f      	ldr	r1, [pc, #252]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 8004380:	4313      	orrs	r3, r2
 8004382:	60cb      	str	r3, [r1, #12]
 8004384:	e018      	b.n	80043b8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004386:	4b3d      	ldr	r3, [pc, #244]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a3c      	ldr	r2, [pc, #240]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 800438c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004392:	f7fd f841 	bl	8001418 <HAL_GetTick>
 8004396:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800439a:	f7fd f83d 	bl	8001418 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e23d      	b.n	8004828 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80043ac:	4b33      	ldr	r3, [pc, #204]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f0      	bne.n	800439a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d036      	beq.n	8004432 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d019      	beq.n	8004400 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043cc:	4b2b      	ldr	r3, [pc, #172]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 80043ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d0:	4a2a      	ldr	r2, [pc, #168]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d8:	f7fd f81e 	bl	8001418 <HAL_GetTick>
 80043dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e0:	f7fd f81a 	bl	8001418 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e21a      	b.n	8004828 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043f2:	4b22      	ldr	r3, [pc, #136]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 80043f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0x45c>
 80043fe:	e018      	b.n	8004432 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004400:	4b1e      	ldr	r3, [pc, #120]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 8004402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004404:	4a1d      	ldr	r2, [pc, #116]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440c:	f7fd f804 	bl	8001418 <HAL_GetTick>
 8004410:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004414:	f7fd f800 	bl	8001418 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e200      	b.n	8004828 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004426:	4b15      	ldr	r3, [pc, #84]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 8004428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b00      	cmp	r3, #0
 800443c:	d039      	beq.n	80044b2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d01c      	beq.n	8004480 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004446:	4b0d      	ldr	r3, [pc, #52]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a0c      	ldr	r2, [pc, #48]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 800444c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004450:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004452:	f7fc ffe1 	bl	8001418 <HAL_GetTick>
 8004456:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800445a:	f7fc ffdd 	bl	8001418 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e1dd      	b.n	8004828 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800446c:	4b03      	ldr	r3, [pc, #12]	; (800447c <HAL_RCC_OscConfig+0x4f8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0f0      	beq.n	800445a <HAL_RCC_OscConfig+0x4d6>
 8004478:	e01b      	b.n	80044b2 <HAL_RCC_OscConfig+0x52e>
 800447a:	bf00      	nop
 800447c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004480:	4b9b      	ldr	r3, [pc, #620]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a9a      	ldr	r2, [pc, #616]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 8004486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800448a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800448c:	f7fc ffc4 	bl	8001418 <HAL_GetTick>
 8004490:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004494:	f7fc ffc0 	bl	8001418 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e1c0      	b.n	8004828 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80044a6:	4b92      	ldr	r3, [pc, #584]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f0      	bne.n	8004494 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 8081 	beq.w	80045c2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044c0:	4b8c      	ldr	r3, [pc, #560]	; (80046f4 <HAL_RCC_OscConfig+0x770>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a8b      	ldr	r2, [pc, #556]	; (80046f4 <HAL_RCC_OscConfig+0x770>)
 80044c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044cc:	f7fc ffa4 	bl	8001418 <HAL_GetTick>
 80044d0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d4:	f7fc ffa0 	bl	8001418 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e1a0      	b.n	8004828 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044e6:	4b83      	ldr	r3, [pc, #524]	; (80046f4 <HAL_RCC_OscConfig+0x770>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0f0      	beq.n	80044d4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d106      	bne.n	8004508 <HAL_RCC_OscConfig+0x584>
 80044fa:	4b7d      	ldr	r3, [pc, #500]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fe:	4a7c      	ldr	r2, [pc, #496]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 8004500:	f043 0301 	orr.w	r3, r3, #1
 8004504:	6713      	str	r3, [r2, #112]	; 0x70
 8004506:	e02d      	b.n	8004564 <HAL_RCC_OscConfig+0x5e0>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10c      	bne.n	800452a <HAL_RCC_OscConfig+0x5a6>
 8004510:	4b77      	ldr	r3, [pc, #476]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 8004512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004514:	4a76      	ldr	r2, [pc, #472]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 8004516:	f023 0301 	bic.w	r3, r3, #1
 800451a:	6713      	str	r3, [r2, #112]	; 0x70
 800451c:	4b74      	ldr	r3, [pc, #464]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 800451e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004520:	4a73      	ldr	r2, [pc, #460]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 8004522:	f023 0304 	bic.w	r3, r3, #4
 8004526:	6713      	str	r3, [r2, #112]	; 0x70
 8004528:	e01c      	b.n	8004564 <HAL_RCC_OscConfig+0x5e0>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	2b05      	cmp	r3, #5
 8004530:	d10c      	bne.n	800454c <HAL_RCC_OscConfig+0x5c8>
 8004532:	4b6f      	ldr	r3, [pc, #444]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	4a6e      	ldr	r2, [pc, #440]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 8004538:	f043 0304 	orr.w	r3, r3, #4
 800453c:	6713      	str	r3, [r2, #112]	; 0x70
 800453e:	4b6c      	ldr	r3, [pc, #432]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 8004540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004542:	4a6b      	ldr	r2, [pc, #428]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 8004544:	f043 0301 	orr.w	r3, r3, #1
 8004548:	6713      	str	r3, [r2, #112]	; 0x70
 800454a:	e00b      	b.n	8004564 <HAL_RCC_OscConfig+0x5e0>
 800454c:	4b68      	ldr	r3, [pc, #416]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 800454e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004550:	4a67      	ldr	r2, [pc, #412]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 8004552:	f023 0301 	bic.w	r3, r3, #1
 8004556:	6713      	str	r3, [r2, #112]	; 0x70
 8004558:	4b65      	ldr	r3, [pc, #404]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 800455a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455c:	4a64      	ldr	r2, [pc, #400]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 800455e:	f023 0304 	bic.w	r3, r3, #4
 8004562:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d015      	beq.n	8004598 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456c:	f7fc ff54 	bl	8001418 <HAL_GetTick>
 8004570:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004572:	e00a      	b.n	800458a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004574:	f7fc ff50 	bl	8001418 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004582:	4293      	cmp	r3, r2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e14e      	b.n	8004828 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800458a:	4b59      	ldr	r3, [pc, #356]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 800458c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0ee      	beq.n	8004574 <HAL_RCC_OscConfig+0x5f0>
 8004596:	e014      	b.n	80045c2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004598:	f7fc ff3e 	bl	8001418 <HAL_GetTick>
 800459c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800459e:	e00a      	b.n	80045b6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a0:	f7fc ff3a 	bl	8001418 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e138      	b.n	8004828 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80045b6:	4b4e      	ldr	r3, [pc, #312]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1ee      	bne.n	80045a0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 812d 	beq.w	8004826 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80045cc:	4b48      	ldr	r3, [pc, #288]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045d4:	2b18      	cmp	r3, #24
 80045d6:	f000 80bd 	beq.w	8004754 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	2b02      	cmp	r3, #2
 80045e0:	f040 809e 	bne.w	8004720 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e4:	4b42      	ldr	r3, [pc, #264]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a41      	ldr	r2, [pc, #260]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 80045ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f0:	f7fc ff12 	bl	8001418 <HAL_GetTick>
 80045f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f8:	f7fc ff0e 	bl	8001418 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e10e      	b.n	8004828 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800460a:	4b39      	ldr	r3, [pc, #228]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004616:	4b36      	ldr	r3, [pc, #216]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 8004618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800461a:	4b37      	ldr	r3, [pc, #220]	; (80046f8 <HAL_RCC_OscConfig+0x774>)
 800461c:	4013      	ands	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004626:	0112      	lsls	r2, r2, #4
 8004628:	430a      	orrs	r2, r1
 800462a:	4931      	ldr	r1, [pc, #196]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 800462c:	4313      	orrs	r3, r2
 800462e:	628b      	str	r3, [r1, #40]	; 0x28
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	3b01      	subs	r3, #1
 8004636:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463e:	3b01      	subs	r3, #1
 8004640:	025b      	lsls	r3, r3, #9
 8004642:	b29b      	uxth	r3, r3
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	3b01      	subs	r3, #1
 800464c:	041b      	lsls	r3, r3, #16
 800464e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004658:	3b01      	subs	r3, #1
 800465a:	061b      	lsls	r3, r3, #24
 800465c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004660:	4923      	ldr	r1, [pc, #140]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 8004662:	4313      	orrs	r3, r2
 8004664:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004666:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	4a21      	ldr	r2, [pc, #132]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 800466c:	f023 0301 	bic.w	r3, r3, #1
 8004670:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004672:	4b1f      	ldr	r3, [pc, #124]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 8004674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004676:	4b21      	ldr	r3, [pc, #132]	; (80046fc <HAL_RCC_OscConfig+0x778>)
 8004678:	4013      	ands	r3, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800467e:	00d2      	lsls	r2, r2, #3
 8004680:	491b      	ldr	r1, [pc, #108]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 8004682:	4313      	orrs	r3, r2
 8004684:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004686:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	f023 020c 	bic.w	r2, r3, #12
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	4917      	ldr	r1, [pc, #92]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 8004694:	4313      	orrs	r3, r2
 8004696:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004698:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	f023 0202 	bic.w	r2, r3, #2
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a4:	4912      	ldr	r1, [pc, #72]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80046aa:	4b11      	ldr	r3, [pc, #68]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	4a10      	ldr	r2, [pc, #64]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 80046b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b6:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 80046b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ba:	4a0d      	ldr	r2, [pc, #52]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 80046bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80046c2:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c6:	4a0a      	ldr	r2, [pc, #40]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 80046c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80046ce:	4b08      	ldr	r3, [pc, #32]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 80046d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d2:	4a07      	ldr	r2, [pc, #28]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 80046d4:	f043 0301 	orr.w	r3, r3, #1
 80046d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046da:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a04      	ldr	r2, [pc, #16]	; (80046f0 <HAL_RCC_OscConfig+0x76c>)
 80046e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e6:	f7fc fe97 	bl	8001418 <HAL_GetTick>
 80046ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046ec:	e011      	b.n	8004712 <HAL_RCC_OscConfig+0x78e>
 80046ee:	bf00      	nop
 80046f0:	58024400 	.word	0x58024400
 80046f4:	58024800 	.word	0x58024800
 80046f8:	fffffc0c 	.word	0xfffffc0c
 80046fc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004700:	f7fc fe8a 	bl	8001418 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e08a      	b.n	8004828 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004712:	4b47      	ldr	r3, [pc, #284]	; (8004830 <HAL_RCC_OscConfig+0x8ac>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCC_OscConfig+0x77c>
 800471e:	e082      	b.n	8004826 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004720:	4b43      	ldr	r3, [pc, #268]	; (8004830 <HAL_RCC_OscConfig+0x8ac>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a42      	ldr	r2, [pc, #264]	; (8004830 <HAL_RCC_OscConfig+0x8ac>)
 8004726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800472a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472c:	f7fc fe74 	bl	8001418 <HAL_GetTick>
 8004730:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004734:	f7fc fe70 	bl	8001418 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e070      	b.n	8004828 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004746:	4b3a      	ldr	r3, [pc, #232]	; (8004830 <HAL_RCC_OscConfig+0x8ac>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x7b0>
 8004752:	e068      	b.n	8004826 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004754:	4b36      	ldr	r3, [pc, #216]	; (8004830 <HAL_RCC_OscConfig+0x8ac>)
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800475a:	4b35      	ldr	r3, [pc, #212]	; (8004830 <HAL_RCC_OscConfig+0x8ac>)
 800475c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	2b01      	cmp	r3, #1
 8004766:	d031      	beq.n	80047cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f003 0203 	and.w	r2, r3, #3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004772:	429a      	cmp	r2, r3
 8004774:	d12a      	bne.n	80047cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	091b      	lsrs	r3, r3, #4
 800477a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d122      	bne.n	80047cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004792:	429a      	cmp	r2, r3
 8004794:	d11a      	bne.n	80047cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	0a5b      	lsrs	r3, r3, #9
 800479a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d111      	bne.n	80047cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	0c1b      	lsrs	r3, r3, #16
 80047ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d108      	bne.n	80047cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	0e1b      	lsrs	r3, r3, #24
 80047be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d001      	beq.n	80047d0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e02b      	b.n	8004828 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80047d0:	4b17      	ldr	r3, [pc, #92]	; (8004830 <HAL_RCC_OscConfig+0x8ac>)
 80047d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d4:	08db      	lsrs	r3, r3, #3
 80047d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047da:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d01f      	beq.n	8004826 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80047e6:	4b12      	ldr	r3, [pc, #72]	; (8004830 <HAL_RCC_OscConfig+0x8ac>)
 80047e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ea:	4a11      	ldr	r2, [pc, #68]	; (8004830 <HAL_RCC_OscConfig+0x8ac>)
 80047ec:	f023 0301 	bic.w	r3, r3, #1
 80047f0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047f2:	f7fc fe11 	bl	8001418 <HAL_GetTick>
 80047f6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80047f8:	bf00      	nop
 80047fa:	f7fc fe0d 	bl	8001418 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	4293      	cmp	r3, r2
 8004804:	d0f9      	beq.n	80047fa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004806:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <HAL_RCC_OscConfig+0x8ac>)
 8004808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800480a:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <HAL_RCC_OscConfig+0x8b0>)
 800480c:	4013      	ands	r3, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004812:	00d2      	lsls	r2, r2, #3
 8004814:	4906      	ldr	r1, [pc, #24]	; (8004830 <HAL_RCC_OscConfig+0x8ac>)
 8004816:	4313      	orrs	r3, r2
 8004818:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800481a:	4b05      	ldr	r3, [pc, #20]	; (8004830 <HAL_RCC_OscConfig+0x8ac>)
 800481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481e:	4a04      	ldr	r2, [pc, #16]	; (8004830 <HAL_RCC_OscConfig+0x8ac>)
 8004820:	f043 0301 	orr.w	r3, r3, #1
 8004824:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3730      	adds	r7, #48	; 0x30
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	58024400 	.word	0x58024400
 8004834:	ffff0007 	.word	0xffff0007

08004838 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e19c      	b.n	8004b86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800484c:	4b8a      	ldr	r3, [pc, #552]	; (8004a78 <HAL_RCC_ClockConfig+0x240>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 030f 	and.w	r3, r3, #15
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d910      	bls.n	800487c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485a:	4b87      	ldr	r3, [pc, #540]	; (8004a78 <HAL_RCC_ClockConfig+0x240>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f023 020f 	bic.w	r2, r3, #15
 8004862:	4985      	ldr	r1, [pc, #532]	; (8004a78 <HAL_RCC_ClockConfig+0x240>)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	4313      	orrs	r3, r2
 8004868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486a:	4b83      	ldr	r3, [pc, #524]	; (8004a78 <HAL_RCC_ClockConfig+0x240>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d001      	beq.n	800487c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e184      	b.n	8004b86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d010      	beq.n	80048aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	4b7b      	ldr	r3, [pc, #492]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004894:	429a      	cmp	r2, r3
 8004896:	d908      	bls.n	80048aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004898:	4b78      	ldr	r3, [pc, #480]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	4975      	ldr	r1, [pc, #468]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d010      	beq.n	80048d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695a      	ldr	r2, [r3, #20]
 80048ba:	4b70      	ldr	r3, [pc, #448]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d908      	bls.n	80048d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048c6:	4b6d      	ldr	r3, [pc, #436]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	496a      	ldr	r1, [pc, #424]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d010      	beq.n	8004906 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699a      	ldr	r2, [r3, #24]
 80048e8:	4b64      	ldr	r3, [pc, #400]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d908      	bls.n	8004906 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048f4:	4b61      	ldr	r3, [pc, #388]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	495e      	ldr	r1, [pc, #376]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004902:	4313      	orrs	r3, r2
 8004904:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d010      	beq.n	8004934 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	69da      	ldr	r2, [r3, #28]
 8004916:	4b59      	ldr	r3, [pc, #356]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800491e:	429a      	cmp	r2, r3
 8004920:	d908      	bls.n	8004934 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004922:	4b56      	ldr	r3, [pc, #344]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	4953      	ldr	r1, [pc, #332]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004930:	4313      	orrs	r3, r2
 8004932:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d010      	beq.n	8004962 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	4b4d      	ldr	r3, [pc, #308]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	429a      	cmp	r2, r3
 800494e:	d908      	bls.n	8004962 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004950:	4b4a      	ldr	r3, [pc, #296]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	f023 020f 	bic.w	r2, r3, #15
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	4947      	ldr	r1, [pc, #284]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 800495e:	4313      	orrs	r3, r2
 8004960:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d055      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800496e:	4b43      	ldr	r3, [pc, #268]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	4940      	ldr	r1, [pc, #256]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 800497c:	4313      	orrs	r3, r2
 800497e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b02      	cmp	r3, #2
 8004986:	d107      	bne.n	8004998 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004988:	4b3c      	ldr	r3, [pc, #240]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d121      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0f6      	b.n	8004b86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b03      	cmp	r3, #3
 800499e:	d107      	bne.n	80049b0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049a0:	4b36      	ldr	r3, [pc, #216]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d115      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0ea      	b.n	8004b86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d107      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049b8:	4b30      	ldr	r3, [pc, #192]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d109      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0de      	b.n	8004b86 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049c8:	4b2c      	ldr	r3, [pc, #176]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0d6      	b.n	8004b86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049d8:	4b28      	ldr	r3, [pc, #160]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f023 0207 	bic.w	r2, r3, #7
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	4925      	ldr	r1, [pc, #148]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ea:	f7fc fd15 	bl	8001418 <HAL_GetTick>
 80049ee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f0:	e00a      	b.n	8004a08 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f2:	f7fc fd11 	bl	8001418 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e0be      	b.n	8004b86 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a08:	4b1c      	ldr	r3, [pc, #112]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d1eb      	bne.n	80049f2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d010      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d208      	bcs.n	8004a48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a36:	4b11      	ldr	r3, [pc, #68]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	f023 020f 	bic.w	r2, r3, #15
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	490e      	ldr	r1, [pc, #56]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a48:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <HAL_RCC_ClockConfig+0x240>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 030f 	and.w	r3, r3, #15
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d214      	bcs.n	8004a80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a56:	4b08      	ldr	r3, [pc, #32]	; (8004a78 <HAL_RCC_ClockConfig+0x240>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f023 020f 	bic.w	r2, r3, #15
 8004a5e:	4906      	ldr	r1, [pc, #24]	; (8004a78 <HAL_RCC_ClockConfig+0x240>)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a66:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <HAL_RCC_ClockConfig+0x240>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d005      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e086      	b.n	8004b86 <HAL_RCC_ClockConfig+0x34e>
 8004a78:	52002000 	.word	0x52002000
 8004a7c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d010      	beq.n	8004aae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	4b3f      	ldr	r3, [pc, #252]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d208      	bcs.n	8004aae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a9c:	4b3c      	ldr	r3, [pc, #240]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	4939      	ldr	r1, [pc, #228]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d010      	beq.n	8004adc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	4b34      	ldr	r3, [pc, #208]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d208      	bcs.n	8004adc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004aca:	4b31      	ldr	r3, [pc, #196]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	492e      	ldr	r1, [pc, #184]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d010      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	699a      	ldr	r2, [r3, #24]
 8004aec:	4b28      	ldr	r3, [pc, #160]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d208      	bcs.n	8004b0a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004af8:	4b25      	ldr	r3, [pc, #148]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	4922      	ldr	r1, [pc, #136]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d010      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69da      	ldr	r2, [r3, #28]
 8004b1a:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d208      	bcs.n	8004b38 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b26:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	4917      	ldr	r1, [pc, #92]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b38:	f000 f834 	bl	8004ba4 <HAL_RCC_GetSysClockFreq>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	4b14      	ldr	r3, [pc, #80]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	0a1b      	lsrs	r3, r3, #8
 8004b44:	f003 030f 	and.w	r3, r3, #15
 8004b48:	4912      	ldr	r1, [pc, #72]	; (8004b94 <HAL_RCC_ClockConfig+0x35c>)
 8004b4a:	5ccb      	ldrb	r3, [r1, r3]
 8004b4c:	f003 031f 	and.w	r3, r3, #31
 8004b50:	fa22 f303 	lsr.w	r3, r2, r3
 8004b54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b56:	4b0e      	ldr	r3, [pc, #56]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	4a0d      	ldr	r2, [pc, #52]	; (8004b94 <HAL_RCC_ClockConfig+0x35c>)
 8004b60:	5cd3      	ldrb	r3, [r2, r3]
 8004b62:	f003 031f 	and.w	r3, r3, #31
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6c:	4a0a      	ldr	r2, [pc, #40]	; (8004b98 <HAL_RCC_ClockConfig+0x360>)
 8004b6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b70:	4a0a      	ldr	r2, [pc, #40]	; (8004b9c <HAL_RCC_ClockConfig+0x364>)
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004b76:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <HAL_RCC_ClockConfig+0x368>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fc fc02 	bl	8001384 <HAL_InitTick>
 8004b80:	4603      	mov	r3, r0
 8004b82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	58024400 	.word	0x58024400
 8004b94:	080098b8 	.word	0x080098b8
 8004b98:	24000004 	.word	0x24000004
 8004b9c:	24000000 	.word	0x24000000
 8004ba0:	2400002c 	.word	0x2400002c

08004ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b089      	sub	sp, #36	; 0x24
 8004ba8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004baa:	4bb3      	ldr	r3, [pc, #716]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bb2:	2b18      	cmp	r3, #24
 8004bb4:	f200 8155 	bhi.w	8004e62 <HAL_RCC_GetSysClockFreq+0x2be>
 8004bb8:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004c25 	.word	0x08004c25
 8004bc4:	08004e63 	.word	0x08004e63
 8004bc8:	08004e63 	.word	0x08004e63
 8004bcc:	08004e63 	.word	0x08004e63
 8004bd0:	08004e63 	.word	0x08004e63
 8004bd4:	08004e63 	.word	0x08004e63
 8004bd8:	08004e63 	.word	0x08004e63
 8004bdc:	08004e63 	.word	0x08004e63
 8004be0:	08004c4b 	.word	0x08004c4b
 8004be4:	08004e63 	.word	0x08004e63
 8004be8:	08004e63 	.word	0x08004e63
 8004bec:	08004e63 	.word	0x08004e63
 8004bf0:	08004e63 	.word	0x08004e63
 8004bf4:	08004e63 	.word	0x08004e63
 8004bf8:	08004e63 	.word	0x08004e63
 8004bfc:	08004e63 	.word	0x08004e63
 8004c00:	08004c51 	.word	0x08004c51
 8004c04:	08004e63 	.word	0x08004e63
 8004c08:	08004e63 	.word	0x08004e63
 8004c0c:	08004e63 	.word	0x08004e63
 8004c10:	08004e63 	.word	0x08004e63
 8004c14:	08004e63 	.word	0x08004e63
 8004c18:	08004e63 	.word	0x08004e63
 8004c1c:	08004e63 	.word	0x08004e63
 8004c20:	08004c57 	.word	0x08004c57
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c24:	4b94      	ldr	r3, [pc, #592]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d009      	beq.n	8004c44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c30:	4b91      	ldr	r3, [pc, #580]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	08db      	lsrs	r3, r3, #3
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	4a90      	ldr	r2, [pc, #576]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004c42:	e111      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004c44:	4b8d      	ldr	r3, [pc, #564]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c46:	61bb      	str	r3, [r7, #24]
      break;
 8004c48:	e10e      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004c4a:	4b8d      	ldr	r3, [pc, #564]	; (8004e80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c4c:	61bb      	str	r3, [r7, #24]
      break;
 8004c4e:	e10b      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004c50:	4b8c      	ldr	r3, [pc, #560]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004c52:	61bb      	str	r3, [r7, #24]
      break;
 8004c54:	e108      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c56:	4b88      	ldr	r3, [pc, #544]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004c60:	4b85      	ldr	r3, [pc, #532]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	091b      	lsrs	r3, r3, #4
 8004c66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c6a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004c6c:	4b82      	ldr	r3, [pc, #520]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004c76:	4b80      	ldr	r3, [pc, #512]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7a:	08db      	lsrs	r3, r3, #3
 8004c7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	fb02 f303 	mul.w	r3, r2, r3
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 80e1 	beq.w	8004e5c <HAL_RCC_GetSysClockFreq+0x2b8>
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	f000 8083 	beq.w	8004da8 <HAL_RCC_GetSysClockFreq+0x204>
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	f200 80a1 	bhi.w	8004dec <HAL_RCC_GetSysClockFreq+0x248>
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x114>
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d056      	beq.n	8004d64 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004cb6:	e099      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cb8:	4b6f      	ldr	r3, [pc, #444]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0320 	and.w	r3, r3, #32
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d02d      	beq.n	8004d20 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cc4:	4b6c      	ldr	r3, [pc, #432]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	08db      	lsrs	r3, r3, #3
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	4a6b      	ldr	r2, [pc, #428]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	ee07 3a90 	vmov	s15, r3
 8004cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	ee07 3a90 	vmov	s15, r3
 8004ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cee:	4b62      	ldr	r3, [pc, #392]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d02:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d1a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004d1e:	e087      	b.n	8004e30 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	ee07 3a90 	vmov	s15, r3
 8004d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004e8c <HAL_RCC_GetSysClockFreq+0x2e8>
 8004d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d32:	4b51      	ldr	r3, [pc, #324]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d3a:	ee07 3a90 	vmov	s15, r3
 8004d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d42:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d46:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d62:	e065      	b.n	8004e30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004e90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d76:	4b40      	ldr	r3, [pc, #256]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004da6:	e043      	b.n	8004e30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	ee07 3a90 	vmov	s15, r3
 8004dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004e94 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dba:	4b2f      	ldr	r3, [pc, #188]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dca:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004dea:	e021      	b.n	8004e30 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004e90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dfe:	4b1e      	ldr	r3, [pc, #120]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e06:	ee07 3a90 	vmov	s15, r3
 8004e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e2e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004e30:	4b11      	ldr	r3, [pc, #68]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e34:	0a5b      	lsrs	r3, r3, #9
 8004e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	ee07 3a90 	vmov	s15, r3
 8004e44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e48:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e54:	ee17 3a90 	vmov	r3, s15
 8004e58:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004e5a:	e005      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61bb      	str	r3, [r7, #24]
      break;
 8004e60:	e002      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004e62:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004e64:	61bb      	str	r3, [r7, #24]
      break;
 8004e66:	bf00      	nop
  }

  return sysclockfreq;
 8004e68:	69bb      	ldr	r3, [r7, #24]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3724      	adds	r7, #36	; 0x24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	58024400 	.word	0x58024400
 8004e7c:	03d09000 	.word	0x03d09000
 8004e80:	003d0900 	.word	0x003d0900
 8004e84:	007a1200 	.word	0x007a1200
 8004e88:	46000000 	.word	0x46000000
 8004e8c:	4c742400 	.word	0x4c742400
 8004e90:	4a742400 	.word	0x4a742400
 8004e94:	4af42400 	.word	0x4af42400

08004e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004e9e:	f7ff fe81 	bl	8004ba4 <HAL_RCC_GetSysClockFreq>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	0a1b      	lsrs	r3, r3, #8
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	490f      	ldr	r1, [pc, #60]	; (8004eec <HAL_RCC_GetHCLKFreq+0x54>)
 8004eb0:	5ccb      	ldrb	r3, [r1, r3]
 8004eb2:	f003 031f 	and.w	r3, r3, #31
 8004eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ebc:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	4a09      	ldr	r2, [pc, #36]	; (8004eec <HAL_RCC_GetHCLKFreq+0x54>)
 8004ec6:	5cd3      	ldrb	r3, [r2, r3]
 8004ec8:	f003 031f 	and.w	r3, r3, #31
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed2:	4a07      	ldr	r2, [pc, #28]	; (8004ef0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ed4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ed6:	4a07      	ldr	r2, [pc, #28]	; (8004ef4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004edc:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ede:	681b      	ldr	r3, [r3, #0]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	58024400 	.word	0x58024400
 8004eec:	080098b8 	.word	0x080098b8
 8004ef0:	24000004 	.word	0x24000004
 8004ef4:	24000000 	.word	0x24000000

08004ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004efc:	f7ff ffcc 	bl	8004e98 <HAL_RCC_GetHCLKFreq>
 8004f00:	4602      	mov	r2, r0
 8004f02:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	091b      	lsrs	r3, r3, #4
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	4904      	ldr	r1, [pc, #16]	; (8004f20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f0e:	5ccb      	ldrb	r3, [r1, r3]
 8004f10:	f003 031f 	and.w	r3, r3, #31
 8004f14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	58024400 	.word	0x58024400
 8004f20:	080098b8 	.word	0x080098b8

08004f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004f28:	f7ff ffb6 	bl	8004e98 <HAL_RCC_GetHCLKFreq>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	0a1b      	lsrs	r3, r3, #8
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	4904      	ldr	r1, [pc, #16]	; (8004f4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f3a:	5ccb      	ldrb	r3, [r1, r3]
 8004f3c:	f003 031f 	and.w	r3, r3, #31
 8004f40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	58024400 	.word	0x58024400
 8004f4c:	080098b8 	.word	0x080098b8

08004f50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f54:	b0ca      	sub	sp, #296	; 0x128
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f62:	2300      	movs	r3, #0
 8004f64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f70:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004f74:	2500      	movs	r5, #0
 8004f76:	ea54 0305 	orrs.w	r3, r4, r5
 8004f7a:	d049      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f86:	d02f      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004f88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f8c:	d828      	bhi.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004f8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f92:	d01a      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f98:	d822      	bhi.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fa2:	d007      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fa4:	e01c      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fa6:	4bb8      	ldr	r3, [pc, #736]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	4ab7      	ldr	r2, [pc, #732]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004fb2:	e01a      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fb8:	3308      	adds	r3, #8
 8004fba:	2102      	movs	r1, #2
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f001 fc8f 	bl	80068e0 <RCCEx_PLL2_Config>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004fc8:	e00f      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fce:	3328      	adds	r3, #40	; 0x28
 8004fd0:	2102      	movs	r1, #2
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f001 fd36 	bl	8006a44 <RCCEx_PLL3_Config>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004fde:	e004      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004fe6:	e000      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10a      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004ff2:	4ba5      	ldr	r3, [pc, #660]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005000:	4aa1      	ldr	r2, [pc, #644]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005002:	430b      	orrs	r3, r1
 8005004:	6513      	str	r3, [r2, #80]	; 0x50
 8005006:	e003      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005008:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800500c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005018:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800501c:	f04f 0900 	mov.w	r9, #0
 8005020:	ea58 0309 	orrs.w	r3, r8, r9
 8005024:	d047      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800502a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502c:	2b04      	cmp	r3, #4
 800502e:	d82a      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005030:	a201      	add	r2, pc, #4	; (adr r2, 8005038 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005036:	bf00      	nop
 8005038:	0800504d 	.word	0x0800504d
 800503c:	0800505b 	.word	0x0800505b
 8005040:	08005071 	.word	0x08005071
 8005044:	0800508f 	.word	0x0800508f
 8005048:	0800508f 	.word	0x0800508f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800504c:	4b8e      	ldr	r3, [pc, #568]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800504e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005050:	4a8d      	ldr	r2, [pc, #564]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005056:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005058:	e01a      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800505a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800505e:	3308      	adds	r3, #8
 8005060:	2100      	movs	r1, #0
 8005062:	4618      	mov	r0, r3
 8005064:	f001 fc3c 	bl	80068e0 <RCCEx_PLL2_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800506e:	e00f      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005074:	3328      	adds	r3, #40	; 0x28
 8005076:	2100      	movs	r1, #0
 8005078:	4618      	mov	r0, r3
 800507a:	f001 fce3 	bl	8006a44 <RCCEx_PLL3_Config>
 800507e:	4603      	mov	r3, r0
 8005080:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005084:	e004      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800508c:	e000      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800508e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005090:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10a      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005098:	4b7b      	ldr	r3, [pc, #492]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800509a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800509c:	f023 0107 	bic.w	r1, r3, #7
 80050a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a6:	4a78      	ldr	r2, [pc, #480]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050a8:	430b      	orrs	r3, r1
 80050aa:	6513      	str	r3, [r2, #80]	; 0x50
 80050ac:	e003      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80050b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050be:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80050c2:	f04f 0b00 	mov.w	fp, #0
 80050c6:	ea5a 030b 	orrs.w	r3, sl, fp
 80050ca:	d04c      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80050cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d6:	d030      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80050d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050dc:	d829      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80050de:	2bc0      	cmp	r3, #192	; 0xc0
 80050e0:	d02d      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80050e2:	2bc0      	cmp	r3, #192	; 0xc0
 80050e4:	d825      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80050e6:	2b80      	cmp	r3, #128	; 0x80
 80050e8:	d018      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80050ea:	2b80      	cmp	r3, #128	; 0x80
 80050ec:	d821      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80050f2:	2b40      	cmp	r3, #64	; 0x40
 80050f4:	d007      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80050f6:	e01c      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050f8:	4b63      	ldr	r3, [pc, #396]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	4a62      	ldr	r2, [pc, #392]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005102:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005104:	e01c      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800510a:	3308      	adds	r3, #8
 800510c:	2100      	movs	r1, #0
 800510e:	4618      	mov	r0, r3
 8005110:	f001 fbe6 	bl	80068e0 <RCCEx_PLL2_Config>
 8005114:	4603      	mov	r3, r0
 8005116:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800511a:	e011      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800511c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005120:	3328      	adds	r3, #40	; 0x28
 8005122:	2100      	movs	r1, #0
 8005124:	4618      	mov	r0, r3
 8005126:	f001 fc8d 	bl	8006a44 <RCCEx_PLL3_Config>
 800512a:	4603      	mov	r3, r0
 800512c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005130:	e006      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005138:	e002      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800513a:	bf00      	nop
 800513c:	e000      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800513e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005140:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005148:	4b4f      	ldr	r3, [pc, #316]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800514a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800514c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005156:	4a4c      	ldr	r2, [pc, #304]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005158:	430b      	orrs	r3, r1
 800515a:	6513      	str	r3, [r2, #80]	; 0x50
 800515c:	e003      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800515e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005162:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800516a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005172:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005176:	2300      	movs	r3, #0
 8005178:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800517c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005180:	460b      	mov	r3, r1
 8005182:	4313      	orrs	r3, r2
 8005184:	d053      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800518a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800518e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005192:	d035      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005194:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005198:	d82e      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800519a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800519e:	d031      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80051a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051a4:	d828      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80051a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051aa:	d01a      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80051ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051b0:	d822      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80051b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051ba:	d007      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80051bc:	e01c      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051be:	4b32      	ldr	r3, [pc, #200]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c2:	4a31      	ldr	r2, [pc, #196]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051ca:	e01c      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051d0:	3308      	adds	r3, #8
 80051d2:	2100      	movs	r1, #0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f001 fb83 	bl	80068e0 <RCCEx_PLL2_Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80051e0:	e011      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e6:	3328      	adds	r3, #40	; 0x28
 80051e8:	2100      	movs	r1, #0
 80051ea:	4618      	mov	r0, r3
 80051ec:	f001 fc2a 	bl	8006a44 <RCCEx_PLL3_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051f6:	e006      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051fe:	e002      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005200:	bf00      	nop
 8005202:	e000      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005206:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10b      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800520e:	4b1e      	ldr	r3, [pc, #120]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005212:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800521a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800521e:	4a1a      	ldr	r2, [pc, #104]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005220:	430b      	orrs	r3, r1
 8005222:	6593      	str	r3, [r2, #88]	; 0x58
 8005224:	e003      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800522a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800522e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005236:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800523a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800523e:	2300      	movs	r3, #0
 8005240:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005244:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005248:	460b      	mov	r3, r1
 800524a:	4313      	orrs	r3, r2
 800524c:	d056      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800524e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005252:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005256:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800525a:	d038      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800525c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005260:	d831      	bhi.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005262:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005266:	d034      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005268:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800526c:	d82b      	bhi.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800526e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005272:	d01d      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005274:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005278:	d825      	bhi.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800527a:	2b00      	cmp	r3, #0
 800527c:	d006      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800527e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005282:	d00a      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005284:	e01f      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005286:	bf00      	nop
 8005288:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800528c:	4ba2      	ldr	r3, [pc, #648]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	4aa1      	ldr	r2, [pc, #644]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005296:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005298:	e01c      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800529a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800529e:	3308      	adds	r3, #8
 80052a0:	2100      	movs	r1, #0
 80052a2:	4618      	mov	r0, r3
 80052a4:	f001 fb1c 	bl	80068e0 <RCCEx_PLL2_Config>
 80052a8:	4603      	mov	r3, r0
 80052aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80052ae:	e011      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052b4:	3328      	adds	r3, #40	; 0x28
 80052b6:	2100      	movs	r1, #0
 80052b8:	4618      	mov	r0, r3
 80052ba:	f001 fbc3 	bl	8006a44 <RCCEx_PLL3_Config>
 80052be:	4603      	mov	r3, r0
 80052c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052c4:	e006      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052cc:	e002      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80052ce:	bf00      	nop
 80052d0:	e000      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80052d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10b      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80052dc:	4b8e      	ldr	r3, [pc, #568]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80052e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052ec:	4a8a      	ldr	r2, [pc, #552]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052ee:	430b      	orrs	r3, r1
 80052f0:	6593      	str	r3, [r2, #88]	; 0x58
 80052f2:	e003      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80052fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005304:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005308:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800530c:	2300      	movs	r3, #0
 800530e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005312:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005316:	460b      	mov	r3, r1
 8005318:	4313      	orrs	r3, r2
 800531a:	d03a      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800531c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005322:	2b30      	cmp	r3, #48	; 0x30
 8005324:	d01f      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005326:	2b30      	cmp	r3, #48	; 0x30
 8005328:	d819      	bhi.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800532a:	2b20      	cmp	r3, #32
 800532c:	d00c      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800532e:	2b20      	cmp	r3, #32
 8005330:	d815      	bhi.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005332:	2b00      	cmp	r3, #0
 8005334:	d019      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005336:	2b10      	cmp	r3, #16
 8005338:	d111      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800533a:	4b77      	ldr	r3, [pc, #476]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533e:	4a76      	ldr	r2, [pc, #472]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005344:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005346:	e011      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800534c:	3308      	adds	r3, #8
 800534e:	2102      	movs	r1, #2
 8005350:	4618      	mov	r0, r3
 8005352:	f001 fac5 	bl	80068e0 <RCCEx_PLL2_Config>
 8005356:	4603      	mov	r3, r0
 8005358:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800535c:	e006      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005364:	e002      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005366:	bf00      	nop
 8005368:	e000      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800536a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800536c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10a      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005374:	4b68      	ldr	r3, [pc, #416]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005378:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800537c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005382:	4a65      	ldr	r2, [pc, #404]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005384:	430b      	orrs	r3, r1
 8005386:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005388:	e003      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800538e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800539e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80053a2:	2300      	movs	r3, #0
 80053a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053a8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80053ac:	460b      	mov	r3, r1
 80053ae:	4313      	orrs	r3, r2
 80053b0:	d051      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80053b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053bc:	d035      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80053be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053c2:	d82e      	bhi.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80053c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053c8:	d031      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80053ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053ce:	d828      	bhi.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80053d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d4:	d01a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80053d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053da:	d822      	bhi.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80053e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e4:	d007      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80053e6:	e01c      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053e8:	4b4b      	ldr	r3, [pc, #300]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	4a4a      	ldr	r2, [pc, #296]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80053f4:	e01c      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053fa:	3308      	adds	r3, #8
 80053fc:	2100      	movs	r1, #0
 80053fe:	4618      	mov	r0, r3
 8005400:	f001 fa6e 	bl	80068e0 <RCCEx_PLL2_Config>
 8005404:	4603      	mov	r3, r0
 8005406:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800540a:	e011      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800540c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005410:	3328      	adds	r3, #40	; 0x28
 8005412:	2100      	movs	r1, #0
 8005414:	4618      	mov	r0, r3
 8005416:	f001 fb15 	bl	8006a44 <RCCEx_PLL3_Config>
 800541a:	4603      	mov	r3, r0
 800541c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005420:	e006      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005428:	e002      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800542a:	bf00      	nop
 800542c:	e000      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800542e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005430:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10a      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005438:	4b37      	ldr	r3, [pc, #220]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800543a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800543c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005446:	4a34      	ldr	r2, [pc, #208]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005448:	430b      	orrs	r3, r1
 800544a:	6513      	str	r3, [r2, #80]	; 0x50
 800544c:	e003      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005452:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800545a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005462:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005466:	2300      	movs	r3, #0
 8005468:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800546c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005470:	460b      	mov	r3, r1
 8005472:	4313      	orrs	r3, r2
 8005474:	d056      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800547c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005480:	d033      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005482:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005486:	d82c      	bhi.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005488:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800548c:	d02f      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800548e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005492:	d826      	bhi.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005494:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005498:	d02b      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800549a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800549e:	d820      	bhi.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80054a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054a4:	d012      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80054a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054aa:	d81a      	bhi.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d022      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80054b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b4:	d115      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ba:	3308      	adds	r3, #8
 80054bc:	2101      	movs	r1, #1
 80054be:	4618      	mov	r0, r3
 80054c0:	f001 fa0e 	bl	80068e0 <RCCEx_PLL2_Config>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80054ca:	e015      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d0:	3328      	adds	r3, #40	; 0x28
 80054d2:	2101      	movs	r1, #1
 80054d4:	4618      	mov	r0, r3
 80054d6:	f001 fab5 	bl	8006a44 <RCCEx_PLL3_Config>
 80054da:	4603      	mov	r3, r0
 80054dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80054e0:	e00a      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054e8:	e006      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80054ea:	bf00      	nop
 80054ec:	e004      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80054ee:	bf00      	nop
 80054f0:	e002      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80054f2:	bf00      	nop
 80054f4:	e000      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80054f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10d      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005500:	4b05      	ldr	r3, [pc, #20]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005504:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800550c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800550e:	4a02      	ldr	r2, [pc, #8]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005510:	430b      	orrs	r3, r1
 8005512:	6513      	str	r3, [r2, #80]	; 0x50
 8005514:	e006      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005516:	bf00      	nop
 8005518:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005520:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005534:	2300      	movs	r3, #0
 8005536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800553a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800553e:	460b      	mov	r3, r1
 8005540:	4313      	orrs	r3, r2
 8005542:	d055      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005548:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800554c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005550:	d033      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005552:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005556:	d82c      	bhi.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555c:	d02f      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800555e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005562:	d826      	bhi.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005564:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005568:	d02b      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800556a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800556e:	d820      	bhi.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005574:	d012      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800557a:	d81a      	bhi.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800557c:	2b00      	cmp	r3, #0
 800557e:	d022      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005580:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005584:	d115      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800558a:	3308      	adds	r3, #8
 800558c:	2101      	movs	r1, #1
 800558e:	4618      	mov	r0, r3
 8005590:	f001 f9a6 	bl	80068e0 <RCCEx_PLL2_Config>
 8005594:	4603      	mov	r3, r0
 8005596:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800559a:	e015      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800559c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a0:	3328      	adds	r3, #40	; 0x28
 80055a2:	2101      	movs	r1, #1
 80055a4:	4618      	mov	r0, r3
 80055a6:	f001 fa4d 	bl	8006a44 <RCCEx_PLL3_Config>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80055b0:	e00a      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055b8:	e006      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80055ba:	bf00      	nop
 80055bc:	e004      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80055be:	bf00      	nop
 80055c0:	e002      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80055c2:	bf00      	nop
 80055c4:	e000      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80055c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10b      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80055d0:	4ba3      	ldr	r3, [pc, #652]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80055d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055e0:	4a9f      	ldr	r2, [pc, #636]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055e2:	430b      	orrs	r3, r1
 80055e4:	6593      	str	r3, [r2, #88]	; 0x58
 80055e6:	e003      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80055fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005600:	2300      	movs	r3, #0
 8005602:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005606:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800560a:	460b      	mov	r3, r1
 800560c:	4313      	orrs	r3, r2
 800560e:	d037      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800561a:	d00e      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800561c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005620:	d816      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d018      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800562a:	d111      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800562c:	4b8c      	ldr	r3, [pc, #560]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	4a8b      	ldr	r2, [pc, #556]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005636:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005638:	e00f      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800563a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800563e:	3308      	adds	r3, #8
 8005640:	2101      	movs	r1, #1
 8005642:	4618      	mov	r0, r3
 8005644:	f001 f94c 	bl	80068e0 <RCCEx_PLL2_Config>
 8005648:	4603      	mov	r3, r0
 800564a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800564e:	e004      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005656:	e000      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800565a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10a      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005662:	4b7f      	ldr	r3, [pc, #508]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005666:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800566a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	4a7b      	ldr	r2, [pc, #492]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005672:	430b      	orrs	r3, r1
 8005674:	6513      	str	r3, [r2, #80]	; 0x50
 8005676:	e003      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005678:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800567c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005688:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800568c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005690:	2300      	movs	r3, #0
 8005692:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005696:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800569a:	460b      	mov	r3, r1
 800569c:	4313      	orrs	r3, r2
 800569e:	d039      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80056a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d81c      	bhi.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80056aa:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80056ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b0:	080056ed 	.word	0x080056ed
 80056b4:	080056c1 	.word	0x080056c1
 80056b8:	080056cf 	.word	0x080056cf
 80056bc:	080056ed 	.word	0x080056ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056c0:	4b67      	ldr	r3, [pc, #412]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	4a66      	ldr	r2, [pc, #408]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80056cc:	e00f      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d2:	3308      	adds	r3, #8
 80056d4:	2102      	movs	r1, #2
 80056d6:	4618      	mov	r0, r3
 80056d8:	f001 f902 	bl	80068e0 <RCCEx_PLL2_Config>
 80056dc:	4603      	mov	r3, r0
 80056de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80056e2:	e004      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056ea:	e000      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80056ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10a      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80056f6:	4b5a      	ldr	r3, [pc, #360]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056fa:	f023 0103 	bic.w	r1, r3, #3
 80056fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005704:	4a56      	ldr	r2, [pc, #344]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005706:	430b      	orrs	r3, r1
 8005708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800570a:	e003      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005710:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005720:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005724:	2300      	movs	r3, #0
 8005726:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800572a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800572e:	460b      	mov	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	f000 809f 	beq.w	8005874 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005736:	4b4b      	ldr	r3, [pc, #300]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a4a      	ldr	r2, [pc, #296]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800573c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005740:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005742:	f7fb fe69 	bl	8001418 <HAL_GetTick>
 8005746:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800574a:	e00b      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800574c:	f7fb fe64 	bl	8001418 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b64      	cmp	r3, #100	; 0x64
 800575a:	d903      	bls.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005762:	e005      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005764:	4b3f      	ldr	r3, [pc, #252]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0ed      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005770:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005774:	2b00      	cmp	r3, #0
 8005776:	d179      	bne.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005778:	4b39      	ldr	r3, [pc, #228]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800577a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800577c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005780:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005784:	4053      	eors	r3, r2
 8005786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800578a:	2b00      	cmp	r3, #0
 800578c:	d015      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800578e:	4b34      	ldr	r3, [pc, #208]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005796:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800579a:	4b31      	ldr	r3, [pc, #196]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800579c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579e:	4a30      	ldr	r2, [pc, #192]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057a6:	4b2e      	ldr	r3, [pc, #184]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057aa:	4a2d      	ldr	r2, [pc, #180]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80057b2:	4a2b      	ldr	r2, [pc, #172]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80057ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80057c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c6:	d118      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c8:	f7fb fe26 	bl	8001418 <HAL_GetTick>
 80057cc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057d0:	e00d      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057d2:	f7fb fe21 	bl	8001418 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80057dc:	1ad2      	subs	r2, r2, r3
 80057de:	f241 3388 	movw	r3, #5000	; 0x1388
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d903      	bls.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80057ec:	e005      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057ee:	4b1c      	ldr	r3, [pc, #112]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0eb      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80057fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d129      	bne.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005806:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800580a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800580e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005812:	d10e      	bne.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005814:	4b12      	ldr	r3, [pc, #72]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800581c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005820:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005824:	091a      	lsrs	r2, r3, #4
 8005826:	4b10      	ldr	r3, [pc, #64]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005828:	4013      	ands	r3, r2
 800582a:	4a0d      	ldr	r2, [pc, #52]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800582c:	430b      	orrs	r3, r1
 800582e:	6113      	str	r3, [r2, #16]
 8005830:	e005      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005832:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	4a0a      	ldr	r2, [pc, #40]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005838:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800583c:	6113      	str	r3, [r2, #16]
 800583e:	4b08      	ldr	r3, [pc, #32]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005840:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005846:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800584a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800584e:	4a04      	ldr	r2, [pc, #16]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005850:	430b      	orrs	r3, r1
 8005852:	6713      	str	r3, [r2, #112]	; 0x70
 8005854:	e00e      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005856:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800585a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800585e:	e009      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005860:	58024400 	.word	0x58024400
 8005864:	58024800 	.word	0x58024800
 8005868:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800586c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005870:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	f002 0301 	and.w	r3, r2, #1
 8005880:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005884:	2300      	movs	r3, #0
 8005886:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800588a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800588e:	460b      	mov	r3, r1
 8005890:	4313      	orrs	r3, r2
 8005892:	f000 8089 	beq.w	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800589a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800589c:	2b28      	cmp	r3, #40	; 0x28
 800589e:	d86b      	bhi.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80058a0:	a201      	add	r2, pc, #4	; (adr r2, 80058a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80058a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a6:	bf00      	nop
 80058a8:	08005981 	.word	0x08005981
 80058ac:	08005979 	.word	0x08005979
 80058b0:	08005979 	.word	0x08005979
 80058b4:	08005979 	.word	0x08005979
 80058b8:	08005979 	.word	0x08005979
 80058bc:	08005979 	.word	0x08005979
 80058c0:	08005979 	.word	0x08005979
 80058c4:	08005979 	.word	0x08005979
 80058c8:	0800594d 	.word	0x0800594d
 80058cc:	08005979 	.word	0x08005979
 80058d0:	08005979 	.word	0x08005979
 80058d4:	08005979 	.word	0x08005979
 80058d8:	08005979 	.word	0x08005979
 80058dc:	08005979 	.word	0x08005979
 80058e0:	08005979 	.word	0x08005979
 80058e4:	08005979 	.word	0x08005979
 80058e8:	08005963 	.word	0x08005963
 80058ec:	08005979 	.word	0x08005979
 80058f0:	08005979 	.word	0x08005979
 80058f4:	08005979 	.word	0x08005979
 80058f8:	08005979 	.word	0x08005979
 80058fc:	08005979 	.word	0x08005979
 8005900:	08005979 	.word	0x08005979
 8005904:	08005979 	.word	0x08005979
 8005908:	08005981 	.word	0x08005981
 800590c:	08005979 	.word	0x08005979
 8005910:	08005979 	.word	0x08005979
 8005914:	08005979 	.word	0x08005979
 8005918:	08005979 	.word	0x08005979
 800591c:	08005979 	.word	0x08005979
 8005920:	08005979 	.word	0x08005979
 8005924:	08005979 	.word	0x08005979
 8005928:	08005981 	.word	0x08005981
 800592c:	08005979 	.word	0x08005979
 8005930:	08005979 	.word	0x08005979
 8005934:	08005979 	.word	0x08005979
 8005938:	08005979 	.word	0x08005979
 800593c:	08005979 	.word	0x08005979
 8005940:	08005979 	.word	0x08005979
 8005944:	08005979 	.word	0x08005979
 8005948:	08005981 	.word	0x08005981
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800594c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005950:	3308      	adds	r3, #8
 8005952:	2101      	movs	r1, #1
 8005954:	4618      	mov	r0, r3
 8005956:	f000 ffc3 	bl	80068e0 <RCCEx_PLL2_Config>
 800595a:	4603      	mov	r3, r0
 800595c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005960:	e00f      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005966:	3328      	adds	r3, #40	; 0x28
 8005968:	2101      	movs	r1, #1
 800596a:	4618      	mov	r0, r3
 800596c:	f001 f86a 	bl	8006a44 <RCCEx_PLL3_Config>
 8005970:	4603      	mov	r3, r0
 8005972:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005976:	e004      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800597e:	e000      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10a      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800598a:	4bbf      	ldr	r3, [pc, #764]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800598c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005998:	4abb      	ldr	r2, [pc, #748]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800599a:	430b      	orrs	r3, r1
 800599c:	6553      	str	r3, [r2, #84]	; 0x54
 800599e:	e003      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80059a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b0:	f002 0302 	and.w	r3, r2, #2
 80059b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059b8:	2300      	movs	r3, #0
 80059ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80059be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80059c2:	460b      	mov	r3, r1
 80059c4:	4313      	orrs	r3, r2
 80059c6:	d041      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80059c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ce:	2b05      	cmp	r3, #5
 80059d0:	d824      	bhi.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80059d2:	a201      	add	r2, pc, #4	; (adr r2, 80059d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80059d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d8:	08005a25 	.word	0x08005a25
 80059dc:	080059f1 	.word	0x080059f1
 80059e0:	08005a07 	.word	0x08005a07
 80059e4:	08005a25 	.word	0x08005a25
 80059e8:	08005a25 	.word	0x08005a25
 80059ec:	08005a25 	.word	0x08005a25
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059f4:	3308      	adds	r3, #8
 80059f6:	2101      	movs	r1, #1
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 ff71 	bl	80068e0 <RCCEx_PLL2_Config>
 80059fe:	4603      	mov	r3, r0
 8005a00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a04:	e00f      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a0a:	3328      	adds	r3, #40	; 0x28
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f001 f818 	bl	8006a44 <RCCEx_PLL3_Config>
 8005a14:	4603      	mov	r3, r0
 8005a16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a1a:	e004      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a22:	e000      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10a      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005a2e:	4b96      	ldr	r3, [pc, #600]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a32:	f023 0107 	bic.w	r1, r3, #7
 8005a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a3c:	4a92      	ldr	r2, [pc, #584]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a3e:	430b      	orrs	r3, r1
 8005a40:	6553      	str	r3, [r2, #84]	; 0x54
 8005a42:	e003      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a54:	f002 0304 	and.w	r3, r2, #4
 8005a58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a62:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	d044      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a74:	2b05      	cmp	r3, #5
 8005a76:	d825      	bhi.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005a78:	a201      	add	r2, pc, #4	; (adr r2, 8005a80 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7e:	bf00      	nop
 8005a80:	08005acd 	.word	0x08005acd
 8005a84:	08005a99 	.word	0x08005a99
 8005a88:	08005aaf 	.word	0x08005aaf
 8005a8c:	08005acd 	.word	0x08005acd
 8005a90:	08005acd 	.word	0x08005acd
 8005a94:	08005acd 	.word	0x08005acd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 ff1d 	bl	80068e0 <RCCEx_PLL2_Config>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005aac:	e00f      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ab2:	3328      	adds	r3, #40	; 0x28
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 ffc4 	bl	8006a44 <RCCEx_PLL3_Config>
 8005abc:	4603      	mov	r3, r0
 8005abe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ac2:	e004      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005aca:	e000      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10b      	bne.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ad6:	4b6c      	ldr	r3, [pc, #432]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ada:	f023 0107 	bic.w	r1, r3, #7
 8005ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ae6:	4a68      	ldr	r2, [pc, #416]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ae8:	430b      	orrs	r3, r1
 8005aea:	6593      	str	r3, [r2, #88]	; 0x58
 8005aec:	e003      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005af2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afe:	f002 0320 	and.w	r3, r2, #32
 8005b02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b06:	2300      	movs	r3, #0
 8005b08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b10:	460b      	mov	r3, r1
 8005b12:	4313      	orrs	r3, r2
 8005b14:	d055      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b22:	d033      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b28:	d82c      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b2e:	d02f      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b34:	d826      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005b36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b3a:	d02b      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005b3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b40:	d820      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b46:	d012      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b4c:	d81a      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d022      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005b52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b56:	d115      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	2100      	movs	r1, #0
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 febd 	bl	80068e0 <RCCEx_PLL2_Config>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005b6c:	e015      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b72:	3328      	adds	r3, #40	; 0x28
 8005b74:	2102      	movs	r1, #2
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 ff64 	bl	8006a44 <RCCEx_PLL3_Config>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005b82:	e00a      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b8a:	e006      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005b8c:	bf00      	nop
 8005b8e:	e004      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005b90:	bf00      	nop
 8005b92:	e002      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005b94:	bf00      	nop
 8005b96:	e000      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10b      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ba2:	4b39      	ldr	r3, [pc, #228]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb2:	4a35      	ldr	r2, [pc, #212]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	6553      	str	r3, [r2, #84]	; 0x54
 8005bb8:	e003      	b.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005bd8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4313      	orrs	r3, r2
 8005be0:	d058      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005bee:	d033      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005bf0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005bf4:	d82c      	bhi.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfa:	d02f      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c00:	d826      	bhi.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c06:	d02b      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005c08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c0c:	d820      	bhi.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c12:	d012      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005c14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c18:	d81a      	bhi.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d022      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c22:	d115      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c28:	3308      	adds	r3, #8
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 fe57 	bl	80068e0 <RCCEx_PLL2_Config>
 8005c32:	4603      	mov	r3, r0
 8005c34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005c38:	e015      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c3e:	3328      	adds	r3, #40	; 0x28
 8005c40:	2102      	movs	r1, #2
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 fefe 	bl	8006a44 <RCCEx_PLL3_Config>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005c4e:	e00a      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c56:	e006      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005c58:	bf00      	nop
 8005c5a:	e004      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005c5c:	bf00      	nop
 8005c5e:	e002      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005c60:	bf00      	nop
 8005c62:	e000      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10e      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c6e:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c72:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c7e:	4a02      	ldr	r2, [pc, #8]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c80:	430b      	orrs	r3, r1
 8005c82:	6593      	str	r3, [r2, #88]	; 0x58
 8005c84:	e006      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005c86:	bf00      	nop
 8005c88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005ca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005caa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	d055      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005cbc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005cc0:	d033      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005cc2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005cc6:	d82c      	bhi.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ccc:	d02f      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cd2:	d826      	bhi.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005cd4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005cd8:	d02b      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005cda:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005cde:	d820      	bhi.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ce0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ce4:	d012      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005ce6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cea:	d81a      	bhi.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d022      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf4:	d115      	bne.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cfa:	3308      	adds	r3, #8
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fdee 	bl	80068e0 <RCCEx_PLL2_Config>
 8005d04:	4603      	mov	r3, r0
 8005d06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d0a:	e015      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d10:	3328      	adds	r3, #40	; 0x28
 8005d12:	2102      	movs	r1, #2
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 fe95 	bl	8006a44 <RCCEx_PLL3_Config>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d20:	e00a      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d28:	e006      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005d2a:	bf00      	nop
 8005d2c:	e004      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005d2e:	bf00      	nop
 8005d30:	e002      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005d32:	bf00      	nop
 8005d34:	e000      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005d36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10b      	bne.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005d40:	4ba1      	ldr	r3, [pc, #644]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d44:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d50:	4a9d      	ldr	r2, [pc, #628]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d52:	430b      	orrs	r3, r1
 8005d54:	6593      	str	r3, [r2, #88]	; 0x58
 8005d56:	e003      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d68:	f002 0308 	and.w	r3, r2, #8
 8005d6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d70:	2300      	movs	r3, #0
 8005d72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d76:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	d01e      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d8c:	d10c      	bne.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d92:	3328      	adds	r3, #40	; 0x28
 8005d94:	2102      	movs	r1, #2
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 fe54 	bl	8006a44 <RCCEx_PLL3_Config>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005da8:	4b87      	ldr	r3, [pc, #540]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005db8:	4a83      	ldr	r2, [pc, #524]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dba:	430b      	orrs	r3, r1
 8005dbc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc6:	f002 0310 	and.w	r3, r2, #16
 8005dca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005dd4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	d01e      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005de2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dea:	d10c      	bne.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005df0:	3328      	adds	r3, #40	; 0x28
 8005df2:	2102      	movs	r1, #2
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 fe25 	bl	8006a44 <RCCEx_PLL3_Config>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e06:	4b70      	ldr	r3, [pc, #448]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e16:	4a6c      	ldr	r2, [pc, #432]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e18:	430b      	orrs	r3, r1
 8005e1a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e24:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005e28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e32:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005e36:	460b      	mov	r3, r1
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	d03e      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e48:	d022      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005e4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e4e:	d81b      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e58:	d00b      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005e5a:	e015      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e60:	3308      	adds	r3, #8
 8005e62:	2100      	movs	r1, #0
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 fd3b 	bl	80068e0 <RCCEx_PLL2_Config>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005e70:	e00f      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e76:	3328      	adds	r3, #40	; 0x28
 8005e78:	2102      	movs	r1, #2
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 fde2 	bl	8006a44 <RCCEx_PLL3_Config>
 8005e80:	4603      	mov	r3, r0
 8005e82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005e86:	e004      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e8e:	e000      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10b      	bne.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e9a:	4b4b      	ldr	r3, [pc, #300]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e9e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ea6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005eaa:	4a47      	ldr	r2, [pc, #284]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005eac:	430b      	orrs	r3, r1
 8005eae:	6593      	str	r3, [r2, #88]	; 0x58
 8005eb0:	e003      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005ec6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ec8:	2300      	movs	r3, #0
 8005eca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ecc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	d03b      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ede:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ee2:	d01f      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005ee4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ee8:	d818      	bhi.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005eea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eee:	d003      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005ef0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ef4:	d007      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005ef6:	e011      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ef8:	4b33      	ldr	r3, [pc, #204]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	4a32      	ldr	r2, [pc, #200]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f04:	e00f      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f0a:	3328      	adds	r3, #40	; 0x28
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 fd98 	bl	8006a44 <RCCEx_PLL3_Config>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f1a:	e004      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f22:	e000      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10b      	bne.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f2e:	4b26      	ldr	r3, [pc, #152]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f32:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f3e:	4a22      	ldr	r2, [pc, #136]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f40:	430b      	orrs	r3, r1
 8005f42:	6553      	str	r3, [r2, #84]	; 0x54
 8005f44:	e003      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f56:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005f5a:	673b      	str	r3, [r7, #112]	; 0x70
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	677b      	str	r3, [r7, #116]	; 0x74
 8005f60:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005f64:	460b      	mov	r3, r1
 8005f66:	4313      	orrs	r3, r2
 8005f68:	d034      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f78:	d007      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005f7a:	e011      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f7c:	4b12      	ldr	r3, [pc, #72]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	4a11      	ldr	r2, [pc, #68]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005f88:	e00e      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f8e:	3308      	adds	r3, #8
 8005f90:	2102      	movs	r1, #2
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 fca4 	bl	80068e0 <RCCEx_PLL2_Config>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005f9e:	e003      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10d      	bne.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005fb0:	4b05      	ldr	r3, [pc, #20]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fbe:	4a02      	ldr	r2, [pc, #8]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fc0:	430b      	orrs	r3, r1
 8005fc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fc4:	e006      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005fc6:	bf00      	nop
 8005fc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fdc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005fe0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fe6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005fea:	460b      	mov	r3, r1
 8005fec:	4313      	orrs	r3, r2
 8005fee:	d00c      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ff4:	3328      	adds	r3, #40	; 0x28
 8005ff6:	2102      	movs	r1, #2
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 fd23 	bl	8006a44 <RCCEx_PLL3_Config>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800600a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006012:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006016:	663b      	str	r3, [r7, #96]	; 0x60
 8006018:	2300      	movs	r3, #0
 800601a:	667b      	str	r3, [r7, #100]	; 0x64
 800601c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006020:	460b      	mov	r3, r1
 8006022:	4313      	orrs	r3, r2
 8006024:	d038      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800602a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800602e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006032:	d018      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006034:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006038:	d811      	bhi.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800603a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800603e:	d014      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006044:	d80b      	bhi.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006046:	2b00      	cmp	r3, #0
 8006048:	d011      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800604a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800604e:	d106      	bne.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006050:	4bc3      	ldr	r3, [pc, #780]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	4ac2      	ldr	r2, [pc, #776]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800605a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800605c:	e008      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006064:	e004      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006066:	bf00      	nop
 8006068:	e002      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800606a:	bf00      	nop
 800606c:	e000      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800606e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006070:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10b      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006078:	4bb9      	ldr	r3, [pc, #740]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800607a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006088:	4ab5      	ldr	r2, [pc, #724]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800608a:	430b      	orrs	r3, r1
 800608c:	6553      	str	r3, [r2, #84]	; 0x54
 800608e:	e003      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006090:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006094:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80060a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80060a6:	2300      	movs	r3, #0
 80060a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060aa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80060ae:	460b      	mov	r3, r1
 80060b0:	4313      	orrs	r3, r2
 80060b2:	d009      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80060b4:	4baa      	ldr	r3, [pc, #680]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80060bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060c2:	4aa7      	ldr	r2, [pc, #668]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060c4:	430b      	orrs	r3, r1
 80060c6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80060c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80060d4:	653b      	str	r3, [r7, #80]	; 0x50
 80060d6:	2300      	movs	r3, #0
 80060d8:	657b      	str	r3, [r7, #84]	; 0x54
 80060da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80060de:	460b      	mov	r3, r1
 80060e0:	4313      	orrs	r3, r2
 80060e2:	d00a      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80060e4:	4b9e      	ldr	r3, [pc, #632]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80060ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80060f4:	4a9a      	ldr	r2, [pc, #616]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060f6:	430b      	orrs	r3, r1
 80060f8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80060fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006102:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006106:	64bb      	str	r3, [r7, #72]	; 0x48
 8006108:	2300      	movs	r3, #0
 800610a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800610c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006110:	460b      	mov	r3, r1
 8006112:	4313      	orrs	r3, r2
 8006114:	d009      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006116:	4b92      	ldr	r3, [pc, #584]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800611a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800611e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006124:	4a8e      	ldr	r2, [pc, #568]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006126:	430b      	orrs	r3, r1
 8006128:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800612a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800612e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006132:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006136:	643b      	str	r3, [r7, #64]	; 0x40
 8006138:	2300      	movs	r3, #0
 800613a:	647b      	str	r3, [r7, #68]	; 0x44
 800613c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006140:	460b      	mov	r3, r1
 8006142:	4313      	orrs	r3, r2
 8006144:	d00e      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006146:	4b86      	ldr	r3, [pc, #536]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	4a85      	ldr	r2, [pc, #532]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800614c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006150:	6113      	str	r3, [r2, #16]
 8006152:	4b83      	ldr	r3, [pc, #524]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006154:	6919      	ldr	r1, [r3, #16]
 8006156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800615a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800615e:	4a80      	ldr	r2, [pc, #512]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006160:	430b      	orrs	r3, r1
 8006162:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006170:	63bb      	str	r3, [r7, #56]	; 0x38
 8006172:	2300      	movs	r3, #0
 8006174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006176:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800617a:	460b      	mov	r3, r1
 800617c:	4313      	orrs	r3, r2
 800617e:	d009      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006180:	4b77      	ldr	r3, [pc, #476]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006184:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800618c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618e:	4a74      	ldr	r2, [pc, #464]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006190:	430b      	orrs	r3, r1
 8006192:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80061a0:	633b      	str	r3, [r7, #48]	; 0x30
 80061a2:	2300      	movs	r3, #0
 80061a4:	637b      	str	r3, [r7, #52]	; 0x34
 80061a6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80061aa:	460b      	mov	r3, r1
 80061ac:	4313      	orrs	r3, r2
 80061ae:	d00a      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80061b0:	4b6b      	ldr	r3, [pc, #428]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80061b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061c0:	4a67      	ldr	r2, [pc, #412]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061c2:	430b      	orrs	r3, r1
 80061c4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80061c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ce:	2100      	movs	r1, #0
 80061d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061d8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80061dc:	460b      	mov	r3, r1
 80061de:	4313      	orrs	r3, r2
 80061e0:	d011      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e6:	3308      	adds	r3, #8
 80061e8:	2100      	movs	r1, #0
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fb78 	bl	80068e0 <RCCEx_PLL2_Config>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80061f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006202:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	2100      	movs	r1, #0
 8006210:	6239      	str	r1, [r7, #32]
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	627b      	str	r3, [r7, #36]	; 0x24
 8006218:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800621c:	460b      	mov	r3, r1
 800621e:	4313      	orrs	r3, r2
 8006220:	d011      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006226:	3308      	adds	r3, #8
 8006228:	2101      	movs	r1, #1
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fb58 	bl	80068e0 <RCCEx_PLL2_Config>
 8006230:	4603      	mov	r3, r0
 8006232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006236:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800623e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006242:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624e:	2100      	movs	r1, #0
 8006250:	61b9      	str	r1, [r7, #24]
 8006252:	f003 0304 	and.w	r3, r3, #4
 8006256:	61fb      	str	r3, [r7, #28]
 8006258:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800625c:	460b      	mov	r3, r1
 800625e:	4313      	orrs	r3, r2
 8006260:	d011      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006266:	3308      	adds	r3, #8
 8006268:	2102      	movs	r1, #2
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fb38 	bl	80068e0 <RCCEx_PLL2_Config>
 8006270:	4603      	mov	r3, r0
 8006272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006276:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006282:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628e:	2100      	movs	r1, #0
 8006290:	6139      	str	r1, [r7, #16]
 8006292:	f003 0308 	and.w	r3, r3, #8
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800629c:	460b      	mov	r3, r1
 800629e:	4313      	orrs	r3, r2
 80062a0:	d011      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a6:	3328      	adds	r3, #40	; 0x28
 80062a8:	2100      	movs	r1, #0
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 fbca 	bl	8006a44 <RCCEx_PLL3_Config>
 80062b0:	4603      	mov	r3, r0
 80062b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80062b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80062c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ce:	2100      	movs	r1, #0
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	f003 0310 	and.w	r3, r3, #16
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80062dc:	460b      	mov	r3, r1
 80062de:	4313      	orrs	r3, r2
 80062e0:	d011      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e6:	3328      	adds	r3, #40	; 0x28
 80062e8:	2101      	movs	r1, #1
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fbaa 	bl	8006a44 <RCCEx_PLL3_Config>
 80062f0:	4603      	mov	r3, r0
 80062f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80062f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006302:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	2100      	movs	r1, #0
 8006310:	6039      	str	r1, [r7, #0]
 8006312:	f003 0320 	and.w	r3, r3, #32
 8006316:	607b      	str	r3, [r7, #4]
 8006318:	e9d7 1200 	ldrd	r1, r2, [r7]
 800631c:	460b      	mov	r3, r1
 800631e:	4313      	orrs	r3, r2
 8006320:	d011      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006326:	3328      	adds	r3, #40	; 0x28
 8006328:	2102      	movs	r1, #2
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fb8a 	bl	8006a44 <RCCEx_PLL3_Config>
 8006330:	4603      	mov	r3, r0
 8006332:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006336:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006342:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006346:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800634e:	2300      	movs	r3, #0
 8006350:	e000      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
}
 8006354:	4618      	mov	r0, r3
 8006356:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800635a:	46bd      	mov	sp, r7
 800635c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006360:	58024400 	.word	0x58024400

08006364 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006368:	f7fe fd96 	bl	8004e98 <HAL_RCC_GetHCLKFreq>
 800636c:	4602      	mov	r2, r0
 800636e:	4b06      	ldr	r3, [pc, #24]	; (8006388 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	091b      	lsrs	r3, r3, #4
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	4904      	ldr	r1, [pc, #16]	; (800638c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800637a:	5ccb      	ldrb	r3, [r1, r3]
 800637c:	f003 031f 	and.w	r3, r3, #31
 8006380:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006384:	4618      	mov	r0, r3
 8006386:	bd80      	pop	{r7, pc}
 8006388:	58024400 	.word	0x58024400
 800638c:	080098b8 	.word	0x080098b8

08006390 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006390:	b480      	push	{r7}
 8006392:	b089      	sub	sp, #36	; 0x24
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006398:	4ba1      	ldr	r3, [pc, #644]	; (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800639a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639c:	f003 0303 	and.w	r3, r3, #3
 80063a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80063a2:	4b9f      	ldr	r3, [pc, #636]	; (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a6:	0b1b      	lsrs	r3, r3, #12
 80063a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80063ae:	4b9c      	ldr	r3, [pc, #624]	; (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	091b      	lsrs	r3, r3, #4
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80063ba:	4b99      	ldr	r3, [pc, #612]	; (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063be:	08db      	lsrs	r3, r3, #3
 80063c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	fb02 f303 	mul.w	r3, r2, r3
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 8111 	beq.w	8006600 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	f000 8083 	beq.w	80064ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	f200 80a1 	bhi.w	8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d056      	beq.n	80064a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80063fa:	e099      	b.n	8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063fc:	4b88      	ldr	r3, [pc, #544]	; (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b00      	cmp	r3, #0
 8006406:	d02d      	beq.n	8006464 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006408:	4b85      	ldr	r3, [pc, #532]	; (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	08db      	lsrs	r3, r3, #3
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	4a84      	ldr	r2, [pc, #528]	; (8006624 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006414:	fa22 f303 	lsr.w	r3, r2, r3
 8006418:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	ee07 3a90 	vmov	s15, r3
 8006420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	ee07 3a90 	vmov	s15, r3
 800642a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006432:	4b7b      	ldr	r3, [pc, #492]	; (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800643a:	ee07 3a90 	vmov	s15, r3
 800643e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006442:	ed97 6a03 	vldr	s12, [r7, #12]
 8006446:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800644a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800644e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800645a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006462:	e087      	b.n	8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	ee07 3a90 	vmov	s15, r3
 800646a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800662c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006476:	4b6a      	ldr	r3, [pc, #424]	; (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006486:	ed97 6a03 	vldr	s12, [r7, #12]
 800648a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800648e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800649a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800649e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064a6:	e065      	b.n	8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	ee07 3a90 	vmov	s15, r3
 80064ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006630 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80064b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ba:	4b59      	ldr	r3, [pc, #356]	; (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064ea:	e043      	b.n	8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	ee07 3a90 	vmov	s15, r3
 80064f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006634 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80064fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064fe:	4b48      	ldr	r3, [pc, #288]	; (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006506:	ee07 3a90 	vmov	s15, r3
 800650a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800650e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006512:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800651a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800651e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800652a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800652e:	e021      	b.n	8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	ee07 3a90 	vmov	s15, r3
 8006536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800653a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006630 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800653e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006542:	4b37      	ldr	r3, [pc, #220]	; (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800654a:	ee07 3a90 	vmov	s15, r3
 800654e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006552:	ed97 6a03 	vldr	s12, [r7, #12]
 8006556:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800655a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800655e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800656a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800656e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006572:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006574:	4b2a      	ldr	r3, [pc, #168]	; (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006578:	0a5b      	lsrs	r3, r3, #9
 800657a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800657e:	ee07 3a90 	vmov	s15, r3
 8006582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800658a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800658e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800659a:	ee17 2a90 	vmov	r2, s15
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80065a2:	4b1f      	ldr	r3, [pc, #124]	; (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	0c1b      	lsrs	r3, r3, #16
 80065a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065ac:	ee07 3a90 	vmov	s15, r3
 80065b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80065c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065c8:	ee17 2a90 	vmov	r2, s15
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80065d0:	4b13      	ldr	r3, [pc, #76]	; (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d4:	0e1b      	lsrs	r3, r3, #24
 80065d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065da:	ee07 3a90 	vmov	s15, r3
 80065de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80065ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065f6:	ee17 2a90 	vmov	r2, s15
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80065fe:	e008      	b.n	8006612 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	609a      	str	r2, [r3, #8]
}
 8006612:	bf00      	nop
 8006614:	3724      	adds	r7, #36	; 0x24
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	58024400 	.word	0x58024400
 8006624:	03d09000 	.word	0x03d09000
 8006628:	46000000 	.word	0x46000000
 800662c:	4c742400 	.word	0x4c742400
 8006630:	4a742400 	.word	0x4a742400
 8006634:	4af42400 	.word	0x4af42400

08006638 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006638:	b480      	push	{r7}
 800663a:	b089      	sub	sp, #36	; 0x24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006640:	4ba1      	ldr	r3, [pc, #644]	; (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006644:	f003 0303 	and.w	r3, r3, #3
 8006648:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800664a:	4b9f      	ldr	r3, [pc, #636]	; (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800664c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664e:	0d1b      	lsrs	r3, r3, #20
 8006650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006654:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006656:	4b9c      	ldr	r3, [pc, #624]	; (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	0a1b      	lsrs	r3, r3, #8
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006662:	4b99      	ldr	r3, [pc, #612]	; (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006666:	08db      	lsrs	r3, r3, #3
 8006668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	fb02 f303 	mul.w	r3, r2, r3
 8006672:	ee07 3a90 	vmov	s15, r3
 8006676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800667a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 8111 	beq.w	80068a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	2b02      	cmp	r3, #2
 800668a:	f000 8083 	beq.w	8006794 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	2b02      	cmp	r3, #2
 8006692:	f200 80a1 	bhi.w	80067d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d056      	beq.n	8006750 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80066a2:	e099      	b.n	80067d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066a4:	4b88      	ldr	r3, [pc, #544]	; (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0320 	and.w	r3, r3, #32
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d02d      	beq.n	800670c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066b0:	4b85      	ldr	r3, [pc, #532]	; (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	08db      	lsrs	r3, r3, #3
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	4a84      	ldr	r2, [pc, #528]	; (80068cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80066bc:	fa22 f303 	lsr.w	r3, r2, r3
 80066c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	ee07 3a90 	vmov	s15, r3
 80066c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	ee07 3a90 	vmov	s15, r3
 80066d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066da:	4b7b      	ldr	r3, [pc, #492]	; (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e2:	ee07 3a90 	vmov	s15, r3
 80066e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006706:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800670a:	e087      	b.n	800681c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	ee07 3a90 	vmov	s15, r3
 8006712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006716:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80068d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800671a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671e:	4b6a      	ldr	r3, [pc, #424]	; (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006732:	eddf 5a67 	vldr	s11, [pc, #412]	; 80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800673a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800673e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800674a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800674e:	e065      	b.n	800681c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	ee07 3a90 	vmov	s15, r3
 8006756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80068d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800675e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006762:	4b59      	ldr	r3, [pc, #356]	; (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676a:	ee07 3a90 	vmov	s15, r3
 800676e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006772:	ed97 6a03 	vldr	s12, [r7, #12]
 8006776:	eddf 5a56 	vldr	s11, [pc, #344]	; 80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800677a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800677e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800678a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800678e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006792:	e043      	b.n	800681c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	ee07 3a90 	vmov	s15, r3
 800679a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800679e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80067a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067a6:	4b48      	ldr	r3, [pc, #288]	; (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ae:	ee07 3a90 	vmov	s15, r3
 80067b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067d6:	e021      	b.n	800681c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	ee07 3a90 	vmov	s15, r3
 80067de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80068d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80067e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ea:	4b37      	ldr	r3, [pc, #220]	; (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f2:	ee07 3a90 	vmov	s15, r3
 80067f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80067fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800680a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800680e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800681a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800681c:	4b2a      	ldr	r3, [pc, #168]	; (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	0a5b      	lsrs	r3, r3, #9
 8006822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006826:	ee07 3a90 	vmov	s15, r3
 800682a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006832:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006836:	edd7 6a07 	vldr	s13, [r7, #28]
 800683a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800683e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006842:	ee17 2a90 	vmov	r2, s15
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800684a:	4b1f      	ldr	r3, [pc, #124]	; (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	0c1b      	lsrs	r3, r3, #16
 8006850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006854:	ee07 3a90 	vmov	s15, r3
 8006858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006860:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006864:	edd7 6a07 	vldr	s13, [r7, #28]
 8006868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800686c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006870:	ee17 2a90 	vmov	r2, s15
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006878:	4b13      	ldr	r3, [pc, #76]	; (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800687a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687c:	0e1b      	lsrs	r3, r3, #24
 800687e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006882:	ee07 3a90 	vmov	s15, r3
 8006886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800688e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006892:	edd7 6a07 	vldr	s13, [r7, #28]
 8006896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800689a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800689e:	ee17 2a90 	vmov	r2, s15
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80068a6:	e008      	b.n	80068ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	609a      	str	r2, [r3, #8]
}
 80068ba:	bf00      	nop
 80068bc:	3724      	adds	r7, #36	; 0x24
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	58024400 	.word	0x58024400
 80068cc:	03d09000 	.word	0x03d09000
 80068d0:	46000000 	.word	0x46000000
 80068d4:	4c742400 	.word	0x4c742400
 80068d8:	4a742400 	.word	0x4a742400
 80068dc:	4af42400 	.word	0x4af42400

080068e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80068ee:	4b53      	ldr	r3, [pc, #332]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 80068f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d101      	bne.n	80068fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e099      	b.n	8006a32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80068fe:	4b4f      	ldr	r3, [pc, #316]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a4e      	ldr	r2, [pc, #312]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 8006904:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800690a:	f7fa fd85 	bl	8001418 <HAL_GetTick>
 800690e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006910:	e008      	b.n	8006924 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006912:	f7fa fd81 	bl	8001418 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	2b02      	cmp	r3, #2
 800691e:	d901      	bls.n	8006924 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e086      	b.n	8006a32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006924:	4b45      	ldr	r3, [pc, #276]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1f0      	bne.n	8006912 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006930:	4b42      	ldr	r3, [pc, #264]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 8006932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006934:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	031b      	lsls	r3, r3, #12
 800693e:	493f      	ldr	r1, [pc, #252]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 8006940:	4313      	orrs	r3, r2
 8006942:	628b      	str	r3, [r1, #40]	; 0x28
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	3b01      	subs	r3, #1
 800694a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	3b01      	subs	r3, #1
 8006954:	025b      	lsls	r3, r3, #9
 8006956:	b29b      	uxth	r3, r3
 8006958:	431a      	orrs	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	3b01      	subs	r3, #1
 8006960:	041b      	lsls	r3, r3, #16
 8006962:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006966:	431a      	orrs	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	3b01      	subs	r3, #1
 800696e:	061b      	lsls	r3, r3, #24
 8006970:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006974:	4931      	ldr	r1, [pc, #196]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 8006976:	4313      	orrs	r3, r2
 8006978:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800697a:	4b30      	ldr	r3, [pc, #192]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 800697c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	492d      	ldr	r1, [pc, #180]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 8006988:	4313      	orrs	r3, r2
 800698a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800698c:	4b2b      	ldr	r3, [pc, #172]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	f023 0220 	bic.w	r2, r3, #32
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	4928      	ldr	r1, [pc, #160]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 800699a:	4313      	orrs	r3, r2
 800699c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800699e:	4b27      	ldr	r3, [pc, #156]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 80069a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a2:	4a26      	ldr	r2, [pc, #152]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 80069a4:	f023 0310 	bic.w	r3, r3, #16
 80069a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80069aa:	4b24      	ldr	r3, [pc, #144]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 80069ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069ae:	4b24      	ldr	r3, [pc, #144]	; (8006a40 <RCCEx_PLL2_Config+0x160>)
 80069b0:	4013      	ands	r3, r2
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	69d2      	ldr	r2, [r2, #28]
 80069b6:	00d2      	lsls	r2, r2, #3
 80069b8:	4920      	ldr	r1, [pc, #128]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80069be:	4b1f      	ldr	r3, [pc, #124]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 80069c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c2:	4a1e      	ldr	r2, [pc, #120]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 80069c4:	f043 0310 	orr.w	r3, r3, #16
 80069c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d106      	bne.n	80069de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80069d0:	4b1a      	ldr	r3, [pc, #104]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	4a19      	ldr	r2, [pc, #100]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 80069d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069dc:	e00f      	b.n	80069fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d106      	bne.n	80069f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80069e4:	4b15      	ldr	r3, [pc, #84]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 80069e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e8:	4a14      	ldr	r2, [pc, #80]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 80069ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069f0:	e005      	b.n	80069fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80069f2:	4b12      	ldr	r3, [pc, #72]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 80069f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f6:	4a11      	ldr	r2, [pc, #68]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 80069f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80069fe:	4b0f      	ldr	r3, [pc, #60]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a0e      	ldr	r2, [pc, #56]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 8006a04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a0a:	f7fa fd05 	bl	8001418 <HAL_GetTick>
 8006a0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a10:	e008      	b.n	8006a24 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a12:	f7fa fd01 	bl	8001418 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d901      	bls.n	8006a24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e006      	b.n	8006a32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a24:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <RCCEx_PLL2_Config+0x15c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0f0      	beq.n	8006a12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	58024400 	.word	0x58024400
 8006a40:	ffff0007 	.word	0xffff0007

08006a44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a52:	4b53      	ldr	r3, [pc, #332]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a56:	f003 0303 	and.w	r3, r3, #3
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d101      	bne.n	8006a62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e099      	b.n	8006b96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006a62:	4b4f      	ldr	r3, [pc, #316]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a4e      	ldr	r2, [pc, #312]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a6e:	f7fa fcd3 	bl	8001418 <HAL_GetTick>
 8006a72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a74:	e008      	b.n	8006a88 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a76:	f7fa fccf 	bl	8001418 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d901      	bls.n	8006a88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e086      	b.n	8006b96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a88:	4b45      	ldr	r3, [pc, #276]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1f0      	bne.n	8006a76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006a94:	4b42      	ldr	r3, [pc, #264]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	051b      	lsls	r3, r3, #20
 8006aa2:	493f      	ldr	r1, [pc, #252]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	628b      	str	r3, [r1, #40]	; 0x28
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	025b      	lsls	r3, r3, #9
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	041b      	lsls	r3, r3, #16
 8006ac6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006aca:	431a      	orrs	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	061b      	lsls	r3, r3, #24
 8006ad4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ad8:	4931      	ldr	r1, [pc, #196]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006ade:	4b30      	ldr	r3, [pc, #192]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	492d      	ldr	r1, [pc, #180]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006af0:	4b2b      	ldr	r3, [pc, #172]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	4928      	ldr	r1, [pc, #160]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b02:	4b27      	ldr	r3, [pc, #156]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b06:	4a26      	ldr	r2, [pc, #152]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b0e:	4b24      	ldr	r3, [pc, #144]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b12:	4b24      	ldr	r3, [pc, #144]	; (8006ba4 <RCCEx_PLL3_Config+0x160>)
 8006b14:	4013      	ands	r3, r2
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	69d2      	ldr	r2, [r2, #28]
 8006b1a:	00d2      	lsls	r2, r2, #3
 8006b1c:	4920      	ldr	r1, [pc, #128]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006b22:	4b1f      	ldr	r3, [pc, #124]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b26:	4a1e      	ldr	r2, [pc, #120]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d106      	bne.n	8006b42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006b34:	4b1a      	ldr	r3, [pc, #104]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	4a19      	ldr	r2, [pc, #100]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006b3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b40:	e00f      	b.n	8006b62 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d106      	bne.n	8006b56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006b48:	4b15      	ldr	r3, [pc, #84]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4c:	4a14      	ldr	r2, [pc, #80]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006b4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b54:	e005      	b.n	8006b62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006b56:	4b12      	ldr	r3, [pc, #72]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5a:	4a11      	ldr	r2, [pc, #68]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006b5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006b62:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a0e      	ldr	r2, [pc, #56]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b6e:	f7fa fc53 	bl	8001418 <HAL_GetTick>
 8006b72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b74:	e008      	b.n	8006b88 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006b76:	f7fa fc4f 	bl	8001418 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d901      	bls.n	8006b88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e006      	b.n	8006b96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b88:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <RCCEx_PLL3_Config+0x15c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d0f0      	beq.n	8006b76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	58024400 	.word	0x58024400
 8006ba4:	ffff0007 	.word	0xffff0007

08006ba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e049      	b.n	8006c4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d106      	bne.n	8006bd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7fa f9cc 	bl	8000f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	3304      	adds	r3, #4
 8006be4:	4619      	mov	r1, r3
 8006be6:	4610      	mov	r0, r2
 8006be8:	f000 fd5e 	bl	80076a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
	...

08006c58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d001      	beq.n	8006c70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e04c      	b.n	8006d0a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a26      	ldr	r2, [pc, #152]	; (8006d18 <HAL_TIM_Base_Start+0xc0>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d022      	beq.n	8006cc8 <HAL_TIM_Base_Start+0x70>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c8a:	d01d      	beq.n	8006cc8 <HAL_TIM_Base_Start+0x70>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a22      	ldr	r2, [pc, #136]	; (8006d1c <HAL_TIM_Base_Start+0xc4>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d018      	beq.n	8006cc8 <HAL_TIM_Base_Start+0x70>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a21      	ldr	r2, [pc, #132]	; (8006d20 <HAL_TIM_Base_Start+0xc8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d013      	beq.n	8006cc8 <HAL_TIM_Base_Start+0x70>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a1f      	ldr	r2, [pc, #124]	; (8006d24 <HAL_TIM_Base_Start+0xcc>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00e      	beq.n	8006cc8 <HAL_TIM_Base_Start+0x70>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a1e      	ldr	r2, [pc, #120]	; (8006d28 <HAL_TIM_Base_Start+0xd0>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d009      	beq.n	8006cc8 <HAL_TIM_Base_Start+0x70>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a1c      	ldr	r2, [pc, #112]	; (8006d2c <HAL_TIM_Base_Start+0xd4>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d004      	beq.n	8006cc8 <HAL_TIM_Base_Start+0x70>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a1b      	ldr	r2, [pc, #108]	; (8006d30 <HAL_TIM_Base_Start+0xd8>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d115      	bne.n	8006cf4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689a      	ldr	r2, [r3, #8]
 8006cce:	4b19      	ldr	r3, [pc, #100]	; (8006d34 <HAL_TIM_Base_Start+0xdc>)
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b06      	cmp	r3, #6
 8006cd8:	d015      	beq.n	8006d06 <HAL_TIM_Base_Start+0xae>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ce0:	d011      	beq.n	8006d06 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0201 	orr.w	r2, r2, #1
 8006cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf2:	e008      	b.n	8006d06 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0201 	orr.w	r2, r2, #1
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	e000      	b.n	8006d08 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	40010000 	.word	0x40010000
 8006d1c:	40000400 	.word	0x40000400
 8006d20:	40000800 	.word	0x40000800
 8006d24:	40000c00 	.word	0x40000c00
 8006d28:	40010400 	.word	0x40010400
 8006d2c:	40001800 	.word	0x40001800
 8006d30:	40014000 	.word	0x40014000
 8006d34:	00010007 	.word	0x00010007

08006d38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d001      	beq.n	8006d50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e054      	b.n	8006dfa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f042 0201 	orr.w	r2, r2, #1
 8006d66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a26      	ldr	r2, [pc, #152]	; (8006e08 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d022      	beq.n	8006db8 <HAL_TIM_Base_Start_IT+0x80>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d7a:	d01d      	beq.n	8006db8 <HAL_TIM_Base_Start_IT+0x80>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a22      	ldr	r2, [pc, #136]	; (8006e0c <HAL_TIM_Base_Start_IT+0xd4>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d018      	beq.n	8006db8 <HAL_TIM_Base_Start_IT+0x80>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a21      	ldr	r2, [pc, #132]	; (8006e10 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d013      	beq.n	8006db8 <HAL_TIM_Base_Start_IT+0x80>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a1f      	ldr	r2, [pc, #124]	; (8006e14 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d00e      	beq.n	8006db8 <HAL_TIM_Base_Start_IT+0x80>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a1e      	ldr	r2, [pc, #120]	; (8006e18 <HAL_TIM_Base_Start_IT+0xe0>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d009      	beq.n	8006db8 <HAL_TIM_Base_Start_IT+0x80>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a1c      	ldr	r2, [pc, #112]	; (8006e1c <HAL_TIM_Base_Start_IT+0xe4>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d004      	beq.n	8006db8 <HAL_TIM_Base_Start_IT+0x80>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a1b      	ldr	r2, [pc, #108]	; (8006e20 <HAL_TIM_Base_Start_IT+0xe8>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d115      	bne.n	8006de4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689a      	ldr	r2, [r3, #8]
 8006dbe:	4b19      	ldr	r3, [pc, #100]	; (8006e24 <HAL_TIM_Base_Start_IT+0xec>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2b06      	cmp	r3, #6
 8006dc8:	d015      	beq.n	8006df6 <HAL_TIM_Base_Start_IT+0xbe>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd0:	d011      	beq.n	8006df6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f042 0201 	orr.w	r2, r2, #1
 8006de0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de2:	e008      	b.n	8006df6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f042 0201 	orr.w	r2, r2, #1
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	e000      	b.n	8006df8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	40010000 	.word	0x40010000
 8006e0c:	40000400 	.word	0x40000400
 8006e10:	40000800 	.word	0x40000800
 8006e14:	40000c00 	.word	0x40000c00
 8006e18:	40010400 	.word	0x40010400
 8006e1c:	40001800 	.word	0x40001800
 8006e20:	40014000 	.word	0x40014000
 8006e24:	00010007 	.word	0x00010007

08006e28 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 0201 	bic.w	r2, r2, #1
 8006e3e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6a1a      	ldr	r2, [r3, #32]
 8006e46:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10f      	bne.n	8006e70 <HAL_TIM_Base_Stop_IT+0x48>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6a1a      	ldr	r2, [r3, #32]
 8006e56:	f240 4344 	movw	r3, #1092	; 0x444
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d107      	bne.n	8006e70 <HAL_TIM_Base_Stop_IT+0x48>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0201 	bic.w	r2, r2, #1
 8006e6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b082      	sub	sp, #8
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e049      	b.n	8006f2c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d106      	bne.n	8006eb2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f841 	bl	8006f34 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	f000 fbef 	bl	80076a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d109      	bne.n	8006f6c <HAL_TIM_OC_Start+0x24>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	bf14      	ite	ne
 8006f64:	2301      	movne	r3, #1
 8006f66:	2300      	moveq	r3, #0
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	e03c      	b.n	8006fe6 <HAL_TIM_OC_Start+0x9e>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	d109      	bne.n	8006f86 <HAL_TIM_OC_Start+0x3e>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	bf14      	ite	ne
 8006f7e:	2301      	movne	r3, #1
 8006f80:	2300      	moveq	r3, #0
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	e02f      	b.n	8006fe6 <HAL_TIM_OC_Start+0x9e>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d109      	bne.n	8006fa0 <HAL_TIM_OC_Start+0x58>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	bf14      	ite	ne
 8006f98:	2301      	movne	r3, #1
 8006f9a:	2300      	moveq	r3, #0
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	e022      	b.n	8006fe6 <HAL_TIM_OC_Start+0x9e>
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	2b0c      	cmp	r3, #12
 8006fa4:	d109      	bne.n	8006fba <HAL_TIM_OC_Start+0x72>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	bf14      	ite	ne
 8006fb2:	2301      	movne	r3, #1
 8006fb4:	2300      	moveq	r3, #0
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	e015      	b.n	8006fe6 <HAL_TIM_OC_Start+0x9e>
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	2b10      	cmp	r3, #16
 8006fbe:	d109      	bne.n	8006fd4 <HAL_TIM_OC_Start+0x8c>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	bf14      	ite	ne
 8006fcc:	2301      	movne	r3, #1
 8006fce:	2300      	moveq	r3, #0
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	e008      	b.n	8006fe6 <HAL_TIM_OC_Start+0x9e>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	bf14      	ite	ne
 8006fe0:	2301      	movne	r3, #1
 8006fe2:	2300      	moveq	r3, #0
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e0a1      	b.n	8007132 <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d104      	bne.n	8006ffe <HAL_TIM_OC_Start+0xb6>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ffc:	e023      	b.n	8007046 <HAL_TIM_OC_Start+0xfe>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b04      	cmp	r3, #4
 8007002:	d104      	bne.n	800700e <HAL_TIM_OC_Start+0xc6>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2202      	movs	r2, #2
 8007008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800700c:	e01b      	b.n	8007046 <HAL_TIM_OC_Start+0xfe>
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b08      	cmp	r3, #8
 8007012:	d104      	bne.n	800701e <HAL_TIM_OC_Start+0xd6>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2202      	movs	r2, #2
 8007018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800701c:	e013      	b.n	8007046 <HAL_TIM_OC_Start+0xfe>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b0c      	cmp	r3, #12
 8007022:	d104      	bne.n	800702e <HAL_TIM_OC_Start+0xe6>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2202      	movs	r2, #2
 8007028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800702c:	e00b      	b.n	8007046 <HAL_TIM_OC_Start+0xfe>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b10      	cmp	r3, #16
 8007032:	d104      	bne.n	800703e <HAL_TIM_OC_Start+0xf6>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800703c:	e003      	b.n	8007046 <HAL_TIM_OC_Start+0xfe>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2202      	movs	r2, #2
 8007042:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2201      	movs	r2, #1
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	4618      	mov	r0, r3
 8007050:	f000 ff44 	bl	8007edc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a38      	ldr	r2, [pc, #224]	; (800713c <HAL_TIM_OC_Start+0x1f4>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d013      	beq.n	8007086 <HAL_TIM_OC_Start+0x13e>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a37      	ldr	r2, [pc, #220]	; (8007140 <HAL_TIM_OC_Start+0x1f8>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d00e      	beq.n	8007086 <HAL_TIM_OC_Start+0x13e>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a35      	ldr	r2, [pc, #212]	; (8007144 <HAL_TIM_OC_Start+0x1fc>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d009      	beq.n	8007086 <HAL_TIM_OC_Start+0x13e>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a34      	ldr	r2, [pc, #208]	; (8007148 <HAL_TIM_OC_Start+0x200>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d004      	beq.n	8007086 <HAL_TIM_OC_Start+0x13e>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a32      	ldr	r2, [pc, #200]	; (800714c <HAL_TIM_OC_Start+0x204>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d101      	bne.n	800708a <HAL_TIM_OC_Start+0x142>
 8007086:	2301      	movs	r3, #1
 8007088:	e000      	b.n	800708c <HAL_TIM_OC_Start+0x144>
 800708a:	2300      	movs	r3, #0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d007      	beq.n	80070a0 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800709e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a25      	ldr	r2, [pc, #148]	; (800713c <HAL_TIM_OC_Start+0x1f4>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d022      	beq.n	80070f0 <HAL_TIM_OC_Start+0x1a8>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b2:	d01d      	beq.n	80070f0 <HAL_TIM_OC_Start+0x1a8>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a25      	ldr	r2, [pc, #148]	; (8007150 <HAL_TIM_OC_Start+0x208>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d018      	beq.n	80070f0 <HAL_TIM_OC_Start+0x1a8>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a24      	ldr	r2, [pc, #144]	; (8007154 <HAL_TIM_OC_Start+0x20c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d013      	beq.n	80070f0 <HAL_TIM_OC_Start+0x1a8>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a22      	ldr	r2, [pc, #136]	; (8007158 <HAL_TIM_OC_Start+0x210>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00e      	beq.n	80070f0 <HAL_TIM_OC_Start+0x1a8>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a1a      	ldr	r2, [pc, #104]	; (8007140 <HAL_TIM_OC_Start+0x1f8>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d009      	beq.n	80070f0 <HAL_TIM_OC_Start+0x1a8>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a1e      	ldr	r2, [pc, #120]	; (800715c <HAL_TIM_OC_Start+0x214>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d004      	beq.n	80070f0 <HAL_TIM_OC_Start+0x1a8>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a16      	ldr	r2, [pc, #88]	; (8007144 <HAL_TIM_OC_Start+0x1fc>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d115      	bne.n	800711c <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	4b1a      	ldr	r3, [pc, #104]	; (8007160 <HAL_TIM_OC_Start+0x218>)
 80070f8:	4013      	ands	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b06      	cmp	r3, #6
 8007100:	d015      	beq.n	800712e <HAL_TIM_OC_Start+0x1e6>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007108:	d011      	beq.n	800712e <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f042 0201 	orr.w	r2, r2, #1
 8007118:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800711a:	e008      	b.n	800712e <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f042 0201 	orr.w	r2, r2, #1
 800712a:	601a      	str	r2, [r3, #0]
 800712c:	e000      	b.n	8007130 <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800712e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	40010000 	.word	0x40010000
 8007140:	40010400 	.word	0x40010400
 8007144:	40014000 	.word	0x40014000
 8007148:	40014400 	.word	0x40014400
 800714c:	40014800 	.word	0x40014800
 8007150:	40000400 	.word	0x40000400
 8007154:	40000800 	.word	0x40000800
 8007158:	40000c00 	.word	0x40000c00
 800715c:	40001800 	.word	0x40001800
 8007160:	00010007 	.word	0x00010007

08007164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d020      	beq.n	80071c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b00      	cmp	r3, #0
 800718e:	d01b      	beq.n	80071c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f06f 0202 	mvn.w	r2, #2
 8007198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	f003 0303 	and.w	r3, r3, #3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fa5c 	bl	800766c <HAL_TIM_IC_CaptureCallback>
 80071b4:	e005      	b.n	80071c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fa4e 	bl	8007658 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fa5f 	bl	8007680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	f003 0304 	and.w	r3, r3, #4
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d020      	beq.n	8007214 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d01b      	beq.n	8007214 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f06f 0204 	mvn.w	r2, #4
 80071e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2202      	movs	r2, #2
 80071ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fa36 	bl	800766c <HAL_TIM_IC_CaptureCallback>
 8007200:	e005      	b.n	800720e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fa28 	bl	8007658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fa39 	bl	8007680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f003 0308 	and.w	r3, r3, #8
 800721a:	2b00      	cmp	r3, #0
 800721c:	d020      	beq.n	8007260 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f003 0308 	and.w	r3, r3, #8
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01b      	beq.n	8007260 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f06f 0208 	mvn.w	r2, #8
 8007230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2204      	movs	r2, #4
 8007236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	f003 0303 	and.w	r3, r3, #3
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fa10 	bl	800766c <HAL_TIM_IC_CaptureCallback>
 800724c:	e005      	b.n	800725a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fa02 	bl	8007658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fa13 	bl	8007680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	f003 0310 	and.w	r3, r3, #16
 8007266:	2b00      	cmp	r3, #0
 8007268:	d020      	beq.n	80072ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f003 0310 	and.w	r3, r3, #16
 8007270:	2b00      	cmp	r3, #0
 8007272:	d01b      	beq.n	80072ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f06f 0210 	mvn.w	r2, #16
 800727c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2208      	movs	r2, #8
 8007282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f9ea 	bl	800766c <HAL_TIM_IC_CaptureCallback>
 8007298:	e005      	b.n	80072a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f9dc 	bl	8007658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f9ed 	bl	8007680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00c      	beq.n	80072d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d007      	beq.n	80072d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f06f 0201 	mvn.w	r2, #1
 80072c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7f9 fda6 	bl	8000e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d104      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00c      	beq.n	80072fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d007      	beq.n	80072fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80072f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fead 	bl	8008058 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00c      	beq.n	8007322 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730e:	2b00      	cmp	r3, #0
 8007310:	d007      	beq.n	8007322 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800731a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fea5 	bl	800806c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00c      	beq.n	8007346 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007332:	2b00      	cmp	r3, #0
 8007334:	d007      	beq.n	8007346 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800733e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f9a7 	bl	8007694 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	f003 0320 	and.w	r3, r3, #32
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00c      	beq.n	800736a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f003 0320 	and.w	r3, r3, #32
 8007356:	2b00      	cmp	r3, #0
 8007358:	d007      	beq.n	800736a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f06f 0220 	mvn.w	r2, #32
 8007362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fe6d 	bl	8008044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800736a:	bf00      	nop
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
	...

08007374 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800738a:	2b01      	cmp	r3, #1
 800738c:	d101      	bne.n	8007392 <HAL_TIM_OC_ConfigChannel+0x1e>
 800738e:	2302      	movs	r3, #2
 8007390:	e066      	b.n	8007460 <HAL_TIM_OC_ConfigChannel+0xec>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b14      	cmp	r3, #20
 800739e:	d857      	bhi.n	8007450 <HAL_TIM_OC_ConfigChannel+0xdc>
 80073a0:	a201      	add	r2, pc, #4	; (adr r2, 80073a8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80073a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a6:	bf00      	nop
 80073a8:	080073fd 	.word	0x080073fd
 80073ac:	08007451 	.word	0x08007451
 80073b0:	08007451 	.word	0x08007451
 80073b4:	08007451 	.word	0x08007451
 80073b8:	0800740b 	.word	0x0800740b
 80073bc:	08007451 	.word	0x08007451
 80073c0:	08007451 	.word	0x08007451
 80073c4:	08007451 	.word	0x08007451
 80073c8:	08007419 	.word	0x08007419
 80073cc:	08007451 	.word	0x08007451
 80073d0:	08007451 	.word	0x08007451
 80073d4:	08007451 	.word	0x08007451
 80073d8:	08007427 	.word	0x08007427
 80073dc:	08007451 	.word	0x08007451
 80073e0:	08007451 	.word	0x08007451
 80073e4:	08007451 	.word	0x08007451
 80073e8:	08007435 	.word	0x08007435
 80073ec:	08007451 	.word	0x08007451
 80073f0:	08007451 	.word	0x08007451
 80073f4:	08007451 	.word	0x08007451
 80073f8:	08007443 	.word	0x08007443
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68b9      	ldr	r1, [r7, #8]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 f9f6 	bl	80077f4 <TIM_OC1_SetConfig>
      break;
 8007408:	e025      	b.n	8007456 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68b9      	ldr	r1, [r7, #8]
 8007410:	4618      	mov	r0, r3
 8007412:	f000 fa7f 	bl	8007914 <TIM_OC2_SetConfig>
      break;
 8007416:	e01e      	b.n	8007456 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68b9      	ldr	r1, [r7, #8]
 800741e:	4618      	mov	r0, r3
 8007420:	f000 fb02 	bl	8007a28 <TIM_OC3_SetConfig>
      break;
 8007424:	e017      	b.n	8007456 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68b9      	ldr	r1, [r7, #8]
 800742c:	4618      	mov	r0, r3
 800742e:	f000 fb83 	bl	8007b38 <TIM_OC4_SetConfig>
      break;
 8007432:	e010      	b.n	8007456 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68b9      	ldr	r1, [r7, #8]
 800743a:	4618      	mov	r0, r3
 800743c:	f000 fbe6 	bl	8007c0c <TIM_OC5_SetConfig>
      break;
 8007440:	e009      	b.n	8007456 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68b9      	ldr	r1, [r7, #8]
 8007448:	4618      	mov	r0, r3
 800744a:	f000 fc43 	bl	8007cd4 <TIM_OC6_SetConfig>
      break;
 800744e:	e002      	b.n	8007456 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	75fb      	strb	r3, [r7, #23]
      break;
 8007454:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800745e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800747c:	2b01      	cmp	r3, #1
 800747e:	d101      	bne.n	8007484 <HAL_TIM_ConfigClockSource+0x1c>
 8007480:	2302      	movs	r3, #2
 8007482:	e0dc      	b.n	800763e <HAL_TIM_ConfigClockSource+0x1d6>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2202      	movs	r2, #2
 8007490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	4b6a      	ldr	r3, [pc, #424]	; (8007648 <HAL_TIM_ConfigClockSource+0x1e0>)
 80074a0:	4013      	ands	r3, r2
 80074a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a64      	ldr	r2, [pc, #400]	; (800764c <HAL_TIM_ConfigClockSource+0x1e4>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	f000 80a9 	beq.w	8007612 <HAL_TIM_ConfigClockSource+0x1aa>
 80074c0:	4a62      	ldr	r2, [pc, #392]	; (800764c <HAL_TIM_ConfigClockSource+0x1e4>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	f200 80ae 	bhi.w	8007624 <HAL_TIM_ConfigClockSource+0x1bc>
 80074c8:	4a61      	ldr	r2, [pc, #388]	; (8007650 <HAL_TIM_ConfigClockSource+0x1e8>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	f000 80a1 	beq.w	8007612 <HAL_TIM_ConfigClockSource+0x1aa>
 80074d0:	4a5f      	ldr	r2, [pc, #380]	; (8007650 <HAL_TIM_ConfigClockSource+0x1e8>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	f200 80a6 	bhi.w	8007624 <HAL_TIM_ConfigClockSource+0x1bc>
 80074d8:	4a5e      	ldr	r2, [pc, #376]	; (8007654 <HAL_TIM_ConfigClockSource+0x1ec>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	f000 8099 	beq.w	8007612 <HAL_TIM_ConfigClockSource+0x1aa>
 80074e0:	4a5c      	ldr	r2, [pc, #368]	; (8007654 <HAL_TIM_ConfigClockSource+0x1ec>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	f200 809e 	bhi.w	8007624 <HAL_TIM_ConfigClockSource+0x1bc>
 80074e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80074ec:	f000 8091 	beq.w	8007612 <HAL_TIM_ConfigClockSource+0x1aa>
 80074f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80074f4:	f200 8096 	bhi.w	8007624 <HAL_TIM_ConfigClockSource+0x1bc>
 80074f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074fc:	f000 8089 	beq.w	8007612 <HAL_TIM_ConfigClockSource+0x1aa>
 8007500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007504:	f200 808e 	bhi.w	8007624 <HAL_TIM_ConfigClockSource+0x1bc>
 8007508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800750c:	d03e      	beq.n	800758c <HAL_TIM_ConfigClockSource+0x124>
 800750e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007512:	f200 8087 	bhi.w	8007624 <HAL_TIM_ConfigClockSource+0x1bc>
 8007516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800751a:	f000 8086 	beq.w	800762a <HAL_TIM_ConfigClockSource+0x1c2>
 800751e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007522:	d87f      	bhi.n	8007624 <HAL_TIM_ConfigClockSource+0x1bc>
 8007524:	2b70      	cmp	r3, #112	; 0x70
 8007526:	d01a      	beq.n	800755e <HAL_TIM_ConfigClockSource+0xf6>
 8007528:	2b70      	cmp	r3, #112	; 0x70
 800752a:	d87b      	bhi.n	8007624 <HAL_TIM_ConfigClockSource+0x1bc>
 800752c:	2b60      	cmp	r3, #96	; 0x60
 800752e:	d050      	beq.n	80075d2 <HAL_TIM_ConfigClockSource+0x16a>
 8007530:	2b60      	cmp	r3, #96	; 0x60
 8007532:	d877      	bhi.n	8007624 <HAL_TIM_ConfigClockSource+0x1bc>
 8007534:	2b50      	cmp	r3, #80	; 0x50
 8007536:	d03c      	beq.n	80075b2 <HAL_TIM_ConfigClockSource+0x14a>
 8007538:	2b50      	cmp	r3, #80	; 0x50
 800753a:	d873      	bhi.n	8007624 <HAL_TIM_ConfigClockSource+0x1bc>
 800753c:	2b40      	cmp	r3, #64	; 0x40
 800753e:	d058      	beq.n	80075f2 <HAL_TIM_ConfigClockSource+0x18a>
 8007540:	2b40      	cmp	r3, #64	; 0x40
 8007542:	d86f      	bhi.n	8007624 <HAL_TIM_ConfigClockSource+0x1bc>
 8007544:	2b30      	cmp	r3, #48	; 0x30
 8007546:	d064      	beq.n	8007612 <HAL_TIM_ConfigClockSource+0x1aa>
 8007548:	2b30      	cmp	r3, #48	; 0x30
 800754a:	d86b      	bhi.n	8007624 <HAL_TIM_ConfigClockSource+0x1bc>
 800754c:	2b20      	cmp	r3, #32
 800754e:	d060      	beq.n	8007612 <HAL_TIM_ConfigClockSource+0x1aa>
 8007550:	2b20      	cmp	r3, #32
 8007552:	d867      	bhi.n	8007624 <HAL_TIM_ConfigClockSource+0x1bc>
 8007554:	2b00      	cmp	r3, #0
 8007556:	d05c      	beq.n	8007612 <HAL_TIM_ConfigClockSource+0x1aa>
 8007558:	2b10      	cmp	r3, #16
 800755a:	d05a      	beq.n	8007612 <HAL_TIM_ConfigClockSource+0x1aa>
 800755c:	e062      	b.n	8007624 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800756e:	f000 fc95 	bl	8007e9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007580:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	609a      	str	r2, [r3, #8]
      break;
 800758a:	e04f      	b.n	800762c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800759c:	f000 fc7e 	bl	8007e9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689a      	ldr	r2, [r3, #8]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075ae:	609a      	str	r2, [r3, #8]
      break;
 80075b0:	e03c      	b.n	800762c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075be:	461a      	mov	r2, r3
 80075c0:	f000 fbee 	bl	8007da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2150      	movs	r1, #80	; 0x50
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 fc48 	bl	8007e60 <TIM_ITRx_SetConfig>
      break;
 80075d0:	e02c      	b.n	800762c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075de:	461a      	mov	r2, r3
 80075e0:	f000 fc0d 	bl	8007dfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2160      	movs	r1, #96	; 0x60
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fc38 	bl	8007e60 <TIM_ITRx_SetConfig>
      break;
 80075f0:	e01c      	b.n	800762c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075fe:	461a      	mov	r2, r3
 8007600:	f000 fbce 	bl	8007da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2140      	movs	r1, #64	; 0x40
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fc28 	bl	8007e60 <TIM_ITRx_SetConfig>
      break;
 8007610:	e00c      	b.n	800762c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4619      	mov	r1, r3
 800761c:	4610      	mov	r0, r2
 800761e:	f000 fc1f 	bl	8007e60 <TIM_ITRx_SetConfig>
      break;
 8007622:	e003      	b.n	800762c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	73fb      	strb	r3, [r7, #15]
      break;
 8007628:	e000      	b.n	800762c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800762a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800763c:	7bfb      	ldrb	r3, [r7, #15]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	ffceff88 	.word	0xffceff88
 800764c:	00100040 	.word	0x00100040
 8007650:	00100030 	.word	0x00100030
 8007654:	00100020 	.word	0x00100020

08007658 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a46      	ldr	r2, [pc, #280]	; (80077d4 <TIM_Base_SetConfig+0x12c>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d013      	beq.n	80076e8 <TIM_Base_SetConfig+0x40>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c6:	d00f      	beq.n	80076e8 <TIM_Base_SetConfig+0x40>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a43      	ldr	r2, [pc, #268]	; (80077d8 <TIM_Base_SetConfig+0x130>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d00b      	beq.n	80076e8 <TIM_Base_SetConfig+0x40>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a42      	ldr	r2, [pc, #264]	; (80077dc <TIM_Base_SetConfig+0x134>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d007      	beq.n	80076e8 <TIM_Base_SetConfig+0x40>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a41      	ldr	r2, [pc, #260]	; (80077e0 <TIM_Base_SetConfig+0x138>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d003      	beq.n	80076e8 <TIM_Base_SetConfig+0x40>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a40      	ldr	r2, [pc, #256]	; (80077e4 <TIM_Base_SetConfig+0x13c>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d108      	bne.n	80076fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a35      	ldr	r2, [pc, #212]	; (80077d4 <TIM_Base_SetConfig+0x12c>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d01f      	beq.n	8007742 <TIM_Base_SetConfig+0x9a>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007708:	d01b      	beq.n	8007742 <TIM_Base_SetConfig+0x9a>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a32      	ldr	r2, [pc, #200]	; (80077d8 <TIM_Base_SetConfig+0x130>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d017      	beq.n	8007742 <TIM_Base_SetConfig+0x9a>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a31      	ldr	r2, [pc, #196]	; (80077dc <TIM_Base_SetConfig+0x134>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d013      	beq.n	8007742 <TIM_Base_SetConfig+0x9a>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a30      	ldr	r2, [pc, #192]	; (80077e0 <TIM_Base_SetConfig+0x138>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d00f      	beq.n	8007742 <TIM_Base_SetConfig+0x9a>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a2f      	ldr	r2, [pc, #188]	; (80077e4 <TIM_Base_SetConfig+0x13c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d00b      	beq.n	8007742 <TIM_Base_SetConfig+0x9a>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a2e      	ldr	r2, [pc, #184]	; (80077e8 <TIM_Base_SetConfig+0x140>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d007      	beq.n	8007742 <TIM_Base_SetConfig+0x9a>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a2d      	ldr	r2, [pc, #180]	; (80077ec <TIM_Base_SetConfig+0x144>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d003      	beq.n	8007742 <TIM_Base_SetConfig+0x9a>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a2c      	ldr	r2, [pc, #176]	; (80077f0 <TIM_Base_SetConfig+0x148>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d108      	bne.n	8007754 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	4313      	orrs	r3, r2
 8007752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	4313      	orrs	r3, r2
 8007760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	689a      	ldr	r2, [r3, #8]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a16      	ldr	r2, [pc, #88]	; (80077d4 <TIM_Base_SetConfig+0x12c>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d00f      	beq.n	80077a0 <TIM_Base_SetConfig+0xf8>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a18      	ldr	r2, [pc, #96]	; (80077e4 <TIM_Base_SetConfig+0x13c>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d00b      	beq.n	80077a0 <TIM_Base_SetConfig+0xf8>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a17      	ldr	r2, [pc, #92]	; (80077e8 <TIM_Base_SetConfig+0x140>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d007      	beq.n	80077a0 <TIM_Base_SetConfig+0xf8>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a16      	ldr	r2, [pc, #88]	; (80077ec <TIM_Base_SetConfig+0x144>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d003      	beq.n	80077a0 <TIM_Base_SetConfig+0xf8>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a15      	ldr	r2, [pc, #84]	; (80077f0 <TIM_Base_SetConfig+0x148>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d103      	bne.n	80077a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	691a      	ldr	r2, [r3, #16]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d105      	bne.n	80077c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f023 0201 	bic.w	r2, r3, #1
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	611a      	str	r2, [r3, #16]
  }
}
 80077c6:	bf00      	nop
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	40010000 	.word	0x40010000
 80077d8:	40000400 	.word	0x40000400
 80077dc:	40000800 	.word	0x40000800
 80077e0:	40000c00 	.word	0x40000c00
 80077e4:	40010400 	.word	0x40010400
 80077e8:	40014000 	.word	0x40014000
 80077ec:	40014400 	.word	0x40014400
 80077f0:	40014800 	.word	0x40014800

080077f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a1b      	ldr	r3, [r3, #32]
 8007808:	f023 0201 	bic.w	r2, r3, #1
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	4b37      	ldr	r3, [pc, #220]	; (80078fc <TIM_OC1_SetConfig+0x108>)
 8007820:	4013      	ands	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f023 0303 	bic.w	r3, r3, #3
 800782a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	4313      	orrs	r3, r2
 8007834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f023 0302 	bic.w	r3, r3, #2
 800783c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	4313      	orrs	r3, r2
 8007846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a2d      	ldr	r2, [pc, #180]	; (8007900 <TIM_OC1_SetConfig+0x10c>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d00f      	beq.n	8007870 <TIM_OC1_SetConfig+0x7c>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a2c      	ldr	r2, [pc, #176]	; (8007904 <TIM_OC1_SetConfig+0x110>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d00b      	beq.n	8007870 <TIM_OC1_SetConfig+0x7c>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a2b      	ldr	r2, [pc, #172]	; (8007908 <TIM_OC1_SetConfig+0x114>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d007      	beq.n	8007870 <TIM_OC1_SetConfig+0x7c>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a2a      	ldr	r2, [pc, #168]	; (800790c <TIM_OC1_SetConfig+0x118>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d003      	beq.n	8007870 <TIM_OC1_SetConfig+0x7c>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a29      	ldr	r2, [pc, #164]	; (8007910 <TIM_OC1_SetConfig+0x11c>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d10c      	bne.n	800788a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	f023 0308 	bic.w	r3, r3, #8
 8007876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	4313      	orrs	r3, r2
 8007880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f023 0304 	bic.w	r3, r3, #4
 8007888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a1c      	ldr	r2, [pc, #112]	; (8007900 <TIM_OC1_SetConfig+0x10c>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d00f      	beq.n	80078b2 <TIM_OC1_SetConfig+0xbe>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a1b      	ldr	r2, [pc, #108]	; (8007904 <TIM_OC1_SetConfig+0x110>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d00b      	beq.n	80078b2 <TIM_OC1_SetConfig+0xbe>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a1a      	ldr	r2, [pc, #104]	; (8007908 <TIM_OC1_SetConfig+0x114>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d007      	beq.n	80078b2 <TIM_OC1_SetConfig+0xbe>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a19      	ldr	r2, [pc, #100]	; (800790c <TIM_OC1_SetConfig+0x118>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d003      	beq.n	80078b2 <TIM_OC1_SetConfig+0xbe>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a18      	ldr	r2, [pc, #96]	; (8007910 <TIM_OC1_SetConfig+0x11c>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d111      	bne.n	80078d6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	621a      	str	r2, [r3, #32]
}
 80078f0:	bf00      	nop
 80078f2:	371c      	adds	r7, #28
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	fffeff8f 	.word	0xfffeff8f
 8007900:	40010000 	.word	0x40010000
 8007904:	40010400 	.word	0x40010400
 8007908:	40014000 	.word	0x40014000
 800790c:	40014400 	.word	0x40014400
 8007910:	40014800 	.word	0x40014800

08007914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007914:	b480      	push	{r7}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a1b      	ldr	r3, [r3, #32]
 8007928:	f023 0210 	bic.w	r2, r3, #16
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	4b34      	ldr	r3, [pc, #208]	; (8007a10 <TIM_OC2_SetConfig+0xfc>)
 8007940:	4013      	ands	r3, r2
 8007942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800794a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	021b      	lsls	r3, r3, #8
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	4313      	orrs	r3, r2
 8007956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	f023 0320 	bic.w	r3, r3, #32
 800795e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	011b      	lsls	r3, r3, #4
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	4313      	orrs	r3, r2
 800796a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a29      	ldr	r2, [pc, #164]	; (8007a14 <TIM_OC2_SetConfig+0x100>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d003      	beq.n	800797c <TIM_OC2_SetConfig+0x68>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a28      	ldr	r2, [pc, #160]	; (8007a18 <TIM_OC2_SetConfig+0x104>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d10d      	bne.n	8007998 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	4313      	orrs	r3, r2
 800798e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007996:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a1e      	ldr	r2, [pc, #120]	; (8007a14 <TIM_OC2_SetConfig+0x100>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d00f      	beq.n	80079c0 <TIM_OC2_SetConfig+0xac>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a1d      	ldr	r2, [pc, #116]	; (8007a18 <TIM_OC2_SetConfig+0x104>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d00b      	beq.n	80079c0 <TIM_OC2_SetConfig+0xac>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a1c      	ldr	r2, [pc, #112]	; (8007a1c <TIM_OC2_SetConfig+0x108>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d007      	beq.n	80079c0 <TIM_OC2_SetConfig+0xac>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a1b      	ldr	r2, [pc, #108]	; (8007a20 <TIM_OC2_SetConfig+0x10c>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d003      	beq.n	80079c0 <TIM_OC2_SetConfig+0xac>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a1a      	ldr	r2, [pc, #104]	; (8007a24 <TIM_OC2_SetConfig+0x110>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d113      	bne.n	80079e8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	4313      	orrs	r3, r2
 80079da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	621a      	str	r2, [r3, #32]
}
 8007a02:	bf00      	nop
 8007a04:	371c      	adds	r7, #28
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	feff8fff 	.word	0xfeff8fff
 8007a14:	40010000 	.word	0x40010000
 8007a18:	40010400 	.word	0x40010400
 8007a1c:	40014000 	.word	0x40014000
 8007a20:	40014400 	.word	0x40014400
 8007a24:	40014800 	.word	0x40014800

08007a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a1b      	ldr	r3, [r3, #32]
 8007a3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	4b33      	ldr	r3, [pc, #204]	; (8007b20 <TIM_OC3_SetConfig+0xf8>)
 8007a54:	4013      	ands	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0303 	bic.w	r3, r3, #3
 8007a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	021b      	lsls	r3, r3, #8
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a28      	ldr	r2, [pc, #160]	; (8007b24 <TIM_OC3_SetConfig+0xfc>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d003      	beq.n	8007a8e <TIM_OC3_SetConfig+0x66>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a27      	ldr	r2, [pc, #156]	; (8007b28 <TIM_OC3_SetConfig+0x100>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d10d      	bne.n	8007aaa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	021b      	lsls	r3, r3, #8
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a1d      	ldr	r2, [pc, #116]	; (8007b24 <TIM_OC3_SetConfig+0xfc>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00f      	beq.n	8007ad2 <TIM_OC3_SetConfig+0xaa>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a1c      	ldr	r2, [pc, #112]	; (8007b28 <TIM_OC3_SetConfig+0x100>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d00b      	beq.n	8007ad2 <TIM_OC3_SetConfig+0xaa>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a1b      	ldr	r2, [pc, #108]	; (8007b2c <TIM_OC3_SetConfig+0x104>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d007      	beq.n	8007ad2 <TIM_OC3_SetConfig+0xaa>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a1a      	ldr	r2, [pc, #104]	; (8007b30 <TIM_OC3_SetConfig+0x108>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d003      	beq.n	8007ad2 <TIM_OC3_SetConfig+0xaa>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a19      	ldr	r2, [pc, #100]	; (8007b34 <TIM_OC3_SetConfig+0x10c>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d113      	bne.n	8007afa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	011b      	lsls	r3, r3, #4
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	011b      	lsls	r3, r3, #4
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	685a      	ldr	r2, [r3, #4]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	621a      	str	r2, [r3, #32]
}
 8007b14:	bf00      	nop
 8007b16:	371c      	adds	r7, #28
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	fffeff8f 	.word	0xfffeff8f
 8007b24:	40010000 	.word	0x40010000
 8007b28:	40010400 	.word	0x40010400
 8007b2c:	40014000 	.word	0x40014000
 8007b30:	40014400 	.word	0x40014400
 8007b34:	40014800 	.word	0x40014800

08007b38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	4b24      	ldr	r3, [pc, #144]	; (8007bf4 <TIM_OC4_SetConfig+0xbc>)
 8007b64:	4013      	ands	r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	021b      	lsls	r3, r3, #8
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	031b      	lsls	r3, r3, #12
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a19      	ldr	r2, [pc, #100]	; (8007bf8 <TIM_OC4_SetConfig+0xc0>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d00f      	beq.n	8007bb8 <TIM_OC4_SetConfig+0x80>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a18      	ldr	r2, [pc, #96]	; (8007bfc <TIM_OC4_SetConfig+0xc4>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d00b      	beq.n	8007bb8 <TIM_OC4_SetConfig+0x80>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a17      	ldr	r2, [pc, #92]	; (8007c00 <TIM_OC4_SetConfig+0xc8>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d007      	beq.n	8007bb8 <TIM_OC4_SetConfig+0x80>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a16      	ldr	r2, [pc, #88]	; (8007c04 <TIM_OC4_SetConfig+0xcc>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d003      	beq.n	8007bb8 <TIM_OC4_SetConfig+0x80>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a15      	ldr	r2, [pc, #84]	; (8007c08 <TIM_OC4_SetConfig+0xd0>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d109      	bne.n	8007bcc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	695b      	ldr	r3, [r3, #20]
 8007bc4:	019b      	lsls	r3, r3, #6
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	621a      	str	r2, [r3, #32]
}
 8007be6:	bf00      	nop
 8007be8:	371c      	adds	r7, #28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	feff8fff 	.word	0xfeff8fff
 8007bf8:	40010000 	.word	0x40010000
 8007bfc:	40010400 	.word	0x40010400
 8007c00:	40014000 	.word	0x40014000
 8007c04:	40014400 	.word	0x40014400
 8007c08:	40014800 	.word	0x40014800

08007c0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a1b      	ldr	r3, [r3, #32]
 8007c20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	4b21      	ldr	r3, [pc, #132]	; (8007cbc <TIM_OC5_SetConfig+0xb0>)
 8007c38:	4013      	ands	r3, r2
 8007c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	041b      	lsls	r3, r3, #16
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a18      	ldr	r2, [pc, #96]	; (8007cc0 <TIM_OC5_SetConfig+0xb4>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d00f      	beq.n	8007c82 <TIM_OC5_SetConfig+0x76>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a17      	ldr	r2, [pc, #92]	; (8007cc4 <TIM_OC5_SetConfig+0xb8>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d00b      	beq.n	8007c82 <TIM_OC5_SetConfig+0x76>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a16      	ldr	r2, [pc, #88]	; (8007cc8 <TIM_OC5_SetConfig+0xbc>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d007      	beq.n	8007c82 <TIM_OC5_SetConfig+0x76>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a15      	ldr	r2, [pc, #84]	; (8007ccc <TIM_OC5_SetConfig+0xc0>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d003      	beq.n	8007c82 <TIM_OC5_SetConfig+0x76>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a14      	ldr	r2, [pc, #80]	; (8007cd0 <TIM_OC5_SetConfig+0xc4>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d109      	bne.n	8007c96 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	021b      	lsls	r3, r3, #8
 8007c90:	697a      	ldr	r2, [r7, #20]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	621a      	str	r2, [r3, #32]
}
 8007cb0:	bf00      	nop
 8007cb2:	371c      	adds	r7, #28
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	fffeff8f 	.word	0xfffeff8f
 8007cc0:	40010000 	.word	0x40010000
 8007cc4:	40010400 	.word	0x40010400
 8007cc8:	40014000 	.word	0x40014000
 8007ccc:	40014400 	.word	0x40014400
 8007cd0:	40014800 	.word	0x40014800

08007cd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a1b      	ldr	r3, [r3, #32]
 8007ce8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	4b22      	ldr	r3, [pc, #136]	; (8007d88 <TIM_OC6_SetConfig+0xb4>)
 8007d00:	4013      	ands	r3, r2
 8007d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	021b      	lsls	r3, r3, #8
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	051b      	lsls	r3, r3, #20
 8007d1e:	693a      	ldr	r2, [r7, #16]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a19      	ldr	r2, [pc, #100]	; (8007d8c <TIM_OC6_SetConfig+0xb8>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d00f      	beq.n	8007d4c <TIM_OC6_SetConfig+0x78>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a18      	ldr	r2, [pc, #96]	; (8007d90 <TIM_OC6_SetConfig+0xbc>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d00b      	beq.n	8007d4c <TIM_OC6_SetConfig+0x78>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a17      	ldr	r2, [pc, #92]	; (8007d94 <TIM_OC6_SetConfig+0xc0>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d007      	beq.n	8007d4c <TIM_OC6_SetConfig+0x78>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a16      	ldr	r2, [pc, #88]	; (8007d98 <TIM_OC6_SetConfig+0xc4>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d003      	beq.n	8007d4c <TIM_OC6_SetConfig+0x78>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a15      	ldr	r2, [pc, #84]	; (8007d9c <TIM_OC6_SetConfig+0xc8>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d109      	bne.n	8007d60 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	029b      	lsls	r3, r3, #10
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	621a      	str	r2, [r3, #32]
}
 8007d7a:	bf00      	nop
 8007d7c:	371c      	adds	r7, #28
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	feff8fff 	.word	0xfeff8fff
 8007d8c:	40010000 	.word	0x40010000
 8007d90:	40010400 	.word	0x40010400
 8007d94:	40014000 	.word	0x40014000
 8007d98:	40014400 	.word	0x40014400
 8007d9c:	40014800 	.word	0x40014800

08007da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	f023 0201 	bic.w	r2, r3, #1
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	011b      	lsls	r3, r3, #4
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f023 030a 	bic.w	r3, r3, #10
 8007ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	621a      	str	r2, [r3, #32]
}
 8007df2:	bf00      	nop
 8007df4:	371c      	adds	r7, #28
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b087      	sub	sp, #28
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	60f8      	str	r0, [r7, #12]
 8007e06:	60b9      	str	r1, [r7, #8]
 8007e08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6a1b      	ldr	r3, [r3, #32]
 8007e14:	f023 0210 	bic.w	r2, r3, #16
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	031b      	lsls	r3, r3, #12
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	011b      	lsls	r3, r3, #4
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	621a      	str	r2, [r3, #32]
}
 8007e52:	bf00      	nop
 8007e54:	371c      	adds	r7, #28
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
	...

08007e60 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	4b09      	ldr	r3, [pc, #36]	; (8007e98 <TIM_ITRx_SetConfig+0x38>)
 8007e74:	4013      	ands	r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	f043 0307 	orr.w	r3, r3, #7
 8007e82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	609a      	str	r2, [r3, #8]
}
 8007e8a:	bf00      	nop
 8007e8c:	3714      	adds	r7, #20
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	ffcfff8f 	.word	0xffcfff8f

08007e9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b087      	sub	sp, #28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
 8007ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007eb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	021a      	lsls	r2, r3, #8
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	609a      	str	r2, [r3, #8]
}
 8007ed0:	bf00      	nop
 8007ed2:	371c      	adds	r7, #28
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b087      	sub	sp, #28
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	f003 031f 	and.w	r3, r3, #31
 8007eee:	2201      	movs	r2, #1
 8007ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6a1a      	ldr	r2, [r3, #32]
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	43db      	mvns	r3, r3
 8007efe:	401a      	ands	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6a1a      	ldr	r2, [r3, #32]
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f003 031f 	and.w	r3, r3, #31
 8007f0e:	6879      	ldr	r1, [r7, #4]
 8007f10:	fa01 f303 	lsl.w	r3, r1, r3
 8007f14:	431a      	orrs	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	621a      	str	r2, [r3, #32]
}
 8007f1a:	bf00      	nop
 8007f1c:	371c      	adds	r7, #28
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
	...

08007f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d101      	bne.n	8007f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	e06d      	b.n	800801c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a30      	ldr	r2, [pc, #192]	; (8008028 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d004      	beq.n	8007f74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a2f      	ldr	r2, [pc, #188]	; (800802c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d108      	bne.n	8007f86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a20      	ldr	r2, [pc, #128]	; (8008028 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d022      	beq.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb2:	d01d      	beq.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a1d      	ldr	r2, [pc, #116]	; (8008030 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d018      	beq.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a1c      	ldr	r2, [pc, #112]	; (8008034 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d013      	beq.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a1a      	ldr	r2, [pc, #104]	; (8008038 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d00e      	beq.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a15      	ldr	r2, [pc, #84]	; (800802c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d009      	beq.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a16      	ldr	r2, [pc, #88]	; (800803c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d004      	beq.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a15      	ldr	r2, [pc, #84]	; (8008040 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d10c      	bne.n	800800a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ff6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2201      	movs	r2, #1
 800800e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	40010000 	.word	0x40010000
 800802c:	40010400 	.word	0x40010400
 8008030:	40000400 	.word	0x40000400
 8008034:	40000800 	.word	0x40000800
 8008038:	40000c00 	.word	0x40000c00
 800803c:	40001800 	.word	0x40001800
 8008040:	40014000 	.word	0x40014000

08008044 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e042      	b.n	8008118 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008098:	2b00      	cmp	r3, #0
 800809a:	d106      	bne.n	80080aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7f8 ffd3 	bl	8001050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2224      	movs	r2, #36	; 0x24
 80080ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f022 0201 	bic.w	r2, r2, #1
 80080c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fd90 	bl	8008bf0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f825 	bl	8008120 <UART_SetConfig>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d101      	bne.n	80080e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e01b      	b.n	8008118 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f042 0201 	orr.w	r2, r2, #1
 800810e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fe0f 	bl	8008d34 <UART_CheckIdleState>
 8008116:	4603      	mov	r3, r0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008124:	b092      	sub	sp, #72	; 0x48
 8008126:	af00      	add	r7, sp, #0
 8008128:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	689a      	ldr	r2, [r3, #8]
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	431a      	orrs	r2, r3
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	431a      	orrs	r2, r3
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	69db      	ldr	r3, [r3, #28]
 8008144:	4313      	orrs	r3, r2
 8008146:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	4bbe      	ldr	r3, [pc, #760]	; (8008448 <UART_SetConfig+0x328>)
 8008150:	4013      	ands	r3, r2
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	6812      	ldr	r2, [r2, #0]
 8008156:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008158:	430b      	orrs	r3, r1
 800815a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	68da      	ldr	r2, [r3, #12]
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	430a      	orrs	r2, r1
 8008170:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4ab3      	ldr	r2, [pc, #716]	; (800844c <UART_SetConfig+0x32c>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d004      	beq.n	800818c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008188:	4313      	orrs	r3, r2
 800818a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	689a      	ldr	r2, [r3, #8]
 8008192:	4baf      	ldr	r3, [pc, #700]	; (8008450 <UART_SetConfig+0x330>)
 8008194:	4013      	ands	r3, r2
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	6812      	ldr	r2, [r2, #0]
 800819a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800819c:	430b      	orrs	r3, r1
 800819e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a6:	f023 010f 	bic.w	r1, r3, #15
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4aa6      	ldr	r2, [pc, #664]	; (8008454 <UART_SetConfig+0x334>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d177      	bne.n	80082b0 <UART_SetConfig+0x190>
 80081c0:	4ba5      	ldr	r3, [pc, #660]	; (8008458 <UART_SetConfig+0x338>)
 80081c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081c8:	2b28      	cmp	r3, #40	; 0x28
 80081ca:	d86d      	bhi.n	80082a8 <UART_SetConfig+0x188>
 80081cc:	a201      	add	r2, pc, #4	; (adr r2, 80081d4 <UART_SetConfig+0xb4>)
 80081ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d2:	bf00      	nop
 80081d4:	08008279 	.word	0x08008279
 80081d8:	080082a9 	.word	0x080082a9
 80081dc:	080082a9 	.word	0x080082a9
 80081e0:	080082a9 	.word	0x080082a9
 80081e4:	080082a9 	.word	0x080082a9
 80081e8:	080082a9 	.word	0x080082a9
 80081ec:	080082a9 	.word	0x080082a9
 80081f0:	080082a9 	.word	0x080082a9
 80081f4:	08008281 	.word	0x08008281
 80081f8:	080082a9 	.word	0x080082a9
 80081fc:	080082a9 	.word	0x080082a9
 8008200:	080082a9 	.word	0x080082a9
 8008204:	080082a9 	.word	0x080082a9
 8008208:	080082a9 	.word	0x080082a9
 800820c:	080082a9 	.word	0x080082a9
 8008210:	080082a9 	.word	0x080082a9
 8008214:	08008289 	.word	0x08008289
 8008218:	080082a9 	.word	0x080082a9
 800821c:	080082a9 	.word	0x080082a9
 8008220:	080082a9 	.word	0x080082a9
 8008224:	080082a9 	.word	0x080082a9
 8008228:	080082a9 	.word	0x080082a9
 800822c:	080082a9 	.word	0x080082a9
 8008230:	080082a9 	.word	0x080082a9
 8008234:	08008291 	.word	0x08008291
 8008238:	080082a9 	.word	0x080082a9
 800823c:	080082a9 	.word	0x080082a9
 8008240:	080082a9 	.word	0x080082a9
 8008244:	080082a9 	.word	0x080082a9
 8008248:	080082a9 	.word	0x080082a9
 800824c:	080082a9 	.word	0x080082a9
 8008250:	080082a9 	.word	0x080082a9
 8008254:	08008299 	.word	0x08008299
 8008258:	080082a9 	.word	0x080082a9
 800825c:	080082a9 	.word	0x080082a9
 8008260:	080082a9 	.word	0x080082a9
 8008264:	080082a9 	.word	0x080082a9
 8008268:	080082a9 	.word	0x080082a9
 800826c:	080082a9 	.word	0x080082a9
 8008270:	080082a9 	.word	0x080082a9
 8008274:	080082a1 	.word	0x080082a1
 8008278:	2301      	movs	r3, #1
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800827e:	e222      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008280:	2304      	movs	r3, #4
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008286:	e21e      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008288:	2308      	movs	r3, #8
 800828a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800828e:	e21a      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008290:	2310      	movs	r3, #16
 8008292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008296:	e216      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008298:	2320      	movs	r3, #32
 800829a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800829e:	e212      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80082a0:	2340      	movs	r3, #64	; 0x40
 80082a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082a6:	e20e      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80082a8:	2380      	movs	r3, #128	; 0x80
 80082aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ae:	e20a      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a69      	ldr	r2, [pc, #420]	; (800845c <UART_SetConfig+0x33c>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d130      	bne.n	800831c <UART_SetConfig+0x1fc>
 80082ba:	4b67      	ldr	r3, [pc, #412]	; (8008458 <UART_SetConfig+0x338>)
 80082bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082be:	f003 0307 	and.w	r3, r3, #7
 80082c2:	2b05      	cmp	r3, #5
 80082c4:	d826      	bhi.n	8008314 <UART_SetConfig+0x1f4>
 80082c6:	a201      	add	r2, pc, #4	; (adr r2, 80082cc <UART_SetConfig+0x1ac>)
 80082c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082cc:	080082e5 	.word	0x080082e5
 80082d0:	080082ed 	.word	0x080082ed
 80082d4:	080082f5 	.word	0x080082f5
 80082d8:	080082fd 	.word	0x080082fd
 80082dc:	08008305 	.word	0x08008305
 80082e0:	0800830d 	.word	0x0800830d
 80082e4:	2300      	movs	r3, #0
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ea:	e1ec      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80082ec:	2304      	movs	r3, #4
 80082ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082f2:	e1e8      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80082f4:	2308      	movs	r3, #8
 80082f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082fa:	e1e4      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80082fc:	2310      	movs	r3, #16
 80082fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008302:	e1e0      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008304:	2320      	movs	r3, #32
 8008306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800830a:	e1dc      	b.n	80086c6 <UART_SetConfig+0x5a6>
 800830c:	2340      	movs	r3, #64	; 0x40
 800830e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008312:	e1d8      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008314:	2380      	movs	r3, #128	; 0x80
 8008316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800831a:	e1d4      	b.n	80086c6 <UART_SetConfig+0x5a6>
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a4f      	ldr	r2, [pc, #316]	; (8008460 <UART_SetConfig+0x340>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d130      	bne.n	8008388 <UART_SetConfig+0x268>
 8008326:	4b4c      	ldr	r3, [pc, #304]	; (8008458 <UART_SetConfig+0x338>)
 8008328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800832a:	f003 0307 	and.w	r3, r3, #7
 800832e:	2b05      	cmp	r3, #5
 8008330:	d826      	bhi.n	8008380 <UART_SetConfig+0x260>
 8008332:	a201      	add	r2, pc, #4	; (adr r2, 8008338 <UART_SetConfig+0x218>)
 8008334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008338:	08008351 	.word	0x08008351
 800833c:	08008359 	.word	0x08008359
 8008340:	08008361 	.word	0x08008361
 8008344:	08008369 	.word	0x08008369
 8008348:	08008371 	.word	0x08008371
 800834c:	08008379 	.word	0x08008379
 8008350:	2300      	movs	r3, #0
 8008352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008356:	e1b6      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008358:	2304      	movs	r3, #4
 800835a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835e:	e1b2      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008360:	2308      	movs	r3, #8
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008366:	e1ae      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008368:	2310      	movs	r3, #16
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836e:	e1aa      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008370:	2320      	movs	r3, #32
 8008372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008376:	e1a6      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008378:	2340      	movs	r3, #64	; 0x40
 800837a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800837e:	e1a2      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008380:	2380      	movs	r3, #128	; 0x80
 8008382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008386:	e19e      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a35      	ldr	r2, [pc, #212]	; (8008464 <UART_SetConfig+0x344>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d130      	bne.n	80083f4 <UART_SetConfig+0x2d4>
 8008392:	4b31      	ldr	r3, [pc, #196]	; (8008458 <UART_SetConfig+0x338>)
 8008394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	2b05      	cmp	r3, #5
 800839c:	d826      	bhi.n	80083ec <UART_SetConfig+0x2cc>
 800839e:	a201      	add	r2, pc, #4	; (adr r2, 80083a4 <UART_SetConfig+0x284>)
 80083a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a4:	080083bd 	.word	0x080083bd
 80083a8:	080083c5 	.word	0x080083c5
 80083ac:	080083cd 	.word	0x080083cd
 80083b0:	080083d5 	.word	0x080083d5
 80083b4:	080083dd 	.word	0x080083dd
 80083b8:	080083e5 	.word	0x080083e5
 80083bc:	2300      	movs	r3, #0
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c2:	e180      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80083c4:	2304      	movs	r3, #4
 80083c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ca:	e17c      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80083cc:	2308      	movs	r3, #8
 80083ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083d2:	e178      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80083d4:	2310      	movs	r3, #16
 80083d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083da:	e174      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80083dc:	2320      	movs	r3, #32
 80083de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083e2:	e170      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80083e4:	2340      	movs	r3, #64	; 0x40
 80083e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ea:	e16c      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80083ec:	2380      	movs	r3, #128	; 0x80
 80083ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083f2:	e168      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a1b      	ldr	r2, [pc, #108]	; (8008468 <UART_SetConfig+0x348>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d142      	bne.n	8008484 <UART_SetConfig+0x364>
 80083fe:	4b16      	ldr	r3, [pc, #88]	; (8008458 <UART_SetConfig+0x338>)
 8008400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008402:	f003 0307 	and.w	r3, r3, #7
 8008406:	2b05      	cmp	r3, #5
 8008408:	d838      	bhi.n	800847c <UART_SetConfig+0x35c>
 800840a:	a201      	add	r2, pc, #4	; (adr r2, 8008410 <UART_SetConfig+0x2f0>)
 800840c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008410:	08008429 	.word	0x08008429
 8008414:	08008431 	.word	0x08008431
 8008418:	08008439 	.word	0x08008439
 800841c:	08008441 	.word	0x08008441
 8008420:	0800846d 	.word	0x0800846d
 8008424:	08008475 	.word	0x08008475
 8008428:	2300      	movs	r3, #0
 800842a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800842e:	e14a      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008430:	2304      	movs	r3, #4
 8008432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008436:	e146      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008438:	2308      	movs	r3, #8
 800843a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800843e:	e142      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008440:	2310      	movs	r3, #16
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008446:	e13e      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008448:	cfff69f3 	.word	0xcfff69f3
 800844c:	58000c00 	.word	0x58000c00
 8008450:	11fff4ff 	.word	0x11fff4ff
 8008454:	40011000 	.word	0x40011000
 8008458:	58024400 	.word	0x58024400
 800845c:	40004400 	.word	0x40004400
 8008460:	40004800 	.word	0x40004800
 8008464:	40004c00 	.word	0x40004c00
 8008468:	40005000 	.word	0x40005000
 800846c:	2320      	movs	r3, #32
 800846e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008472:	e128      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008474:	2340      	movs	r3, #64	; 0x40
 8008476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800847a:	e124      	b.n	80086c6 <UART_SetConfig+0x5a6>
 800847c:	2380      	movs	r3, #128	; 0x80
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008482:	e120      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4acb      	ldr	r2, [pc, #812]	; (80087b8 <UART_SetConfig+0x698>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d176      	bne.n	800857c <UART_SetConfig+0x45c>
 800848e:	4bcb      	ldr	r3, [pc, #812]	; (80087bc <UART_SetConfig+0x69c>)
 8008490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008492:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008496:	2b28      	cmp	r3, #40	; 0x28
 8008498:	d86c      	bhi.n	8008574 <UART_SetConfig+0x454>
 800849a:	a201      	add	r2, pc, #4	; (adr r2, 80084a0 <UART_SetConfig+0x380>)
 800849c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a0:	08008545 	.word	0x08008545
 80084a4:	08008575 	.word	0x08008575
 80084a8:	08008575 	.word	0x08008575
 80084ac:	08008575 	.word	0x08008575
 80084b0:	08008575 	.word	0x08008575
 80084b4:	08008575 	.word	0x08008575
 80084b8:	08008575 	.word	0x08008575
 80084bc:	08008575 	.word	0x08008575
 80084c0:	0800854d 	.word	0x0800854d
 80084c4:	08008575 	.word	0x08008575
 80084c8:	08008575 	.word	0x08008575
 80084cc:	08008575 	.word	0x08008575
 80084d0:	08008575 	.word	0x08008575
 80084d4:	08008575 	.word	0x08008575
 80084d8:	08008575 	.word	0x08008575
 80084dc:	08008575 	.word	0x08008575
 80084e0:	08008555 	.word	0x08008555
 80084e4:	08008575 	.word	0x08008575
 80084e8:	08008575 	.word	0x08008575
 80084ec:	08008575 	.word	0x08008575
 80084f0:	08008575 	.word	0x08008575
 80084f4:	08008575 	.word	0x08008575
 80084f8:	08008575 	.word	0x08008575
 80084fc:	08008575 	.word	0x08008575
 8008500:	0800855d 	.word	0x0800855d
 8008504:	08008575 	.word	0x08008575
 8008508:	08008575 	.word	0x08008575
 800850c:	08008575 	.word	0x08008575
 8008510:	08008575 	.word	0x08008575
 8008514:	08008575 	.word	0x08008575
 8008518:	08008575 	.word	0x08008575
 800851c:	08008575 	.word	0x08008575
 8008520:	08008565 	.word	0x08008565
 8008524:	08008575 	.word	0x08008575
 8008528:	08008575 	.word	0x08008575
 800852c:	08008575 	.word	0x08008575
 8008530:	08008575 	.word	0x08008575
 8008534:	08008575 	.word	0x08008575
 8008538:	08008575 	.word	0x08008575
 800853c:	08008575 	.word	0x08008575
 8008540:	0800856d 	.word	0x0800856d
 8008544:	2301      	movs	r3, #1
 8008546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800854a:	e0bc      	b.n	80086c6 <UART_SetConfig+0x5a6>
 800854c:	2304      	movs	r3, #4
 800854e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008552:	e0b8      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008554:	2308      	movs	r3, #8
 8008556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800855a:	e0b4      	b.n	80086c6 <UART_SetConfig+0x5a6>
 800855c:	2310      	movs	r3, #16
 800855e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008562:	e0b0      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008564:	2320      	movs	r3, #32
 8008566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800856a:	e0ac      	b.n	80086c6 <UART_SetConfig+0x5a6>
 800856c:	2340      	movs	r3, #64	; 0x40
 800856e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008572:	e0a8      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008574:	2380      	movs	r3, #128	; 0x80
 8008576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800857a:	e0a4      	b.n	80086c6 <UART_SetConfig+0x5a6>
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a8f      	ldr	r2, [pc, #572]	; (80087c0 <UART_SetConfig+0x6a0>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d130      	bne.n	80085e8 <UART_SetConfig+0x4c8>
 8008586:	4b8d      	ldr	r3, [pc, #564]	; (80087bc <UART_SetConfig+0x69c>)
 8008588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800858a:	f003 0307 	and.w	r3, r3, #7
 800858e:	2b05      	cmp	r3, #5
 8008590:	d826      	bhi.n	80085e0 <UART_SetConfig+0x4c0>
 8008592:	a201      	add	r2, pc, #4	; (adr r2, 8008598 <UART_SetConfig+0x478>)
 8008594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008598:	080085b1 	.word	0x080085b1
 800859c:	080085b9 	.word	0x080085b9
 80085a0:	080085c1 	.word	0x080085c1
 80085a4:	080085c9 	.word	0x080085c9
 80085a8:	080085d1 	.word	0x080085d1
 80085ac:	080085d9 	.word	0x080085d9
 80085b0:	2300      	movs	r3, #0
 80085b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085b6:	e086      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80085b8:	2304      	movs	r3, #4
 80085ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085be:	e082      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80085c0:	2308      	movs	r3, #8
 80085c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085c6:	e07e      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80085c8:	2310      	movs	r3, #16
 80085ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ce:	e07a      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80085d0:	2320      	movs	r3, #32
 80085d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085d6:	e076      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80085d8:	2340      	movs	r3, #64	; 0x40
 80085da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085de:	e072      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80085e0:	2380      	movs	r3, #128	; 0x80
 80085e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085e6:	e06e      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a75      	ldr	r2, [pc, #468]	; (80087c4 <UART_SetConfig+0x6a4>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d130      	bne.n	8008654 <UART_SetConfig+0x534>
 80085f2:	4b72      	ldr	r3, [pc, #456]	; (80087bc <UART_SetConfig+0x69c>)
 80085f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f6:	f003 0307 	and.w	r3, r3, #7
 80085fa:	2b05      	cmp	r3, #5
 80085fc:	d826      	bhi.n	800864c <UART_SetConfig+0x52c>
 80085fe:	a201      	add	r2, pc, #4	; (adr r2, 8008604 <UART_SetConfig+0x4e4>)
 8008600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008604:	0800861d 	.word	0x0800861d
 8008608:	08008625 	.word	0x08008625
 800860c:	0800862d 	.word	0x0800862d
 8008610:	08008635 	.word	0x08008635
 8008614:	0800863d 	.word	0x0800863d
 8008618:	08008645 	.word	0x08008645
 800861c:	2300      	movs	r3, #0
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008622:	e050      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008624:	2304      	movs	r3, #4
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800862a:	e04c      	b.n	80086c6 <UART_SetConfig+0x5a6>
 800862c:	2308      	movs	r3, #8
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008632:	e048      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008634:	2310      	movs	r3, #16
 8008636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800863a:	e044      	b.n	80086c6 <UART_SetConfig+0x5a6>
 800863c:	2320      	movs	r3, #32
 800863e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008642:	e040      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008644:	2340      	movs	r3, #64	; 0x40
 8008646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800864a:	e03c      	b.n	80086c6 <UART_SetConfig+0x5a6>
 800864c:	2380      	movs	r3, #128	; 0x80
 800864e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008652:	e038      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a5b      	ldr	r2, [pc, #364]	; (80087c8 <UART_SetConfig+0x6a8>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d130      	bne.n	80086c0 <UART_SetConfig+0x5a0>
 800865e:	4b57      	ldr	r3, [pc, #348]	; (80087bc <UART_SetConfig+0x69c>)
 8008660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008662:	f003 0307 	and.w	r3, r3, #7
 8008666:	2b05      	cmp	r3, #5
 8008668:	d826      	bhi.n	80086b8 <UART_SetConfig+0x598>
 800866a:	a201      	add	r2, pc, #4	; (adr r2, 8008670 <UART_SetConfig+0x550>)
 800866c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008670:	08008689 	.word	0x08008689
 8008674:	08008691 	.word	0x08008691
 8008678:	08008699 	.word	0x08008699
 800867c:	080086a1 	.word	0x080086a1
 8008680:	080086a9 	.word	0x080086a9
 8008684:	080086b1 	.word	0x080086b1
 8008688:	2302      	movs	r3, #2
 800868a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800868e:	e01a      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008690:	2304      	movs	r3, #4
 8008692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008696:	e016      	b.n	80086c6 <UART_SetConfig+0x5a6>
 8008698:	2308      	movs	r3, #8
 800869a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800869e:	e012      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80086a0:	2310      	movs	r3, #16
 80086a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086a6:	e00e      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80086a8:	2320      	movs	r3, #32
 80086aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ae:	e00a      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80086b0:	2340      	movs	r3, #64	; 0x40
 80086b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086b6:	e006      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80086b8:	2380      	movs	r3, #128	; 0x80
 80086ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086be:	e002      	b.n	80086c6 <UART_SetConfig+0x5a6>
 80086c0:	2380      	movs	r3, #128	; 0x80
 80086c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a3f      	ldr	r2, [pc, #252]	; (80087c8 <UART_SetConfig+0x6a8>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	f040 80f8 	bne.w	80088c2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80086d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80086d6:	2b20      	cmp	r3, #32
 80086d8:	dc46      	bgt.n	8008768 <UART_SetConfig+0x648>
 80086da:	2b02      	cmp	r3, #2
 80086dc:	f2c0 8082 	blt.w	80087e4 <UART_SetConfig+0x6c4>
 80086e0:	3b02      	subs	r3, #2
 80086e2:	2b1e      	cmp	r3, #30
 80086e4:	d87e      	bhi.n	80087e4 <UART_SetConfig+0x6c4>
 80086e6:	a201      	add	r2, pc, #4	; (adr r2, 80086ec <UART_SetConfig+0x5cc>)
 80086e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ec:	0800876f 	.word	0x0800876f
 80086f0:	080087e5 	.word	0x080087e5
 80086f4:	08008777 	.word	0x08008777
 80086f8:	080087e5 	.word	0x080087e5
 80086fc:	080087e5 	.word	0x080087e5
 8008700:	080087e5 	.word	0x080087e5
 8008704:	08008787 	.word	0x08008787
 8008708:	080087e5 	.word	0x080087e5
 800870c:	080087e5 	.word	0x080087e5
 8008710:	080087e5 	.word	0x080087e5
 8008714:	080087e5 	.word	0x080087e5
 8008718:	080087e5 	.word	0x080087e5
 800871c:	080087e5 	.word	0x080087e5
 8008720:	080087e5 	.word	0x080087e5
 8008724:	08008797 	.word	0x08008797
 8008728:	080087e5 	.word	0x080087e5
 800872c:	080087e5 	.word	0x080087e5
 8008730:	080087e5 	.word	0x080087e5
 8008734:	080087e5 	.word	0x080087e5
 8008738:	080087e5 	.word	0x080087e5
 800873c:	080087e5 	.word	0x080087e5
 8008740:	080087e5 	.word	0x080087e5
 8008744:	080087e5 	.word	0x080087e5
 8008748:	080087e5 	.word	0x080087e5
 800874c:	080087e5 	.word	0x080087e5
 8008750:	080087e5 	.word	0x080087e5
 8008754:	080087e5 	.word	0x080087e5
 8008758:	080087e5 	.word	0x080087e5
 800875c:	080087e5 	.word	0x080087e5
 8008760:	080087e5 	.word	0x080087e5
 8008764:	080087d7 	.word	0x080087d7
 8008768:	2b40      	cmp	r3, #64	; 0x40
 800876a:	d037      	beq.n	80087dc <UART_SetConfig+0x6bc>
 800876c:	e03a      	b.n	80087e4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800876e:	f7fd fdf9 	bl	8006364 <HAL_RCCEx_GetD3PCLK1Freq>
 8008772:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008774:	e03c      	b.n	80087f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800877a:	4618      	mov	r0, r3
 800877c:	f7fd fe08 	bl	8006390 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008784:	e034      	b.n	80087f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008786:	f107 0318 	add.w	r3, r7, #24
 800878a:	4618      	mov	r0, r3
 800878c:	f7fd ff54 	bl	8006638 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008794:	e02c      	b.n	80087f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008796:	4b09      	ldr	r3, [pc, #36]	; (80087bc <UART_SetConfig+0x69c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0320 	and.w	r3, r3, #32
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d016      	beq.n	80087d0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80087a2:	4b06      	ldr	r3, [pc, #24]	; (80087bc <UART_SetConfig+0x69c>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	08db      	lsrs	r3, r3, #3
 80087a8:	f003 0303 	and.w	r3, r3, #3
 80087ac:	4a07      	ldr	r2, [pc, #28]	; (80087cc <UART_SetConfig+0x6ac>)
 80087ae:	fa22 f303 	lsr.w	r3, r2, r3
 80087b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80087b4:	e01c      	b.n	80087f0 <UART_SetConfig+0x6d0>
 80087b6:	bf00      	nop
 80087b8:	40011400 	.word	0x40011400
 80087bc:	58024400 	.word	0x58024400
 80087c0:	40007800 	.word	0x40007800
 80087c4:	40007c00 	.word	0x40007c00
 80087c8:	58000c00 	.word	0x58000c00
 80087cc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80087d0:	4b9d      	ldr	r3, [pc, #628]	; (8008a48 <UART_SetConfig+0x928>)
 80087d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087d4:	e00c      	b.n	80087f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80087d6:	4b9d      	ldr	r3, [pc, #628]	; (8008a4c <UART_SetConfig+0x92c>)
 80087d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087da:	e009      	b.n	80087f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087e2:	e005      	b.n	80087f0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80087e4:	2300      	movs	r3, #0
 80087e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80087ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80087f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f000 81de 	beq.w	8008bb4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fc:	4a94      	ldr	r2, [pc, #592]	; (8008a50 <UART_SetConfig+0x930>)
 80087fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008802:	461a      	mov	r2, r3
 8008804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008806:	fbb3 f3f2 	udiv	r3, r3, r2
 800880a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	4613      	mov	r3, r2
 8008812:	005b      	lsls	r3, r3, #1
 8008814:	4413      	add	r3, r2
 8008816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008818:	429a      	cmp	r2, r3
 800881a:	d305      	bcc.n	8008828 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008824:	429a      	cmp	r2, r3
 8008826:	d903      	bls.n	8008830 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800882e:	e1c1      	b.n	8008bb4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008832:	2200      	movs	r2, #0
 8008834:	60bb      	str	r3, [r7, #8]
 8008836:	60fa      	str	r2, [r7, #12]
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883c:	4a84      	ldr	r2, [pc, #528]	; (8008a50 <UART_SetConfig+0x930>)
 800883e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008842:	b29b      	uxth	r3, r3
 8008844:	2200      	movs	r2, #0
 8008846:	603b      	str	r3, [r7, #0]
 8008848:	607a      	str	r2, [r7, #4]
 800884a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800884e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008852:	f7f7 fd41 	bl	80002d8 <__aeabi_uldivmod>
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	4610      	mov	r0, r2
 800885c:	4619      	mov	r1, r3
 800885e:	f04f 0200 	mov.w	r2, #0
 8008862:	f04f 0300 	mov.w	r3, #0
 8008866:	020b      	lsls	r3, r1, #8
 8008868:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800886c:	0202      	lsls	r2, r0, #8
 800886e:	6979      	ldr	r1, [r7, #20]
 8008870:	6849      	ldr	r1, [r1, #4]
 8008872:	0849      	lsrs	r1, r1, #1
 8008874:	2000      	movs	r0, #0
 8008876:	460c      	mov	r4, r1
 8008878:	4605      	mov	r5, r0
 800887a:	eb12 0804 	adds.w	r8, r2, r4
 800887e:	eb43 0905 	adc.w	r9, r3, r5
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	469a      	mov	sl, r3
 800888a:	4693      	mov	fp, r2
 800888c:	4652      	mov	r2, sl
 800888e:	465b      	mov	r3, fp
 8008890:	4640      	mov	r0, r8
 8008892:	4649      	mov	r1, r9
 8008894:	f7f7 fd20 	bl	80002d8 <__aeabi_uldivmod>
 8008898:	4602      	mov	r2, r0
 800889a:	460b      	mov	r3, r1
 800889c:	4613      	mov	r3, r2
 800889e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088a6:	d308      	bcc.n	80088ba <UART_SetConfig+0x79a>
 80088a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088ae:	d204      	bcs.n	80088ba <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088b6:	60da      	str	r2, [r3, #12]
 80088b8:	e17c      	b.n	8008bb4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80088c0:	e178      	b.n	8008bb4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	69db      	ldr	r3, [r3, #28]
 80088c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088ca:	f040 80c5 	bne.w	8008a58 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80088ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80088d2:	2b20      	cmp	r3, #32
 80088d4:	dc48      	bgt.n	8008968 <UART_SetConfig+0x848>
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	db7b      	blt.n	80089d2 <UART_SetConfig+0x8b2>
 80088da:	2b20      	cmp	r3, #32
 80088dc:	d879      	bhi.n	80089d2 <UART_SetConfig+0x8b2>
 80088de:	a201      	add	r2, pc, #4	; (adr r2, 80088e4 <UART_SetConfig+0x7c4>)
 80088e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e4:	0800896f 	.word	0x0800896f
 80088e8:	08008977 	.word	0x08008977
 80088ec:	080089d3 	.word	0x080089d3
 80088f0:	080089d3 	.word	0x080089d3
 80088f4:	0800897f 	.word	0x0800897f
 80088f8:	080089d3 	.word	0x080089d3
 80088fc:	080089d3 	.word	0x080089d3
 8008900:	080089d3 	.word	0x080089d3
 8008904:	0800898f 	.word	0x0800898f
 8008908:	080089d3 	.word	0x080089d3
 800890c:	080089d3 	.word	0x080089d3
 8008910:	080089d3 	.word	0x080089d3
 8008914:	080089d3 	.word	0x080089d3
 8008918:	080089d3 	.word	0x080089d3
 800891c:	080089d3 	.word	0x080089d3
 8008920:	080089d3 	.word	0x080089d3
 8008924:	0800899f 	.word	0x0800899f
 8008928:	080089d3 	.word	0x080089d3
 800892c:	080089d3 	.word	0x080089d3
 8008930:	080089d3 	.word	0x080089d3
 8008934:	080089d3 	.word	0x080089d3
 8008938:	080089d3 	.word	0x080089d3
 800893c:	080089d3 	.word	0x080089d3
 8008940:	080089d3 	.word	0x080089d3
 8008944:	080089d3 	.word	0x080089d3
 8008948:	080089d3 	.word	0x080089d3
 800894c:	080089d3 	.word	0x080089d3
 8008950:	080089d3 	.word	0x080089d3
 8008954:	080089d3 	.word	0x080089d3
 8008958:	080089d3 	.word	0x080089d3
 800895c:	080089d3 	.word	0x080089d3
 8008960:	080089d3 	.word	0x080089d3
 8008964:	080089c5 	.word	0x080089c5
 8008968:	2b40      	cmp	r3, #64	; 0x40
 800896a:	d02e      	beq.n	80089ca <UART_SetConfig+0x8aa>
 800896c:	e031      	b.n	80089d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800896e:	f7fc fac3 	bl	8004ef8 <HAL_RCC_GetPCLK1Freq>
 8008972:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008974:	e033      	b.n	80089de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008976:	f7fc fad5 	bl	8004f24 <HAL_RCC_GetPCLK2Freq>
 800897a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800897c:	e02f      	b.n	80089de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800897e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008982:	4618      	mov	r0, r3
 8008984:	f7fd fd04 	bl	8006390 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800898c:	e027      	b.n	80089de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800898e:	f107 0318 	add.w	r3, r7, #24
 8008992:	4618      	mov	r0, r3
 8008994:	f7fd fe50 	bl	8006638 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800899c:	e01f      	b.n	80089de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800899e:	4b2d      	ldr	r3, [pc, #180]	; (8008a54 <UART_SetConfig+0x934>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 0320 	and.w	r3, r3, #32
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d009      	beq.n	80089be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80089aa:	4b2a      	ldr	r3, [pc, #168]	; (8008a54 <UART_SetConfig+0x934>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	08db      	lsrs	r3, r3, #3
 80089b0:	f003 0303 	and.w	r3, r3, #3
 80089b4:	4a24      	ldr	r2, [pc, #144]	; (8008a48 <UART_SetConfig+0x928>)
 80089b6:	fa22 f303 	lsr.w	r3, r2, r3
 80089ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089bc:	e00f      	b.n	80089de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80089be:	4b22      	ldr	r3, [pc, #136]	; (8008a48 <UART_SetConfig+0x928>)
 80089c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089c2:	e00c      	b.n	80089de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089c4:	4b21      	ldr	r3, [pc, #132]	; (8008a4c <UART_SetConfig+0x92c>)
 80089c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089c8:	e009      	b.n	80089de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089d0:	e005      	b.n	80089de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80089d2:	2300      	movs	r3, #0
 80089d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80089dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 80e7 	beq.w	8008bb4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	4a19      	ldr	r2, [pc, #100]	; (8008a50 <UART_SetConfig+0x930>)
 80089ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089f0:	461a      	mov	r2, r3
 80089f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80089f8:	005a      	lsls	r2, r3, #1
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	085b      	lsrs	r3, r3, #1
 8008a00:	441a      	add	r2, r3
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a0a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0e:	2b0f      	cmp	r3, #15
 8008a10:	d916      	bls.n	8008a40 <UART_SetConfig+0x920>
 8008a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a18:	d212      	bcs.n	8008a40 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	f023 030f 	bic.w	r3, r3, #15
 8008a22:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a26:	085b      	lsrs	r3, r3, #1
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	f003 0307 	and.w	r3, r3, #7
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008a32:	4313      	orrs	r3, r2
 8008a34:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008a3c:	60da      	str	r2, [r3, #12]
 8008a3e:	e0b9      	b.n	8008bb4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008a46:	e0b5      	b.n	8008bb4 <UART_SetConfig+0xa94>
 8008a48:	03d09000 	.word	0x03d09000
 8008a4c:	003d0900 	.word	0x003d0900
 8008a50:	080098d0 	.word	0x080098d0
 8008a54:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a58:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008a5c:	2b20      	cmp	r3, #32
 8008a5e:	dc49      	bgt.n	8008af4 <UART_SetConfig+0x9d4>
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	db7c      	blt.n	8008b5e <UART_SetConfig+0xa3e>
 8008a64:	2b20      	cmp	r3, #32
 8008a66:	d87a      	bhi.n	8008b5e <UART_SetConfig+0xa3e>
 8008a68:	a201      	add	r2, pc, #4	; (adr r2, 8008a70 <UART_SetConfig+0x950>)
 8008a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6e:	bf00      	nop
 8008a70:	08008afb 	.word	0x08008afb
 8008a74:	08008b03 	.word	0x08008b03
 8008a78:	08008b5f 	.word	0x08008b5f
 8008a7c:	08008b5f 	.word	0x08008b5f
 8008a80:	08008b0b 	.word	0x08008b0b
 8008a84:	08008b5f 	.word	0x08008b5f
 8008a88:	08008b5f 	.word	0x08008b5f
 8008a8c:	08008b5f 	.word	0x08008b5f
 8008a90:	08008b1b 	.word	0x08008b1b
 8008a94:	08008b5f 	.word	0x08008b5f
 8008a98:	08008b5f 	.word	0x08008b5f
 8008a9c:	08008b5f 	.word	0x08008b5f
 8008aa0:	08008b5f 	.word	0x08008b5f
 8008aa4:	08008b5f 	.word	0x08008b5f
 8008aa8:	08008b5f 	.word	0x08008b5f
 8008aac:	08008b5f 	.word	0x08008b5f
 8008ab0:	08008b2b 	.word	0x08008b2b
 8008ab4:	08008b5f 	.word	0x08008b5f
 8008ab8:	08008b5f 	.word	0x08008b5f
 8008abc:	08008b5f 	.word	0x08008b5f
 8008ac0:	08008b5f 	.word	0x08008b5f
 8008ac4:	08008b5f 	.word	0x08008b5f
 8008ac8:	08008b5f 	.word	0x08008b5f
 8008acc:	08008b5f 	.word	0x08008b5f
 8008ad0:	08008b5f 	.word	0x08008b5f
 8008ad4:	08008b5f 	.word	0x08008b5f
 8008ad8:	08008b5f 	.word	0x08008b5f
 8008adc:	08008b5f 	.word	0x08008b5f
 8008ae0:	08008b5f 	.word	0x08008b5f
 8008ae4:	08008b5f 	.word	0x08008b5f
 8008ae8:	08008b5f 	.word	0x08008b5f
 8008aec:	08008b5f 	.word	0x08008b5f
 8008af0:	08008b51 	.word	0x08008b51
 8008af4:	2b40      	cmp	r3, #64	; 0x40
 8008af6:	d02e      	beq.n	8008b56 <UART_SetConfig+0xa36>
 8008af8:	e031      	b.n	8008b5e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008afa:	f7fc f9fd 	bl	8004ef8 <HAL_RCC_GetPCLK1Freq>
 8008afe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b00:	e033      	b.n	8008b6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b02:	f7fc fa0f 	bl	8004f24 <HAL_RCC_GetPCLK2Freq>
 8008b06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b08:	e02f      	b.n	8008b6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fd fc3e 	bl	8006390 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b18:	e027      	b.n	8008b6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b1a:	f107 0318 	add.w	r3, r7, #24
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fd fd8a 	bl	8006638 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b28:	e01f      	b.n	8008b6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b2a:	4b2d      	ldr	r3, [pc, #180]	; (8008be0 <UART_SetConfig+0xac0>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 0320 	and.w	r3, r3, #32
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d009      	beq.n	8008b4a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b36:	4b2a      	ldr	r3, [pc, #168]	; (8008be0 <UART_SetConfig+0xac0>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	08db      	lsrs	r3, r3, #3
 8008b3c:	f003 0303 	and.w	r3, r3, #3
 8008b40:	4a28      	ldr	r2, [pc, #160]	; (8008be4 <UART_SetConfig+0xac4>)
 8008b42:	fa22 f303 	lsr.w	r3, r2, r3
 8008b46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b48:	e00f      	b.n	8008b6a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008b4a:	4b26      	ldr	r3, [pc, #152]	; (8008be4 <UART_SetConfig+0xac4>)
 8008b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b4e:	e00c      	b.n	8008b6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b50:	4b25      	ldr	r3, [pc, #148]	; (8008be8 <UART_SetConfig+0xac8>)
 8008b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b54:	e009      	b.n	8008b6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b5c:	e005      	b.n	8008b6a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008b68:	bf00      	nop
    }

    if (pclk != 0U)
 8008b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d021      	beq.n	8008bb4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b74:	4a1d      	ldr	r2, [pc, #116]	; (8008bec <UART_SetConfig+0xacc>)
 8008b76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	085b      	lsrs	r3, r3, #1
 8008b88:	441a      	add	r2, r3
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b92:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b96:	2b0f      	cmp	r3, #15
 8008b98:	d909      	bls.n	8008bae <UART_SetConfig+0xa8e>
 8008b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ba0:	d205      	bcs.n	8008bae <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	60da      	str	r2, [r3, #12]
 8008bac:	e002      	b.n	8008bb4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008bd0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3748      	adds	r7, #72	; 0x48
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bde:	bf00      	nop
 8008be0:	58024400 	.word	0x58024400
 8008be4:	03d09000 	.word	0x03d09000
 8008be8:	003d0900 	.word	0x003d0900
 8008bec:	080098d0 	.word	0x080098d0

08008bf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfc:	f003 0308 	and.w	r3, r3, #8
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00a      	beq.n	8008c1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	430a      	orrs	r2, r1
 8008c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00a      	beq.n	8008c3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	430a      	orrs	r2, r1
 8008c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c40:	f003 0302 	and.w	r3, r3, #2
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00a      	beq.n	8008c5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	430a      	orrs	r2, r1
 8008c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c62:	f003 0304 	and.w	r3, r3, #4
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00a      	beq.n	8008c80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	430a      	orrs	r2, r1
 8008c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c84:	f003 0310 	and.w	r3, r3, #16
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d00a      	beq.n	8008ca2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca6:	f003 0320 	and.w	r3, r3, #32
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00a      	beq.n	8008cc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	430a      	orrs	r2, r1
 8008cc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d01a      	beq.n	8008d06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	430a      	orrs	r2, r1
 8008ce4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cee:	d10a      	bne.n	8008d06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	430a      	orrs	r2, r1
 8008d04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00a      	beq.n	8008d28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	430a      	orrs	r2, r1
 8008d26:	605a      	str	r2, [r3, #4]
  }
}
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b098      	sub	sp, #96	; 0x60
 8008d38:	af02      	add	r7, sp, #8
 8008d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d44:	f7f8 fb68 	bl	8001418 <HAL_GetTick>
 8008d48:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 0308 	and.w	r3, r3, #8
 8008d54:	2b08      	cmp	r3, #8
 8008d56:	d12f      	bne.n	8008db8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d60:	2200      	movs	r2, #0
 8008d62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f88e 	bl	8008e88 <UART_WaitOnFlagUntilTimeout>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d022      	beq.n	8008db8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7a:	e853 3f00 	ldrex	r3, [r3]
 8008d7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d86:	653b      	str	r3, [r7, #80]	; 0x50
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d90:	647b      	str	r3, [r7, #68]	; 0x44
 8008d92:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d98:	e841 2300 	strex	r3, r2, [r1]
 8008d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1e6      	bne.n	8008d72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2220      	movs	r2, #32
 8008da8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008db4:	2303      	movs	r3, #3
 8008db6:	e063      	b.n	8008e80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0304 	and.w	r3, r3, #4
 8008dc2:	2b04      	cmp	r3, #4
 8008dc4:	d149      	bne.n	8008e5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dc6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f857 	bl	8008e88 <UART_WaitOnFlagUntilTimeout>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d03c      	beq.n	8008e5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de8:	e853 3f00 	ldrex	r3, [r3]
 8008dec:	623b      	str	r3, [r7, #32]
   return(result);
 8008dee:	6a3b      	ldr	r3, [r7, #32]
 8008df0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008df4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dfe:	633b      	str	r3, [r7, #48]	; 0x30
 8008e00:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e06:	e841 2300 	strex	r3, r2, [r1]
 8008e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1e6      	bne.n	8008de0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3308      	adds	r3, #8
 8008e18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	e853 3f00 	ldrex	r3, [r3]
 8008e20:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f023 0301 	bic.w	r3, r3, #1
 8008e28:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3308      	adds	r3, #8
 8008e30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e32:	61fa      	str	r2, [r7, #28]
 8008e34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e36:	69b9      	ldr	r1, [r7, #24]
 8008e38:	69fa      	ldr	r2, [r7, #28]
 8008e3a:	e841 2300 	strex	r3, r2, [r1]
 8008e3e:	617b      	str	r3, [r7, #20]
   return(result);
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1e5      	bne.n	8008e12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2220      	movs	r2, #32
 8008e4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e012      	b.n	8008e80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2220      	movs	r2, #32
 8008e66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3758      	adds	r7, #88	; 0x58
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	603b      	str	r3, [r7, #0]
 8008e94:	4613      	mov	r3, r2
 8008e96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e98:	e04f      	b.n	8008f3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ea0:	d04b      	beq.n	8008f3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ea2:	f7f8 fab9 	bl	8001418 <HAL_GetTick>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	69ba      	ldr	r2, [r7, #24]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d302      	bcc.n	8008eb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d101      	bne.n	8008ebc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e04e      	b.n	8008f5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 0304 	and.w	r3, r3, #4
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d037      	beq.n	8008f3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	2b80      	cmp	r3, #128	; 0x80
 8008ece:	d034      	beq.n	8008f3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	2b40      	cmp	r3, #64	; 0x40
 8008ed4:	d031      	beq.n	8008f3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	69db      	ldr	r3, [r3, #28]
 8008edc:	f003 0308 	and.w	r3, r3, #8
 8008ee0:	2b08      	cmp	r3, #8
 8008ee2:	d110      	bne.n	8008f06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2208      	movs	r2, #8
 8008eea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f000 f839 	bl	8008f64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2208      	movs	r2, #8
 8008ef6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e029      	b.n	8008f5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	69db      	ldr	r3, [r3, #28]
 8008f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f14:	d111      	bne.n	8008f3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f000 f81f 	bl	8008f64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2220      	movs	r2, #32
 8008f2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008f36:	2303      	movs	r3, #3
 8008f38:	e00f      	b.n	8008f5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	69da      	ldr	r2, [r3, #28]
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	4013      	ands	r3, r2
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	bf0c      	ite	eq
 8008f4a:	2301      	moveq	r3, #1
 8008f4c:	2300      	movne	r3, #0
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	461a      	mov	r2, r3
 8008f52:	79fb      	ldrb	r3, [r7, #7]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d0a0      	beq.n	8008e9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
	...

08008f64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b095      	sub	sp, #84	; 0x54
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f74:	e853 3f00 	ldrex	r3, [r3]
 8008f78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	461a      	mov	r2, r3
 8008f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f8a:	643b      	str	r3, [r7, #64]	; 0x40
 8008f8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f92:	e841 2300 	strex	r3, r2, [r1]
 8008f96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1e6      	bne.n	8008f6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	3308      	adds	r3, #8
 8008fa4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa6:	6a3b      	ldr	r3, [r7, #32]
 8008fa8:	e853 3f00 	ldrex	r3, [r3]
 8008fac:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fae:	69fa      	ldr	r2, [r7, #28]
 8008fb0:	4b1e      	ldr	r3, [pc, #120]	; (800902c <UART_EndRxTransfer+0xc8>)
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	3308      	adds	r3, #8
 8008fbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fc6:	e841 2300 	strex	r3, r2, [r1]
 8008fca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1e5      	bne.n	8008f9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d118      	bne.n	800900c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	e853 3f00 	ldrex	r3, [r3]
 8008fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	f023 0310 	bic.w	r3, r3, #16
 8008fee:	647b      	str	r3, [r7, #68]	; 0x44
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ff8:	61bb      	str	r3, [r7, #24]
 8008ffa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffc:	6979      	ldr	r1, [r7, #20]
 8008ffe:	69ba      	ldr	r2, [r7, #24]
 8009000:	e841 2300 	strex	r3, r2, [r1]
 8009004:	613b      	str	r3, [r7, #16]
   return(result);
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1e6      	bne.n	8008fda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2220      	movs	r2, #32
 8009010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009020:	bf00      	nop
 8009022:	3754      	adds	r7, #84	; 0x54
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	effffffe 	.word	0xeffffffe

08009030 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800903e:	2b01      	cmp	r3, #1
 8009040:	d101      	bne.n	8009046 <HAL_UARTEx_DisableFifoMode+0x16>
 8009042:	2302      	movs	r3, #2
 8009044:	e027      	b.n	8009096 <HAL_UARTEx_DisableFifoMode+0x66>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2224      	movs	r2, #36	; 0x24
 8009052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f022 0201 	bic.w	r2, r2, #1
 800906c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009074:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2220      	movs	r2, #32
 8009088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b084      	sub	sp, #16
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d101      	bne.n	80090ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80090b6:	2302      	movs	r3, #2
 80090b8:	e02d      	b.n	8009116 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2224      	movs	r2, #36	; 0x24
 80090c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f022 0201 	bic.w	r2, r2, #1
 80090e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	683a      	ldr	r2, [r7, #0]
 80090f2:	430a      	orrs	r2, r1
 80090f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f850 	bl	800919c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2220      	movs	r2, #32
 8009108:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b084      	sub	sp, #16
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800912e:	2b01      	cmp	r3, #1
 8009130:	d101      	bne.n	8009136 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009132:	2302      	movs	r3, #2
 8009134:	e02d      	b.n	8009192 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2201      	movs	r2, #1
 800913a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2224      	movs	r2, #36	; 0x24
 8009142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f022 0201 	bic.w	r2, r2, #1
 800915c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	683a      	ldr	r2, [r7, #0]
 800916e:	430a      	orrs	r2, r1
 8009170:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f812 	bl	800919c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2220      	movs	r2, #32
 8009184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
	...

0800919c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800919c:	b480      	push	{r7}
 800919e:	b085      	sub	sp, #20
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d108      	bne.n	80091be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80091bc:	e031      	b.n	8009222 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80091be:	2310      	movs	r3, #16
 80091c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80091c2:	2310      	movs	r3, #16
 80091c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	0e5b      	lsrs	r3, r3, #25
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	f003 0307 	and.w	r3, r3, #7
 80091d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	0f5b      	lsrs	r3, r3, #29
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	f003 0307 	and.w	r3, r3, #7
 80091e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091e6:	7bbb      	ldrb	r3, [r7, #14]
 80091e8:	7b3a      	ldrb	r2, [r7, #12]
 80091ea:	4911      	ldr	r1, [pc, #68]	; (8009230 <UARTEx_SetNbDataToProcess+0x94>)
 80091ec:	5c8a      	ldrb	r2, [r1, r2]
 80091ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80091f2:	7b3a      	ldrb	r2, [r7, #12]
 80091f4:	490f      	ldr	r1, [pc, #60]	; (8009234 <UARTEx_SetNbDataToProcess+0x98>)
 80091f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009204:	7bfb      	ldrb	r3, [r7, #15]
 8009206:	7b7a      	ldrb	r2, [r7, #13]
 8009208:	4909      	ldr	r1, [pc, #36]	; (8009230 <UARTEx_SetNbDataToProcess+0x94>)
 800920a:	5c8a      	ldrb	r2, [r1, r2]
 800920c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009210:	7b7a      	ldrb	r2, [r7, #13]
 8009212:	4908      	ldr	r1, [pc, #32]	; (8009234 <UARTEx_SetNbDataToProcess+0x98>)
 8009214:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009216:	fb93 f3f2 	sdiv	r3, r3, r2
 800921a:	b29a      	uxth	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009222:	bf00      	nop
 8009224:	3714      	adds	r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	080098e8 	.word	0x080098e8
 8009234:	080098f0 	.word	0x080098f0

08009238 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009238:	b084      	sub	sp, #16
 800923a:	b580      	push	{r7, lr}
 800923c:	b084      	sub	sp, #16
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	f107 001c 	add.w	r0, r7, #28
 8009246:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800924a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800924e:	2b01      	cmp	r3, #1
 8009250:	d121      	bne.n	8009296 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009256:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	68da      	ldr	r2, [r3, #12]
 8009262:	4b2c      	ldr	r3, [pc, #176]	; (8009314 <USB_CoreInit+0xdc>)
 8009264:	4013      	ands	r3, r2
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009276:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800927a:	2b01      	cmp	r3, #1
 800927c:	d105      	bne.n	800928a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 faaa 	bl	80097e4 <USB_CoreReset>
 8009290:	4603      	mov	r3, r0
 8009292:	73fb      	strb	r3, [r7, #15]
 8009294:	e01b      	b.n	80092ce <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 fa9e 	bl	80097e4 <USB_CoreReset>
 80092a8:	4603      	mov	r3, r0
 80092aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80092ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d106      	bne.n	80092c2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	639a      	str	r2, [r3, #56]	; 0x38
 80092c0:	e005      	b.n	80092ce <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80092ce:	7fbb      	ldrb	r3, [r7, #30]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d116      	bne.n	8009302 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092d8:	b29a      	uxth	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80092e2:	4b0d      	ldr	r3, [pc, #52]	; (8009318 <USB_CoreInit+0xe0>)
 80092e4:	4313      	orrs	r3, r2
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	f043 0206 	orr.w	r2, r3, #6
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	f043 0220 	orr.w	r2, r3, #32
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009302:	7bfb      	ldrb	r3, [r7, #15]
}
 8009304:	4618      	mov	r0, r3
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800930e:	b004      	add	sp, #16
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	ffbdffbf 	.word	0xffbdffbf
 8009318:	03ee0000 	.word	0x03ee0000

0800931c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	f023 0201 	bic.w	r2, r3, #1
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	370c      	adds	r7, #12
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b084      	sub	sp, #16
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	460b      	mov	r3, r1
 8009348:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800934a:	2300      	movs	r3, #0
 800934c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800935a:	78fb      	ldrb	r3, [r7, #3]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d115      	bne.n	800938c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800936c:	200a      	movs	r0, #10
 800936e:	f7f8 f85f 	bl	8001430 <HAL_Delay>
      ms += 10U;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	330a      	adds	r3, #10
 8009376:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fa25 	bl	80097c8 <USB_GetMode>
 800937e:	4603      	mov	r3, r0
 8009380:	2b01      	cmp	r3, #1
 8009382:	d01e      	beq.n	80093c2 <USB_SetCurrentMode+0x84>
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2bc7      	cmp	r3, #199	; 0xc7
 8009388:	d9f0      	bls.n	800936c <USB_SetCurrentMode+0x2e>
 800938a:	e01a      	b.n	80093c2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800938c:	78fb      	ldrb	r3, [r7, #3]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d115      	bne.n	80093be <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800939e:	200a      	movs	r0, #10
 80093a0:	f7f8 f846 	bl	8001430 <HAL_Delay>
      ms += 10U;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	330a      	adds	r3, #10
 80093a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 fa0c 	bl	80097c8 <USB_GetMode>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d005      	beq.n	80093c2 <USB_SetCurrentMode+0x84>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2bc7      	cmp	r3, #199	; 0xc7
 80093ba:	d9f0      	bls.n	800939e <USB_SetCurrentMode+0x60>
 80093bc:	e001      	b.n	80093c2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	e005      	b.n	80093ce <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2bc8      	cmp	r3, #200	; 0xc8
 80093c6:	d101      	bne.n	80093cc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e000      	b.n	80093ce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
	...

080093d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80093d8:	b084      	sub	sp, #16
 80093da:	b580      	push	{r7, lr}
 80093dc:	b086      	sub	sp, #24
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80093e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80093f2:	2300      	movs	r3, #0
 80093f4:	613b      	str	r3, [r7, #16]
 80093f6:	e009      	b.n	800940c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	3340      	adds	r3, #64	; 0x40
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4413      	add	r3, r2
 8009402:	2200      	movs	r2, #0
 8009404:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	3301      	adds	r3, #1
 800940a:	613b      	str	r3, [r7, #16]
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	2b0e      	cmp	r3, #14
 8009410:	d9f2      	bls.n	80093f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009412:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009416:	2b00      	cmp	r3, #0
 8009418:	d11c      	bne.n	8009454 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009428:	f043 0302 	orr.w	r3, r3, #2
 800942c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009432:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	601a      	str	r2, [r3, #0]
 8009452:	e005      	b.n	8009460 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009458:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009466:	461a      	mov	r2, r3
 8009468:	2300      	movs	r3, #0
 800946a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800946c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009470:	2b01      	cmp	r3, #1
 8009472:	d10d      	bne.n	8009490 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009478:	2b00      	cmp	r3, #0
 800947a:	d104      	bne.n	8009486 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800947c:	2100      	movs	r1, #0
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f968 	bl	8009754 <USB_SetDevSpeed>
 8009484:	e008      	b.n	8009498 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009486:	2101      	movs	r1, #1
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 f963 	bl	8009754 <USB_SetDevSpeed>
 800948e:	e003      	b.n	8009498 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009490:	2103      	movs	r1, #3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f95e 	bl	8009754 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009498:	2110      	movs	r1, #16
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f8fa 	bl	8009694 <USB_FlushTxFifo>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f924 	bl	80096f8 <USB_FlushRxFifo>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d001      	beq.n	80094ba <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094c0:	461a      	mov	r2, r3
 80094c2:	2300      	movs	r3, #0
 80094c4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094cc:	461a      	mov	r2, r3
 80094ce:	2300      	movs	r3, #0
 80094d0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d8:	461a      	mov	r2, r3
 80094da:	2300      	movs	r3, #0
 80094dc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094de:	2300      	movs	r3, #0
 80094e0:	613b      	str	r3, [r7, #16]
 80094e2:	e043      	b.n	800956c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	015a      	lsls	r2, r3, #5
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	4413      	add	r3, r2
 80094ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094fa:	d118      	bne.n	800952e <USB_DevInit+0x156>
    {
      if (i == 0U)
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10a      	bne.n	8009518 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	015a      	lsls	r2, r3, #5
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	4413      	add	r3, r2
 800950a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800950e:	461a      	mov	r2, r3
 8009510:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009514:	6013      	str	r3, [r2, #0]
 8009516:	e013      	b.n	8009540 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	015a      	lsls	r2, r3, #5
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	4413      	add	r3, r2
 8009520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009524:	461a      	mov	r2, r3
 8009526:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800952a:	6013      	str	r3, [r2, #0]
 800952c:	e008      	b.n	8009540 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	015a      	lsls	r2, r3, #5
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	4413      	add	r3, r2
 8009536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800953a:	461a      	mov	r2, r3
 800953c:	2300      	movs	r3, #0
 800953e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	015a      	lsls	r2, r3, #5
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	4413      	add	r3, r2
 8009548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800954c:	461a      	mov	r2, r3
 800954e:	2300      	movs	r3, #0
 8009550:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	015a      	lsls	r2, r3, #5
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	4413      	add	r3, r2
 800955a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800955e:	461a      	mov	r2, r3
 8009560:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009564:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	3301      	adds	r3, #1
 800956a:	613b      	str	r3, [r7, #16]
 800956c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009570:	461a      	mov	r2, r3
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	4293      	cmp	r3, r2
 8009576:	d3b5      	bcc.n	80094e4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009578:	2300      	movs	r3, #0
 800957a:	613b      	str	r3, [r7, #16]
 800957c:	e043      	b.n	8009606 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	015a      	lsls	r2, r3, #5
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	4413      	add	r3, r2
 8009586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009590:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009594:	d118      	bne.n	80095c8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d10a      	bne.n	80095b2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	015a      	lsls	r2, r3, #5
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	4413      	add	r3, r2
 80095a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095a8:	461a      	mov	r2, r3
 80095aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80095ae:	6013      	str	r3, [r2, #0]
 80095b0:	e013      	b.n	80095da <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	015a      	lsls	r2, r3, #5
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	4413      	add	r3, r2
 80095ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095be:	461a      	mov	r2, r3
 80095c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80095c4:	6013      	str	r3, [r2, #0]
 80095c6:	e008      	b.n	80095da <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	015a      	lsls	r2, r3, #5
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	4413      	add	r3, r2
 80095d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d4:	461a      	mov	r2, r3
 80095d6:	2300      	movs	r3, #0
 80095d8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	015a      	lsls	r2, r3, #5
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	4413      	add	r3, r2
 80095e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e6:	461a      	mov	r2, r3
 80095e8:	2300      	movs	r3, #0
 80095ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f8:	461a      	mov	r2, r3
 80095fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80095fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	3301      	adds	r3, #1
 8009604:	613b      	str	r3, [r7, #16]
 8009606:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800960a:	461a      	mov	r2, r3
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	4293      	cmp	r3, r2
 8009610:	d3b5      	bcc.n	800957e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009624:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009632:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009634:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009638:	2b00      	cmp	r3, #0
 800963a:	d105      	bne.n	8009648 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	f043 0210 	orr.w	r2, r3, #16
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	699a      	ldr	r2, [r3, #24]
 800964c:	4b0f      	ldr	r3, [pc, #60]	; (800968c <USB_DevInit+0x2b4>)
 800964e:	4313      	orrs	r3, r2
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009654:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009658:	2b00      	cmp	r3, #0
 800965a:	d005      	beq.n	8009668 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	f043 0208 	orr.w	r2, r3, #8
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009668:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800966c:	2b01      	cmp	r3, #1
 800966e:	d105      	bne.n	800967c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	699a      	ldr	r2, [r3, #24]
 8009674:	4b06      	ldr	r3, [pc, #24]	; (8009690 <USB_DevInit+0x2b8>)
 8009676:	4313      	orrs	r3, r2
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800967c:	7dfb      	ldrb	r3, [r7, #23]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3718      	adds	r7, #24
 8009682:	46bd      	mov	sp, r7
 8009684:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009688:	b004      	add	sp, #16
 800968a:	4770      	bx	lr
 800968c:	803c3800 	.word	0x803c3800
 8009690:	40000004 	.word	0x40000004

08009694 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800969e:	2300      	movs	r3, #0
 80096a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	3301      	adds	r3, #1
 80096a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80096ae:	d901      	bls.n	80096b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80096b0:	2303      	movs	r3, #3
 80096b2:	e01b      	b.n	80096ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	daf2      	bge.n	80096a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80096bc:	2300      	movs	r3, #0
 80096be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	019b      	lsls	r3, r3, #6
 80096c4:	f043 0220 	orr.w	r2, r3, #32
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	3301      	adds	r3, #1
 80096d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80096d8:	d901      	bls.n	80096de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80096da:	2303      	movs	r3, #3
 80096dc:	e006      	b.n	80096ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	f003 0320 	and.w	r3, r3, #32
 80096e6:	2b20      	cmp	r3, #32
 80096e8:	d0f0      	beq.n	80096cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3714      	adds	r7, #20
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009700:	2300      	movs	r3, #0
 8009702:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	3301      	adds	r3, #1
 8009708:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009710:	d901      	bls.n	8009716 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009712:	2303      	movs	r3, #3
 8009714:	e018      	b.n	8009748 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	daf2      	bge.n	8009704 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800971e:	2300      	movs	r3, #0
 8009720:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2210      	movs	r2, #16
 8009726:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	3301      	adds	r3, #1
 800972c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009734:	d901      	bls.n	800973a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009736:	2303      	movs	r3, #3
 8009738:	e006      	b.n	8009748 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	f003 0310 	and.w	r3, r3, #16
 8009742:	2b10      	cmp	r3, #16
 8009744:	d0f0      	beq.n	8009728 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3714      	adds	r7, #20
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	460b      	mov	r3, r1
 800975e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	78fb      	ldrb	r3, [r7, #3]
 800976e:	68f9      	ldr	r1, [r7, #12]
 8009770:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009774:	4313      	orrs	r3, r2
 8009776:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009786:	b480      	push	{r7}
 8009788:	b085      	sub	sp, #20
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80097a0:	f023 0303 	bic.w	r3, r3, #3
 80097a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097b4:	f043 0302 	orr.w	r3, r3, #2
 80097b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	695b      	ldr	r3, [r3, #20]
 80097d4:	f003 0301 	and.w	r3, r3, #1
}
 80097d8:	4618      	mov	r0, r3
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80097ec:	2300      	movs	r3, #0
 80097ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	3301      	adds	r3, #1
 80097f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80097fc:	d901      	bls.n	8009802 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80097fe:	2303      	movs	r3, #3
 8009800:	e01b      	b.n	800983a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	2b00      	cmp	r3, #0
 8009808:	daf2      	bge.n	80097f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800980a:	2300      	movs	r3, #0
 800980c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	f043 0201 	orr.w	r2, r3, #1
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	3301      	adds	r3, #1
 800981e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009826:	d901      	bls.n	800982c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009828:	2303      	movs	r3, #3
 800982a:	e006      	b.n	800983a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	f003 0301 	and.w	r3, r3, #1
 8009834:	2b01      	cmp	r3, #1
 8009836:	d0f0      	beq.n	800981a <USB_CoreReset+0x36>

  return HAL_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <memset>:
 8009846:	4402      	add	r2, r0
 8009848:	4603      	mov	r3, r0
 800984a:	4293      	cmp	r3, r2
 800984c:	d100      	bne.n	8009850 <memset+0xa>
 800984e:	4770      	bx	lr
 8009850:	f803 1b01 	strb.w	r1, [r3], #1
 8009854:	e7f9      	b.n	800984a <memset+0x4>
	...

08009858 <__libc_init_array>:
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	4d0d      	ldr	r5, [pc, #52]	; (8009890 <__libc_init_array+0x38>)
 800985c:	4c0d      	ldr	r4, [pc, #52]	; (8009894 <__libc_init_array+0x3c>)
 800985e:	1b64      	subs	r4, r4, r5
 8009860:	10a4      	asrs	r4, r4, #2
 8009862:	2600      	movs	r6, #0
 8009864:	42a6      	cmp	r6, r4
 8009866:	d109      	bne.n	800987c <__libc_init_array+0x24>
 8009868:	4d0b      	ldr	r5, [pc, #44]	; (8009898 <__libc_init_array+0x40>)
 800986a:	4c0c      	ldr	r4, [pc, #48]	; (800989c <__libc_init_array+0x44>)
 800986c:	f000 f818 	bl	80098a0 <_init>
 8009870:	1b64      	subs	r4, r4, r5
 8009872:	10a4      	asrs	r4, r4, #2
 8009874:	2600      	movs	r6, #0
 8009876:	42a6      	cmp	r6, r4
 8009878:	d105      	bne.n	8009886 <__libc_init_array+0x2e>
 800987a:	bd70      	pop	{r4, r5, r6, pc}
 800987c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009880:	4798      	blx	r3
 8009882:	3601      	adds	r6, #1
 8009884:	e7ee      	b.n	8009864 <__libc_init_array+0xc>
 8009886:	f855 3b04 	ldr.w	r3, [r5], #4
 800988a:	4798      	blx	r3
 800988c:	3601      	adds	r6, #1
 800988e:	e7f2      	b.n	8009876 <__libc_init_array+0x1e>
 8009890:	08009900 	.word	0x08009900
 8009894:	08009900 	.word	0x08009900
 8009898:	08009900 	.word	0x08009900
 800989c:	08009904 	.word	0x08009904

080098a0 <_init>:
 80098a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a2:	bf00      	nop
 80098a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098a6:	bc08      	pop	{r3}
 80098a8:	469e      	mov	lr, r3
 80098aa:	4770      	bx	lr

080098ac <_fini>:
 80098ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ae:	bf00      	nop
 80098b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098b2:	bc08      	pop	{r3}
 80098b4:	469e      	mov	lr, r3
 80098b6:	4770      	bx	lr
