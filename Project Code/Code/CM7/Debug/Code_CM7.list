
Code_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009698  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009930  08009930  00019930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009970  08009970  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08009970  08009970  00019970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009978  08009978  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009978  08009978  00019978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800997c  0800997c  0001997c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  24000000  08009980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  24000030  080099b0  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240006dc  080099b0  000206dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a97e  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fdd  00000000  00000000  0003aa1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  0003da00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001035  00000000  00000000  0003eeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003abbc  00000000  00000000  0003feed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c316  00000000  00000000  0007aaa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00186233  00000000  00000000  00096dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005948  00000000  00000000  0021cff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0022293c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000030 	.word	0x24000030
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009918 	.word	0x08009918

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000034 	.word	0x24000034
 80002d4:	08009918 	.word	0x08009918

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b3d      	ldr	r3, [pc, #244]	; (8000804 <main+0x104>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 fc3b 	bl	8000fa4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fe29 	bl	8001384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f875 	bl	8000820 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000736:	4b33      	ldr	r3, [pc, #204]	; (8000804 <main+0x104>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a31      	ldr	r2, [pc, #196]	; (8000804 <main+0x104>)
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <main+0x104>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000754:	2000      	movs	r0, #0
 8000756:	f003 fa89 	bl	8003c6c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f003 fa9f 	bl	8003ca0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000766:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <main+0x104>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x80>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x6a>
if ( timeout < 0 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x8a>
{
Error_Handler();
 8000786:	f000 fc0d 	bl	8000fa4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 fa25 	bl	8000bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 800078e:	f000 fa03 	bl	8000b98 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000792:	f000 f9cf 	bl	8000b34 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000796:	f000 f90d 	bl	80009b4 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800079a:	f000 f97f 	bl	8000a9c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800079e:	f000 f8bd 	bl	800091c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  GPIOB->ODR = 0x00;
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <main+0x108>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  HAL_Delay(500);
 80007a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ac:	f000 fe7c 	bl	80014a8 <HAL_Delay>
  HAL_TIM_Base_Start(&htim3);
 80007b0:	4816      	ldr	r0, [pc, #88]	; (800080c <main+0x10c>)
 80007b2:	f006 fa8d 	bl	8006cd0 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 80007b6:	2100      	movs	r1, #0
 80007b8:	4814      	ldr	r0, [pc, #80]	; (800080c <main+0x10c>)
 80007ba:	f006 fc01 	bl	8006fc0 <HAL_TIM_OC_Start>
  hdma_tim3_ch1.XferCpltCallback = endof_scan_line;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <main+0x110>)
 80007c0:	4a14      	ldr	r2, [pc, #80]	; (8000814 <main+0x114>)
 80007c2:	63da      	str	r2, [r3, #60]	; 0x3c
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  TIM2->PSC = 99;
 80007c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007c8:	2263      	movs	r2, #99	; 0x63
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_DMA_Start_IT(&hdma_tim3_ch1, (uint32_t)test_frame, (uint32_t) &GPIOB->ODR, 16);
 80007cc:	4912      	ldr	r1, [pc, #72]	; (8000818 <main+0x118>)
 80007ce:	2310      	movs	r3, #16
 80007d0:	4a12      	ldr	r2, [pc, #72]	; (800081c <main+0x11c>)
 80007d2:	480f      	ldr	r0, [pc, #60]	; (8000810 <main+0x110>)
 80007d4:	f001 fb04 	bl	8001de0 <HAL_DMA_Start_IT>
	  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC1);
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <main+0x10c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	68da      	ldr	r2, [r3, #12]
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <main+0x10c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007e6:	60da      	str	r2, [r3, #12]

	  HAL_Delay(200);
 80007e8:	20c8      	movs	r0, #200	; 0xc8
 80007ea:	f000 fe5d 	bl	80014a8 <HAL_Delay>

	  start_Vsync_Sequence();
 80007ee:	f000 fb35 	bl	8000e5c <start_Vsync_Sequence>

	  HAL_Delay(200);
 80007f2:	20c8      	movs	r0, #200	; 0xc8
 80007f4:	f000 fe58 	bl	80014a8 <HAL_Delay>

	  start_Hsync_Sequence();
 80007f8:	f000 fb18 	bl	8000e2c <start_Hsync_Sequence>

	  HAL_Delay(200);
 80007fc:	20c8      	movs	r0, #200	; 0xc8
 80007fe:	f000 fe53 	bl	80014a8 <HAL_Delay>
	  TIM2->PSC = 99;
 8000802:	e7df      	b.n	80007c4 <main+0xc4>
 8000804:	58024400 	.word	0x58024400
 8000808:	58020400 	.word	0x58020400
 800080c:	24000098 	.word	0x24000098
 8000810:	240000e4 	.word	0x240000e4
 8000814:	08000d99 	.word	0x08000d99
 8000818:	24000008 	.word	0x24000008
 800081c:	58020414 	.word	0x58020414

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b09c      	sub	sp, #112	; 0x70
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082a:	224c      	movs	r2, #76	; 0x4c
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f009 f845 	bl	80098be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2220      	movs	r2, #32
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f009 f83f 	bl	80098be <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000840:	2004      	movs	r0, #4
 8000842:	f003 fb71 	bl	8003f28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b32      	ldr	r3, [pc, #200]	; (8000914 <SystemClock_Config+0xf4>)
 800084c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084e:	4a31      	ldr	r2, [pc, #196]	; (8000914 <SystemClock_Config+0xf4>)
 8000850:	f023 0301 	bic.w	r3, r3, #1
 8000854:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000856:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <SystemClock_Config+0xf4>)
 8000858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <SystemClock_Config+0xf8>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000868:	4a2b      	ldr	r2, [pc, #172]	; (8000918 <SystemClock_Config+0xf8>)
 800086a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b29      	ldr	r3, [pc, #164]	; (8000918 <SystemClock_Config+0xf8>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800087c:	bf00      	nop
 800087e:	4b26      	ldr	r3, [pc, #152]	; (8000918 <SystemClock_Config+0xf8>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800088a:	d1f8      	bne.n	800087e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800088c:	2301      	movs	r3, #1
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000890:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089a:	2302      	movs	r3, #2
 800089c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800089e:	2301      	movs	r3, #1
 80008a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 80008a2:	2312      	movs	r3, #18
 80008a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008b2:	230c      	movs	r3, #12
 80008b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80008b6:	2302      	movs	r3, #2
 80008b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80008ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c4:	4618      	mov	r0, r3
 80008c6:	f003 fb99 	bl	8003ffc <HAL_RCC_OscConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008d0:	f000 fb68 	bl	8000fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d4:	233f      	movs	r3, #63	; 0x3f
 80008d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d8:	2303      	movs	r3, #3
 80008da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008e4:	2340      	movs	r3, #64	; 0x40
 80008e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008e8:	2340      	movs	r3, #64	; 0x40
 80008ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008f2:	2340      	movs	r3, #64	; 0x40
 80008f4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2101      	movs	r1, #1
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 ffd8 	bl	80048b0 <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000906:	f000 fb4d 	bl	8000fa4 <Error_Handler>
  }
}
 800090a:	bf00      	nop
 800090c:	3770      	adds	r7, #112	; 0x70
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	58000400 	.word	0x58000400
 8000918:	58024800 	.word	0x58024800

0800091c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000922:	f107 0310 	add.w	r3, r7, #16
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_TIM2_Init+0x94>)
 800093c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000940:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000942:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <MX_TIM2_Init+0x94>)
 8000944:	2200      	movs	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <MX_TIM2_Init+0x94>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_TIM2_Init+0x94>)
 8000950:	2201      	movs	r2, #1
 8000952:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000954:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_TIM2_Init+0x94>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_TIM2_Init+0x94>)
 800095c:	2280      	movs	r2, #128	; 0x80
 800095e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000960:	4813      	ldr	r0, [pc, #76]	; (80009b0 <MX_TIM2_Init+0x94>)
 8000962:	f006 f95d 	bl	8006c20 <HAL_TIM_Base_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800096c:	f000 fb1a 	bl	8000fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000974:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000976:	f107 0310 	add.w	r3, r7, #16
 800097a:	4619      	mov	r1, r3
 800097c:	480c      	ldr	r0, [pc, #48]	; (80009b0 <MX_TIM2_Init+0x94>)
 800097e:	f006 fdaf 	bl	80074e0 <HAL_TIM_ConfigClockSource>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000988:	f000 fb0c 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098c:	2300      	movs	r3, #0
 800098e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_TIM2_Init+0x94>)
 800099a:	f007 fb01 	bl	8007fa0 <HAL_TIMEx_MasterConfigSynchronization>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009a4:	f000 fafe 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2400004c 	.word	0x2400004c

080009b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08e      	sub	sp, #56	; 0x38
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d4:	463b      	mov	r3, r7
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]
 80009e2:	615a      	str	r2, [r3, #20]
 80009e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009e6:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <MX_TIM3_Init+0xe0>)
 80009e8:	4a2b      	ldr	r2, [pc, #172]	; (8000a98 <MX_TIM3_Init+0xe4>)
 80009ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80009ec:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <MX_TIM3_Init+0xe0>)
 80009ee:	2263      	movs	r2, #99	; 0x63
 80009f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <MX_TIM3_Init+0xe0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5;
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <MX_TIM3_Init+0xe0>)
 80009fa:	2205      	movs	r2, #5
 80009fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <MX_TIM3_Init+0xe0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a04:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <MX_TIM3_Init+0xe0>)
 8000a06:	2280      	movs	r2, #128	; 0x80
 8000a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a0a:	4822      	ldr	r0, [pc, #136]	; (8000a94 <MX_TIM3_Init+0xe0>)
 8000a0c:	f006 f908 	bl	8006c20 <HAL_TIM_Base_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a16:	f000 fac5 	bl	8000fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a24:	4619      	mov	r1, r3
 8000a26:	481b      	ldr	r0, [pc, #108]	; (8000a94 <MX_TIM3_Init+0xe0>)
 8000a28:	f006 fd5a 	bl	80074e0 <HAL_TIM_ConfigClockSource>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a32:	f000 fab7 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000a36:	4817      	ldr	r0, [pc, #92]	; (8000a94 <MX_TIM3_Init+0xe0>)
 8000a38:	f006 fa61 	bl	8006efe <HAL_TIM_OC_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a42:	f000 faaf 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	480f      	ldr	r0, [pc, #60]	; (8000a94 <MX_TIM3_Init+0xe0>)
 8000a56:	f007 faa3 	bl	8007fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a60:	f000 faa0 	bl	8000fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a64:	2300      	movs	r3, #0
 8000a66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a74:	463b      	mov	r3, r7
 8000a76:	2200      	movs	r2, #0
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4806      	ldr	r0, [pc, #24]	; (8000a94 <MX_TIM3_Init+0xe0>)
 8000a7c:	f006 fcb6 	bl	80073ec <HAL_TIM_OC_ConfigChannel>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000a86:	f000 fa8d 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	3738      	adds	r7, #56	; 0x38
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	24000098 	.word	0x24000098
 8000a98:	40000400 	.word	0x40000400

08000a9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000aa2:	4a23      	ldr	r2, [pc, #140]	; (8000b30 <MX_USART3_UART_Init+0x94>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ae4:	4811      	ldr	r0, [pc, #68]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000ae6:	f007 fb07 	bl	80080f8 <HAL_UART_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000af0:	f000 fa58 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af4:	2100      	movs	r1, #0
 8000af6:	480d      	ldr	r0, [pc, #52]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000af8:	f008 fb0f 	bl	800911a <HAL_UARTEx_SetTxFifoThreshold>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b02:	f000 fa4f 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b06:	2100      	movs	r1, #0
 8000b08:	4808      	ldr	r0, [pc, #32]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000b0a:	f008 fb44 	bl	8009196 <HAL_UARTEx_SetRxFifoThreshold>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b14:	f000 fa46 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_USART3_UART_Init+0x90>)
 8000b1a:	f008 fac5 	bl	80090a8 <HAL_UARTEx_DisableFifoMode>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b24:	f000 fa3e 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	2400015c 	.word	0x2400015c
 8000b30:	40004800 	.word	0x40004800

08000b34 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b3a:	4a16      	ldr	r2, [pc, #88]	; (8000b94 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b40:	2209      	movs	r2, #9
 8000b42:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b46:	2202      	movs	r2, #2
 8000b48:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b52:	2202      	movs	r2, #2
 8000b54:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b7c:	f003 f8a4 	bl	8003cc8 <HAL_PCD_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b86:	f000 fa0d 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	240001f0 	.word	0x240001f0
 8000b94:	40080000 	.word	0x40080000

08000b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <MX_DMA_Init+0x3c>)
 8000ba0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ba4:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <MX_DMA_Init+0x3c>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_DMA_Init+0x3c>)
 8000bb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	200b      	movs	r0, #11
 8000bc2:	f000 fd7c 	bl	80016be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bc6:	200b      	movs	r0, #11
 8000bc8:	f000 fd93 	bl	80016f2 <HAL_NVIC_EnableIRQ>

}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	58024400 	.word	0x58024400

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	; 0x30
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	4b64      	ldr	r3, [pc, #400]	; (8000d80 <MX_GPIO_Init+0x1a8>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf4:	4a62      	ldr	r2, [pc, #392]	; (8000d80 <MX_GPIO_Init+0x1a8>)
 8000bf6:	f043 0304 	orr.w	r3, r3, #4
 8000bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfe:	4b60      	ldr	r3, [pc, #384]	; (8000d80 <MX_GPIO_Init+0x1a8>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	61bb      	str	r3, [r7, #24]
 8000c0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0c:	4b5c      	ldr	r3, [pc, #368]	; (8000d80 <MX_GPIO_Init+0x1a8>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c12:	4a5b      	ldr	r2, [pc, #364]	; (8000d80 <MX_GPIO_Init+0x1a8>)
 8000c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1c:	4b58      	ldr	r3, [pc, #352]	; (8000d80 <MX_GPIO_Init+0x1a8>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b55      	ldr	r3, [pc, #340]	; (8000d80 <MX_GPIO_Init+0x1a8>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c30:	4a53      	ldr	r2, [pc, #332]	; (8000d80 <MX_GPIO_Init+0x1a8>)
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3a:	4b51      	ldr	r3, [pc, #324]	; (8000d80 <MX_GPIO_Init+0x1a8>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c48:	4b4d      	ldr	r3, [pc, #308]	; (8000d80 <MX_GPIO_Init+0x1a8>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4e:	4a4c      	ldr	r2, [pc, #304]	; (8000d80 <MX_GPIO_Init+0x1a8>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c58:	4b49      	ldr	r3, [pc, #292]	; (8000d80 <MX_GPIO_Init+0x1a8>)
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c66:	4b46      	ldr	r3, [pc, #280]	; (8000d80 <MX_GPIO_Init+0x1a8>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6c:	4a44      	ldr	r2, [pc, #272]	; (8000d80 <MX_GPIO_Init+0x1a8>)
 8000c6e:	f043 0310 	orr.w	r3, r3, #16
 8000c72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c76:	4b42      	ldr	r3, [pc, #264]	; (8000d80 <MX_GPIO_Init+0x1a8>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7c:	f003 0310 	and.w	r3, r3, #16
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c84:	4b3e      	ldr	r3, [pc, #248]	; (8000d80 <MX_GPIO_Init+0x1a8>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	4a3d      	ldr	r2, [pc, #244]	; (8000d80 <MX_GPIO_Init+0x1a8>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c94:	4b3a      	ldr	r3, [pc, #232]	; (8000d80 <MX_GPIO_Init+0x1a8>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca2:	4b37      	ldr	r3, [pc, #220]	; (8000d80 <MX_GPIO_Init+0x1a8>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca8:	4a35      	ldr	r2, [pc, #212]	; (8000d80 <MX_GPIO_Init+0x1a8>)
 8000caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb2:	4b33      	ldr	r3, [pc, #204]	; (8000d80 <MX_GPIO_Init+0x1a8>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cc6:	482f      	ldr	r0, [pc, #188]	; (8000d84 <MX_GPIO_Init+0x1ac>)
 8000cc8:	f002 ffb6 	bl	8003c38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f248 0103 	movw	r1, #32771	; 0x8003
 8000cd2:	482d      	ldr	r0, [pc, #180]	; (8000d88 <MX_GPIO_Init+0x1b0>)
 8000cd4:	f002 ffb0 	bl	8003c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cd8:	2332      	movs	r3, #50	; 0x32
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce8:	230b      	movs	r3, #11
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4826      	ldr	r0, [pc, #152]	; (8000d8c <MX_GPIO_Init+0x1b4>)
 8000cf4:	f002 fdf0 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000cf8:	2386      	movs	r3, #134	; 0x86
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d08:	230b      	movs	r3, #11
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	4619      	mov	r1, r3
 8000d12:	481f      	ldr	r0, [pc, #124]	; (8000d90 <MX_GPIO_Init+0x1b8>)
 8000d14:	f002 fde0 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000d18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d1c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4814      	ldr	r0, [pc, #80]	; (8000d84 <MX_GPIO_Init+0x1ac>)
 8000d32:	f002 fdd1 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8000d36:	f248 0303 	movw	r3, #32771	; 0x8003
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480e      	ldr	r0, [pc, #56]	; (8000d88 <MX_GPIO_Init+0x1b0>)
 8000d50:	f002 fdc2 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d54:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d66:	230b      	movs	r3, #11
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4808      	ldr	r0, [pc, #32]	; (8000d94 <MX_GPIO_Init+0x1bc>)
 8000d72:	f002 fdb1 	bl	80038d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d76:	bf00      	nop
 8000d78:	3730      	adds	r7, #48	; 0x30
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	58024400 	.word	0x58024400
 8000d84:	58020400 	.word	0x58020400
 8000d88:	58021000 	.word	0x58021000
 8000d8c:	58020800 	.word	0x58020800
 8000d90:	58020000 	.word	0x58020000
 8000d94:	58021800 	.word	0x58021800

08000d98 <endof_scan_line>:

/* USER CODE BEGIN 4 */
void endof_scan_line(DMA_HandleTypeDef* _hdma){
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

	GPIOB->ODR = 0x00;
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <endof_scan_line+0x70>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	615a      	str	r2, [r3, #20]
	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <endof_scan_line+0x74>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <endof_scan_line+0x78>)
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d903      	bls.n	8000dba <endof_scan_line+0x22>
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <endof_scan_line+0x7c>)
 8000db4:	2220      	movs	r2, #32
 8000db6:	605a      	str	r2, [r3, #4]

	// Setup for Hsync sequence

	return;
 8000db8:	e021      	b.n	8000dfe <endof_scan_line+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <endof_scan_line+0x74>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <endof_scan_line+0x80>)
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d903      	bls.n	8000dce <endof_scan_line+0x36>
 8000dc6:	4a15      	ldr	r2, [pc, #84]	; (8000e1c <endof_scan_line+0x84>)
 8000dc8:	2320      	movs	r3, #32
 8000dca:	60d3      	str	r3, [r2, #12]
	return;
 8000dcc:	e017      	b.n	8000dfe <endof_scan_line+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <endof_scan_line+0x74>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <endof_scan_line+0x88>)
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d903      	bls.n	8000de2 <endof_scan_line+0x4a>
 8000dda:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <endof_scan_line+0x84>)
 8000ddc:	2320      	movs	r3, #32
 8000dde:	6093      	str	r3, [r2, #8]
	return;
 8000de0:	e00d      	b.n	8000dfe <endof_scan_line+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <endof_scan_line+0x74>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <endof_scan_line+0x8c>)
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d903      	bls.n	8000df6 <endof_scan_line+0x5e>
 8000dee:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <endof_scan_line+0x90>)
 8000df0:	2320      	movs	r3, #32
 8000df2:	60d3      	str	r3, [r2, #12]
	return;
 8000df4:	e003      	b.n	8000dfe <endof_scan_line+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_tim3_ch1, DMA_FLAG_TCIF0_4);
 8000df6:	4a0c      	ldr	r2, [pc, #48]	; (8000e28 <endof_scan_line+0x90>)
 8000df8:	2320      	movs	r3, #32
 8000dfa:	6093      	str	r3, [r2, #8]
	return;
 8000dfc:	bf00      	nop
}
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	58020400 	.word	0x58020400
 8000e0c:	240000e4 	.word	0x240000e4
 8000e10:	400204b8 	.word	0x400204b8
 8000e14:	58025400 	.word	0x58025400
 8000e18:	40020458 	.word	0x40020458
 8000e1c:	40020400 	.word	0x40020400
 8000e20:	400200b8 	.word	0x400200b8
 8000e24:	40020058 	.word	0x40020058
 8000e28:	40020000 	.word	0x40020000

08000e2c <start_Hsync_Sequence>:

void start_Hsync_Sequence(){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0


	// Setup presecaler
//	TIM2->PSC = 0;
	TIM2->PSC = 99;
 8000e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e34:	2263      	movs	r2, #99	; 0x63
 8000e36:	629a      	str	r2, [r3, #40]	; 0x28

	// Choose pulse sequence
	pulse_iter = 0;
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <start_Hsync_Sequence+0x24>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	801a      	strh	r2, [r3, #0]

	// Show width of pulse
	// TODO: Remove later
	GPIOB->ODR = 0xffff;
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <start_Hsync_Sequence+0x28>)
 8000e40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e44:	615a      	str	r2, [r3, #20]

	// Run the timer
	HAL_TIM_Base_Start_IT(&htim2);
 8000e46:	4804      	ldr	r0, [pc, #16]	; (8000e58 <start_Hsync_Sequence+0x2c>)
 8000e48:	f005 ffb2 	bl	8006db0 <HAL_TIM_Base_Start_IT>

}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	240006d4 	.word	0x240006d4
 8000e54:	58020400 	.word	0x58020400
 8000e58:	2400004c 	.word	0x2400004c

08000e5c <start_Vsync_Sequence>:


void start_Vsync_Sequence(){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0


	// Setup presecaler
	TIM2->PSC = 0;
 8000e60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e64:	2200      	movs	r2, #0
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28


	// Choose pulse sequence
	pulse_iter = 0x10;
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <start_Vsync_Sequence+0x24>)
 8000e6a:	2210      	movs	r2, #16
 8000e6c:	801a      	strh	r2, [r3, #0]

	// Show width of pulse
	// TODO: Remove later
	GPIOB->ODR = 0xffff;
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <start_Vsync_Sequence+0x28>)
 8000e70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e74:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start_IT(&htim2);
 8000e76:	4804      	ldr	r0, [pc, #16]	; (8000e88 <start_Vsync_Sequence+0x2c>)
 8000e78:	f005 ff9a 	bl	8006db0 <HAL_TIM_Base_Start_IT>
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	240006d4 	.word	0x240006d4
 8000e84:	58020400 	.word	0x58020400
 8000e88:	2400004c 	.word	0x2400004c

08000e8c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

	if(htim == &htim2){
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a3e      	ldr	r2, [pc, #248]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d175      	bne.n	8000f88 <HAL_TIM_PeriodElapsedCallback+0xfc>

		if (pulse_iter == 0x00){
 8000e9c:	4b3d      	ldr	r3, [pc, #244]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d108      	bne.n	8000eb6 <HAL_TIM_PeriodElapsedCallback+0x2a>
			GPIOE->ODR = 0x8001;
 8000ea4:	4b3c      	ldr	r3, [pc, #240]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ea6:	f248 0201 	movw	r2, #32769	; 0x8001
 8000eaa:	615a      	str	r2, [r3, #20]
//			TIM2->ARR = 45;
			TIM2->ARR = 39;
 8000eac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eb0:	2227      	movs	r2, #39	; 0x27
 8000eb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eb4:	e062      	b.n	8000f7c <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
		else if (pulse_iter == 0x01){
 8000eb6:	4b37      	ldr	r3, [pc, #220]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d109      	bne.n	8000ed2 <HAL_TIM_PeriodElapsedCallback+0x46>
			GPIOE->ODR = 0x8001;
 8000ebe:	4b36      	ldr	r3, [pc, #216]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ec0:	f248 0201 	movw	r2, #32769	; 0x8001
 8000ec4:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 285;
 8000ec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eca:	f240 121d 	movw	r2, #285	; 0x11d
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ed0:	e054      	b.n	8000f7c <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
		else if (pulse_iter == 0x02){
 8000ed2:	4b30      	ldr	r3, [pc, #192]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d107      	bne.n	8000eea <HAL_TIM_PeriodElapsedCallback+0x5e>

			GPIOE->ODR = 0x0001;
 8000eda:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 143;
 8000ee0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee4:	228f      	movs	r2, #143	; 0x8f
 8000ee6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ee8:	e048      	b.n	8000f7c <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
		else if (pulse_iter == 0x03){
 8000eea:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d108      	bne.n	8000f04 <HAL_TIM_PeriodElapsedCallback+0x78>

			GPIOE->ODR = 0x8001;
 8000ef2:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ef4:	f248 0201 	movw	r2, #32769	; 0x8001
 8000ef8:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 1;
 8000efa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000efe:	2201      	movs	r2, #1
 8000f00:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f02:	e03b      	b.n	8000f7c <HAL_TIM_PeriodElapsedCallback+0xf0>
		}


		else if (pulse_iter == 0x10){
 8000f04:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	2b10      	cmp	r3, #16
 8000f0a:	d109      	bne.n	8000f20 <HAL_TIM_PeriodElapsedCallback+0x94>
			GPIOE->ODR = 0x8001;
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f0e:	f248 0201 	movw	r2, #32769	; 0x8001
 8000f12:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 23827;
 8000f14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f18:	f645 5213 	movw	r2, #23827	; 0x5d13
 8000f1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f1e:	e02d      	b.n	8000f7c <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
		else if (pulse_iter == 0x11){
 8000f20:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	2b11      	cmp	r3, #17
 8000f26:	d109      	bne.n	8000f3c <HAL_TIM_PeriodElapsedCallback+0xb0>
			GPIOE->ODR = 0x8001;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f2a:	f248 0201 	movw	r2, #32769	; 0x8001
 8000f2e:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 4751;
 8000f30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f34:	f241 228f 	movw	r2, #4751	; 0x128f
 8000f38:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f3a:	e01f      	b.n	8000f7c <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
		else if (pulse_iter == 0x12){
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	2b12      	cmp	r3, #18
 8000f42:	d108      	bne.n	8000f56 <HAL_TIM_PeriodElapsedCallback+0xca>
			GPIOE->ODR = 0x8000;
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f4a:	615a      	str	r2, [r3, #20]
//			TIM2->ARR = 78675;
			TIM2->ARR = 79599;
 8000f4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f50:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f54:	e012      	b.n	8000f7c <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
		else if (pulse_iter == 0x13){
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	2b13      	cmp	r3, #19
 8000f5c:	d108      	bne.n	8000f70 <HAL_TIM_PeriodElapsedCallback+0xe4>
			GPIOE->ODR = 0x8001;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f60:	f248 0201 	movw	r2, #32769	; 0x8001
 8000f64:	615a      	str	r2, [r3, #20]
			TIM2->ARR = 1;
 8000f66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f6e:	e005      	b.n	8000f7c <HAL_TIM_PeriodElapsedCallback+0xf0>
		}



		else{
			HAL_TIM_Base_Stop_IT(&htim2);
 8000f70:	4807      	ldr	r0, [pc, #28]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f72:	f005 ff95 	bl	8006ea0 <HAL_TIM_Base_Stop_IT>
			GPIOB->ODR = 0x0000;
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	615a      	str	r2, [r3, #20]

		}

//		TIM2->ARR = pulse_sequence[pulse_iter];
		pulse_iter++;
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f86:	801a      	strh	r2, [r3, #0]


	}

}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	2400004c 	.word	0x2400004c
 8000f94:	240006d4 	.word	0x240006d4
 8000f98:	58021000 	.word	0x58021000
 8000f9c:	000136ef 	.word	0x000136ef
 8000fa0:	58020400 	.word	0x58020400

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fac:	e7fe      	b.n	8000fac <Error_Handler+0x8>
	...

08000fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_MspInit+0x30>)
 8000fb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fbc:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <HAL_MspInit+0x30>)
 8000fbe:	f043 0302 	orr.w	r3, r3, #2
 8000fc2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_MspInit+0x30>)
 8000fc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	58024400 	.word	0x58024400

08000fe4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff4:	d117      	bne.n	8001026 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ff6:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <HAL_TIM_Base_MspInit+0xd4>)
 8000ff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ffc:	4a2e      	ldr	r2, [pc, #184]	; (80010b8 <HAL_TIM_Base_MspInit+0xd4>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001006:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <HAL_TIM_Base_MspInit+0xd4>)
 8001008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	2100      	movs	r1, #0
 8001018:	201c      	movs	r0, #28
 800101a:	f000 fb50 	bl	80016be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800101e:	201c      	movs	r0, #28
 8001020:	f000 fb67 	bl	80016f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001024:	e043      	b.n	80010ae <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a24      	ldr	r2, [pc, #144]	; (80010bc <HAL_TIM_Base_MspInit+0xd8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d13e      	bne.n	80010ae <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001030:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <HAL_TIM_Base_MspInit+0xd4>)
 8001032:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001036:	4a20      	ldr	r2, [pc, #128]	; (80010b8 <HAL_TIM_Base_MspInit+0xd4>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <HAL_TIM_Base_MspInit+0xd4>)
 8001042:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1.Instance = DMA1_Stream0;
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <HAL_TIM_Base_MspInit+0xdc>)
 8001050:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <HAL_TIM_Base_MspInit+0xe0>)
 8001052:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <HAL_TIM_Base_MspInit+0xdc>)
 8001056:	2217      	movs	r2, #23
 8001058:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_TIM_Base_MspInit+0xdc>)
 800105c:	2240      	movs	r2, #64	; 0x40
 800105e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_TIM_Base_MspInit+0xdc>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_TIM_Base_MspInit+0xdc>)
 8001068:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800106c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <HAL_TIM_Base_MspInit+0xdc>)
 8001070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001074:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_TIM_Base_MspInit+0xdc>)
 8001078:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800107c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_TIM_Base_MspInit+0xdc>)
 8001080:	2200      	movs	r2, #0
 8001082:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_TIM_Base_MspInit+0xdc>)
 8001086:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800108a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <HAL_TIM_Base_MspInit+0xdc>)
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8001092:	480b      	ldr	r0, [pc, #44]	; (80010c0 <HAL_TIM_Base_MspInit+0xdc>)
 8001094:	f000 fb48 	bl	8001728 <HAL_DMA_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_TIM_Base_MspInit+0xbe>
      Error_Handler();
 800109e:	f7ff ff81 	bl	8000fa4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <HAL_TIM_Base_MspInit+0xdc>)
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24
 80010a8:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <HAL_TIM_Base_MspInit+0xdc>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6393      	str	r3, [r2, #56]	; 0x38
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	58024400 	.word	0x58024400
 80010bc:	40000400 	.word	0x40000400
 80010c0:	240000e4 	.word	0x240000e4
 80010c4:	40020010 	.word	0x40020010

080010c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0ba      	sub	sp, #232	; 0xe8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	22c0      	movs	r2, #192	; 0xc0
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f008 fbe8 	bl	80098be <memset>
  if(huart->Instance==USART3)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a27      	ldr	r2, [pc, #156]	; (8001190 <HAL_UART_MspInit+0xc8>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d146      	bne.n	8001186 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010f8:	f04f 0202 	mov.w	r2, #2
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	4618      	mov	r0, r3
 8001110:	f003 ff5a 	bl	8004fc8 <HAL_RCCEx_PeriphCLKConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800111a:	f7ff ff43 	bl	8000fa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <HAL_UART_MspInit+0xcc>)
 8001120:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001124:	4a1b      	ldr	r2, [pc, #108]	; (8001194 <HAL_UART_MspInit+0xcc>)
 8001126:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <HAL_UART_MspInit+0xcc>)
 8001130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001134:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_UART_MspInit+0xcc>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001142:	4a14      	ldr	r2, [pc, #80]	; (8001194 <HAL_UART_MspInit+0xcc>)
 8001144:	f043 0308 	orr.w	r3, r3, #8
 8001148:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_UART_MspInit+0xcc>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800115a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800115e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001174:	2307      	movs	r3, #7
 8001176:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800117a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <HAL_UART_MspInit+0xd0>)
 8001182:	f002 fba9 	bl	80038d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	37e8      	adds	r7, #232	; 0xe8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40004800 	.word	0x40004800
 8001194:	58024400 	.word	0x58024400
 8001198:	58020c00 	.word	0x58020c00

0800119c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b0ba      	sub	sp, #232	; 0xe8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	22c0      	movs	r2, #192	; 0xc0
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f008 fb7e 	bl	80098be <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a38      	ldr	r2, [pc, #224]	; (80012a8 <HAL_PCD_MspInit+0x10c>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d169      	bne.n	80012a0 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011d0:	f04f 0300 	mov.w	r3, #0
 80011d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80011dc:	2312      	movs	r3, #18
 80011de:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80011e4:	2303      	movs	r3, #3
 80011e6:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80011ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011f0:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80011f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011f6:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80011f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fedf 	bl	8004fc8 <HAL_RCCEx_PeriphCLKConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8001210:	f7ff fec8 	bl	8000fa4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001214:	f002 fee2 	bl	8003fdc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <HAL_PCD_MspInit+0x110>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121e:	4a23      	ldr	r2, [pc, #140]	; (80012ac <HAL_PCD_MspInit+0x110>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001228:	4b20      	ldr	r3, [pc, #128]	; (80012ac <HAL_PCD_MspInit+0x110>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001236:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800123a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001250:	230a      	movs	r3, #10
 8001252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800125a:	4619      	mov	r1, r3
 800125c:	4814      	ldr	r0, [pc, #80]	; (80012b0 <HAL_PCD_MspInit+0x114>)
 800125e:	f002 fb3b 	bl	80038d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001262:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001266:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800127a:	4619      	mov	r1, r3
 800127c:	480c      	ldr	r0, [pc, #48]	; (80012b0 <HAL_PCD_MspInit+0x114>)
 800127e:	f002 fb2b 	bl	80038d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_PCD_MspInit+0x110>)
 8001284:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001288:	4a08      	ldr	r2, [pc, #32]	; (80012ac <HAL_PCD_MspInit+0x110>)
 800128a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800128e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_PCD_MspInit+0x110>)
 8001294:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	37e8      	adds	r7, #232	; 0xe8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40080000 	.word	0x40080000
 80012ac:	58024400 	.word	0x58024400
 80012b0:	58020000 	.word	0x58020000

080012b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <NMI_Handler+0x4>

080012ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <HardFault_Handler+0x4>

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <MemManage_Handler+0x4>

080012c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <BusFault_Handler+0x4>

080012cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <UsageFault_Handler+0x4>

080012d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001300:	f000 f8b2 	bl	8001468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}

08001308 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <DMA1_Stream0_IRQHandler+0x10>)
 800130e:	f000 ffd1 	bl	80022b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	240000e4 	.word	0x240000e4

0800131c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <TIM2_IRQHandler+0x10>)
 8001322:	f005 ff5b 	bl	80071dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2400004c 	.word	0x2400004c

08001330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001368 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001334:	f7ff f94e 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800133a:	490d      	ldr	r1, [pc, #52]	; (8001370 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800133c:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001350:	4c0a      	ldr	r4, [pc, #40]	; (800137c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800135e:	f008 fab7 	bl	80098d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001362:	f7ff f9cd 	bl	8000700 <main>
  bx  lr
 8001366:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001368:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800136c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001370:	24000030 	.word	0x24000030
  ldr r2, =_sidata
 8001374:	08009980 	.word	0x08009980
  ldr r2, =_sbss
 8001378:	24000030 	.word	0x24000030
  ldr r4, =_ebss
 800137c:	240006dc 	.word	0x240006dc

08001380 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC3_IRQHandler>
	...

08001384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138a:	2003      	movs	r0, #3
 800138c:	f000 f98c 	bl	80016a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001390:	f003 fc44 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8001394:	4602      	mov	r2, r0
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_Init+0x68>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	f003 030f 	and.w	r3, r3, #15
 80013a0:	4913      	ldr	r1, [pc, #76]	; (80013f0 <HAL_Init+0x6c>)
 80013a2:	5ccb      	ldrb	r3, [r1, r3]
 80013a4:	f003 031f 	and.w	r3, r3, #31
 80013a8:	fa22 f303 	lsr.w	r3, r2, r3
 80013ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_Init+0x68>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <HAL_Init+0x6c>)
 80013b8:	5cd3      	ldrb	r3, [r2, r3]
 80013ba:	f003 031f 	and.w	r3, r3, #31
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	fa22 f303 	lsr.w	r3, r2, r3
 80013c4:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <HAL_Init+0x70>)
 80013c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013c8:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <HAL_Init+0x74>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ce:	2000      	movs	r0, #0
 80013d0:	f000 f814 	bl	80013fc <HAL_InitTick>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e002      	b.n	80013e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013de:	f7ff fde7 	bl	8000fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	58024400 	.word	0x58024400
 80013f0:	08009930 	.word	0x08009930
 80013f4:	24000004 	.word	0x24000004
 80013f8:	24000000 	.word	0x24000000

080013fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_InitTick+0x60>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e021      	b.n	8001454 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <HAL_InitTick+0x64>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_InitTick+0x60>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001422:	fbb2 f3f3 	udiv	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f971 	bl	800170e <HAL_SYSTICK_Config>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e00e      	b.n	8001454 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b0f      	cmp	r3, #15
 800143a:	d80a      	bhi.n	8001452 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143c:	2200      	movs	r2, #0
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f000 f93b 	bl	80016be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <HAL_InitTick+0x68>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e000      	b.n	8001454 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2400002c 	.word	0x2400002c
 8001460:	24000000 	.word	0x24000000
 8001464:	24000028 	.word	0x24000028

08001468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_IncTick+0x20>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x24>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_IncTick+0x24>)
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	2400002c 	.word	0x2400002c
 800148c:	240006d8 	.word	0x240006d8

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	240006d8 	.word	0x240006d8

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff ffee 	bl	8001490 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d005      	beq.n	80014ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_Delay+0x44>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ce:	bf00      	nop
 80014d0:	f7ff ffde 	bl	8001490 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d8f7      	bhi.n	80014d0 <HAL_Delay+0x28>
  {
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2400002c 	.word	0x2400002c

080014f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <HAL_GetREVID+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	0c1b      	lsrs	r3, r3, #16
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	5c001000 	.word	0x5c001000

08001508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <__NVIC_SetPriorityGrouping+0x40>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001524:	4013      	ands	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <__NVIC_SetPriorityGrouping+0x44>)
 8001532:	4313      	orrs	r3, r2
 8001534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001536:	4a04      	ldr	r2, [pc, #16]	; (8001548 <__NVIC_SetPriorityGrouping+0x40>)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	60d3      	str	r3, [r2, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00
 800154c:	05fa0000 	.word	0x05fa0000

08001550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <__NVIC_GetPriorityGrouping+0x18>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	f003 0307 	and.w	r3, r3, #7
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800157a:	2b00      	cmp	r3, #0
 800157c:	db0b      	blt.n	8001596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	f003 021f 	and.w	r2, r3, #31
 8001584:	4907      	ldr	r1, [pc, #28]	; (80015a4 <__NVIC_EnableIRQ+0x38>)
 8001586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158a:	095b      	lsrs	r3, r3, #5
 800158c:	2001      	movs	r0, #1
 800158e:	fa00 f202 	lsl.w	r2, r0, r2
 8001592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000e100 	.word	0xe000e100

080015a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db0a      	blt.n	80015d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	490c      	ldr	r1, [pc, #48]	; (80015f4 <__NVIC_SetPriority+0x4c>)
 80015c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	440b      	add	r3, r1
 80015cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d0:	e00a      	b.n	80015e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4908      	ldr	r1, [pc, #32]	; (80015f8 <__NVIC_SetPriority+0x50>)
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	3b04      	subs	r3, #4
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	440b      	add	r3, r1
 80015e6:	761a      	strb	r2, [r3, #24]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000e100 	.word	0xe000e100
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f1c3 0307 	rsb	r3, r3, #7
 8001616:	2b04      	cmp	r3, #4
 8001618:	bf28      	it	cs
 800161a:	2304      	movcs	r3, #4
 800161c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3304      	adds	r3, #4
 8001622:	2b06      	cmp	r3, #6
 8001624:	d902      	bls.n	800162c <NVIC_EncodePriority+0x30>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3b03      	subs	r3, #3
 800162a:	e000      	b.n	800162e <NVIC_EncodePriority+0x32>
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	f04f 32ff 	mov.w	r2, #4294967295
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	401a      	ands	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001644:	f04f 31ff 	mov.w	r1, #4294967295
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43d9      	mvns	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	4313      	orrs	r3, r2
         );
}
 8001656:	4618      	mov	r0, r3
 8001658:	3724      	adds	r7, #36	; 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001674:	d301      	bcc.n	800167a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001676:	2301      	movs	r3, #1
 8001678:	e00f      	b.n	800169a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <SysTick_Config+0x40>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001682:	210f      	movs	r1, #15
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f7ff ff8e 	bl	80015a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <SysTick_Config+0x40>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <SysTick_Config+0x40>)
 8001694:	2207      	movs	r2, #7
 8001696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	e000e010 	.word	0xe000e010

080016a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff29 	bl	8001508 <__NVIC_SetPriorityGrouping>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016cc:	f7ff ff40 	bl	8001550 <__NVIC_GetPriorityGrouping>
 80016d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	6978      	ldr	r0, [r7, #20]
 80016d8:	f7ff ff90 	bl	80015fc <NVIC_EncodePriority>
 80016dc:	4602      	mov	r2, r0
 80016de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff5f 	bl	80015a8 <__NVIC_SetPriority>
}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff33 	bl	800156c <__NVIC_EnableIRQ>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ffa4 	bl	8001664 <SysTick_Config>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001730:	f7ff feae 	bl	8001490 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e316      	b.n	8001d6e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a66      	ldr	r2, [pc, #408]	; (80018e0 <HAL_DMA_Init+0x1b8>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d04a      	beq.n	80017e0 <HAL_DMA_Init+0xb8>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a65      	ldr	r2, [pc, #404]	; (80018e4 <HAL_DMA_Init+0x1bc>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d045      	beq.n	80017e0 <HAL_DMA_Init+0xb8>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a63      	ldr	r2, [pc, #396]	; (80018e8 <HAL_DMA_Init+0x1c0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d040      	beq.n	80017e0 <HAL_DMA_Init+0xb8>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a62      	ldr	r2, [pc, #392]	; (80018ec <HAL_DMA_Init+0x1c4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d03b      	beq.n	80017e0 <HAL_DMA_Init+0xb8>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a60      	ldr	r2, [pc, #384]	; (80018f0 <HAL_DMA_Init+0x1c8>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d036      	beq.n	80017e0 <HAL_DMA_Init+0xb8>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a5f      	ldr	r2, [pc, #380]	; (80018f4 <HAL_DMA_Init+0x1cc>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d031      	beq.n	80017e0 <HAL_DMA_Init+0xb8>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a5d      	ldr	r2, [pc, #372]	; (80018f8 <HAL_DMA_Init+0x1d0>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d02c      	beq.n	80017e0 <HAL_DMA_Init+0xb8>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a5c      	ldr	r2, [pc, #368]	; (80018fc <HAL_DMA_Init+0x1d4>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d027      	beq.n	80017e0 <HAL_DMA_Init+0xb8>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a5a      	ldr	r2, [pc, #360]	; (8001900 <HAL_DMA_Init+0x1d8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d022      	beq.n	80017e0 <HAL_DMA_Init+0xb8>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a59      	ldr	r2, [pc, #356]	; (8001904 <HAL_DMA_Init+0x1dc>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d01d      	beq.n	80017e0 <HAL_DMA_Init+0xb8>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a57      	ldr	r2, [pc, #348]	; (8001908 <HAL_DMA_Init+0x1e0>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d018      	beq.n	80017e0 <HAL_DMA_Init+0xb8>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a56      	ldr	r2, [pc, #344]	; (800190c <HAL_DMA_Init+0x1e4>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d013      	beq.n	80017e0 <HAL_DMA_Init+0xb8>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a54      	ldr	r2, [pc, #336]	; (8001910 <HAL_DMA_Init+0x1e8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d00e      	beq.n	80017e0 <HAL_DMA_Init+0xb8>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a53      	ldr	r2, [pc, #332]	; (8001914 <HAL_DMA_Init+0x1ec>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d009      	beq.n	80017e0 <HAL_DMA_Init+0xb8>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a51      	ldr	r2, [pc, #324]	; (8001918 <HAL_DMA_Init+0x1f0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d004      	beq.n	80017e0 <HAL_DMA_Init+0xb8>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a50      	ldr	r2, [pc, #320]	; (800191c <HAL_DMA_Init+0x1f4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d101      	bne.n	80017e4 <HAL_DMA_Init+0xbc>
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <HAL_DMA_Init+0xbe>
 80017e4:	2300      	movs	r3, #0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 813b 	beq.w	8001a62 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2202      	movs	r2, #2
 80017f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a37      	ldr	r2, [pc, #220]	; (80018e0 <HAL_DMA_Init+0x1b8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d04a      	beq.n	800189c <HAL_DMA_Init+0x174>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a36      	ldr	r2, [pc, #216]	; (80018e4 <HAL_DMA_Init+0x1bc>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d045      	beq.n	800189c <HAL_DMA_Init+0x174>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a34      	ldr	r2, [pc, #208]	; (80018e8 <HAL_DMA_Init+0x1c0>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d040      	beq.n	800189c <HAL_DMA_Init+0x174>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a33      	ldr	r2, [pc, #204]	; (80018ec <HAL_DMA_Init+0x1c4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d03b      	beq.n	800189c <HAL_DMA_Init+0x174>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a31      	ldr	r2, [pc, #196]	; (80018f0 <HAL_DMA_Init+0x1c8>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d036      	beq.n	800189c <HAL_DMA_Init+0x174>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a30      	ldr	r2, [pc, #192]	; (80018f4 <HAL_DMA_Init+0x1cc>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d031      	beq.n	800189c <HAL_DMA_Init+0x174>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a2e      	ldr	r2, [pc, #184]	; (80018f8 <HAL_DMA_Init+0x1d0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d02c      	beq.n	800189c <HAL_DMA_Init+0x174>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a2d      	ldr	r2, [pc, #180]	; (80018fc <HAL_DMA_Init+0x1d4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d027      	beq.n	800189c <HAL_DMA_Init+0x174>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a2b      	ldr	r2, [pc, #172]	; (8001900 <HAL_DMA_Init+0x1d8>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d022      	beq.n	800189c <HAL_DMA_Init+0x174>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a2a      	ldr	r2, [pc, #168]	; (8001904 <HAL_DMA_Init+0x1dc>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d01d      	beq.n	800189c <HAL_DMA_Init+0x174>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a28      	ldr	r2, [pc, #160]	; (8001908 <HAL_DMA_Init+0x1e0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d018      	beq.n	800189c <HAL_DMA_Init+0x174>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a27      	ldr	r2, [pc, #156]	; (800190c <HAL_DMA_Init+0x1e4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d013      	beq.n	800189c <HAL_DMA_Init+0x174>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a25      	ldr	r2, [pc, #148]	; (8001910 <HAL_DMA_Init+0x1e8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d00e      	beq.n	800189c <HAL_DMA_Init+0x174>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a24      	ldr	r2, [pc, #144]	; (8001914 <HAL_DMA_Init+0x1ec>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d009      	beq.n	800189c <HAL_DMA_Init+0x174>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a22      	ldr	r2, [pc, #136]	; (8001918 <HAL_DMA_Init+0x1f0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d004      	beq.n	800189c <HAL_DMA_Init+0x174>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a21      	ldr	r2, [pc, #132]	; (800191c <HAL_DMA_Init+0x1f4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d108      	bne.n	80018ae <HAL_DMA_Init+0x186>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0201 	bic.w	r2, r2, #1
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	e007      	b.n	80018be <HAL_DMA_Init+0x196>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0201 	bic.w	r2, r2, #1
 80018bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80018be:	e02f      	b.n	8001920 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018c0:	f7ff fde6 	bl	8001490 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b05      	cmp	r3, #5
 80018cc:	d928      	bls.n	8001920 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2220      	movs	r2, #32
 80018d2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2203      	movs	r2, #3
 80018d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e246      	b.n	8001d6e <HAL_DMA_Init+0x646>
 80018e0:	40020010 	.word	0x40020010
 80018e4:	40020028 	.word	0x40020028
 80018e8:	40020040 	.word	0x40020040
 80018ec:	40020058 	.word	0x40020058
 80018f0:	40020070 	.word	0x40020070
 80018f4:	40020088 	.word	0x40020088
 80018f8:	400200a0 	.word	0x400200a0
 80018fc:	400200b8 	.word	0x400200b8
 8001900:	40020410 	.word	0x40020410
 8001904:	40020428 	.word	0x40020428
 8001908:	40020440 	.word	0x40020440
 800190c:	40020458 	.word	0x40020458
 8001910:	40020470 	.word	0x40020470
 8001914:	40020488 	.word	0x40020488
 8001918:	400204a0 	.word	0x400204a0
 800191c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1c8      	bne.n	80018c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4b83      	ldr	r3, [pc, #524]	; (8001b48 <HAL_DMA_Init+0x420>)
 800193a:	4013      	ands	r3, r2
 800193c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001946:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001952:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800195e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4313      	orrs	r3, r2
 800196a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	2b04      	cmp	r3, #4
 8001972:	d107      	bne.n	8001984 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	4313      	orrs	r3, r2
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4313      	orrs	r3, r2
 8001982:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001984:	4b71      	ldr	r3, [pc, #452]	; (8001b4c <HAL_DMA_Init+0x424>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b71      	ldr	r3, [pc, #452]	; (8001b50 <HAL_DMA_Init+0x428>)
 800198a:	4013      	ands	r3, r2
 800198c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001990:	d328      	bcc.n	80019e4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b28      	cmp	r3, #40	; 0x28
 8001998:	d903      	bls.n	80019a2 <HAL_DMA_Init+0x27a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b2e      	cmp	r3, #46	; 0x2e
 80019a0:	d917      	bls.n	80019d2 <HAL_DMA_Init+0x2aa>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b3e      	cmp	r3, #62	; 0x3e
 80019a8:	d903      	bls.n	80019b2 <HAL_DMA_Init+0x28a>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b42      	cmp	r3, #66	; 0x42
 80019b0:	d90f      	bls.n	80019d2 <HAL_DMA_Init+0x2aa>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b46      	cmp	r3, #70	; 0x46
 80019b8:	d903      	bls.n	80019c2 <HAL_DMA_Init+0x29a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b48      	cmp	r3, #72	; 0x48
 80019c0:	d907      	bls.n	80019d2 <HAL_DMA_Init+0x2aa>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b4e      	cmp	r3, #78	; 0x4e
 80019c8:	d905      	bls.n	80019d6 <HAL_DMA_Init+0x2ae>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b52      	cmp	r3, #82	; 0x52
 80019d0:	d801      	bhi.n	80019d6 <HAL_DMA_Init+0x2ae>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <HAL_DMA_Init+0x2b0>
 80019d6:	2300      	movs	r3, #0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019e2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f023 0307 	bic.w	r3, r3, #7
 80019fa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d117      	bne.n	8001a3e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00e      	beq.n	8001a3e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f001 fdcf 	bl	80035c4 <DMA_CheckFifoParam>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d008      	beq.n	8001a3e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2240      	movs	r2, #64	; 0x40
 8001a30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e197      	b.n	8001d6e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f001 fd0a 	bl	8003460 <DMA_CalcBaseAndBitshift>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	223f      	movs	r2, #63	; 0x3f
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	e0cd      	b.n	8001bfe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a3b      	ldr	r2, [pc, #236]	; (8001b54 <HAL_DMA_Init+0x42c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d022      	beq.n	8001ab2 <HAL_DMA_Init+0x38a>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a39      	ldr	r2, [pc, #228]	; (8001b58 <HAL_DMA_Init+0x430>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d01d      	beq.n	8001ab2 <HAL_DMA_Init+0x38a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a38      	ldr	r2, [pc, #224]	; (8001b5c <HAL_DMA_Init+0x434>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d018      	beq.n	8001ab2 <HAL_DMA_Init+0x38a>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a36      	ldr	r2, [pc, #216]	; (8001b60 <HAL_DMA_Init+0x438>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d013      	beq.n	8001ab2 <HAL_DMA_Init+0x38a>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a35      	ldr	r2, [pc, #212]	; (8001b64 <HAL_DMA_Init+0x43c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d00e      	beq.n	8001ab2 <HAL_DMA_Init+0x38a>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a33      	ldr	r2, [pc, #204]	; (8001b68 <HAL_DMA_Init+0x440>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d009      	beq.n	8001ab2 <HAL_DMA_Init+0x38a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a32      	ldr	r2, [pc, #200]	; (8001b6c <HAL_DMA_Init+0x444>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d004      	beq.n	8001ab2 <HAL_DMA_Init+0x38a>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a30      	ldr	r2, [pc, #192]	; (8001b70 <HAL_DMA_Init+0x448>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d101      	bne.n	8001ab6 <HAL_DMA_Init+0x38e>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_DMA_Init+0x390>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 8097 	beq.w	8001bec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a24      	ldr	r2, [pc, #144]	; (8001b54 <HAL_DMA_Init+0x42c>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d021      	beq.n	8001b0c <HAL_DMA_Init+0x3e4>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <HAL_DMA_Init+0x430>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d01c      	beq.n	8001b0c <HAL_DMA_Init+0x3e4>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a21      	ldr	r2, [pc, #132]	; (8001b5c <HAL_DMA_Init+0x434>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d017      	beq.n	8001b0c <HAL_DMA_Init+0x3e4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <HAL_DMA_Init+0x438>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d012      	beq.n	8001b0c <HAL_DMA_Init+0x3e4>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a1e      	ldr	r2, [pc, #120]	; (8001b64 <HAL_DMA_Init+0x43c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d00d      	beq.n	8001b0c <HAL_DMA_Init+0x3e4>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <HAL_DMA_Init+0x440>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d008      	beq.n	8001b0c <HAL_DMA_Init+0x3e4>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a1b      	ldr	r2, [pc, #108]	; (8001b6c <HAL_DMA_Init+0x444>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d003      	beq.n	8001b0c <HAL_DMA_Init+0x3e4>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a19      	ldr	r2, [pc, #100]	; (8001b70 <HAL_DMA_Init+0x448>)
 8001b0a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <HAL_DMA_Init+0x44c>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b40      	cmp	r3, #64	; 0x40
 8001b32:	d021      	beq.n	8001b78 <HAL_DMA_Init+0x450>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b80      	cmp	r3, #128	; 0x80
 8001b3a:	d102      	bne.n	8001b42 <HAL_DMA_Init+0x41a>
 8001b3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b40:	e01b      	b.n	8001b7a <HAL_DMA_Init+0x452>
 8001b42:	2300      	movs	r3, #0
 8001b44:	e019      	b.n	8001b7a <HAL_DMA_Init+0x452>
 8001b46:	bf00      	nop
 8001b48:	fe10803f 	.word	0xfe10803f
 8001b4c:	5c001000 	.word	0x5c001000
 8001b50:	ffff0000 	.word	0xffff0000
 8001b54:	58025408 	.word	0x58025408
 8001b58:	5802541c 	.word	0x5802541c
 8001b5c:	58025430 	.word	0x58025430
 8001b60:	58025444 	.word	0x58025444
 8001b64:	58025458 	.word	0x58025458
 8001b68:	5802546c 	.word	0x5802546c
 8001b6c:	58025480 	.word	0x58025480
 8001b70:	58025494 	.word	0x58025494
 8001b74:	fffe000f 	.word	0xfffe000f
 8001b78:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68d2      	ldr	r2, [r2, #12]
 8001b7e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ba0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ba8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b6e      	ldr	r3, [pc, #440]	; (8001d78 <HAL_DMA_Init+0x650>)
 8001bc0:	4413      	add	r3, r2
 8001bc2:	4a6e      	ldr	r2, [pc, #440]	; (8001d7c <HAL_DMA_Init+0x654>)
 8001bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	009a      	lsls	r2, r3, #2
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f001 fc45 	bl	8003460 <DMA_CalcBaseAndBitshift>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	2201      	movs	r2, #1
 8001be4:	409a      	lsls	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	e008      	b.n	8001bfe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2240      	movs	r2, #64	; 0x40
 8001bf0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e0b7      	b.n	8001d6e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a5f      	ldr	r2, [pc, #380]	; (8001d80 <HAL_DMA_Init+0x658>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d072      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a5d      	ldr	r2, [pc, #372]	; (8001d84 <HAL_DMA_Init+0x65c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d06d      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a5c      	ldr	r2, [pc, #368]	; (8001d88 <HAL_DMA_Init+0x660>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d068      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a5a      	ldr	r2, [pc, #360]	; (8001d8c <HAL_DMA_Init+0x664>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d063      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a59      	ldr	r2, [pc, #356]	; (8001d90 <HAL_DMA_Init+0x668>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d05e      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a57      	ldr	r2, [pc, #348]	; (8001d94 <HAL_DMA_Init+0x66c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d059      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a56      	ldr	r2, [pc, #344]	; (8001d98 <HAL_DMA_Init+0x670>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d054      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a54      	ldr	r2, [pc, #336]	; (8001d9c <HAL_DMA_Init+0x674>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d04f      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a53      	ldr	r2, [pc, #332]	; (8001da0 <HAL_DMA_Init+0x678>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d04a      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a51      	ldr	r2, [pc, #324]	; (8001da4 <HAL_DMA_Init+0x67c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d045      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a50      	ldr	r2, [pc, #320]	; (8001da8 <HAL_DMA_Init+0x680>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d040      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a4e      	ldr	r2, [pc, #312]	; (8001dac <HAL_DMA_Init+0x684>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d03b      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a4d      	ldr	r2, [pc, #308]	; (8001db0 <HAL_DMA_Init+0x688>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d036      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a4b      	ldr	r2, [pc, #300]	; (8001db4 <HAL_DMA_Init+0x68c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d031      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a4a      	ldr	r2, [pc, #296]	; (8001db8 <HAL_DMA_Init+0x690>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d02c      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a48      	ldr	r2, [pc, #288]	; (8001dbc <HAL_DMA_Init+0x694>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d027      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a47      	ldr	r2, [pc, #284]	; (8001dc0 <HAL_DMA_Init+0x698>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d022      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a45      	ldr	r2, [pc, #276]	; (8001dc4 <HAL_DMA_Init+0x69c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d01d      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a44      	ldr	r2, [pc, #272]	; (8001dc8 <HAL_DMA_Init+0x6a0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d018      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a42      	ldr	r2, [pc, #264]	; (8001dcc <HAL_DMA_Init+0x6a4>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a41      	ldr	r2, [pc, #260]	; (8001dd0 <HAL_DMA_Init+0x6a8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d00e      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a3f      	ldr	r2, [pc, #252]	; (8001dd4 <HAL_DMA_Init+0x6ac>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d009      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a3e      	ldr	r2, [pc, #248]	; (8001dd8 <HAL_DMA_Init+0x6b0>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d004      	beq.n	8001cee <HAL_DMA_Init+0x5c6>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a3c      	ldr	r2, [pc, #240]	; (8001ddc <HAL_DMA_Init+0x6b4>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d101      	bne.n	8001cf2 <HAL_DMA_Init+0x5ca>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_DMA_Init+0x5cc>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d032      	beq.n	8001d5e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f001 fcdf 	bl	80036bc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b80      	cmp	r3, #128	; 0x80
 8001d04:	d102      	bne.n	8001d0c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d20:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d010      	beq.n	8001d4c <HAL_DMA_Init+0x624>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d80c      	bhi.n	8001d4c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f001 fd5c 	bl	80037f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	e008      	b.n	8001d5e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	a7fdabf8 	.word	0xa7fdabf8
 8001d7c:	cccccccd 	.word	0xcccccccd
 8001d80:	40020010 	.word	0x40020010
 8001d84:	40020028 	.word	0x40020028
 8001d88:	40020040 	.word	0x40020040
 8001d8c:	40020058 	.word	0x40020058
 8001d90:	40020070 	.word	0x40020070
 8001d94:	40020088 	.word	0x40020088
 8001d98:	400200a0 	.word	0x400200a0
 8001d9c:	400200b8 	.word	0x400200b8
 8001da0:	40020410 	.word	0x40020410
 8001da4:	40020428 	.word	0x40020428
 8001da8:	40020440 	.word	0x40020440
 8001dac:	40020458 	.word	0x40020458
 8001db0:	40020470 	.word	0x40020470
 8001db4:	40020488 	.word	0x40020488
 8001db8:	400204a0 	.word	0x400204a0
 8001dbc:	400204b8 	.word	0x400204b8
 8001dc0:	58025408 	.word	0x58025408
 8001dc4:	5802541c 	.word	0x5802541c
 8001dc8:	58025430 	.word	0x58025430
 8001dcc:	58025444 	.word	0x58025444
 8001dd0:	58025458 	.word	0x58025458
 8001dd4:	5802546c 	.word	0x5802546c
 8001dd8:	58025480 	.word	0x58025480
 8001ddc:	58025494 	.word	0x58025494

08001de0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e226      	b.n	800224a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_DMA_Start_IT+0x2a>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e21f      	b.n	800224a <HAL_DMA_Start_IT+0x46a>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	f040 820a 	bne.w	8002234 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a68      	ldr	r2, [pc, #416]	; (8001fd4 <HAL_DMA_Start_IT+0x1f4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d04a      	beq.n	8001ece <HAL_DMA_Start_IT+0xee>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a66      	ldr	r2, [pc, #408]	; (8001fd8 <HAL_DMA_Start_IT+0x1f8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d045      	beq.n	8001ece <HAL_DMA_Start_IT+0xee>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a65      	ldr	r2, [pc, #404]	; (8001fdc <HAL_DMA_Start_IT+0x1fc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d040      	beq.n	8001ece <HAL_DMA_Start_IT+0xee>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a63      	ldr	r2, [pc, #396]	; (8001fe0 <HAL_DMA_Start_IT+0x200>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d03b      	beq.n	8001ece <HAL_DMA_Start_IT+0xee>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a62      	ldr	r2, [pc, #392]	; (8001fe4 <HAL_DMA_Start_IT+0x204>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d036      	beq.n	8001ece <HAL_DMA_Start_IT+0xee>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a60      	ldr	r2, [pc, #384]	; (8001fe8 <HAL_DMA_Start_IT+0x208>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d031      	beq.n	8001ece <HAL_DMA_Start_IT+0xee>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a5f      	ldr	r2, [pc, #380]	; (8001fec <HAL_DMA_Start_IT+0x20c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d02c      	beq.n	8001ece <HAL_DMA_Start_IT+0xee>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a5d      	ldr	r2, [pc, #372]	; (8001ff0 <HAL_DMA_Start_IT+0x210>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d027      	beq.n	8001ece <HAL_DMA_Start_IT+0xee>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a5c      	ldr	r2, [pc, #368]	; (8001ff4 <HAL_DMA_Start_IT+0x214>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d022      	beq.n	8001ece <HAL_DMA_Start_IT+0xee>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a5a      	ldr	r2, [pc, #360]	; (8001ff8 <HAL_DMA_Start_IT+0x218>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d01d      	beq.n	8001ece <HAL_DMA_Start_IT+0xee>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a59      	ldr	r2, [pc, #356]	; (8001ffc <HAL_DMA_Start_IT+0x21c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d018      	beq.n	8001ece <HAL_DMA_Start_IT+0xee>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a57      	ldr	r2, [pc, #348]	; (8002000 <HAL_DMA_Start_IT+0x220>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d013      	beq.n	8001ece <HAL_DMA_Start_IT+0xee>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a56      	ldr	r2, [pc, #344]	; (8002004 <HAL_DMA_Start_IT+0x224>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d00e      	beq.n	8001ece <HAL_DMA_Start_IT+0xee>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a54      	ldr	r2, [pc, #336]	; (8002008 <HAL_DMA_Start_IT+0x228>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d009      	beq.n	8001ece <HAL_DMA_Start_IT+0xee>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a53      	ldr	r2, [pc, #332]	; (800200c <HAL_DMA_Start_IT+0x22c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d004      	beq.n	8001ece <HAL_DMA_Start_IT+0xee>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a51      	ldr	r2, [pc, #324]	; (8002010 <HAL_DMA_Start_IT+0x230>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d108      	bne.n	8001ee0 <HAL_DMA_Start_IT+0x100>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0201 	bic.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	e007      	b.n	8001ef0 <HAL_DMA_Start_IT+0x110>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0201 	bic.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f001 f906 	bl	8003108 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a34      	ldr	r2, [pc, #208]	; (8001fd4 <HAL_DMA_Start_IT+0x1f4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d04a      	beq.n	8001f9c <HAL_DMA_Start_IT+0x1bc>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a33      	ldr	r2, [pc, #204]	; (8001fd8 <HAL_DMA_Start_IT+0x1f8>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d045      	beq.n	8001f9c <HAL_DMA_Start_IT+0x1bc>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a31      	ldr	r2, [pc, #196]	; (8001fdc <HAL_DMA_Start_IT+0x1fc>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d040      	beq.n	8001f9c <HAL_DMA_Start_IT+0x1bc>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a30      	ldr	r2, [pc, #192]	; (8001fe0 <HAL_DMA_Start_IT+0x200>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d03b      	beq.n	8001f9c <HAL_DMA_Start_IT+0x1bc>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a2e      	ldr	r2, [pc, #184]	; (8001fe4 <HAL_DMA_Start_IT+0x204>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d036      	beq.n	8001f9c <HAL_DMA_Start_IT+0x1bc>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a2d      	ldr	r2, [pc, #180]	; (8001fe8 <HAL_DMA_Start_IT+0x208>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d031      	beq.n	8001f9c <HAL_DMA_Start_IT+0x1bc>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a2b      	ldr	r2, [pc, #172]	; (8001fec <HAL_DMA_Start_IT+0x20c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d02c      	beq.n	8001f9c <HAL_DMA_Start_IT+0x1bc>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a2a      	ldr	r2, [pc, #168]	; (8001ff0 <HAL_DMA_Start_IT+0x210>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d027      	beq.n	8001f9c <HAL_DMA_Start_IT+0x1bc>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a28      	ldr	r2, [pc, #160]	; (8001ff4 <HAL_DMA_Start_IT+0x214>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d022      	beq.n	8001f9c <HAL_DMA_Start_IT+0x1bc>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a27      	ldr	r2, [pc, #156]	; (8001ff8 <HAL_DMA_Start_IT+0x218>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d01d      	beq.n	8001f9c <HAL_DMA_Start_IT+0x1bc>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a25      	ldr	r2, [pc, #148]	; (8001ffc <HAL_DMA_Start_IT+0x21c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d018      	beq.n	8001f9c <HAL_DMA_Start_IT+0x1bc>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a24      	ldr	r2, [pc, #144]	; (8002000 <HAL_DMA_Start_IT+0x220>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d013      	beq.n	8001f9c <HAL_DMA_Start_IT+0x1bc>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a22      	ldr	r2, [pc, #136]	; (8002004 <HAL_DMA_Start_IT+0x224>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00e      	beq.n	8001f9c <HAL_DMA_Start_IT+0x1bc>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a21      	ldr	r2, [pc, #132]	; (8002008 <HAL_DMA_Start_IT+0x228>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d009      	beq.n	8001f9c <HAL_DMA_Start_IT+0x1bc>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1f      	ldr	r2, [pc, #124]	; (800200c <HAL_DMA_Start_IT+0x22c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d004      	beq.n	8001f9c <HAL_DMA_Start_IT+0x1bc>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1e      	ldr	r2, [pc, #120]	; (8002010 <HAL_DMA_Start_IT+0x230>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d101      	bne.n	8001fa0 <HAL_DMA_Start_IT+0x1c0>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_DMA_Start_IT+0x1c2>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d036      	beq.n	8002014 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 021e 	bic.w	r2, r3, #30
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0216 	orr.w	r2, r2, #22
 8001fb8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d03e      	beq.n	8002040 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0208 	orr.w	r2, r2, #8
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	e035      	b.n	8002040 <HAL_DMA_Start_IT+0x260>
 8001fd4:	40020010 	.word	0x40020010
 8001fd8:	40020028 	.word	0x40020028
 8001fdc:	40020040 	.word	0x40020040
 8001fe0:	40020058 	.word	0x40020058
 8001fe4:	40020070 	.word	0x40020070
 8001fe8:	40020088 	.word	0x40020088
 8001fec:	400200a0 	.word	0x400200a0
 8001ff0:	400200b8 	.word	0x400200b8
 8001ff4:	40020410 	.word	0x40020410
 8001ff8:	40020428 	.word	0x40020428
 8001ffc:	40020440 	.word	0x40020440
 8002000:	40020458 	.word	0x40020458
 8002004:	40020470 	.word	0x40020470
 8002008:	40020488 	.word	0x40020488
 800200c:	400204a0 	.word	0x400204a0
 8002010:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 020e 	bic.w	r2, r3, #14
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 020a 	orr.w	r2, r2, #10
 8002026:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	2b00      	cmp	r3, #0
 800202e:	d007      	beq.n	8002040 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0204 	orr.w	r2, r2, #4
 800203e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a83      	ldr	r2, [pc, #524]	; (8002254 <HAL_DMA_Start_IT+0x474>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d072      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a82      	ldr	r2, [pc, #520]	; (8002258 <HAL_DMA_Start_IT+0x478>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d06d      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a80      	ldr	r2, [pc, #512]	; (800225c <HAL_DMA_Start_IT+0x47c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d068      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a7f      	ldr	r2, [pc, #508]	; (8002260 <HAL_DMA_Start_IT+0x480>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d063      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a7d      	ldr	r2, [pc, #500]	; (8002264 <HAL_DMA_Start_IT+0x484>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d05e      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a7c      	ldr	r2, [pc, #496]	; (8002268 <HAL_DMA_Start_IT+0x488>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d059      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a7a      	ldr	r2, [pc, #488]	; (800226c <HAL_DMA_Start_IT+0x48c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d054      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a79      	ldr	r2, [pc, #484]	; (8002270 <HAL_DMA_Start_IT+0x490>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d04f      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a77      	ldr	r2, [pc, #476]	; (8002274 <HAL_DMA_Start_IT+0x494>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d04a      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a76      	ldr	r2, [pc, #472]	; (8002278 <HAL_DMA_Start_IT+0x498>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d045      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a74      	ldr	r2, [pc, #464]	; (800227c <HAL_DMA_Start_IT+0x49c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d040      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a73      	ldr	r2, [pc, #460]	; (8002280 <HAL_DMA_Start_IT+0x4a0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d03b      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a71      	ldr	r2, [pc, #452]	; (8002284 <HAL_DMA_Start_IT+0x4a4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d036      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a70      	ldr	r2, [pc, #448]	; (8002288 <HAL_DMA_Start_IT+0x4a8>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d031      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a6e      	ldr	r2, [pc, #440]	; (800228c <HAL_DMA_Start_IT+0x4ac>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d02c      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a6d      	ldr	r2, [pc, #436]	; (8002290 <HAL_DMA_Start_IT+0x4b0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d027      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a6b      	ldr	r2, [pc, #428]	; (8002294 <HAL_DMA_Start_IT+0x4b4>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d022      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a6a      	ldr	r2, [pc, #424]	; (8002298 <HAL_DMA_Start_IT+0x4b8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d01d      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a68      	ldr	r2, [pc, #416]	; (800229c <HAL_DMA_Start_IT+0x4bc>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d018      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a67      	ldr	r2, [pc, #412]	; (80022a0 <HAL_DMA_Start_IT+0x4c0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d013      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a65      	ldr	r2, [pc, #404]	; (80022a4 <HAL_DMA_Start_IT+0x4c4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00e      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a64      	ldr	r2, [pc, #400]	; (80022a8 <HAL_DMA_Start_IT+0x4c8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d009      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a62      	ldr	r2, [pc, #392]	; (80022ac <HAL_DMA_Start_IT+0x4cc>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d004      	beq.n	8002130 <HAL_DMA_Start_IT+0x350>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a61      	ldr	r2, [pc, #388]	; (80022b0 <HAL_DMA_Start_IT+0x4d0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d101      	bne.n	8002134 <HAL_DMA_Start_IT+0x354>
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <HAL_DMA_Start_IT+0x356>
 8002134:	2300      	movs	r3, #0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d01a      	beq.n	8002170 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d007      	beq.n	8002158 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002156:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800216a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800216e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a37      	ldr	r2, [pc, #220]	; (8002254 <HAL_DMA_Start_IT+0x474>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d04a      	beq.n	8002210 <HAL_DMA_Start_IT+0x430>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a36      	ldr	r2, [pc, #216]	; (8002258 <HAL_DMA_Start_IT+0x478>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d045      	beq.n	8002210 <HAL_DMA_Start_IT+0x430>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a34      	ldr	r2, [pc, #208]	; (800225c <HAL_DMA_Start_IT+0x47c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d040      	beq.n	8002210 <HAL_DMA_Start_IT+0x430>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a33      	ldr	r2, [pc, #204]	; (8002260 <HAL_DMA_Start_IT+0x480>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d03b      	beq.n	8002210 <HAL_DMA_Start_IT+0x430>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a31      	ldr	r2, [pc, #196]	; (8002264 <HAL_DMA_Start_IT+0x484>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d036      	beq.n	8002210 <HAL_DMA_Start_IT+0x430>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a30      	ldr	r2, [pc, #192]	; (8002268 <HAL_DMA_Start_IT+0x488>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d031      	beq.n	8002210 <HAL_DMA_Start_IT+0x430>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a2e      	ldr	r2, [pc, #184]	; (800226c <HAL_DMA_Start_IT+0x48c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d02c      	beq.n	8002210 <HAL_DMA_Start_IT+0x430>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a2d      	ldr	r2, [pc, #180]	; (8002270 <HAL_DMA_Start_IT+0x490>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d027      	beq.n	8002210 <HAL_DMA_Start_IT+0x430>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a2b      	ldr	r2, [pc, #172]	; (8002274 <HAL_DMA_Start_IT+0x494>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d022      	beq.n	8002210 <HAL_DMA_Start_IT+0x430>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a2a      	ldr	r2, [pc, #168]	; (8002278 <HAL_DMA_Start_IT+0x498>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d01d      	beq.n	8002210 <HAL_DMA_Start_IT+0x430>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a28      	ldr	r2, [pc, #160]	; (800227c <HAL_DMA_Start_IT+0x49c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d018      	beq.n	8002210 <HAL_DMA_Start_IT+0x430>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a27      	ldr	r2, [pc, #156]	; (8002280 <HAL_DMA_Start_IT+0x4a0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d013      	beq.n	8002210 <HAL_DMA_Start_IT+0x430>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a25      	ldr	r2, [pc, #148]	; (8002284 <HAL_DMA_Start_IT+0x4a4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00e      	beq.n	8002210 <HAL_DMA_Start_IT+0x430>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a24      	ldr	r2, [pc, #144]	; (8002288 <HAL_DMA_Start_IT+0x4a8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d009      	beq.n	8002210 <HAL_DMA_Start_IT+0x430>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a22      	ldr	r2, [pc, #136]	; (800228c <HAL_DMA_Start_IT+0x4ac>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d004      	beq.n	8002210 <HAL_DMA_Start_IT+0x430>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a21      	ldr	r2, [pc, #132]	; (8002290 <HAL_DMA_Start_IT+0x4b0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d108      	bne.n	8002222 <HAL_DMA_Start_IT+0x442>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e012      	b.n	8002248 <HAL_DMA_Start_IT+0x468>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0201 	orr.w	r2, r2, #1
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	e009      	b.n	8002248 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800223a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002248:	7dfb      	ldrb	r3, [r7, #23]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40020010 	.word	0x40020010
 8002258:	40020028 	.word	0x40020028
 800225c:	40020040 	.word	0x40020040
 8002260:	40020058 	.word	0x40020058
 8002264:	40020070 	.word	0x40020070
 8002268:	40020088 	.word	0x40020088
 800226c:	400200a0 	.word	0x400200a0
 8002270:	400200b8 	.word	0x400200b8
 8002274:	40020410 	.word	0x40020410
 8002278:	40020428 	.word	0x40020428
 800227c:	40020440 	.word	0x40020440
 8002280:	40020458 	.word	0x40020458
 8002284:	40020470 	.word	0x40020470
 8002288:	40020488 	.word	0x40020488
 800228c:	400204a0 	.word	0x400204a0
 8002290:	400204b8 	.word	0x400204b8
 8002294:	58025408 	.word	0x58025408
 8002298:	5802541c 	.word	0x5802541c
 800229c:	58025430 	.word	0x58025430
 80022a0:	58025444 	.word	0x58025444
 80022a4:	58025458 	.word	0x58025458
 80022a8:	5802546c 	.word	0x5802546c
 80022ac:	58025480 	.word	0x58025480
 80022b0:	58025494 	.word	0x58025494

080022b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	; 0x28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022c0:	4b67      	ldr	r3, [pc, #412]	; (8002460 <HAL_DMA_IRQHandler+0x1ac>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a67      	ldr	r2, [pc, #412]	; (8002464 <HAL_DMA_IRQHandler+0x1b0>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	0a9b      	lsrs	r3, r3, #10
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a5f      	ldr	r2, [pc, #380]	; (8002468 <HAL_DMA_IRQHandler+0x1b4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d04a      	beq.n	8002386 <HAL_DMA_IRQHandler+0xd2>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a5d      	ldr	r2, [pc, #372]	; (800246c <HAL_DMA_IRQHandler+0x1b8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d045      	beq.n	8002386 <HAL_DMA_IRQHandler+0xd2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a5c      	ldr	r2, [pc, #368]	; (8002470 <HAL_DMA_IRQHandler+0x1bc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d040      	beq.n	8002386 <HAL_DMA_IRQHandler+0xd2>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a5a      	ldr	r2, [pc, #360]	; (8002474 <HAL_DMA_IRQHandler+0x1c0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d03b      	beq.n	8002386 <HAL_DMA_IRQHandler+0xd2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a59      	ldr	r2, [pc, #356]	; (8002478 <HAL_DMA_IRQHandler+0x1c4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d036      	beq.n	8002386 <HAL_DMA_IRQHandler+0xd2>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a57      	ldr	r2, [pc, #348]	; (800247c <HAL_DMA_IRQHandler+0x1c8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d031      	beq.n	8002386 <HAL_DMA_IRQHandler+0xd2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a56      	ldr	r2, [pc, #344]	; (8002480 <HAL_DMA_IRQHandler+0x1cc>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d02c      	beq.n	8002386 <HAL_DMA_IRQHandler+0xd2>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a54      	ldr	r2, [pc, #336]	; (8002484 <HAL_DMA_IRQHandler+0x1d0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d027      	beq.n	8002386 <HAL_DMA_IRQHandler+0xd2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a53      	ldr	r2, [pc, #332]	; (8002488 <HAL_DMA_IRQHandler+0x1d4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d022      	beq.n	8002386 <HAL_DMA_IRQHandler+0xd2>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a51      	ldr	r2, [pc, #324]	; (800248c <HAL_DMA_IRQHandler+0x1d8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d01d      	beq.n	8002386 <HAL_DMA_IRQHandler+0xd2>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a50      	ldr	r2, [pc, #320]	; (8002490 <HAL_DMA_IRQHandler+0x1dc>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d018      	beq.n	8002386 <HAL_DMA_IRQHandler+0xd2>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a4e      	ldr	r2, [pc, #312]	; (8002494 <HAL_DMA_IRQHandler+0x1e0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d013      	beq.n	8002386 <HAL_DMA_IRQHandler+0xd2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a4d      	ldr	r2, [pc, #308]	; (8002498 <HAL_DMA_IRQHandler+0x1e4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d00e      	beq.n	8002386 <HAL_DMA_IRQHandler+0xd2>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a4b      	ldr	r2, [pc, #300]	; (800249c <HAL_DMA_IRQHandler+0x1e8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d009      	beq.n	8002386 <HAL_DMA_IRQHandler+0xd2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a4a      	ldr	r2, [pc, #296]	; (80024a0 <HAL_DMA_IRQHandler+0x1ec>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d004      	beq.n	8002386 <HAL_DMA_IRQHandler+0xd2>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a48      	ldr	r2, [pc, #288]	; (80024a4 <HAL_DMA_IRQHandler+0x1f0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d101      	bne.n	800238a <HAL_DMA_IRQHandler+0xd6>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_DMA_IRQHandler+0xd8>
 800238a:	2300      	movs	r3, #0
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 842b 	beq.w	8002be8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	2208      	movs	r2, #8
 800239c:	409a      	lsls	r2, r3
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 80a2 	beq.w	80024ec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a2e      	ldr	r2, [pc, #184]	; (8002468 <HAL_DMA_IRQHandler+0x1b4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d04a      	beq.n	8002448 <HAL_DMA_IRQHandler+0x194>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a2d      	ldr	r2, [pc, #180]	; (800246c <HAL_DMA_IRQHandler+0x1b8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d045      	beq.n	8002448 <HAL_DMA_IRQHandler+0x194>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a2b      	ldr	r2, [pc, #172]	; (8002470 <HAL_DMA_IRQHandler+0x1bc>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d040      	beq.n	8002448 <HAL_DMA_IRQHandler+0x194>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a2a      	ldr	r2, [pc, #168]	; (8002474 <HAL_DMA_IRQHandler+0x1c0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d03b      	beq.n	8002448 <HAL_DMA_IRQHandler+0x194>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a28      	ldr	r2, [pc, #160]	; (8002478 <HAL_DMA_IRQHandler+0x1c4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d036      	beq.n	8002448 <HAL_DMA_IRQHandler+0x194>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a27      	ldr	r2, [pc, #156]	; (800247c <HAL_DMA_IRQHandler+0x1c8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d031      	beq.n	8002448 <HAL_DMA_IRQHandler+0x194>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a25      	ldr	r2, [pc, #148]	; (8002480 <HAL_DMA_IRQHandler+0x1cc>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d02c      	beq.n	8002448 <HAL_DMA_IRQHandler+0x194>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a24      	ldr	r2, [pc, #144]	; (8002484 <HAL_DMA_IRQHandler+0x1d0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d027      	beq.n	8002448 <HAL_DMA_IRQHandler+0x194>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a22      	ldr	r2, [pc, #136]	; (8002488 <HAL_DMA_IRQHandler+0x1d4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d022      	beq.n	8002448 <HAL_DMA_IRQHandler+0x194>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a21      	ldr	r2, [pc, #132]	; (800248c <HAL_DMA_IRQHandler+0x1d8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d01d      	beq.n	8002448 <HAL_DMA_IRQHandler+0x194>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a1f      	ldr	r2, [pc, #124]	; (8002490 <HAL_DMA_IRQHandler+0x1dc>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d018      	beq.n	8002448 <HAL_DMA_IRQHandler+0x194>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a1e      	ldr	r2, [pc, #120]	; (8002494 <HAL_DMA_IRQHandler+0x1e0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d013      	beq.n	8002448 <HAL_DMA_IRQHandler+0x194>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1c      	ldr	r2, [pc, #112]	; (8002498 <HAL_DMA_IRQHandler+0x1e4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d00e      	beq.n	8002448 <HAL_DMA_IRQHandler+0x194>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1b      	ldr	r2, [pc, #108]	; (800249c <HAL_DMA_IRQHandler+0x1e8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d009      	beq.n	8002448 <HAL_DMA_IRQHandler+0x194>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a19      	ldr	r2, [pc, #100]	; (80024a0 <HAL_DMA_IRQHandler+0x1ec>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d004      	beq.n	8002448 <HAL_DMA_IRQHandler+0x194>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a18      	ldr	r2, [pc, #96]	; (80024a4 <HAL_DMA_IRQHandler+0x1f0>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d12f      	bne.n	80024a8 <HAL_DMA_IRQHandler+0x1f4>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	bf14      	ite	ne
 8002456:	2301      	movne	r3, #1
 8002458:	2300      	moveq	r3, #0
 800245a:	b2db      	uxtb	r3, r3
 800245c:	e02e      	b.n	80024bc <HAL_DMA_IRQHandler+0x208>
 800245e:	bf00      	nop
 8002460:	24000000 	.word	0x24000000
 8002464:	1b4e81b5 	.word	0x1b4e81b5
 8002468:	40020010 	.word	0x40020010
 800246c:	40020028 	.word	0x40020028
 8002470:	40020040 	.word	0x40020040
 8002474:	40020058 	.word	0x40020058
 8002478:	40020070 	.word	0x40020070
 800247c:	40020088 	.word	0x40020088
 8002480:	400200a0 	.word	0x400200a0
 8002484:	400200b8 	.word	0x400200b8
 8002488:	40020410 	.word	0x40020410
 800248c:	40020428 	.word	0x40020428
 8002490:	40020440 	.word	0x40020440
 8002494:	40020458 	.word	0x40020458
 8002498:	40020470 	.word	0x40020470
 800249c:	40020488 	.word	0x40020488
 80024a0:	400204a0 	.word	0x400204a0
 80024a4:	400204b8 	.word	0x400204b8
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bf14      	ite	ne
 80024b6:	2301      	movne	r3, #1
 80024b8:	2300      	moveq	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d015      	beq.n	80024ec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0204 	bic.w	r2, r2, #4
 80024ce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	2208      	movs	r2, #8
 80024da:	409a      	lsls	r2, r3
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e4:	f043 0201 	orr.w	r2, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	fa22 f303 	lsr.w	r3, r2, r3
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d06e      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a69      	ldr	r2, [pc, #420]	; (80026ac <HAL_DMA_IRQHandler+0x3f8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d04a      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x2ee>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a67      	ldr	r2, [pc, #412]	; (80026b0 <HAL_DMA_IRQHandler+0x3fc>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d045      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x2ee>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a66      	ldr	r2, [pc, #408]	; (80026b4 <HAL_DMA_IRQHandler+0x400>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d040      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x2ee>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a64      	ldr	r2, [pc, #400]	; (80026b8 <HAL_DMA_IRQHandler+0x404>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d03b      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x2ee>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a63      	ldr	r2, [pc, #396]	; (80026bc <HAL_DMA_IRQHandler+0x408>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d036      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x2ee>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a61      	ldr	r2, [pc, #388]	; (80026c0 <HAL_DMA_IRQHandler+0x40c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d031      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x2ee>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a60      	ldr	r2, [pc, #384]	; (80026c4 <HAL_DMA_IRQHandler+0x410>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d02c      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x2ee>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a5e      	ldr	r2, [pc, #376]	; (80026c8 <HAL_DMA_IRQHandler+0x414>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d027      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x2ee>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a5d      	ldr	r2, [pc, #372]	; (80026cc <HAL_DMA_IRQHandler+0x418>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d022      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x2ee>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a5b      	ldr	r2, [pc, #364]	; (80026d0 <HAL_DMA_IRQHandler+0x41c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d01d      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x2ee>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a5a      	ldr	r2, [pc, #360]	; (80026d4 <HAL_DMA_IRQHandler+0x420>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d018      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x2ee>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a58      	ldr	r2, [pc, #352]	; (80026d8 <HAL_DMA_IRQHandler+0x424>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d013      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x2ee>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a57      	ldr	r2, [pc, #348]	; (80026dc <HAL_DMA_IRQHandler+0x428>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d00e      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x2ee>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a55      	ldr	r2, [pc, #340]	; (80026e0 <HAL_DMA_IRQHandler+0x42c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d009      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x2ee>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a54      	ldr	r2, [pc, #336]	; (80026e4 <HAL_DMA_IRQHandler+0x430>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d004      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x2ee>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a52      	ldr	r2, [pc, #328]	; (80026e8 <HAL_DMA_IRQHandler+0x434>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d10a      	bne.n	80025b8 <HAL_DMA_IRQHandler+0x304>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf14      	ite	ne
 80025b0:	2301      	movne	r3, #1
 80025b2:	2300      	moveq	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	e003      	b.n	80025c0 <HAL_DMA_IRQHandler+0x30c>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2300      	movs	r3, #0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00d      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	2201      	movs	r2, #1
 80025ce:	409a      	lsls	r2, r3
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d8:	f043 0202 	orr.w	r2, r3, #2
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	2204      	movs	r2, #4
 80025ea:	409a      	lsls	r2, r3
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 808f 	beq.w	8002714 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a2c      	ldr	r2, [pc, #176]	; (80026ac <HAL_DMA_IRQHandler+0x3f8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d04a      	beq.n	8002696 <HAL_DMA_IRQHandler+0x3e2>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a2a      	ldr	r2, [pc, #168]	; (80026b0 <HAL_DMA_IRQHandler+0x3fc>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d045      	beq.n	8002696 <HAL_DMA_IRQHandler+0x3e2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a29      	ldr	r2, [pc, #164]	; (80026b4 <HAL_DMA_IRQHandler+0x400>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d040      	beq.n	8002696 <HAL_DMA_IRQHandler+0x3e2>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a27      	ldr	r2, [pc, #156]	; (80026b8 <HAL_DMA_IRQHandler+0x404>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d03b      	beq.n	8002696 <HAL_DMA_IRQHandler+0x3e2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a26      	ldr	r2, [pc, #152]	; (80026bc <HAL_DMA_IRQHandler+0x408>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d036      	beq.n	8002696 <HAL_DMA_IRQHandler+0x3e2>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a24      	ldr	r2, [pc, #144]	; (80026c0 <HAL_DMA_IRQHandler+0x40c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d031      	beq.n	8002696 <HAL_DMA_IRQHandler+0x3e2>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a23      	ldr	r2, [pc, #140]	; (80026c4 <HAL_DMA_IRQHandler+0x410>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d02c      	beq.n	8002696 <HAL_DMA_IRQHandler+0x3e2>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a21      	ldr	r2, [pc, #132]	; (80026c8 <HAL_DMA_IRQHandler+0x414>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d027      	beq.n	8002696 <HAL_DMA_IRQHandler+0x3e2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a20      	ldr	r2, [pc, #128]	; (80026cc <HAL_DMA_IRQHandler+0x418>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d022      	beq.n	8002696 <HAL_DMA_IRQHandler+0x3e2>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a1e      	ldr	r2, [pc, #120]	; (80026d0 <HAL_DMA_IRQHandler+0x41c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d01d      	beq.n	8002696 <HAL_DMA_IRQHandler+0x3e2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a1d      	ldr	r2, [pc, #116]	; (80026d4 <HAL_DMA_IRQHandler+0x420>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d018      	beq.n	8002696 <HAL_DMA_IRQHandler+0x3e2>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a1b      	ldr	r2, [pc, #108]	; (80026d8 <HAL_DMA_IRQHandler+0x424>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d013      	beq.n	8002696 <HAL_DMA_IRQHandler+0x3e2>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a1a      	ldr	r2, [pc, #104]	; (80026dc <HAL_DMA_IRQHandler+0x428>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00e      	beq.n	8002696 <HAL_DMA_IRQHandler+0x3e2>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a18      	ldr	r2, [pc, #96]	; (80026e0 <HAL_DMA_IRQHandler+0x42c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d009      	beq.n	8002696 <HAL_DMA_IRQHandler+0x3e2>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a17      	ldr	r2, [pc, #92]	; (80026e4 <HAL_DMA_IRQHandler+0x430>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d004      	beq.n	8002696 <HAL_DMA_IRQHandler+0x3e2>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a15      	ldr	r2, [pc, #84]	; (80026e8 <HAL_DMA_IRQHandler+0x434>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d12a      	bne.n	80026ec <HAL_DMA_IRQHandler+0x438>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bf14      	ite	ne
 80026a4:	2301      	movne	r3, #1
 80026a6:	2300      	moveq	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	e023      	b.n	80026f4 <HAL_DMA_IRQHandler+0x440>
 80026ac:	40020010 	.word	0x40020010
 80026b0:	40020028 	.word	0x40020028
 80026b4:	40020040 	.word	0x40020040
 80026b8:	40020058 	.word	0x40020058
 80026bc:	40020070 	.word	0x40020070
 80026c0:	40020088 	.word	0x40020088
 80026c4:	400200a0 	.word	0x400200a0
 80026c8:	400200b8 	.word	0x400200b8
 80026cc:	40020410 	.word	0x40020410
 80026d0:	40020428 	.word	0x40020428
 80026d4:	40020440 	.word	0x40020440
 80026d8:	40020458 	.word	0x40020458
 80026dc:	40020470 	.word	0x40020470
 80026e0:	40020488 	.word	0x40020488
 80026e4:	400204a0 	.word	0x400204a0
 80026e8:	400204b8 	.word	0x400204b8
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2300      	movs	r3, #0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00d      	beq.n	8002714 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	2204      	movs	r2, #4
 8002702:	409a      	lsls	r2, r3
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270c:	f043 0204 	orr.w	r2, r3, #4
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002718:	f003 031f 	and.w	r3, r3, #31
 800271c:	2210      	movs	r2, #16
 800271e:	409a      	lsls	r2, r3
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80a6 	beq.w	8002876 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a85      	ldr	r2, [pc, #532]	; (8002944 <HAL_DMA_IRQHandler+0x690>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d04a      	beq.n	80027ca <HAL_DMA_IRQHandler+0x516>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a83      	ldr	r2, [pc, #524]	; (8002948 <HAL_DMA_IRQHandler+0x694>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d045      	beq.n	80027ca <HAL_DMA_IRQHandler+0x516>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a82      	ldr	r2, [pc, #520]	; (800294c <HAL_DMA_IRQHandler+0x698>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d040      	beq.n	80027ca <HAL_DMA_IRQHandler+0x516>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a80      	ldr	r2, [pc, #512]	; (8002950 <HAL_DMA_IRQHandler+0x69c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d03b      	beq.n	80027ca <HAL_DMA_IRQHandler+0x516>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a7f      	ldr	r2, [pc, #508]	; (8002954 <HAL_DMA_IRQHandler+0x6a0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d036      	beq.n	80027ca <HAL_DMA_IRQHandler+0x516>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a7d      	ldr	r2, [pc, #500]	; (8002958 <HAL_DMA_IRQHandler+0x6a4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d031      	beq.n	80027ca <HAL_DMA_IRQHandler+0x516>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a7c      	ldr	r2, [pc, #496]	; (800295c <HAL_DMA_IRQHandler+0x6a8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d02c      	beq.n	80027ca <HAL_DMA_IRQHandler+0x516>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a7a      	ldr	r2, [pc, #488]	; (8002960 <HAL_DMA_IRQHandler+0x6ac>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d027      	beq.n	80027ca <HAL_DMA_IRQHandler+0x516>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a79      	ldr	r2, [pc, #484]	; (8002964 <HAL_DMA_IRQHandler+0x6b0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d022      	beq.n	80027ca <HAL_DMA_IRQHandler+0x516>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a77      	ldr	r2, [pc, #476]	; (8002968 <HAL_DMA_IRQHandler+0x6b4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d01d      	beq.n	80027ca <HAL_DMA_IRQHandler+0x516>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a76      	ldr	r2, [pc, #472]	; (800296c <HAL_DMA_IRQHandler+0x6b8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d018      	beq.n	80027ca <HAL_DMA_IRQHandler+0x516>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a74      	ldr	r2, [pc, #464]	; (8002970 <HAL_DMA_IRQHandler+0x6bc>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d013      	beq.n	80027ca <HAL_DMA_IRQHandler+0x516>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a73      	ldr	r2, [pc, #460]	; (8002974 <HAL_DMA_IRQHandler+0x6c0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d00e      	beq.n	80027ca <HAL_DMA_IRQHandler+0x516>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a71      	ldr	r2, [pc, #452]	; (8002978 <HAL_DMA_IRQHandler+0x6c4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d009      	beq.n	80027ca <HAL_DMA_IRQHandler+0x516>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a70      	ldr	r2, [pc, #448]	; (800297c <HAL_DMA_IRQHandler+0x6c8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d004      	beq.n	80027ca <HAL_DMA_IRQHandler+0x516>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a6e      	ldr	r2, [pc, #440]	; (8002980 <HAL_DMA_IRQHandler+0x6cc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d10a      	bne.n	80027e0 <HAL_DMA_IRQHandler+0x52c>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf14      	ite	ne
 80027d8:	2301      	movne	r3, #1
 80027da:	2300      	moveq	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	e009      	b.n	80027f4 <HAL_DMA_IRQHandler+0x540>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	bf14      	ite	ne
 80027ee:	2301      	movne	r3, #1
 80027f0:	2300      	moveq	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d03e      	beq.n	8002876 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	2210      	movs	r2, #16
 8002802:	409a      	lsls	r2, r3
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d018      	beq.n	8002848 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d108      	bne.n	8002836 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	2b00      	cmp	r3, #0
 800282a:	d024      	beq.n	8002876 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	4798      	blx	r3
 8002834:	e01f      	b.n	8002876 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01b      	beq.n	8002876 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	4798      	blx	r3
 8002846:	e016      	b.n	8002876 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002852:	2b00      	cmp	r3, #0
 8002854:	d107      	bne.n	8002866 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0208 	bic.w	r2, r2, #8
 8002864:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	2220      	movs	r2, #32
 8002880:	409a      	lsls	r2, r3
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 8110 	beq.w	8002aac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a2c      	ldr	r2, [pc, #176]	; (8002944 <HAL_DMA_IRQHandler+0x690>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d04a      	beq.n	800292c <HAL_DMA_IRQHandler+0x678>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a2b      	ldr	r2, [pc, #172]	; (8002948 <HAL_DMA_IRQHandler+0x694>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d045      	beq.n	800292c <HAL_DMA_IRQHandler+0x678>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a29      	ldr	r2, [pc, #164]	; (800294c <HAL_DMA_IRQHandler+0x698>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d040      	beq.n	800292c <HAL_DMA_IRQHandler+0x678>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a28      	ldr	r2, [pc, #160]	; (8002950 <HAL_DMA_IRQHandler+0x69c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d03b      	beq.n	800292c <HAL_DMA_IRQHandler+0x678>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a26      	ldr	r2, [pc, #152]	; (8002954 <HAL_DMA_IRQHandler+0x6a0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d036      	beq.n	800292c <HAL_DMA_IRQHandler+0x678>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a25      	ldr	r2, [pc, #148]	; (8002958 <HAL_DMA_IRQHandler+0x6a4>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d031      	beq.n	800292c <HAL_DMA_IRQHandler+0x678>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a23      	ldr	r2, [pc, #140]	; (800295c <HAL_DMA_IRQHandler+0x6a8>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d02c      	beq.n	800292c <HAL_DMA_IRQHandler+0x678>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a22      	ldr	r2, [pc, #136]	; (8002960 <HAL_DMA_IRQHandler+0x6ac>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d027      	beq.n	800292c <HAL_DMA_IRQHandler+0x678>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a20      	ldr	r2, [pc, #128]	; (8002964 <HAL_DMA_IRQHandler+0x6b0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d022      	beq.n	800292c <HAL_DMA_IRQHandler+0x678>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a1f      	ldr	r2, [pc, #124]	; (8002968 <HAL_DMA_IRQHandler+0x6b4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d01d      	beq.n	800292c <HAL_DMA_IRQHandler+0x678>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1d      	ldr	r2, [pc, #116]	; (800296c <HAL_DMA_IRQHandler+0x6b8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d018      	beq.n	800292c <HAL_DMA_IRQHandler+0x678>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a1c      	ldr	r2, [pc, #112]	; (8002970 <HAL_DMA_IRQHandler+0x6bc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d013      	beq.n	800292c <HAL_DMA_IRQHandler+0x678>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a1a      	ldr	r2, [pc, #104]	; (8002974 <HAL_DMA_IRQHandler+0x6c0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00e      	beq.n	800292c <HAL_DMA_IRQHandler+0x678>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a19      	ldr	r2, [pc, #100]	; (8002978 <HAL_DMA_IRQHandler+0x6c4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d009      	beq.n	800292c <HAL_DMA_IRQHandler+0x678>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a17      	ldr	r2, [pc, #92]	; (800297c <HAL_DMA_IRQHandler+0x6c8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d004      	beq.n	800292c <HAL_DMA_IRQHandler+0x678>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a16      	ldr	r2, [pc, #88]	; (8002980 <HAL_DMA_IRQHandler+0x6cc>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d12b      	bne.n	8002984 <HAL_DMA_IRQHandler+0x6d0>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	2b00      	cmp	r3, #0
 8002938:	bf14      	ite	ne
 800293a:	2301      	movne	r3, #1
 800293c:	2300      	moveq	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	e02a      	b.n	8002998 <HAL_DMA_IRQHandler+0x6e4>
 8002942:	bf00      	nop
 8002944:	40020010 	.word	0x40020010
 8002948:	40020028 	.word	0x40020028
 800294c:	40020040 	.word	0x40020040
 8002950:	40020058 	.word	0x40020058
 8002954:	40020070 	.word	0x40020070
 8002958:	40020088 	.word	0x40020088
 800295c:	400200a0 	.word	0x400200a0
 8002960:	400200b8 	.word	0x400200b8
 8002964:	40020410 	.word	0x40020410
 8002968:	40020428 	.word	0x40020428
 800296c:	40020440 	.word	0x40020440
 8002970:	40020458 	.word	0x40020458
 8002974:	40020470 	.word	0x40020470
 8002978:	40020488 	.word	0x40020488
 800297c:	400204a0 	.word	0x400204a0
 8002980:	400204b8 	.word	0x400204b8
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	bf14      	ite	ne
 8002992:	2301      	movne	r3, #1
 8002994:	2300      	moveq	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 8087 	beq.w	8002aac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	2220      	movs	r2, #32
 80029a8:	409a      	lsls	r2, r3
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d139      	bne.n	8002a2e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0216 	bic.w	r2, r2, #22
 80029c8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029d8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d103      	bne.n	80029ea <HAL_DMA_IRQHandler+0x736>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0208 	bic.w	r2, r2, #8
 80029f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	223f      	movs	r2, #63	; 0x3f
 8002a04:	409a      	lsls	r2, r3
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 834a 	beq.w	80030b8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4798      	blx	r3
          }
          return;
 8002a2c:	e344      	b.n	80030b8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d018      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d108      	bne.n	8002a5c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d02c      	beq.n	8002aac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	4798      	blx	r3
 8002a5a:	e027      	b.n	8002aac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d023      	beq.n	8002aac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4798      	blx	r3
 8002a6c:	e01e      	b.n	8002aac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10f      	bne.n	8002a9c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0210 	bic.w	r2, r2, #16
 8002a8a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 8306 	beq.w	80030c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8088 	beq.w	8002bd4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2204      	movs	r2, #4
 8002ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a7a      	ldr	r2, [pc, #488]	; (8002cbc <HAL_DMA_IRQHandler+0xa08>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d04a      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x8b8>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a79      	ldr	r2, [pc, #484]	; (8002cc0 <HAL_DMA_IRQHandler+0xa0c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d045      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x8b8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a77      	ldr	r2, [pc, #476]	; (8002cc4 <HAL_DMA_IRQHandler+0xa10>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d040      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x8b8>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a76      	ldr	r2, [pc, #472]	; (8002cc8 <HAL_DMA_IRQHandler+0xa14>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d03b      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x8b8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a74      	ldr	r2, [pc, #464]	; (8002ccc <HAL_DMA_IRQHandler+0xa18>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d036      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x8b8>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a73      	ldr	r2, [pc, #460]	; (8002cd0 <HAL_DMA_IRQHandler+0xa1c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d031      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x8b8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a71      	ldr	r2, [pc, #452]	; (8002cd4 <HAL_DMA_IRQHandler+0xa20>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d02c      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x8b8>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a70      	ldr	r2, [pc, #448]	; (8002cd8 <HAL_DMA_IRQHandler+0xa24>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d027      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x8b8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a6e      	ldr	r2, [pc, #440]	; (8002cdc <HAL_DMA_IRQHandler+0xa28>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d022      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x8b8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a6d      	ldr	r2, [pc, #436]	; (8002ce0 <HAL_DMA_IRQHandler+0xa2c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d01d      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x8b8>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a6b      	ldr	r2, [pc, #428]	; (8002ce4 <HAL_DMA_IRQHandler+0xa30>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d018      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x8b8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a6a      	ldr	r2, [pc, #424]	; (8002ce8 <HAL_DMA_IRQHandler+0xa34>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d013      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x8b8>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a68      	ldr	r2, [pc, #416]	; (8002cec <HAL_DMA_IRQHandler+0xa38>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00e      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x8b8>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a67      	ldr	r2, [pc, #412]	; (8002cf0 <HAL_DMA_IRQHandler+0xa3c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d009      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x8b8>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a65      	ldr	r2, [pc, #404]	; (8002cf4 <HAL_DMA_IRQHandler+0xa40>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d004      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x8b8>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a64      	ldr	r2, [pc, #400]	; (8002cf8 <HAL_DMA_IRQHandler+0xa44>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d108      	bne.n	8002b7e <HAL_DMA_IRQHandler+0x8ca>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0201 	bic.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	e007      	b.n	8002b8e <HAL_DMA_IRQHandler+0x8da>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0201 	bic.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3301      	adds	r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d307      	bcc.n	8002baa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f2      	bne.n	8002b8e <HAL_DMA_IRQHandler+0x8da>
 8002ba8:	e000      	b.n	8002bac <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002baa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002bc2:	e003      	b.n	8002bcc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 8272 	beq.w	80030c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	4798      	blx	r3
 8002be6:	e26c      	b.n	80030c2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a43      	ldr	r2, [pc, #268]	; (8002cfc <HAL_DMA_IRQHandler+0xa48>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d022      	beq.n	8002c38 <HAL_DMA_IRQHandler+0x984>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a42      	ldr	r2, [pc, #264]	; (8002d00 <HAL_DMA_IRQHandler+0xa4c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d01d      	beq.n	8002c38 <HAL_DMA_IRQHandler+0x984>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a40      	ldr	r2, [pc, #256]	; (8002d04 <HAL_DMA_IRQHandler+0xa50>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d018      	beq.n	8002c38 <HAL_DMA_IRQHandler+0x984>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a3f      	ldr	r2, [pc, #252]	; (8002d08 <HAL_DMA_IRQHandler+0xa54>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d013      	beq.n	8002c38 <HAL_DMA_IRQHandler+0x984>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a3d      	ldr	r2, [pc, #244]	; (8002d0c <HAL_DMA_IRQHandler+0xa58>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00e      	beq.n	8002c38 <HAL_DMA_IRQHandler+0x984>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a3c      	ldr	r2, [pc, #240]	; (8002d10 <HAL_DMA_IRQHandler+0xa5c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d009      	beq.n	8002c38 <HAL_DMA_IRQHandler+0x984>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a3a      	ldr	r2, [pc, #232]	; (8002d14 <HAL_DMA_IRQHandler+0xa60>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d004      	beq.n	8002c38 <HAL_DMA_IRQHandler+0x984>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a39      	ldr	r2, [pc, #228]	; (8002d18 <HAL_DMA_IRQHandler+0xa64>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d101      	bne.n	8002c3c <HAL_DMA_IRQHandler+0x988>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <HAL_DMA_IRQHandler+0x98a>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 823f 	beq.w	80030c2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	2204      	movs	r2, #4
 8002c56:	409a      	lsls	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80cd 	beq.w	8002dfc <HAL_DMA_IRQHandler+0xb48>
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80c7 	beq.w	8002dfc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	2204      	movs	r2, #4
 8002c78:	409a      	lsls	r2, r3
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d049      	beq.n	8002d1c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d109      	bne.n	8002ca6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 8210 	beq.w	80030bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ca4:	e20a      	b.n	80030bc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 8206 	beq.w	80030bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cb8:	e200      	b.n	80030bc <HAL_DMA_IRQHandler+0xe08>
 8002cba:	bf00      	nop
 8002cbc:	40020010 	.word	0x40020010
 8002cc0:	40020028 	.word	0x40020028
 8002cc4:	40020040 	.word	0x40020040
 8002cc8:	40020058 	.word	0x40020058
 8002ccc:	40020070 	.word	0x40020070
 8002cd0:	40020088 	.word	0x40020088
 8002cd4:	400200a0 	.word	0x400200a0
 8002cd8:	400200b8 	.word	0x400200b8
 8002cdc:	40020410 	.word	0x40020410
 8002ce0:	40020428 	.word	0x40020428
 8002ce4:	40020440 	.word	0x40020440
 8002ce8:	40020458 	.word	0x40020458
 8002cec:	40020470 	.word	0x40020470
 8002cf0:	40020488 	.word	0x40020488
 8002cf4:	400204a0 	.word	0x400204a0
 8002cf8:	400204b8 	.word	0x400204b8
 8002cfc:	58025408 	.word	0x58025408
 8002d00:	5802541c 	.word	0x5802541c
 8002d04:	58025430 	.word	0x58025430
 8002d08:	58025444 	.word	0x58025444
 8002d0c:	58025458 	.word	0x58025458
 8002d10:	5802546c 	.word	0x5802546c
 8002d14:	58025480 	.word	0x58025480
 8002d18:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d160      	bne.n	8002de8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a7f      	ldr	r2, [pc, #508]	; (8002f28 <HAL_DMA_IRQHandler+0xc74>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d04a      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xb12>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a7d      	ldr	r2, [pc, #500]	; (8002f2c <HAL_DMA_IRQHandler+0xc78>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d045      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xb12>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7c      	ldr	r2, [pc, #496]	; (8002f30 <HAL_DMA_IRQHandler+0xc7c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d040      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xb12>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a7a      	ldr	r2, [pc, #488]	; (8002f34 <HAL_DMA_IRQHandler+0xc80>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d03b      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xb12>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a79      	ldr	r2, [pc, #484]	; (8002f38 <HAL_DMA_IRQHandler+0xc84>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d036      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xb12>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a77      	ldr	r2, [pc, #476]	; (8002f3c <HAL_DMA_IRQHandler+0xc88>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d031      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xb12>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a76      	ldr	r2, [pc, #472]	; (8002f40 <HAL_DMA_IRQHandler+0xc8c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d02c      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xb12>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a74      	ldr	r2, [pc, #464]	; (8002f44 <HAL_DMA_IRQHandler+0xc90>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d027      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xb12>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a73      	ldr	r2, [pc, #460]	; (8002f48 <HAL_DMA_IRQHandler+0xc94>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d022      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xb12>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a71      	ldr	r2, [pc, #452]	; (8002f4c <HAL_DMA_IRQHandler+0xc98>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01d      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xb12>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a70      	ldr	r2, [pc, #448]	; (8002f50 <HAL_DMA_IRQHandler+0xc9c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d018      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xb12>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a6e      	ldr	r2, [pc, #440]	; (8002f54 <HAL_DMA_IRQHandler+0xca0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xb12>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a6d      	ldr	r2, [pc, #436]	; (8002f58 <HAL_DMA_IRQHandler+0xca4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00e      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xb12>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a6b      	ldr	r2, [pc, #428]	; (8002f5c <HAL_DMA_IRQHandler+0xca8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d009      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xb12>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a6a      	ldr	r2, [pc, #424]	; (8002f60 <HAL_DMA_IRQHandler+0xcac>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xb12>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a68      	ldr	r2, [pc, #416]	; (8002f64 <HAL_DMA_IRQHandler+0xcb0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d108      	bne.n	8002dd8 <HAL_DMA_IRQHandler+0xb24>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0208 	bic.w	r2, r2, #8
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	e007      	b.n	8002de8 <HAL_DMA_IRQHandler+0xb34>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0204 	bic.w	r2, r2, #4
 8002de6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 8165 	beq.w	80030bc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002dfa:	e15f      	b.n	80030bc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	2202      	movs	r2, #2
 8002e06:	409a      	lsls	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80c5 	beq.w	8002f9c <HAL_DMA_IRQHandler+0xce8>
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 80bf 	beq.w	8002f9c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	2202      	movs	r2, #2
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d018      	beq.n	8002e6a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 813a 	beq.w	80030c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e54:	e134      	b.n	80030c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 8130 	beq.w	80030c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e68:	e12a      	b.n	80030c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f040 8089 	bne.w	8002f88 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a2b      	ldr	r2, [pc, #172]	; (8002f28 <HAL_DMA_IRQHandler+0xc74>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d04a      	beq.n	8002f16 <HAL_DMA_IRQHandler+0xc62>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a29      	ldr	r2, [pc, #164]	; (8002f2c <HAL_DMA_IRQHandler+0xc78>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d045      	beq.n	8002f16 <HAL_DMA_IRQHandler+0xc62>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a28      	ldr	r2, [pc, #160]	; (8002f30 <HAL_DMA_IRQHandler+0xc7c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d040      	beq.n	8002f16 <HAL_DMA_IRQHandler+0xc62>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a26      	ldr	r2, [pc, #152]	; (8002f34 <HAL_DMA_IRQHandler+0xc80>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d03b      	beq.n	8002f16 <HAL_DMA_IRQHandler+0xc62>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a25      	ldr	r2, [pc, #148]	; (8002f38 <HAL_DMA_IRQHandler+0xc84>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d036      	beq.n	8002f16 <HAL_DMA_IRQHandler+0xc62>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a23      	ldr	r2, [pc, #140]	; (8002f3c <HAL_DMA_IRQHandler+0xc88>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d031      	beq.n	8002f16 <HAL_DMA_IRQHandler+0xc62>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a22      	ldr	r2, [pc, #136]	; (8002f40 <HAL_DMA_IRQHandler+0xc8c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d02c      	beq.n	8002f16 <HAL_DMA_IRQHandler+0xc62>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a20      	ldr	r2, [pc, #128]	; (8002f44 <HAL_DMA_IRQHandler+0xc90>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d027      	beq.n	8002f16 <HAL_DMA_IRQHandler+0xc62>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1f      	ldr	r2, [pc, #124]	; (8002f48 <HAL_DMA_IRQHandler+0xc94>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d022      	beq.n	8002f16 <HAL_DMA_IRQHandler+0xc62>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1d      	ldr	r2, [pc, #116]	; (8002f4c <HAL_DMA_IRQHandler+0xc98>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d01d      	beq.n	8002f16 <HAL_DMA_IRQHandler+0xc62>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a1c      	ldr	r2, [pc, #112]	; (8002f50 <HAL_DMA_IRQHandler+0xc9c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d018      	beq.n	8002f16 <HAL_DMA_IRQHandler+0xc62>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1a      	ldr	r2, [pc, #104]	; (8002f54 <HAL_DMA_IRQHandler+0xca0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d013      	beq.n	8002f16 <HAL_DMA_IRQHandler+0xc62>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a19      	ldr	r2, [pc, #100]	; (8002f58 <HAL_DMA_IRQHandler+0xca4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d00e      	beq.n	8002f16 <HAL_DMA_IRQHandler+0xc62>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a17      	ldr	r2, [pc, #92]	; (8002f5c <HAL_DMA_IRQHandler+0xca8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d009      	beq.n	8002f16 <HAL_DMA_IRQHandler+0xc62>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a16      	ldr	r2, [pc, #88]	; (8002f60 <HAL_DMA_IRQHandler+0xcac>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d004      	beq.n	8002f16 <HAL_DMA_IRQHandler+0xc62>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a14      	ldr	r2, [pc, #80]	; (8002f64 <HAL_DMA_IRQHandler+0xcb0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d128      	bne.n	8002f68 <HAL_DMA_IRQHandler+0xcb4>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0214 	bic.w	r2, r2, #20
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	e027      	b.n	8002f78 <HAL_DMA_IRQHandler+0xcc4>
 8002f28:	40020010 	.word	0x40020010
 8002f2c:	40020028 	.word	0x40020028
 8002f30:	40020040 	.word	0x40020040
 8002f34:	40020058 	.word	0x40020058
 8002f38:	40020070 	.word	0x40020070
 8002f3c:	40020088 	.word	0x40020088
 8002f40:	400200a0 	.word	0x400200a0
 8002f44:	400200b8 	.word	0x400200b8
 8002f48:	40020410 	.word	0x40020410
 8002f4c:	40020428 	.word	0x40020428
 8002f50:	40020440 	.word	0x40020440
 8002f54:	40020458 	.word	0x40020458
 8002f58:	40020470 	.word	0x40020470
 8002f5c:	40020488 	.word	0x40020488
 8002f60:	400204a0 	.word	0x400204a0
 8002f64:	400204b8 	.word	0x400204b8
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 020a 	bic.w	r2, r2, #10
 8002f76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8097 	beq.w	80030c0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f9a:	e091      	b.n	80030c0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	2208      	movs	r2, #8
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 8088 	beq.w	80030c2 <HAL_DMA_IRQHandler+0xe0e>
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 8082 	beq.w	80030c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a41      	ldr	r2, [pc, #260]	; (80030c8 <HAL_DMA_IRQHandler+0xe14>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d04a      	beq.n	800305e <HAL_DMA_IRQHandler+0xdaa>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a3f      	ldr	r2, [pc, #252]	; (80030cc <HAL_DMA_IRQHandler+0xe18>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d045      	beq.n	800305e <HAL_DMA_IRQHandler+0xdaa>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a3e      	ldr	r2, [pc, #248]	; (80030d0 <HAL_DMA_IRQHandler+0xe1c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d040      	beq.n	800305e <HAL_DMA_IRQHandler+0xdaa>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a3c      	ldr	r2, [pc, #240]	; (80030d4 <HAL_DMA_IRQHandler+0xe20>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d03b      	beq.n	800305e <HAL_DMA_IRQHandler+0xdaa>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a3b      	ldr	r2, [pc, #236]	; (80030d8 <HAL_DMA_IRQHandler+0xe24>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d036      	beq.n	800305e <HAL_DMA_IRQHandler+0xdaa>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a39      	ldr	r2, [pc, #228]	; (80030dc <HAL_DMA_IRQHandler+0xe28>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d031      	beq.n	800305e <HAL_DMA_IRQHandler+0xdaa>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a38      	ldr	r2, [pc, #224]	; (80030e0 <HAL_DMA_IRQHandler+0xe2c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d02c      	beq.n	800305e <HAL_DMA_IRQHandler+0xdaa>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a36      	ldr	r2, [pc, #216]	; (80030e4 <HAL_DMA_IRQHandler+0xe30>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d027      	beq.n	800305e <HAL_DMA_IRQHandler+0xdaa>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a35      	ldr	r2, [pc, #212]	; (80030e8 <HAL_DMA_IRQHandler+0xe34>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d022      	beq.n	800305e <HAL_DMA_IRQHandler+0xdaa>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a33      	ldr	r2, [pc, #204]	; (80030ec <HAL_DMA_IRQHandler+0xe38>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d01d      	beq.n	800305e <HAL_DMA_IRQHandler+0xdaa>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a32      	ldr	r2, [pc, #200]	; (80030f0 <HAL_DMA_IRQHandler+0xe3c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d018      	beq.n	800305e <HAL_DMA_IRQHandler+0xdaa>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a30      	ldr	r2, [pc, #192]	; (80030f4 <HAL_DMA_IRQHandler+0xe40>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d013      	beq.n	800305e <HAL_DMA_IRQHandler+0xdaa>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a2f      	ldr	r2, [pc, #188]	; (80030f8 <HAL_DMA_IRQHandler+0xe44>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d00e      	beq.n	800305e <HAL_DMA_IRQHandler+0xdaa>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a2d      	ldr	r2, [pc, #180]	; (80030fc <HAL_DMA_IRQHandler+0xe48>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d009      	beq.n	800305e <HAL_DMA_IRQHandler+0xdaa>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a2c      	ldr	r2, [pc, #176]	; (8003100 <HAL_DMA_IRQHandler+0xe4c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d004      	beq.n	800305e <HAL_DMA_IRQHandler+0xdaa>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a2a      	ldr	r2, [pc, #168]	; (8003104 <HAL_DMA_IRQHandler+0xe50>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d108      	bne.n	8003070 <HAL_DMA_IRQHandler+0xdbc>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 021c 	bic.w	r2, r2, #28
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	e007      	b.n	8003080 <HAL_DMA_IRQHandler+0xdcc>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 020e 	bic.w	r2, r2, #14
 800307e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	2201      	movs	r2, #1
 800308a:	409a      	lsls	r2, r3
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	4798      	blx	r3
 80030b6:	e004      	b.n	80030c2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80030b8:	bf00      	nop
 80030ba:	e002      	b.n	80030c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030bc:	bf00      	nop
 80030be:	e000      	b.n	80030c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030c0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80030c2:	3728      	adds	r7, #40	; 0x28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40020010 	.word	0x40020010
 80030cc:	40020028 	.word	0x40020028
 80030d0:	40020040 	.word	0x40020040
 80030d4:	40020058 	.word	0x40020058
 80030d8:	40020070 	.word	0x40020070
 80030dc:	40020088 	.word	0x40020088
 80030e0:	400200a0 	.word	0x400200a0
 80030e4:	400200b8 	.word	0x400200b8
 80030e8:	40020410 	.word	0x40020410
 80030ec:	40020428 	.word	0x40020428
 80030f0:	40020440 	.word	0x40020440
 80030f4:	40020458 	.word	0x40020458
 80030f8:	40020470 	.word	0x40020470
 80030fc:	40020488 	.word	0x40020488
 8003100:	400204a0 	.word	0x400204a0
 8003104:	400204b8 	.word	0x400204b8

08003108 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003120:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a7f      	ldr	r2, [pc, #508]	; (8003324 <DMA_SetConfig+0x21c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d072      	beq.n	8003212 <DMA_SetConfig+0x10a>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a7d      	ldr	r2, [pc, #500]	; (8003328 <DMA_SetConfig+0x220>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d06d      	beq.n	8003212 <DMA_SetConfig+0x10a>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a7c      	ldr	r2, [pc, #496]	; (800332c <DMA_SetConfig+0x224>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d068      	beq.n	8003212 <DMA_SetConfig+0x10a>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a7a      	ldr	r2, [pc, #488]	; (8003330 <DMA_SetConfig+0x228>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d063      	beq.n	8003212 <DMA_SetConfig+0x10a>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a79      	ldr	r2, [pc, #484]	; (8003334 <DMA_SetConfig+0x22c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d05e      	beq.n	8003212 <DMA_SetConfig+0x10a>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a77      	ldr	r2, [pc, #476]	; (8003338 <DMA_SetConfig+0x230>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d059      	beq.n	8003212 <DMA_SetConfig+0x10a>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a76      	ldr	r2, [pc, #472]	; (800333c <DMA_SetConfig+0x234>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d054      	beq.n	8003212 <DMA_SetConfig+0x10a>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a74      	ldr	r2, [pc, #464]	; (8003340 <DMA_SetConfig+0x238>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d04f      	beq.n	8003212 <DMA_SetConfig+0x10a>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a73      	ldr	r2, [pc, #460]	; (8003344 <DMA_SetConfig+0x23c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d04a      	beq.n	8003212 <DMA_SetConfig+0x10a>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a71      	ldr	r2, [pc, #452]	; (8003348 <DMA_SetConfig+0x240>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d045      	beq.n	8003212 <DMA_SetConfig+0x10a>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a70      	ldr	r2, [pc, #448]	; (800334c <DMA_SetConfig+0x244>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d040      	beq.n	8003212 <DMA_SetConfig+0x10a>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a6e      	ldr	r2, [pc, #440]	; (8003350 <DMA_SetConfig+0x248>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d03b      	beq.n	8003212 <DMA_SetConfig+0x10a>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a6d      	ldr	r2, [pc, #436]	; (8003354 <DMA_SetConfig+0x24c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d036      	beq.n	8003212 <DMA_SetConfig+0x10a>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a6b      	ldr	r2, [pc, #428]	; (8003358 <DMA_SetConfig+0x250>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d031      	beq.n	8003212 <DMA_SetConfig+0x10a>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a6a      	ldr	r2, [pc, #424]	; (800335c <DMA_SetConfig+0x254>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d02c      	beq.n	8003212 <DMA_SetConfig+0x10a>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a68      	ldr	r2, [pc, #416]	; (8003360 <DMA_SetConfig+0x258>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d027      	beq.n	8003212 <DMA_SetConfig+0x10a>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a67      	ldr	r2, [pc, #412]	; (8003364 <DMA_SetConfig+0x25c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d022      	beq.n	8003212 <DMA_SetConfig+0x10a>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a65      	ldr	r2, [pc, #404]	; (8003368 <DMA_SetConfig+0x260>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d01d      	beq.n	8003212 <DMA_SetConfig+0x10a>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a64      	ldr	r2, [pc, #400]	; (800336c <DMA_SetConfig+0x264>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d018      	beq.n	8003212 <DMA_SetConfig+0x10a>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a62      	ldr	r2, [pc, #392]	; (8003370 <DMA_SetConfig+0x268>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <DMA_SetConfig+0x10a>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a61      	ldr	r2, [pc, #388]	; (8003374 <DMA_SetConfig+0x26c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00e      	beq.n	8003212 <DMA_SetConfig+0x10a>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a5f      	ldr	r2, [pc, #380]	; (8003378 <DMA_SetConfig+0x270>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d009      	beq.n	8003212 <DMA_SetConfig+0x10a>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a5e      	ldr	r2, [pc, #376]	; (800337c <DMA_SetConfig+0x274>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <DMA_SetConfig+0x10a>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a5c      	ldr	r2, [pc, #368]	; (8003380 <DMA_SetConfig+0x278>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d101      	bne.n	8003216 <DMA_SetConfig+0x10e>
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <DMA_SetConfig+0x110>
 8003216:	2300      	movs	r3, #0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00d      	beq.n	8003238 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003224:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800322a:	2b00      	cmp	r3, #0
 800322c:	d004      	beq.n	8003238 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003236:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a39      	ldr	r2, [pc, #228]	; (8003324 <DMA_SetConfig+0x21c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d04a      	beq.n	80032d8 <DMA_SetConfig+0x1d0>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a38      	ldr	r2, [pc, #224]	; (8003328 <DMA_SetConfig+0x220>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d045      	beq.n	80032d8 <DMA_SetConfig+0x1d0>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a36      	ldr	r2, [pc, #216]	; (800332c <DMA_SetConfig+0x224>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d040      	beq.n	80032d8 <DMA_SetConfig+0x1d0>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a35      	ldr	r2, [pc, #212]	; (8003330 <DMA_SetConfig+0x228>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d03b      	beq.n	80032d8 <DMA_SetConfig+0x1d0>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a33      	ldr	r2, [pc, #204]	; (8003334 <DMA_SetConfig+0x22c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d036      	beq.n	80032d8 <DMA_SetConfig+0x1d0>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a32      	ldr	r2, [pc, #200]	; (8003338 <DMA_SetConfig+0x230>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d031      	beq.n	80032d8 <DMA_SetConfig+0x1d0>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a30      	ldr	r2, [pc, #192]	; (800333c <DMA_SetConfig+0x234>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d02c      	beq.n	80032d8 <DMA_SetConfig+0x1d0>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a2f      	ldr	r2, [pc, #188]	; (8003340 <DMA_SetConfig+0x238>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d027      	beq.n	80032d8 <DMA_SetConfig+0x1d0>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a2d      	ldr	r2, [pc, #180]	; (8003344 <DMA_SetConfig+0x23c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d022      	beq.n	80032d8 <DMA_SetConfig+0x1d0>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a2c      	ldr	r2, [pc, #176]	; (8003348 <DMA_SetConfig+0x240>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d01d      	beq.n	80032d8 <DMA_SetConfig+0x1d0>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a2a      	ldr	r2, [pc, #168]	; (800334c <DMA_SetConfig+0x244>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d018      	beq.n	80032d8 <DMA_SetConfig+0x1d0>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a29      	ldr	r2, [pc, #164]	; (8003350 <DMA_SetConfig+0x248>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d013      	beq.n	80032d8 <DMA_SetConfig+0x1d0>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a27      	ldr	r2, [pc, #156]	; (8003354 <DMA_SetConfig+0x24c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00e      	beq.n	80032d8 <DMA_SetConfig+0x1d0>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a26      	ldr	r2, [pc, #152]	; (8003358 <DMA_SetConfig+0x250>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d009      	beq.n	80032d8 <DMA_SetConfig+0x1d0>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a24      	ldr	r2, [pc, #144]	; (800335c <DMA_SetConfig+0x254>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d004      	beq.n	80032d8 <DMA_SetConfig+0x1d0>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a23      	ldr	r2, [pc, #140]	; (8003360 <DMA_SetConfig+0x258>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d101      	bne.n	80032dc <DMA_SetConfig+0x1d4>
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <DMA_SetConfig+0x1d6>
 80032dc:	2300      	movs	r3, #0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d059      	beq.n	8003396 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	223f      	movs	r2, #63	; 0x3f
 80032ec:	409a      	lsls	r2, r3
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003300:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b40      	cmp	r3, #64	; 0x40
 8003310:	d138      	bne.n	8003384 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003322:	e086      	b.n	8003432 <DMA_SetConfig+0x32a>
 8003324:	40020010 	.word	0x40020010
 8003328:	40020028 	.word	0x40020028
 800332c:	40020040 	.word	0x40020040
 8003330:	40020058 	.word	0x40020058
 8003334:	40020070 	.word	0x40020070
 8003338:	40020088 	.word	0x40020088
 800333c:	400200a0 	.word	0x400200a0
 8003340:	400200b8 	.word	0x400200b8
 8003344:	40020410 	.word	0x40020410
 8003348:	40020428 	.word	0x40020428
 800334c:	40020440 	.word	0x40020440
 8003350:	40020458 	.word	0x40020458
 8003354:	40020470 	.word	0x40020470
 8003358:	40020488 	.word	0x40020488
 800335c:	400204a0 	.word	0x400204a0
 8003360:	400204b8 	.word	0x400204b8
 8003364:	58025408 	.word	0x58025408
 8003368:	5802541c 	.word	0x5802541c
 800336c:	58025430 	.word	0x58025430
 8003370:	58025444 	.word	0x58025444
 8003374:	58025458 	.word	0x58025458
 8003378:	5802546c 	.word	0x5802546c
 800337c:	58025480 	.word	0x58025480
 8003380:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	60da      	str	r2, [r3, #12]
}
 8003394:	e04d      	b.n	8003432 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a29      	ldr	r2, [pc, #164]	; (8003440 <DMA_SetConfig+0x338>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d022      	beq.n	80033e6 <DMA_SetConfig+0x2de>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a27      	ldr	r2, [pc, #156]	; (8003444 <DMA_SetConfig+0x33c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01d      	beq.n	80033e6 <DMA_SetConfig+0x2de>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a26      	ldr	r2, [pc, #152]	; (8003448 <DMA_SetConfig+0x340>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d018      	beq.n	80033e6 <DMA_SetConfig+0x2de>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a24      	ldr	r2, [pc, #144]	; (800344c <DMA_SetConfig+0x344>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d013      	beq.n	80033e6 <DMA_SetConfig+0x2de>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a23      	ldr	r2, [pc, #140]	; (8003450 <DMA_SetConfig+0x348>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00e      	beq.n	80033e6 <DMA_SetConfig+0x2de>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a21      	ldr	r2, [pc, #132]	; (8003454 <DMA_SetConfig+0x34c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d009      	beq.n	80033e6 <DMA_SetConfig+0x2de>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a20      	ldr	r2, [pc, #128]	; (8003458 <DMA_SetConfig+0x350>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d004      	beq.n	80033e6 <DMA_SetConfig+0x2de>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1e      	ldr	r2, [pc, #120]	; (800345c <DMA_SetConfig+0x354>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d101      	bne.n	80033ea <DMA_SetConfig+0x2e2>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <DMA_SetConfig+0x2e4>
 80033ea:	2300      	movs	r3, #0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d020      	beq.n	8003432 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	2201      	movs	r2, #1
 80033fa:	409a      	lsls	r2, r3
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b40      	cmp	r3, #64	; 0x40
 800340e:	d108      	bne.n	8003422 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	60da      	str	r2, [r3, #12]
}
 8003420:	e007      	b.n	8003432 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	60da      	str	r2, [r3, #12]
}
 8003432:	bf00      	nop
 8003434:	371c      	adds	r7, #28
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	58025408 	.word	0x58025408
 8003444:	5802541c 	.word	0x5802541c
 8003448:	58025430 	.word	0x58025430
 800344c:	58025444 	.word	0x58025444
 8003450:	58025458 	.word	0x58025458
 8003454:	5802546c 	.word	0x5802546c
 8003458:	58025480 	.word	0x58025480
 800345c:	58025494 	.word	0x58025494

08003460 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a42      	ldr	r2, [pc, #264]	; (8003578 <DMA_CalcBaseAndBitshift+0x118>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d04a      	beq.n	8003508 <DMA_CalcBaseAndBitshift+0xa8>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a41      	ldr	r2, [pc, #260]	; (800357c <DMA_CalcBaseAndBitshift+0x11c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d045      	beq.n	8003508 <DMA_CalcBaseAndBitshift+0xa8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a3f      	ldr	r2, [pc, #252]	; (8003580 <DMA_CalcBaseAndBitshift+0x120>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d040      	beq.n	8003508 <DMA_CalcBaseAndBitshift+0xa8>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a3e      	ldr	r2, [pc, #248]	; (8003584 <DMA_CalcBaseAndBitshift+0x124>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d03b      	beq.n	8003508 <DMA_CalcBaseAndBitshift+0xa8>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a3c      	ldr	r2, [pc, #240]	; (8003588 <DMA_CalcBaseAndBitshift+0x128>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d036      	beq.n	8003508 <DMA_CalcBaseAndBitshift+0xa8>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a3b      	ldr	r2, [pc, #236]	; (800358c <DMA_CalcBaseAndBitshift+0x12c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d031      	beq.n	8003508 <DMA_CalcBaseAndBitshift+0xa8>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a39      	ldr	r2, [pc, #228]	; (8003590 <DMA_CalcBaseAndBitshift+0x130>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d02c      	beq.n	8003508 <DMA_CalcBaseAndBitshift+0xa8>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a38      	ldr	r2, [pc, #224]	; (8003594 <DMA_CalcBaseAndBitshift+0x134>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d027      	beq.n	8003508 <DMA_CalcBaseAndBitshift+0xa8>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a36      	ldr	r2, [pc, #216]	; (8003598 <DMA_CalcBaseAndBitshift+0x138>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d022      	beq.n	8003508 <DMA_CalcBaseAndBitshift+0xa8>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a35      	ldr	r2, [pc, #212]	; (800359c <DMA_CalcBaseAndBitshift+0x13c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d01d      	beq.n	8003508 <DMA_CalcBaseAndBitshift+0xa8>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a33      	ldr	r2, [pc, #204]	; (80035a0 <DMA_CalcBaseAndBitshift+0x140>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d018      	beq.n	8003508 <DMA_CalcBaseAndBitshift+0xa8>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a32      	ldr	r2, [pc, #200]	; (80035a4 <DMA_CalcBaseAndBitshift+0x144>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d013      	beq.n	8003508 <DMA_CalcBaseAndBitshift+0xa8>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a30      	ldr	r2, [pc, #192]	; (80035a8 <DMA_CalcBaseAndBitshift+0x148>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d00e      	beq.n	8003508 <DMA_CalcBaseAndBitshift+0xa8>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a2f      	ldr	r2, [pc, #188]	; (80035ac <DMA_CalcBaseAndBitshift+0x14c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d009      	beq.n	8003508 <DMA_CalcBaseAndBitshift+0xa8>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a2d      	ldr	r2, [pc, #180]	; (80035b0 <DMA_CalcBaseAndBitshift+0x150>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d004      	beq.n	8003508 <DMA_CalcBaseAndBitshift+0xa8>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a2c      	ldr	r2, [pc, #176]	; (80035b4 <DMA_CalcBaseAndBitshift+0x154>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d101      	bne.n	800350c <DMA_CalcBaseAndBitshift+0xac>
 8003508:	2301      	movs	r3, #1
 800350a:	e000      	b.n	800350e <DMA_CalcBaseAndBitshift+0xae>
 800350c:	2300      	movs	r3, #0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d024      	beq.n	800355c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	3b10      	subs	r3, #16
 800351a:	4a27      	ldr	r2, [pc, #156]	; (80035b8 <DMA_CalcBaseAndBitshift+0x158>)
 800351c:	fba2 2303 	umull	r2, r3, r2, r3
 8003520:	091b      	lsrs	r3, r3, #4
 8003522:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	4a24      	ldr	r2, [pc, #144]	; (80035bc <DMA_CalcBaseAndBitshift+0x15c>)
 800352c:	5cd3      	ldrb	r3, [r2, r3]
 800352e:	461a      	mov	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b03      	cmp	r3, #3
 8003538:	d908      	bls.n	800354c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	4b1f      	ldr	r3, [pc, #124]	; (80035c0 <DMA_CalcBaseAndBitshift+0x160>)
 8003542:	4013      	ands	r3, r2
 8003544:	1d1a      	adds	r2, r3, #4
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	659a      	str	r2, [r3, #88]	; 0x58
 800354a:	e00d      	b.n	8003568 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <DMA_CalcBaseAndBitshift+0x160>)
 8003554:	4013      	ands	r3, r2
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6593      	str	r3, [r2, #88]	; 0x58
 800355a:	e005      	b.n	8003568 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	40020010 	.word	0x40020010
 800357c:	40020028 	.word	0x40020028
 8003580:	40020040 	.word	0x40020040
 8003584:	40020058 	.word	0x40020058
 8003588:	40020070 	.word	0x40020070
 800358c:	40020088 	.word	0x40020088
 8003590:	400200a0 	.word	0x400200a0
 8003594:	400200b8 	.word	0x400200b8
 8003598:	40020410 	.word	0x40020410
 800359c:	40020428 	.word	0x40020428
 80035a0:	40020440 	.word	0x40020440
 80035a4:	40020458 	.word	0x40020458
 80035a8:	40020470 	.word	0x40020470
 80035ac:	40020488 	.word	0x40020488
 80035b0:	400204a0 	.word	0x400204a0
 80035b4:	400204b8 	.word	0x400204b8
 80035b8:	aaaaaaab 	.word	0xaaaaaaab
 80035bc:	08009940 	.word	0x08009940
 80035c0:	fffffc00 	.word	0xfffffc00

080035c4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d120      	bne.n	800361a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d858      	bhi.n	8003692 <DMA_CheckFifoParam+0xce>
 80035e0:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <DMA_CheckFifoParam+0x24>)
 80035e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e6:	bf00      	nop
 80035e8:	080035f9 	.word	0x080035f9
 80035ec:	0800360b 	.word	0x0800360b
 80035f0:	080035f9 	.word	0x080035f9
 80035f4:	08003693 	.word	0x08003693
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d048      	beq.n	8003696 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003608:	e045      	b.n	8003696 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003612:	d142      	bne.n	800369a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003618:	e03f      	b.n	800369a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003622:	d123      	bne.n	800366c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	2b03      	cmp	r3, #3
 800362a:	d838      	bhi.n	800369e <DMA_CheckFifoParam+0xda>
 800362c:	a201      	add	r2, pc, #4	; (adr r2, 8003634 <DMA_CheckFifoParam+0x70>)
 800362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003632:	bf00      	nop
 8003634:	08003645 	.word	0x08003645
 8003638:	0800364b 	.word	0x0800364b
 800363c:	08003645 	.word	0x08003645
 8003640:	0800365d 	.word	0x0800365d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
        break;
 8003648:	e030      	b.n	80036ac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d025      	beq.n	80036a2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800365a:	e022      	b.n	80036a2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003664:	d11f      	bne.n	80036a6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800366a:	e01c      	b.n	80036a6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	2b02      	cmp	r3, #2
 8003672:	d902      	bls.n	800367a <DMA_CheckFifoParam+0xb6>
 8003674:	2b03      	cmp	r3, #3
 8003676:	d003      	beq.n	8003680 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003678:	e018      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
        break;
 800367e:	e015      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00e      	beq.n	80036aa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
    break;
 8003690:	e00b      	b.n	80036aa <DMA_CheckFifoParam+0xe6>
        break;
 8003692:	bf00      	nop
 8003694:	e00a      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
        break;
 8003696:	bf00      	nop
 8003698:	e008      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
        break;
 800369a:	bf00      	nop
 800369c:	e006      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
        break;
 800369e:	bf00      	nop
 80036a0:	e004      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
        break;
 80036a2:	bf00      	nop
 80036a4:	e002      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
        break;
 80036a6:	bf00      	nop
 80036a8:	e000      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
    break;
 80036aa:	bf00      	nop
    }
  }

  return status;
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop

080036bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a38      	ldr	r2, [pc, #224]	; (80037b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d022      	beq.n	800371a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a36      	ldr	r2, [pc, #216]	; (80037b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d01d      	beq.n	800371a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a35      	ldr	r2, [pc, #212]	; (80037b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d018      	beq.n	800371a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a33      	ldr	r2, [pc, #204]	; (80037bc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d013      	beq.n	800371a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a32      	ldr	r2, [pc, #200]	; (80037c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d00e      	beq.n	800371a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a30      	ldr	r2, [pc, #192]	; (80037c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d009      	beq.n	800371a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a2f      	ldr	r2, [pc, #188]	; (80037c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d004      	beq.n	800371a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a2d      	ldr	r2, [pc, #180]	; (80037cc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d101      	bne.n	800371e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800371e:	2300      	movs	r3, #0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01a      	beq.n	800375a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	3b08      	subs	r3, #8
 800372c:	4a28      	ldr	r2, [pc, #160]	; (80037d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800372e:	fba2 2303 	umull	r2, r3, r2, r3
 8003732:	091b      	lsrs	r3, r3, #4
 8003734:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4b26      	ldr	r3, [pc, #152]	; (80037d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	461a      	mov	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a24      	ldr	r2, [pc, #144]	; (80037d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003748:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	2201      	movs	r2, #1
 8003752:	409a      	lsls	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003758:	e024      	b.n	80037a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	b2db      	uxtb	r3, r3
 8003760:	3b10      	subs	r3, #16
 8003762:	4a1e      	ldr	r2, [pc, #120]	; (80037dc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003764:	fba2 2303 	umull	r2, r3, r2, r3
 8003768:	091b      	lsrs	r3, r3, #4
 800376a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4a1c      	ldr	r2, [pc, #112]	; (80037e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d806      	bhi.n	8003782 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4a1b      	ldr	r2, [pc, #108]	; (80037e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d902      	bls.n	8003782 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	3308      	adds	r3, #8
 8003780:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4b18      	ldr	r3, [pc, #96]	; (80037e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	461a      	mov	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a16      	ldr	r2, [pc, #88]	; (80037ec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003794:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	2201      	movs	r2, #1
 800379e:	409a      	lsls	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80037a4:	bf00      	nop
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	58025408 	.word	0x58025408
 80037b4:	5802541c 	.word	0x5802541c
 80037b8:	58025430 	.word	0x58025430
 80037bc:	58025444 	.word	0x58025444
 80037c0:	58025458 	.word	0x58025458
 80037c4:	5802546c 	.word	0x5802546c
 80037c8:	58025480 	.word	0x58025480
 80037cc:	58025494 	.word	0x58025494
 80037d0:	cccccccd 	.word	0xcccccccd
 80037d4:	16009600 	.word	0x16009600
 80037d8:	58025880 	.word	0x58025880
 80037dc:	aaaaaaab 	.word	0xaaaaaaab
 80037e0:	400204b8 	.word	0x400204b8
 80037e4:	4002040f 	.word	0x4002040f
 80037e8:	10008200 	.word	0x10008200
 80037ec:	40020880 	.word	0x40020880

080037f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d04a      	beq.n	800389c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d847      	bhi.n	800389c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a25      	ldr	r2, [pc, #148]	; (80038a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d022      	beq.n	800385c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a24      	ldr	r2, [pc, #144]	; (80038ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d01d      	beq.n	800385c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a22      	ldr	r2, [pc, #136]	; (80038b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d018      	beq.n	800385c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a21      	ldr	r2, [pc, #132]	; (80038b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d013      	beq.n	800385c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a1f      	ldr	r2, [pc, #124]	; (80038b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00e      	beq.n	800385c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1e      	ldr	r2, [pc, #120]	; (80038bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d009      	beq.n	800385c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1c      	ldr	r2, [pc, #112]	; (80038c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d004      	beq.n	800385c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1b      	ldr	r2, [pc, #108]	; (80038c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d101      	bne.n	8003860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003860:	2300      	movs	r3, #0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4b17      	ldr	r3, [pc, #92]	; (80038c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	461a      	mov	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a15      	ldr	r2, [pc, #84]	; (80038cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003878:	671a      	str	r2, [r3, #112]	; 0x70
 800387a:	e009      	b.n	8003890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	461a      	mov	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a11      	ldr	r2, [pc, #68]	; (80038d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800388e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	3b01      	subs	r3, #1
 8003894:	2201      	movs	r2, #1
 8003896:	409a      	lsls	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800389c:	bf00      	nop
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	58025408 	.word	0x58025408
 80038ac:	5802541c 	.word	0x5802541c
 80038b0:	58025430 	.word	0x58025430
 80038b4:	58025444 	.word	0x58025444
 80038b8:	58025458 	.word	0x58025458
 80038bc:	5802546c 	.word	0x5802546c
 80038c0:	58025480 	.word	0x58025480
 80038c4:	58025494 	.word	0x58025494
 80038c8:	1600963f 	.word	0x1600963f
 80038cc:	58025940 	.word	0x58025940
 80038d0:	1000823f 	.word	0x1000823f
 80038d4:	40020940 	.word	0x40020940

080038d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038d8:	b480      	push	{r7}
 80038da:	b089      	sub	sp, #36	; 0x24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80038e6:	4b89      	ldr	r3, [pc, #548]	; (8003b0c <HAL_GPIO_Init+0x234>)
 80038e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038ea:	e194      	b.n	8003c16 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	2101      	movs	r1, #1
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	fa01 f303 	lsl.w	r3, r1, r3
 80038f8:	4013      	ands	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 8186 	beq.w	8003c10 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 0303 	and.w	r3, r3, #3
 800390c:	2b01      	cmp	r3, #1
 800390e:	d005      	beq.n	800391c <HAL_GPIO_Init+0x44>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d130      	bne.n	800397e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	2203      	movs	r2, #3
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003952:	2201      	movs	r2, #1
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43db      	mvns	r3, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4013      	ands	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	f003 0201 	and.w	r2, r3, #1
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	2b03      	cmp	r3, #3
 8003988:	d017      	beq.n	80039ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	2203      	movs	r2, #3
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43db      	mvns	r3, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d123      	bne.n	8003a0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	08da      	lsrs	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3208      	adds	r2, #8
 80039ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	220f      	movs	r2, #15
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4013      	ands	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	691a      	ldr	r2, [r3, #16]
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	08da      	lsrs	r2, r3, #3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3208      	adds	r2, #8
 8003a08:	69b9      	ldr	r1, [r7, #24]
 8003a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	2203      	movs	r2, #3
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4013      	ands	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f003 0203 	and.w	r2, r3, #3
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 80e0 	beq.w	8003c10 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a50:	4b2f      	ldr	r3, [pc, #188]	; (8003b10 <HAL_GPIO_Init+0x238>)
 8003a52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a56:	4a2e      	ldr	r2, [pc, #184]	; (8003b10 <HAL_GPIO_Init+0x238>)
 8003a58:	f043 0302 	orr.w	r3, r3, #2
 8003a5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a60:	4b2b      	ldr	r3, [pc, #172]	; (8003b10 <HAL_GPIO_Init+0x238>)
 8003a62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a6e:	4a29      	ldr	r2, [pc, #164]	; (8003b14 <HAL_GPIO_Init+0x23c>)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	089b      	lsrs	r3, r3, #2
 8003a74:	3302      	adds	r3, #2
 8003a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	220f      	movs	r2, #15
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a20      	ldr	r2, [pc, #128]	; (8003b18 <HAL_GPIO_Init+0x240>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d052      	beq.n	8003b40 <HAL_GPIO_Init+0x268>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a1f      	ldr	r2, [pc, #124]	; (8003b1c <HAL_GPIO_Init+0x244>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d031      	beq.n	8003b06 <HAL_GPIO_Init+0x22e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a1e      	ldr	r2, [pc, #120]	; (8003b20 <HAL_GPIO_Init+0x248>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d02b      	beq.n	8003b02 <HAL_GPIO_Init+0x22a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a1d      	ldr	r2, [pc, #116]	; (8003b24 <HAL_GPIO_Init+0x24c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d025      	beq.n	8003afe <HAL_GPIO_Init+0x226>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a1c      	ldr	r2, [pc, #112]	; (8003b28 <HAL_GPIO_Init+0x250>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d01f      	beq.n	8003afa <HAL_GPIO_Init+0x222>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a1b      	ldr	r2, [pc, #108]	; (8003b2c <HAL_GPIO_Init+0x254>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d019      	beq.n	8003af6 <HAL_GPIO_Init+0x21e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a1a      	ldr	r2, [pc, #104]	; (8003b30 <HAL_GPIO_Init+0x258>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d013      	beq.n	8003af2 <HAL_GPIO_Init+0x21a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a19      	ldr	r2, [pc, #100]	; (8003b34 <HAL_GPIO_Init+0x25c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00d      	beq.n	8003aee <HAL_GPIO_Init+0x216>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <HAL_GPIO_Init+0x260>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <HAL_GPIO_Init+0x212>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a17      	ldr	r2, [pc, #92]	; (8003b3c <HAL_GPIO_Init+0x264>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d101      	bne.n	8003ae6 <HAL_GPIO_Init+0x20e>
 8003ae2:	2309      	movs	r3, #9
 8003ae4:	e02d      	b.n	8003b42 <HAL_GPIO_Init+0x26a>
 8003ae6:	230a      	movs	r3, #10
 8003ae8:	e02b      	b.n	8003b42 <HAL_GPIO_Init+0x26a>
 8003aea:	2308      	movs	r3, #8
 8003aec:	e029      	b.n	8003b42 <HAL_GPIO_Init+0x26a>
 8003aee:	2307      	movs	r3, #7
 8003af0:	e027      	b.n	8003b42 <HAL_GPIO_Init+0x26a>
 8003af2:	2306      	movs	r3, #6
 8003af4:	e025      	b.n	8003b42 <HAL_GPIO_Init+0x26a>
 8003af6:	2305      	movs	r3, #5
 8003af8:	e023      	b.n	8003b42 <HAL_GPIO_Init+0x26a>
 8003afa:	2304      	movs	r3, #4
 8003afc:	e021      	b.n	8003b42 <HAL_GPIO_Init+0x26a>
 8003afe:	2303      	movs	r3, #3
 8003b00:	e01f      	b.n	8003b42 <HAL_GPIO_Init+0x26a>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e01d      	b.n	8003b42 <HAL_GPIO_Init+0x26a>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e01b      	b.n	8003b42 <HAL_GPIO_Init+0x26a>
 8003b0a:	bf00      	nop
 8003b0c:	58000080 	.word	0x58000080
 8003b10:	58024400 	.word	0x58024400
 8003b14:	58000400 	.word	0x58000400
 8003b18:	58020000 	.word	0x58020000
 8003b1c:	58020400 	.word	0x58020400
 8003b20:	58020800 	.word	0x58020800
 8003b24:	58020c00 	.word	0x58020c00
 8003b28:	58021000 	.word	0x58021000
 8003b2c:	58021400 	.word	0x58021400
 8003b30:	58021800 	.word	0x58021800
 8003b34:	58021c00 	.word	0x58021c00
 8003b38:	58022000 	.word	0x58022000
 8003b3c:	58022400 	.word	0x58022400
 8003b40:	2300      	movs	r3, #0
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	f002 0203 	and.w	r2, r2, #3
 8003b48:	0092      	lsls	r2, r2, #2
 8003b4a:	4093      	lsls	r3, r2
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b52:	4938      	ldr	r1, [pc, #224]	; (8003c34 <HAL_GPIO_Init+0x35c>)
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	089b      	lsrs	r3, r3, #2
 8003b58:	3302      	adds	r3, #2
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	3301      	adds	r3, #1
 8003c14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f47f ae63 	bne.w	80038ec <HAL_GPIO_Init+0x14>
  }
}
 8003c26:	bf00      	nop
 8003c28:	bf00      	nop
 8003c2a:	3724      	adds	r7, #36	; 0x24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	58000400 	.word	0x58000400

08003c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	807b      	strh	r3, [r7, #2]
 8003c44:	4613      	mov	r3, r2
 8003c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c48:	787b      	ldrb	r3, [r7, #1]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c4e:	887a      	ldrh	r2, [r7, #2]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003c54:	e003      	b.n	8003c5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c56:	887b      	ldrh	r3, [r7, #2]
 8003c58:	041a      	lsls	r2, r3, #16
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	619a      	str	r2, [r3, #24]
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
	...

08003c6c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003c74:	4a08      	ldr	r2, [pc, #32]	; (8003c98 <HAL_HSEM_FastTake+0x2c>)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3320      	adds	r3, #32
 8003c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c7e:	4a07      	ldr	r2, [pc, #28]	; (8003c9c <HAL_HSEM_FastTake+0x30>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d101      	bne.n	8003c88 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	e000      	b.n	8003c8a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	58026400 	.word	0x58026400
 8003c9c:	80000300 	.word	0x80000300

08003ca0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003caa:	4906      	ldr	r1, [pc, #24]	; (8003cc4 <HAL_HSEM_Release+0x24>)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	58026400 	.word	0x58026400

08003cc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e0fe      	b.n	8003ed8 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fd fa54 	bl	800119c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f005 fb47 	bl	8009394 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	7c1a      	ldrb	r2, [r3, #16]
 8003d0e:	f88d 2000 	strb.w	r2, [sp]
 8003d12:	3304      	adds	r3, #4
 8003d14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d16:	f005 facb 	bl	80092b0 <USB_CoreInit>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0d5      	b.n	8003ed8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2100      	movs	r1, #0
 8003d32:	4618      	mov	r0, r3
 8003d34:	f005 fb3f 	bl	80093b6 <USB_SetCurrentMode>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d005      	beq.n	8003d4a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2202      	movs	r2, #2
 8003d42:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e0c6      	b.n	8003ed8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	73fb      	strb	r3, [r7, #15]
 8003d4e:	e04a      	b.n	8003de6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d50:	7bfa      	ldrb	r2, [r7, #15]
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	3315      	adds	r3, #21
 8003d60:	2201      	movs	r2, #1
 8003d62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d64:	7bfa      	ldrb	r2, [r7, #15]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	3314      	adds	r3, #20
 8003d74:	7bfa      	ldrb	r2, [r7, #15]
 8003d76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d78:	7bfa      	ldrb	r2, [r7, #15]
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
 8003d7c:	b298      	uxth	r0, r3
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	332e      	adds	r3, #46	; 0x2e
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d90:	7bfa      	ldrb	r2, [r7, #15]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	3318      	adds	r3, #24
 8003da0:	2200      	movs	r2, #0
 8003da2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003da4:	7bfa      	ldrb	r2, [r7, #15]
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	331c      	adds	r3, #28
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003db8:	7bfa      	ldrb	r2, [r7, #15]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	3320      	adds	r3, #32
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003dcc:	7bfa      	ldrb	r2, [r7, #15]
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	3324      	adds	r3, #36	; 0x24
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
 8003de2:	3301      	adds	r3, #1
 8003de4:	73fb      	strb	r3, [r7, #15]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	791b      	ldrb	r3, [r3, #4]
 8003dea:	7bfa      	ldrb	r2, [r7, #15]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d3af      	bcc.n	8003d50 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003df0:	2300      	movs	r3, #0
 8003df2:	73fb      	strb	r3, [r7, #15]
 8003df4:	e044      	b.n	8003e80 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003df6:	7bfa      	ldrb	r2, [r7, #15]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e0c:	7bfa      	ldrb	r2, [r7, #15]
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003e1e:	7bfa      	ldrb	r2, [r7, #15]
 8003e20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e22:	7bfa      	ldrb	r2, [r7, #15]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e38:	7bfa      	ldrb	r2, [r7, #15]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e4e:	7bfa      	ldrb	r2, [r7, #15]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e64:	7bfa      	ldrb	r2, [r7, #15]
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	791b      	ldrb	r3, [r3, #4]
 8003e84:	7bfa      	ldrb	r2, [r7, #15]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d3b5      	bcc.n	8003df6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	7c1a      	ldrb	r2, [r3, #16]
 8003e92:	f88d 2000 	strb.w	r2, [sp]
 8003e96:	3304      	adds	r3, #4
 8003e98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e9a:	f005 fad9 	bl	8009450 <USB_DevInit>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e013      	b.n	8003ed8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	7b1b      	ldrb	r3, [r3, #12]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d102      	bne.n	8003ecc <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f80a 	bl	8003ee0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f005 fc94 	bl	80097fe <USB_DevDisconnect>

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_PCDEx_ActivateLPM+0x44>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	10000003 	.word	0x10000003

08003f28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003f30:	4b29      	ldr	r3, [pc, #164]	; (8003fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	2b06      	cmp	r3, #6
 8003f3a:	d00a      	beq.n	8003f52 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003f3c:	4b26      	ldr	r3, [pc, #152]	; (8003fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d001      	beq.n	8003f4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e040      	b.n	8003fd0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	e03e      	b.n	8003fd0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003f52:	4b21      	ldr	r3, [pc, #132]	; (8003fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003f5a:	491f      	ldr	r1, [pc, #124]	; (8003fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003f62:	f7fd fa95 	bl	8001490 <HAL_GetTick>
 8003f66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f68:	e009      	b.n	8003f7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f6a:	f7fd fa91 	bl	8001490 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f78:	d901      	bls.n	8003f7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e028      	b.n	8003fd0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f7e:	4b16      	ldr	r3, [pc, #88]	; (8003fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f8a:	d1ee      	bne.n	8003f6a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b1e      	cmp	r3, #30
 8003f90:	d008      	beq.n	8003fa4 <HAL_PWREx_ConfigSupply+0x7c>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b2e      	cmp	r3, #46	; 0x2e
 8003f96:	d005      	beq.n	8003fa4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b1d      	cmp	r3, #29
 8003f9c:	d002      	beq.n	8003fa4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b2d      	cmp	r3, #45	; 0x2d
 8003fa2:	d114      	bne.n	8003fce <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003fa4:	f7fd fa74 	bl	8001490 <HAL_GetTick>
 8003fa8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003faa:	e009      	b.n	8003fc0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003fac:	f7fd fa70 	bl	8001490 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fba:	d901      	bls.n	8003fc0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e007      	b.n	8003fd0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003fc0:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fcc:	d1ee      	bne.n	8003fac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	58024800 	.word	0x58024800

08003fdc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4a04      	ldr	r2, [pc, #16]	; (8003ff8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fea:	60d3      	str	r3, [r2, #12]
}
 8003fec:	bf00      	nop
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	58024800 	.word	0x58024800

08003ffc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08c      	sub	sp, #48	; 0x30
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d102      	bne.n	8004010 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f000 bc48 	b.w	80048a0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8088 	beq.w	800412e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800401e:	4b99      	ldr	r3, [pc, #612]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004026:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004028:	4b96      	ldr	r3, [pc, #600]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 800402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800402e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004030:	2b10      	cmp	r3, #16
 8004032:	d007      	beq.n	8004044 <HAL_RCC_OscConfig+0x48>
 8004034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004036:	2b18      	cmp	r3, #24
 8004038:	d111      	bne.n	800405e <HAL_RCC_OscConfig+0x62>
 800403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d10c      	bne.n	800405e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004044:	4b8f      	ldr	r3, [pc, #572]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d06d      	beq.n	800412c <HAL_RCC_OscConfig+0x130>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d169      	bne.n	800412c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	f000 bc21 	b.w	80048a0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004066:	d106      	bne.n	8004076 <HAL_RCC_OscConfig+0x7a>
 8004068:	4b86      	ldr	r3, [pc, #536]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a85      	ldr	r2, [pc, #532]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 800406e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	e02e      	b.n	80040d4 <HAL_RCC_OscConfig+0xd8>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0x9c>
 800407e:	4b81      	ldr	r3, [pc, #516]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a80      	ldr	r2, [pc, #512]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 8004084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	4b7e      	ldr	r3, [pc, #504]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a7d      	ldr	r2, [pc, #500]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 8004090:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	e01d      	b.n	80040d4 <HAL_RCC_OscConfig+0xd8>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040a0:	d10c      	bne.n	80040bc <HAL_RCC_OscConfig+0xc0>
 80040a2:	4b78      	ldr	r3, [pc, #480]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a77      	ldr	r2, [pc, #476]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 80040a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	4b75      	ldr	r3, [pc, #468]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a74      	ldr	r2, [pc, #464]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 80040b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	e00b      	b.n	80040d4 <HAL_RCC_OscConfig+0xd8>
 80040bc:	4b71      	ldr	r3, [pc, #452]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a70      	ldr	r2, [pc, #448]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 80040c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	4b6e      	ldr	r3, [pc, #440]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a6d      	ldr	r2, [pc, #436]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 80040ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d013      	beq.n	8004104 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fd f9d8 	bl	8001490 <HAL_GetTick>
 80040e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e4:	f7fd f9d4 	bl	8001490 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b64      	cmp	r3, #100	; 0x64
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e3d4      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040f6:	4b63      	ldr	r3, [pc, #396]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f0      	beq.n	80040e4 <HAL_RCC_OscConfig+0xe8>
 8004102:	e014      	b.n	800412e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fd f9c4 	bl	8001490 <HAL_GetTick>
 8004108:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800410c:	f7fd f9c0 	bl	8001490 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b64      	cmp	r3, #100	; 0x64
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e3c0      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800411e:	4b59      	ldr	r3, [pc, #356]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x110>
 800412a:	e000      	b.n	800412e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800412c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 80ca 	beq.w	80042d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800413c:	4b51      	ldr	r3, [pc, #324]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004144:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004146:	4b4f      	ldr	r3, [pc, #316]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d007      	beq.n	8004162 <HAL_RCC_OscConfig+0x166>
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	2b18      	cmp	r3, #24
 8004156:	d156      	bne.n	8004206 <HAL_RCC_OscConfig+0x20a>
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d151      	bne.n	8004206 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004162:	4b48      	ldr	r3, [pc, #288]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_RCC_OscConfig+0x17e>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e392      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800417a:	4b42      	ldr	r3, [pc, #264]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f023 0219 	bic.w	r2, r3, #25
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	493f      	ldr	r1, [pc, #252]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 8004188:	4313      	orrs	r3, r2
 800418a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fd f980 	bl	8001490 <HAL_GetTick>
 8004190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004194:	f7fd f97c 	bl	8001490 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e37c      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041a6:	4b37      	ldr	r3, [pc, #220]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b2:	f7fd f99d 	bl	80014f0 <HAL_GetREVID>
 80041b6:	4603      	mov	r3, r0
 80041b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80041bc:	4293      	cmp	r3, r2
 80041be:	d817      	bhi.n	80041f0 <HAL_RCC_OscConfig+0x1f4>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	2b40      	cmp	r3, #64	; 0x40
 80041c6:	d108      	bne.n	80041da <HAL_RCC_OscConfig+0x1de>
 80041c8:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80041d0:	4a2c      	ldr	r2, [pc, #176]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 80041d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041d8:	e07a      	b.n	80042d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041da:	4b2a      	ldr	r3, [pc, #168]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	031b      	lsls	r3, r3, #12
 80041e8:	4926      	ldr	r1, [pc, #152]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041ee:	e06f      	b.n	80042d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f0:	4b24      	ldr	r3, [pc, #144]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	061b      	lsls	r3, r3, #24
 80041fe:	4921      	ldr	r1, [pc, #132]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 8004200:	4313      	orrs	r3, r2
 8004202:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004204:	e064      	b.n	80042d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d047      	beq.n	800429e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800420e:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 0219 	bic.w	r2, r3, #25
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	491a      	ldr	r1, [pc, #104]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 800421c:	4313      	orrs	r3, r2
 800421e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fd f936 	bl	8001490 <HAL_GetTick>
 8004224:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004228:	f7fd f932 	bl	8001490 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e332      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800423a:	4b12      	ldr	r3, [pc, #72]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004246:	f7fd f953 	bl	80014f0 <HAL_GetREVID>
 800424a:	4603      	mov	r3, r0
 800424c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004250:	4293      	cmp	r3, r2
 8004252:	d819      	bhi.n	8004288 <HAL_RCC_OscConfig+0x28c>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	2b40      	cmp	r3, #64	; 0x40
 800425a:	d108      	bne.n	800426e <HAL_RCC_OscConfig+0x272>
 800425c:	4b09      	ldr	r3, [pc, #36]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004264:	4a07      	ldr	r2, [pc, #28]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 8004266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800426a:	6053      	str	r3, [r2, #4]
 800426c:	e030      	b.n	80042d0 <HAL_RCC_OscConfig+0x2d4>
 800426e:	4b05      	ldr	r3, [pc, #20]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	031b      	lsls	r3, r3, #12
 800427c:	4901      	ldr	r1, [pc, #4]	; (8004284 <HAL_RCC_OscConfig+0x288>)
 800427e:	4313      	orrs	r3, r2
 8004280:	604b      	str	r3, [r1, #4]
 8004282:	e025      	b.n	80042d0 <HAL_RCC_OscConfig+0x2d4>
 8004284:	58024400 	.word	0x58024400
 8004288:	4b9a      	ldr	r3, [pc, #616]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	061b      	lsls	r3, r3, #24
 8004296:	4997      	ldr	r1, [pc, #604]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 8004298:	4313      	orrs	r3, r2
 800429a:	604b      	str	r3, [r1, #4]
 800429c:	e018      	b.n	80042d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800429e:	4b95      	ldr	r3, [pc, #596]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a94      	ldr	r2, [pc, #592]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042aa:	f7fd f8f1 	bl	8001490 <HAL_GetTick>
 80042ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b2:	f7fd f8ed 	bl	8001490 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e2ed      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042c4:	4b8b      	ldr	r3, [pc, #556]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1f0      	bne.n	80042b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80a9 	beq.w	8004430 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042de:	4b85      	ldr	r3, [pc, #532]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042e8:	4b82      	ldr	r3, [pc, #520]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d007      	beq.n	8004304 <HAL_RCC_OscConfig+0x308>
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	2b18      	cmp	r3, #24
 80042f8:	d13a      	bne.n	8004370 <HAL_RCC_OscConfig+0x374>
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	2b01      	cmp	r3, #1
 8004302:	d135      	bne.n	8004370 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004304:	4b7b      	ldr	r3, [pc, #492]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_RCC_OscConfig+0x320>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	2b80      	cmp	r3, #128	; 0x80
 8004316:	d001      	beq.n	800431c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e2c1      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800431c:	f7fd f8e8 	bl	80014f0 <HAL_GetREVID>
 8004320:	4603      	mov	r3, r0
 8004322:	f241 0203 	movw	r2, #4099	; 0x1003
 8004326:	4293      	cmp	r3, r2
 8004328:	d817      	bhi.n	800435a <HAL_RCC_OscConfig+0x35e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	2b20      	cmp	r3, #32
 8004330:	d108      	bne.n	8004344 <HAL_RCC_OscConfig+0x348>
 8004332:	4b70      	ldr	r3, [pc, #448]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800433a:	4a6e      	ldr	r2, [pc, #440]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 800433c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004340:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004342:	e075      	b.n	8004430 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004344:	4b6b      	ldr	r3, [pc, #428]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	069b      	lsls	r3, r3, #26
 8004352:	4968      	ldr	r1, [pc, #416]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 8004354:	4313      	orrs	r3, r2
 8004356:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004358:	e06a      	b.n	8004430 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800435a:	4b66      	ldr	r3, [pc, #408]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	061b      	lsls	r3, r3, #24
 8004368:	4962      	ldr	r1, [pc, #392]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 800436a:	4313      	orrs	r3, r2
 800436c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800436e:	e05f      	b.n	8004430 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d042      	beq.n	80043fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004378:	4b5e      	ldr	r3, [pc, #376]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a5d      	ldr	r2, [pc, #372]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 800437e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004384:	f7fd f884 	bl	8001490 <HAL_GetTick>
 8004388:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800438c:	f7fd f880 	bl	8001490 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e280      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800439e:	4b55      	ldr	r3, [pc, #340]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043aa:	f7fd f8a1 	bl	80014f0 <HAL_GetREVID>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d817      	bhi.n	80043e8 <HAL_RCC_OscConfig+0x3ec>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d108      	bne.n	80043d2 <HAL_RCC_OscConfig+0x3d6>
 80043c0:	4b4c      	ldr	r3, [pc, #304]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80043c8:	4a4a      	ldr	r2, [pc, #296]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80043ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043ce:	6053      	str	r3, [r2, #4]
 80043d0:	e02e      	b.n	8004430 <HAL_RCC_OscConfig+0x434>
 80043d2:	4b48      	ldr	r3, [pc, #288]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	069b      	lsls	r3, r3, #26
 80043e0:	4944      	ldr	r1, [pc, #272]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	604b      	str	r3, [r1, #4]
 80043e6:	e023      	b.n	8004430 <HAL_RCC_OscConfig+0x434>
 80043e8:	4b42      	ldr	r3, [pc, #264]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	061b      	lsls	r3, r3, #24
 80043f6:	493f      	ldr	r1, [pc, #252]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60cb      	str	r3, [r1, #12]
 80043fc:	e018      	b.n	8004430 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80043fe:	4b3d      	ldr	r3, [pc, #244]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a3c      	ldr	r2, [pc, #240]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 8004404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440a:	f7fd f841 	bl	8001490 <HAL_GetTick>
 800440e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004412:	f7fd f83d 	bl	8001490 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e23d      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004424:	4b33      	ldr	r3, [pc, #204]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f0      	bne.n	8004412 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d036      	beq.n	80044aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d019      	beq.n	8004478 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004444:	4b2b      	ldr	r3, [pc, #172]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 8004446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004448:	4a2a      	ldr	r2, [pc, #168]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004450:	f7fd f81e 	bl	8001490 <HAL_GetTick>
 8004454:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004458:	f7fd f81a 	bl	8001490 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e21a      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800446a:	4b22      	ldr	r3, [pc, #136]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 800446c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0x45c>
 8004476:	e018      	b.n	80044aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004478:	4b1e      	ldr	r3, [pc, #120]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 800447a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800447c:	4a1d      	ldr	r2, [pc, #116]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 800447e:	f023 0301 	bic.w	r3, r3, #1
 8004482:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004484:	f7fd f804 	bl	8001490 <HAL_GetTick>
 8004488:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800448c:	f7fd f800 	bl	8001490 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e200      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800449e:	4b15      	ldr	r3, [pc, #84]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80044a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d039      	beq.n	800452a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d01c      	beq.n	80044f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044be:	4b0d      	ldr	r3, [pc, #52]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a0c      	ldr	r2, [pc, #48]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80044c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80044ca:	f7fc ffe1 	bl	8001490 <HAL_GetTick>
 80044ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044d2:	f7fc ffdd 	bl	8001490 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e1dd      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044e4:	4b03      	ldr	r3, [pc, #12]	; (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0f0      	beq.n	80044d2 <HAL_RCC_OscConfig+0x4d6>
 80044f0:	e01b      	b.n	800452a <HAL_RCC_OscConfig+0x52e>
 80044f2:	bf00      	nop
 80044f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044f8:	4b9b      	ldr	r3, [pc, #620]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a9a      	ldr	r2, [pc, #616]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 80044fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004502:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004504:	f7fc ffc4 	bl	8001490 <HAL_GetTick>
 8004508:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800450c:	f7fc ffc0 	bl	8001490 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e1c0      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800451e:	4b92      	ldr	r3, [pc, #584]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 8081 	beq.w	800463a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004538:	4b8c      	ldr	r3, [pc, #560]	; (800476c <HAL_RCC_OscConfig+0x770>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a8b      	ldr	r2, [pc, #556]	; (800476c <HAL_RCC_OscConfig+0x770>)
 800453e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004542:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004544:	f7fc ffa4 	bl	8001490 <HAL_GetTick>
 8004548:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454c:	f7fc ffa0 	bl	8001490 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	; 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e1a0      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800455e:	4b83      	ldr	r3, [pc, #524]	; (800476c <HAL_RCC_OscConfig+0x770>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d106      	bne.n	8004580 <HAL_RCC_OscConfig+0x584>
 8004572:	4b7d      	ldr	r3, [pc, #500]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004576:	4a7c      	ldr	r2, [pc, #496]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	6713      	str	r3, [r2, #112]	; 0x70
 800457e:	e02d      	b.n	80045dc <HAL_RCC_OscConfig+0x5e0>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10c      	bne.n	80045a2 <HAL_RCC_OscConfig+0x5a6>
 8004588:	4b77      	ldr	r3, [pc, #476]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 800458a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458c:	4a76      	ldr	r2, [pc, #472]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	6713      	str	r3, [r2, #112]	; 0x70
 8004594:	4b74      	ldr	r3, [pc, #464]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004598:	4a73      	ldr	r2, [pc, #460]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 800459a:	f023 0304 	bic.w	r3, r3, #4
 800459e:	6713      	str	r3, [r2, #112]	; 0x70
 80045a0:	e01c      	b.n	80045dc <HAL_RCC_OscConfig+0x5e0>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	2b05      	cmp	r3, #5
 80045a8:	d10c      	bne.n	80045c4 <HAL_RCC_OscConfig+0x5c8>
 80045aa:	4b6f      	ldr	r3, [pc, #444]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	4a6e      	ldr	r2, [pc, #440]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 80045b0:	f043 0304 	orr.w	r3, r3, #4
 80045b4:	6713      	str	r3, [r2, #112]	; 0x70
 80045b6:	4b6c      	ldr	r3, [pc, #432]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	4a6b      	ldr	r2, [pc, #428]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	6713      	str	r3, [r2, #112]	; 0x70
 80045c2:	e00b      	b.n	80045dc <HAL_RCC_OscConfig+0x5e0>
 80045c4:	4b68      	ldr	r3, [pc, #416]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 80045c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c8:	4a67      	ldr	r2, [pc, #412]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 80045ca:	f023 0301 	bic.w	r3, r3, #1
 80045ce:	6713      	str	r3, [r2, #112]	; 0x70
 80045d0:	4b65      	ldr	r3, [pc, #404]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	4a64      	ldr	r2, [pc, #400]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 80045d6:	f023 0304 	bic.w	r3, r3, #4
 80045da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d015      	beq.n	8004610 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e4:	f7fc ff54 	bl	8001490 <HAL_GetTick>
 80045e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045ea:	e00a      	b.n	8004602 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ec:	f7fc ff50 	bl	8001490 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e14e      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004602:	4b59      	ldr	r3, [pc, #356]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0ee      	beq.n	80045ec <HAL_RCC_OscConfig+0x5f0>
 800460e:	e014      	b.n	800463a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004610:	f7fc ff3e 	bl	8001490 <HAL_GetTick>
 8004614:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004616:	e00a      	b.n	800462e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004618:	f7fc ff3a 	bl	8001490 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	f241 3288 	movw	r2, #5000	; 0x1388
 8004626:	4293      	cmp	r3, r2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e138      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800462e:	4b4e      	ldr	r3, [pc, #312]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1ee      	bne.n	8004618 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 812d 	beq.w	800489e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004644:	4b48      	ldr	r3, [pc, #288]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800464c:	2b18      	cmp	r3, #24
 800464e:	f000 80bd 	beq.w	80047cc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	2b02      	cmp	r3, #2
 8004658:	f040 809e 	bne.w	8004798 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800465c:	4b42      	ldr	r3, [pc, #264]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a41      	ldr	r2, [pc, #260]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004668:	f7fc ff12 	bl	8001490 <HAL_GetTick>
 800466c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004670:	f7fc ff0e 	bl	8001490 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e10e      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004682:	4b39      	ldr	r3, [pc, #228]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f0      	bne.n	8004670 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800468e:	4b36      	ldr	r3, [pc, #216]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004692:	4b37      	ldr	r3, [pc, #220]	; (8004770 <HAL_RCC_OscConfig+0x774>)
 8004694:	4013      	ands	r3, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800469e:	0112      	lsls	r2, r2, #4
 80046a0:	430a      	orrs	r2, r1
 80046a2:	4931      	ldr	r1, [pc, #196]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	628b      	str	r3, [r1, #40]	; 0x28
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	3b01      	subs	r3, #1
 80046ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b6:	3b01      	subs	r3, #1
 80046b8:	025b      	lsls	r3, r3, #9
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	3b01      	subs	r3, #1
 80046c4:	041b      	lsls	r3, r3, #16
 80046c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d0:	3b01      	subs	r3, #1
 80046d2:	061b      	lsls	r3, r3, #24
 80046d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046d8:	4923      	ldr	r1, [pc, #140]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80046de:	4b22      	ldr	r3, [pc, #136]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	4a21      	ldr	r2, [pc, #132]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 80046e4:	f023 0301 	bic.w	r3, r3, #1
 80046e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046ea:	4b1f      	ldr	r3, [pc, #124]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 80046ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ee:	4b21      	ldr	r3, [pc, #132]	; (8004774 <HAL_RCC_OscConfig+0x778>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80046f6:	00d2      	lsls	r2, r2, #3
 80046f8:	491b      	ldr	r1, [pc, #108]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80046fe:	4b1a      	ldr	r3, [pc, #104]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	f023 020c 	bic.w	r2, r3, #12
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	4917      	ldr	r1, [pc, #92]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 800470c:	4313      	orrs	r3, r2
 800470e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004710:	4b15      	ldr	r3, [pc, #84]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	f023 0202 	bic.w	r2, r3, #2
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471c:	4912      	ldr	r1, [pc, #72]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 800471e:	4313      	orrs	r3, r2
 8004720:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004722:	4b11      	ldr	r3, [pc, #68]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	4a10      	ldr	r2, [pc, #64]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800472c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800472e:	4b0e      	ldr	r3, [pc, #56]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	4a0d      	ldr	r2, [pc, #52]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004738:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800473a:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	4a0a      	ldr	r2, [pc, #40]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004744:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004746:	4b08      	ldr	r3, [pc, #32]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	4a07      	ldr	r2, [pc, #28]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004752:	4b05      	ldr	r3, [pc, #20]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a04      	ldr	r2, [pc, #16]	; (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004758:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800475c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475e:	f7fc fe97 	bl	8001490 <HAL_GetTick>
 8004762:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004764:	e011      	b.n	800478a <HAL_RCC_OscConfig+0x78e>
 8004766:	bf00      	nop
 8004768:	58024400 	.word	0x58024400
 800476c:	58024800 	.word	0x58024800
 8004770:	fffffc0c 	.word	0xfffffc0c
 8004774:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004778:	f7fc fe8a 	bl	8001490 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e08a      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800478a:	4b47      	ldr	r3, [pc, #284]	; (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f0      	beq.n	8004778 <HAL_RCC_OscConfig+0x77c>
 8004796:	e082      	b.n	800489e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004798:	4b43      	ldr	r3, [pc, #268]	; (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a42      	ldr	r2, [pc, #264]	; (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 800479e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a4:	f7fc fe74 	bl	8001490 <HAL_GetTick>
 80047a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ac:	f7fc fe70 	bl	8001490 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e070      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047be:	4b3a      	ldr	r3, [pc, #232]	; (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f0      	bne.n	80047ac <HAL_RCC_OscConfig+0x7b0>
 80047ca:	e068      	b.n	800489e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80047cc:	4b36      	ldr	r3, [pc, #216]	; (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80047d2:	4b35      	ldr	r3, [pc, #212]	; (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d031      	beq.n	8004844 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f003 0203 	and.w	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d12a      	bne.n	8004844 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	091b      	lsrs	r3, r3, #4
 80047f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d122      	bne.n	8004844 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004808:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800480a:	429a      	cmp	r2, r3
 800480c:	d11a      	bne.n	8004844 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	0a5b      	lsrs	r3, r3, #9
 8004812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800481c:	429a      	cmp	r2, r3
 800481e:	d111      	bne.n	8004844 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	0c1b      	lsrs	r3, r3, #16
 8004824:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800482e:	429a      	cmp	r2, r3
 8004830:	d108      	bne.n	8004844 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	0e1b      	lsrs	r3, r3, #24
 8004836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004840:	429a      	cmp	r2, r3
 8004842:	d001      	beq.n	8004848 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e02b      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004848:	4b17      	ldr	r3, [pc, #92]	; (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 800484a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484c:	08db      	lsrs	r3, r3, #3
 800484e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004852:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	429a      	cmp	r2, r3
 800485c:	d01f      	beq.n	800489e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800485e:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	4a11      	ldr	r2, [pc, #68]	; (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 8004864:	f023 0301 	bic.w	r3, r3, #1
 8004868:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800486a:	f7fc fe11 	bl	8001490 <HAL_GetTick>
 800486e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004870:	bf00      	nop
 8004872:	f7fc fe0d 	bl	8001490 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	4293      	cmp	r3, r2
 800487c:	d0f9      	beq.n	8004872 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800487e:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 8004880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004882:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <HAL_RCC_OscConfig+0x8b0>)
 8004884:	4013      	ands	r3, r2
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800488a:	00d2      	lsls	r2, r2, #3
 800488c:	4906      	ldr	r1, [pc, #24]	; (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 800488e:	4313      	orrs	r3, r2
 8004890:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004892:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004896:	4a04      	ldr	r2, [pc, #16]	; (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3730      	adds	r7, #48	; 0x30
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	58024400 	.word	0x58024400
 80048ac:	ffff0007 	.word	0xffff0007

080048b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e19c      	b.n	8004bfe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048c4:	4b8a      	ldr	r3, [pc, #552]	; (8004af0 <HAL_RCC_ClockConfig+0x240>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 030f 	and.w	r3, r3, #15
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d910      	bls.n	80048f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d2:	4b87      	ldr	r3, [pc, #540]	; (8004af0 <HAL_RCC_ClockConfig+0x240>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f023 020f 	bic.w	r2, r3, #15
 80048da:	4985      	ldr	r1, [pc, #532]	; (8004af0 <HAL_RCC_ClockConfig+0x240>)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	4313      	orrs	r3, r2
 80048e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e2:	4b83      	ldr	r3, [pc, #524]	; (8004af0 <HAL_RCC_ClockConfig+0x240>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d001      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e184      	b.n	8004bfe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d010      	beq.n	8004922 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	4b7b      	ldr	r3, [pc, #492]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800490c:	429a      	cmp	r2, r3
 800490e:	d908      	bls.n	8004922 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004910:	4b78      	ldr	r3, [pc, #480]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	4975      	ldr	r1, [pc, #468]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 800491e:	4313      	orrs	r3, r2
 8004920:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d010      	beq.n	8004950 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695a      	ldr	r2, [r3, #20]
 8004932:	4b70      	ldr	r3, [pc, #448]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800493a:	429a      	cmp	r2, r3
 800493c:	d908      	bls.n	8004950 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800493e:	4b6d      	ldr	r3, [pc, #436]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	496a      	ldr	r1, [pc, #424]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 800494c:	4313      	orrs	r3, r2
 800494e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b00      	cmp	r3, #0
 800495a:	d010      	beq.n	800497e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699a      	ldr	r2, [r3, #24]
 8004960:	4b64      	ldr	r3, [pc, #400]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004968:	429a      	cmp	r2, r3
 800496a:	d908      	bls.n	800497e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800496c:	4b61      	ldr	r3, [pc, #388]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	495e      	ldr	r1, [pc, #376]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 800497a:	4313      	orrs	r3, r2
 800497c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0320 	and.w	r3, r3, #32
 8004986:	2b00      	cmp	r3, #0
 8004988:	d010      	beq.n	80049ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69da      	ldr	r2, [r3, #28]
 800498e:	4b59      	ldr	r3, [pc, #356]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004996:	429a      	cmp	r2, r3
 8004998:	d908      	bls.n	80049ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800499a:	4b56      	ldr	r3, [pc, #344]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	4953      	ldr	r1, [pc, #332]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d010      	beq.n	80049da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	4b4d      	ldr	r3, [pc, #308]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	f003 030f 	and.w	r3, r3, #15
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d908      	bls.n	80049da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c8:	4b4a      	ldr	r3, [pc, #296]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	f023 020f 	bic.w	r2, r3, #15
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4947      	ldr	r1, [pc, #284]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d055      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80049e6:	4b43      	ldr	r3, [pc, #268]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	4940      	ldr	r1, [pc, #256]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d107      	bne.n	8004a10 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a00:	4b3c      	ldr	r3, [pc, #240]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d121      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e0f6      	b.n	8004bfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d107      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a18:	4b36      	ldr	r3, [pc, #216]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d115      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0ea      	b.n	8004bfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d107      	bne.n	8004a40 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a30:	4b30      	ldr	r3, [pc, #192]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d109      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0de      	b.n	8004bfe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a40:	4b2c      	ldr	r3, [pc, #176]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0d6      	b.n	8004bfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a50:	4b28      	ldr	r3, [pc, #160]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f023 0207 	bic.w	r2, r3, #7
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	4925      	ldr	r1, [pc, #148]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a62:	f7fc fd15 	bl	8001490 <HAL_GetTick>
 8004a66:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a68:	e00a      	b.n	8004a80 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a6a:	f7fc fd11 	bl	8001490 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e0be      	b.n	8004bfe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a80:	4b1c      	ldr	r3, [pc, #112]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d1eb      	bne.n	8004a6a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d010      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	4b14      	ldr	r3, [pc, #80]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d208      	bcs.n	8004ac0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aae:	4b11      	ldr	r3, [pc, #68]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f023 020f 	bic.w	r2, r3, #15
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	490e      	ldr	r1, [pc, #56]	; (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac0:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <HAL_RCC_ClockConfig+0x240>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 030f 	and.w	r3, r3, #15
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d214      	bcs.n	8004af8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ace:	4b08      	ldr	r3, [pc, #32]	; (8004af0 <HAL_RCC_ClockConfig+0x240>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 020f 	bic.w	r2, r3, #15
 8004ad6:	4906      	ldr	r1, [pc, #24]	; (8004af0 <HAL_RCC_ClockConfig+0x240>)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ade:	4b04      	ldr	r3, [pc, #16]	; (8004af0 <HAL_RCC_ClockConfig+0x240>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d005      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e086      	b.n	8004bfe <HAL_RCC_ClockConfig+0x34e>
 8004af0:	52002000 	.word	0x52002000
 8004af4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d010      	beq.n	8004b26 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	4b3f      	ldr	r3, [pc, #252]	; (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d208      	bcs.n	8004b26 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b14:	4b3c      	ldr	r3, [pc, #240]	; (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	4939      	ldr	r1, [pc, #228]	; (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d010      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695a      	ldr	r2, [r3, #20]
 8004b36:	4b34      	ldr	r3, [pc, #208]	; (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d208      	bcs.n	8004b54 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b42:	4b31      	ldr	r3, [pc, #196]	; (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	492e      	ldr	r1, [pc, #184]	; (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d010      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	699a      	ldr	r2, [r3, #24]
 8004b64:	4b28      	ldr	r3, [pc, #160]	; (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d208      	bcs.n	8004b82 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b70:	4b25      	ldr	r3, [pc, #148]	; (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	4922      	ldr	r1, [pc, #136]	; (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d010      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69da      	ldr	r2, [r3, #28]
 8004b92:	4b1d      	ldr	r3, [pc, #116]	; (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d208      	bcs.n	8004bb0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b9e:	4b1a      	ldr	r3, [pc, #104]	; (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	4917      	ldr	r1, [pc, #92]	; (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004bb0:	f000 f834 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	4b14      	ldr	r3, [pc, #80]	; (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	0a1b      	lsrs	r3, r3, #8
 8004bbc:	f003 030f 	and.w	r3, r3, #15
 8004bc0:	4912      	ldr	r1, [pc, #72]	; (8004c0c <HAL_RCC_ClockConfig+0x35c>)
 8004bc2:	5ccb      	ldrb	r3, [r1, r3]
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bcc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bce:	4b0e      	ldr	r3, [pc, #56]	; (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	4a0d      	ldr	r2, [pc, #52]	; (8004c0c <HAL_RCC_ClockConfig+0x35c>)
 8004bd8:	5cd3      	ldrb	r3, [r2, r3]
 8004bda:	f003 031f 	and.w	r3, r3, #31
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	fa22 f303 	lsr.w	r3, r2, r3
 8004be4:	4a0a      	ldr	r2, [pc, #40]	; (8004c10 <HAL_RCC_ClockConfig+0x360>)
 8004be6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004be8:	4a0a      	ldr	r2, [pc, #40]	; (8004c14 <HAL_RCC_ClockConfig+0x364>)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004bee:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <HAL_RCC_ClockConfig+0x368>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fc fc02 	bl	80013fc <HAL_InitTick>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	58024400 	.word	0x58024400
 8004c0c:	08009930 	.word	0x08009930
 8004c10:	24000004 	.word	0x24000004
 8004c14:	24000000 	.word	0x24000000
 8004c18:	24000028 	.word	0x24000028

08004c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b089      	sub	sp, #36	; 0x24
 8004c20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c22:	4bb3      	ldr	r3, [pc, #716]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c2a:	2b18      	cmp	r3, #24
 8004c2c:	f200 8155 	bhi.w	8004eda <HAL_RCC_GetSysClockFreq+0x2be>
 8004c30:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c36:	bf00      	nop
 8004c38:	08004c9d 	.word	0x08004c9d
 8004c3c:	08004edb 	.word	0x08004edb
 8004c40:	08004edb 	.word	0x08004edb
 8004c44:	08004edb 	.word	0x08004edb
 8004c48:	08004edb 	.word	0x08004edb
 8004c4c:	08004edb 	.word	0x08004edb
 8004c50:	08004edb 	.word	0x08004edb
 8004c54:	08004edb 	.word	0x08004edb
 8004c58:	08004cc3 	.word	0x08004cc3
 8004c5c:	08004edb 	.word	0x08004edb
 8004c60:	08004edb 	.word	0x08004edb
 8004c64:	08004edb 	.word	0x08004edb
 8004c68:	08004edb 	.word	0x08004edb
 8004c6c:	08004edb 	.word	0x08004edb
 8004c70:	08004edb 	.word	0x08004edb
 8004c74:	08004edb 	.word	0x08004edb
 8004c78:	08004cc9 	.word	0x08004cc9
 8004c7c:	08004edb 	.word	0x08004edb
 8004c80:	08004edb 	.word	0x08004edb
 8004c84:	08004edb 	.word	0x08004edb
 8004c88:	08004edb 	.word	0x08004edb
 8004c8c:	08004edb 	.word	0x08004edb
 8004c90:	08004edb 	.word	0x08004edb
 8004c94:	08004edb 	.word	0x08004edb
 8004c98:	08004ccf 	.word	0x08004ccf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c9c:	4b94      	ldr	r3, [pc, #592]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d009      	beq.n	8004cbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ca8:	4b91      	ldr	r3, [pc, #580]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	08db      	lsrs	r3, r3, #3
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	4a90      	ldr	r2, [pc, #576]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004cba:	e111      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004cbc:	4b8d      	ldr	r3, [pc, #564]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cbe:	61bb      	str	r3, [r7, #24]
      break;
 8004cc0:	e10e      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004cc2:	4b8d      	ldr	r3, [pc, #564]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004cc4:	61bb      	str	r3, [r7, #24]
      break;
 8004cc6:	e10b      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004cc8:	4b8c      	ldr	r3, [pc, #560]	; (8004efc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004cca:	61bb      	str	r3, [r7, #24]
      break;
 8004ccc:	e108      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cce:	4b88      	ldr	r3, [pc, #544]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004cd8:	4b85      	ldr	r3, [pc, #532]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ce2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004ce4:	4b82      	ldr	r3, [pc, #520]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004cee:	4b80      	ldr	r3, [pc, #512]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf2:	08db      	lsrs	r3, r3, #3
 8004cf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	fb02 f303 	mul.w	r3, r2, r3
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d06:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80e1 	beq.w	8004ed4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	f000 8083 	beq.w	8004e20 <HAL_RCC_GetSysClockFreq+0x204>
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	f200 80a1 	bhi.w	8004e64 <HAL_RCC_GetSysClockFreq+0x248>
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <HAL_RCC_GetSysClockFreq+0x114>
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d056      	beq.n	8004ddc <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d2e:	e099      	b.n	8004e64 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d30:	4b6f      	ldr	r3, [pc, #444]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d02d      	beq.n	8004d98 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d3c:	4b6c      	ldr	r3, [pc, #432]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	08db      	lsrs	r3, r3, #3
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	4a6b      	ldr	r2, [pc, #428]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d48:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	ee07 3a90 	vmov	s15, r3
 8004d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d66:	4b62      	ldr	r3, [pc, #392]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d6e:	ee07 3a90 	vmov	s15, r3
 8004d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d76:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d7a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d92:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004d96:	e087      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004f04 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004daa:	4b51      	ldr	r3, [pc, #324]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db2:	ee07 3a90 	vmov	s15, r3
 8004db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dba:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dbe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004dda:	e065      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004f08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dee:	4b40      	ldr	r3, [pc, #256]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e02:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e1e:	e043      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004f0c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e32:	4b2f      	ldr	r3, [pc, #188]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3a:	ee07 3a90 	vmov	s15, r3
 8004e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e46:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e62:	e021      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004f08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e76:	4b1e      	ldr	r3, [pc, #120]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7e:	ee07 3a90 	vmov	s15, r3
 8004e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e8a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ea6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004ea8:	4b11      	ldr	r3, [pc, #68]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	0a5b      	lsrs	r3, r3, #9
 8004eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	ee07 3a90 	vmov	s15, r3
 8004ebc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ec0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ecc:	ee17 3a90 	vmov	r3, s15
 8004ed0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004ed2:	e005      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	61bb      	str	r3, [r7, #24]
      break;
 8004ed8:	e002      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004eda:	4b07      	ldr	r3, [pc, #28]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004edc:	61bb      	str	r3, [r7, #24]
      break;
 8004ede:	bf00      	nop
  }

  return sysclockfreq;
 8004ee0:	69bb      	ldr	r3, [r7, #24]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3724      	adds	r7, #36	; 0x24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	58024400 	.word	0x58024400
 8004ef4:	03d09000 	.word	0x03d09000
 8004ef8:	003d0900 	.word	0x003d0900
 8004efc:	007a1200 	.word	0x007a1200
 8004f00:	46000000 	.word	0x46000000
 8004f04:	4c742400 	.word	0x4c742400
 8004f08:	4a742400 	.word	0x4a742400
 8004f0c:	4af42400 	.word	0x4af42400

08004f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f16:	f7ff fe81 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	0a1b      	lsrs	r3, r3, #8
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	490f      	ldr	r1, [pc, #60]	; (8004f64 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f28:	5ccb      	ldrb	r3, [r1, r3]
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f34:	4b0a      	ldr	r3, [pc, #40]	; (8004f60 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f003 030f 	and.w	r3, r3, #15
 8004f3c:	4a09      	ldr	r2, [pc, #36]	; (8004f64 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f3e:	5cd3      	ldrb	r3, [r2, r3]
 8004f40:	f003 031f 	and.w	r3, r3, #31
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4a:	4a07      	ldr	r2, [pc, #28]	; (8004f68 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f4e:	4a07      	ldr	r2, [pc, #28]	; (8004f6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f54:	4b04      	ldr	r3, [pc, #16]	; (8004f68 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f56:	681b      	ldr	r3, [r3, #0]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	58024400 	.word	0x58024400
 8004f64:	08009930 	.word	0x08009930
 8004f68:	24000004 	.word	0x24000004
 8004f6c:	24000000 	.word	0x24000000

08004f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004f74:	f7ff ffcc 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	091b      	lsrs	r3, r3, #4
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	4904      	ldr	r1, [pc, #16]	; (8004f98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f86:	5ccb      	ldrb	r3, [r1, r3]
 8004f88:	f003 031f 	and.w	r3, r3, #31
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	58024400 	.word	0x58024400
 8004f98:	08009930 	.word	0x08009930

08004f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004fa0:	f7ff ffb6 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	0a1b      	lsrs	r3, r3, #8
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	4904      	ldr	r1, [pc, #16]	; (8004fc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fb2:	5ccb      	ldrb	r3, [r1, r3]
 8004fb4:	f003 031f 	and.w	r3, r3, #31
 8004fb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	58024400 	.word	0x58024400
 8004fc4:	08009930 	.word	0x08009930

08004fc8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fcc:	b0ca      	sub	sp, #296	; 0x128
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004fec:	2500      	movs	r5, #0
 8004fee:	ea54 0305 	orrs.w	r3, r4, r5
 8004ff2:	d049      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ffa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ffe:	d02f      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005000:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005004:	d828      	bhi.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005006:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800500a:	d01a      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800500c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005010:	d822      	bhi.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800501a:	d007      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800501c:	e01c      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800501e:	4bb8      	ldr	r3, [pc, #736]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005022:	4ab7      	ldr	r2, [pc, #732]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005028:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800502a:	e01a      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800502c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005030:	3308      	adds	r3, #8
 8005032:	2102      	movs	r1, #2
 8005034:	4618      	mov	r0, r3
 8005036:	f001 fc8f 	bl	8006958 <RCCEx_PLL2_Config>
 800503a:	4603      	mov	r3, r0
 800503c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005040:	e00f      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005046:	3328      	adds	r3, #40	; 0x28
 8005048:	2102      	movs	r1, #2
 800504a:	4618      	mov	r0, r3
 800504c:	f001 fd36 	bl	8006abc <RCCEx_PLL3_Config>
 8005050:	4603      	mov	r3, r0
 8005052:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005056:	e004      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800505e:	e000      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005062:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10a      	bne.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800506a:	4ba5      	ldr	r3, [pc, #660]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800506c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005078:	4aa1      	ldr	r2, [pc, #644]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800507a:	430b      	orrs	r3, r1
 800507c:	6513      	str	r3, [r2, #80]	; 0x50
 800507e:	e003      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005080:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005084:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005094:	f04f 0900 	mov.w	r9, #0
 8005098:	ea58 0309 	orrs.w	r3, r8, r9
 800509c:	d047      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800509e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d82a      	bhi.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 80050a8:	a201      	add	r2, pc, #4	; (adr r2, 80050b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80050aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ae:	bf00      	nop
 80050b0:	080050c5 	.word	0x080050c5
 80050b4:	080050d3 	.word	0x080050d3
 80050b8:	080050e9 	.word	0x080050e9
 80050bc:	08005107 	.word	0x08005107
 80050c0:	08005107 	.word	0x08005107
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050c4:	4b8e      	ldr	r3, [pc, #568]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	4a8d      	ldr	r2, [pc, #564]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050d0:	e01a      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050d6:	3308      	adds	r3, #8
 80050d8:	2100      	movs	r1, #0
 80050da:	4618      	mov	r0, r3
 80050dc:	f001 fc3c 	bl	8006958 <RCCEx_PLL2_Config>
 80050e0:	4603      	mov	r3, r0
 80050e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050e6:	e00f      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ec:	3328      	adds	r3, #40	; 0x28
 80050ee:	2100      	movs	r1, #0
 80050f0:	4618      	mov	r0, r3
 80050f2:	f001 fce3 	bl	8006abc <RCCEx_PLL3_Config>
 80050f6:	4603      	mov	r3, r0
 80050f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050fc:	e004      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005104:	e000      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005106:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005108:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005110:	4b7b      	ldr	r3, [pc, #492]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005114:	f023 0107 	bic.w	r1, r3, #7
 8005118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800511c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511e:	4a78      	ldr	r2, [pc, #480]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005120:	430b      	orrs	r3, r1
 8005122:	6513      	str	r3, [r2, #80]	; 0x50
 8005124:	e003      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005126:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800512a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800512e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800513a:	f04f 0b00 	mov.w	fp, #0
 800513e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005142:	d04c      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800514a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800514e:	d030      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005154:	d829      	bhi.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005156:	2bc0      	cmp	r3, #192	; 0xc0
 8005158:	d02d      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800515a:	2bc0      	cmp	r3, #192	; 0xc0
 800515c:	d825      	bhi.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800515e:	2b80      	cmp	r3, #128	; 0x80
 8005160:	d018      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005162:	2b80      	cmp	r3, #128	; 0x80
 8005164:	d821      	bhi.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800516a:	2b40      	cmp	r3, #64	; 0x40
 800516c:	d007      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800516e:	e01c      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005170:	4b63      	ldr	r3, [pc, #396]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	4a62      	ldr	r2, [pc, #392]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800517a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800517c:	e01c      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800517e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005182:	3308      	adds	r3, #8
 8005184:	2100      	movs	r1, #0
 8005186:	4618      	mov	r0, r3
 8005188:	f001 fbe6 	bl	8006958 <RCCEx_PLL2_Config>
 800518c:	4603      	mov	r3, r0
 800518e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005192:	e011      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005198:	3328      	adds	r3, #40	; 0x28
 800519a:	2100      	movs	r1, #0
 800519c:	4618      	mov	r0, r3
 800519e:	f001 fc8d 	bl	8006abc <RCCEx_PLL3_Config>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80051a8:	e006      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051b0:	e002      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80051b2:	bf00      	nop
 80051b4:	e000      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80051b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10a      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80051c0:	4b4f      	ldr	r3, [pc, #316]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80051c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ce:	4a4c      	ldr	r2, [pc, #304]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051d0:	430b      	orrs	r3, r1
 80051d2:	6513      	str	r3, [r2, #80]	; 0x50
 80051d4:	e003      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80051de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80051ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80051ee:	2300      	movs	r3, #0
 80051f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80051f4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80051f8:	460b      	mov	r3, r1
 80051fa:	4313      	orrs	r3, r2
 80051fc:	d053      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80051fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005202:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005206:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800520a:	d035      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800520c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005210:	d82e      	bhi.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005212:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005216:	d031      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005218:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800521c:	d828      	bhi.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800521e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005222:	d01a      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005224:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005228:	d822      	bhi.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800522e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005232:	d007      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005234:	e01c      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005236:	4b32      	ldr	r3, [pc, #200]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	4a31      	ldr	r2, [pc, #196]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800523c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005240:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005242:	e01c      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005248:	3308      	adds	r3, #8
 800524a:	2100      	movs	r1, #0
 800524c:	4618      	mov	r0, r3
 800524e:	f001 fb83 	bl	8006958 <RCCEx_PLL2_Config>
 8005252:	4603      	mov	r3, r0
 8005254:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005258:	e011      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800525a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800525e:	3328      	adds	r3, #40	; 0x28
 8005260:	2100      	movs	r1, #0
 8005262:	4618      	mov	r0, r3
 8005264:	f001 fc2a 	bl	8006abc <RCCEx_PLL3_Config>
 8005268:	4603      	mov	r3, r0
 800526a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800526e:	e006      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005276:	e002      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005278:	bf00      	nop
 800527a:	e000      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800527c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800527e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10b      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005286:	4b1e      	ldr	r3, [pc, #120]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800528e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005292:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005296:	4a1a      	ldr	r2, [pc, #104]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005298:	430b      	orrs	r3, r1
 800529a:	6593      	str	r3, [r2, #88]	; 0x58
 800529c:	e003      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80052a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80052b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052b6:	2300      	movs	r3, #0
 80052b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80052bc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80052c0:	460b      	mov	r3, r1
 80052c2:	4313      	orrs	r3, r2
 80052c4:	d056      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80052c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052d2:	d038      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80052d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052d8:	d831      	bhi.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80052de:	d034      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80052e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80052e4:	d82b      	bhi.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052ea:	d01d      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80052ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052f0:	d825      	bhi.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d006      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80052f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052fa:	d00a      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80052fc:	e01f      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052fe:	bf00      	nop
 8005300:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005304:	4ba2      	ldr	r3, [pc, #648]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	4aa1      	ldr	r2, [pc, #644]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800530a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800530e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005310:	e01c      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005316:	3308      	adds	r3, #8
 8005318:	2100      	movs	r1, #0
 800531a:	4618      	mov	r0, r3
 800531c:	f001 fb1c 	bl	8006958 <RCCEx_PLL2_Config>
 8005320:	4603      	mov	r3, r0
 8005322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005326:	e011      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800532c:	3328      	adds	r3, #40	; 0x28
 800532e:	2100      	movs	r1, #0
 8005330:	4618      	mov	r0, r3
 8005332:	f001 fbc3 	bl	8006abc <RCCEx_PLL3_Config>
 8005336:	4603      	mov	r3, r0
 8005338:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800533c:	e006      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005344:	e002      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005346:	bf00      	nop
 8005348:	e000      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800534a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800534c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10b      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005354:	4b8e      	ldr	r3, [pc, #568]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005358:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800535c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005360:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005364:	4a8a      	ldr	r2, [pc, #552]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005366:	430b      	orrs	r3, r1
 8005368:	6593      	str	r3, [r2, #88]	; 0x58
 800536a:	e003      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800536c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005370:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005380:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005384:	2300      	movs	r3, #0
 8005386:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800538a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800538e:	460b      	mov	r3, r1
 8005390:	4313      	orrs	r3, r2
 8005392:	d03a      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539a:	2b30      	cmp	r3, #48	; 0x30
 800539c:	d01f      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x416>
 800539e:	2b30      	cmp	r3, #48	; 0x30
 80053a0:	d819      	bhi.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d00c      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d815      	bhi.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d019      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80053ae:	2b10      	cmp	r3, #16
 80053b0:	d111      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053b2:	4b77      	ldr	r3, [pc, #476]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b6:	4a76      	ldr	r2, [pc, #472]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80053be:	e011      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053c4:	3308      	adds	r3, #8
 80053c6:	2102      	movs	r1, #2
 80053c8:	4618      	mov	r0, r3
 80053ca:	f001 fac5 	bl	8006958 <RCCEx_PLL2_Config>
 80053ce:	4603      	mov	r3, r0
 80053d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80053d4:	e006      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053dc:	e002      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80053de:	bf00      	nop
 80053e0:	e000      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80053e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10a      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80053ec:	4b68      	ldr	r3, [pc, #416]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80053f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fa:	4a65      	ldr	r2, [pc, #404]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053fc:	430b      	orrs	r3, r1
 80053fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005400:	e003      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005402:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005406:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800540a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005412:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005416:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800541a:	2300      	movs	r3, #0
 800541c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005420:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005424:	460b      	mov	r3, r1
 8005426:	4313      	orrs	r3, r2
 8005428:	d051      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800542a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800542e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005430:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005434:	d035      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005436:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800543a:	d82e      	bhi.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800543c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005440:	d031      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005442:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005446:	d828      	bhi.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800544c:	d01a      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800544e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005452:	d822      	bhi.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545c:	d007      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800545e:	e01c      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005460:	4b4b      	ldr	r3, [pc, #300]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	4a4a      	ldr	r2, [pc, #296]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800546a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800546c:	e01c      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800546e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005472:	3308      	adds	r3, #8
 8005474:	2100      	movs	r1, #0
 8005476:	4618      	mov	r0, r3
 8005478:	f001 fa6e 	bl	8006958 <RCCEx_PLL2_Config>
 800547c:	4603      	mov	r3, r0
 800547e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005482:	e011      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005488:	3328      	adds	r3, #40	; 0x28
 800548a:	2100      	movs	r1, #0
 800548c:	4618      	mov	r0, r3
 800548e:	f001 fb15 	bl	8006abc <RCCEx_PLL3_Config>
 8005492:	4603      	mov	r3, r0
 8005494:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005498:	e006      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054a0:	e002      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80054a2:	bf00      	nop
 80054a4:	e000      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80054a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10a      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80054b0:	4b37      	ldr	r3, [pc, #220]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80054b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054be:	4a34      	ldr	r2, [pc, #208]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054c0:	430b      	orrs	r3, r1
 80054c2:	6513      	str	r3, [r2, #80]	; 0x50
 80054c4:	e003      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80054ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80054da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054de:	2300      	movs	r3, #0
 80054e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80054e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80054e8:	460b      	mov	r3, r1
 80054ea:	4313      	orrs	r3, r2
 80054ec:	d056      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80054ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054f8:	d033      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80054fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054fe:	d82c      	bhi.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005500:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005504:	d02f      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005506:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800550a:	d826      	bhi.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800550c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005510:	d02b      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005512:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005516:	d820      	bhi.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800551c:	d012      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800551e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005522:	d81a      	bhi.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d022      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800552c:	d115      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800552e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005532:	3308      	adds	r3, #8
 8005534:	2101      	movs	r1, #1
 8005536:	4618      	mov	r0, r3
 8005538:	f001 fa0e 	bl	8006958 <RCCEx_PLL2_Config>
 800553c:	4603      	mov	r3, r0
 800553e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005542:	e015      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005548:	3328      	adds	r3, #40	; 0x28
 800554a:	2101      	movs	r1, #1
 800554c:	4618      	mov	r0, r3
 800554e:	f001 fab5 	bl	8006abc <RCCEx_PLL3_Config>
 8005552:	4603      	mov	r3, r0
 8005554:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005558:	e00a      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005560:	e006      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005562:	bf00      	nop
 8005564:	e004      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005566:	bf00      	nop
 8005568:	e002      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800556a:	bf00      	nop
 800556c:	e000      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800556e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005570:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10d      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005578:	4b05      	ldr	r3, [pc, #20]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800557a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005586:	4a02      	ldr	r2, [pc, #8]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005588:	430b      	orrs	r3, r1
 800558a:	6513      	str	r3, [r2, #80]	; 0x50
 800558c:	e006      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800558e:	bf00      	nop
 8005590:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005594:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005598:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800559c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80055a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055ac:	2300      	movs	r3, #0
 80055ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055b2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4313      	orrs	r3, r2
 80055ba:	d055      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80055bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055c8:	d033      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80055ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055ce:	d82c      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d4:	d02f      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80055d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055da:	d826      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055e0:	d02b      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80055e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055e6:	d820      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ec:	d012      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80055ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055f2:	d81a      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d022      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80055f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055fc:	d115      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005602:	3308      	adds	r3, #8
 8005604:	2101      	movs	r1, #1
 8005606:	4618      	mov	r0, r3
 8005608:	f001 f9a6 	bl	8006958 <RCCEx_PLL2_Config>
 800560c:	4603      	mov	r3, r0
 800560e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005612:	e015      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005618:	3328      	adds	r3, #40	; 0x28
 800561a:	2101      	movs	r1, #1
 800561c:	4618      	mov	r0, r3
 800561e:	f001 fa4d 	bl	8006abc <RCCEx_PLL3_Config>
 8005622:	4603      	mov	r3, r0
 8005624:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005628:	e00a      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005630:	e006      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005632:	bf00      	nop
 8005634:	e004      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005636:	bf00      	nop
 8005638:	e002      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800563a:	bf00      	nop
 800563c:	e000      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800563e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005640:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10b      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005648:	4ba3      	ldr	r3, [pc, #652]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800564a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005654:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005658:	4a9f      	ldr	r2, [pc, #636]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800565a:	430b      	orrs	r3, r1
 800565c:	6593      	str	r3, [r2, #88]	; 0x58
 800565e:	e003      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005660:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005664:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800566c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005670:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005678:	2300      	movs	r3, #0
 800567a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800567e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005682:	460b      	mov	r3, r1
 8005684:	4313      	orrs	r3, r2
 8005686:	d037      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800568c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005692:	d00e      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005698:	d816      	bhi.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d018      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800569e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056a2:	d111      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056a4:	4b8c      	ldr	r3, [pc, #560]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a8:	4a8b      	ldr	r2, [pc, #556]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80056b0:	e00f      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b6:	3308      	adds	r3, #8
 80056b8:	2101      	movs	r1, #1
 80056ba:	4618      	mov	r0, r3
 80056bc:	f001 f94c 	bl	8006958 <RCCEx_PLL2_Config>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80056c6:	e004      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056ce:	e000      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80056d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10a      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056da:	4b7f      	ldr	r3, [pc, #508]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056de:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80056e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e8:	4a7b      	ldr	r2, [pc, #492]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056ea:	430b      	orrs	r3, r1
 80056ec:	6513      	str	r3, [r2, #80]	; 0x50
 80056ee:	e003      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80056f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005700:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005704:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005708:	2300      	movs	r3, #0
 800570a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800570e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005712:	460b      	mov	r3, r1
 8005714:	4313      	orrs	r3, r2
 8005716:	d039      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800571c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800571e:	2b03      	cmp	r3, #3
 8005720:	d81c      	bhi.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005722:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005728:	08005765 	.word	0x08005765
 800572c:	08005739 	.word	0x08005739
 8005730:	08005747 	.word	0x08005747
 8005734:	08005765 	.word	0x08005765
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005738:	4b67      	ldr	r3, [pc, #412]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	4a66      	ldr	r2, [pc, #408]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800573e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005742:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005744:	e00f      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800574a:	3308      	adds	r3, #8
 800574c:	2102      	movs	r1, #2
 800574e:	4618      	mov	r0, r3
 8005750:	f001 f902 	bl	8006958 <RCCEx_PLL2_Config>
 8005754:	4603      	mov	r3, r0
 8005756:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800575a:	e004      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005762:	e000      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005766:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10a      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800576e:	4b5a      	ldr	r3, [pc, #360]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005772:	f023 0103 	bic.w	r1, r3, #3
 8005776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800577a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800577c:	4a56      	ldr	r2, [pc, #344]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800577e:	430b      	orrs	r3, r1
 8005780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005782:	e003      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005784:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005788:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800578c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005798:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800579c:	2300      	movs	r3, #0
 800579e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80057a6:	460b      	mov	r3, r1
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f000 809f 	beq.w	80058ec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057ae:	4b4b      	ldr	r3, [pc, #300]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a4a      	ldr	r2, [pc, #296]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80057b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057ba:	f7fb fe69 	bl	8001490 <HAL_GetTick>
 80057be:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057c2:	e00b      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057c4:	f7fb fe64 	bl	8001490 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b64      	cmp	r3, #100	; 0x64
 80057d2:	d903      	bls.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057da:	e005      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057dc:	4b3f      	ldr	r3, [pc, #252]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0ed      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80057e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d179      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80057f0:	4b39      	ldr	r3, [pc, #228]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80057fc:	4053      	eors	r3, r2
 80057fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005802:	2b00      	cmp	r3, #0
 8005804:	d015      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005806:	4b34      	ldr	r3, [pc, #208]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800580e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005812:	4b31      	ldr	r3, [pc, #196]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005816:	4a30      	ldr	r2, [pc, #192]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800581c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800581e:	4b2e      	ldr	r3, [pc, #184]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005822:	4a2d      	ldr	r2, [pc, #180]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005828:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800582a:	4a2b      	ldr	r2, [pc, #172]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800582c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005830:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005836:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800583a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800583e:	d118      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005840:	f7fb fe26 	bl	8001490 <HAL_GetTick>
 8005844:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005848:	e00d      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800584a:	f7fb fe21 	bl	8001490 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005854:	1ad2      	subs	r2, r2, r3
 8005856:	f241 3388 	movw	r3, #5000	; 0x1388
 800585a:	429a      	cmp	r2, r3
 800585c:	d903      	bls.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005864:	e005      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005866:	4b1c      	ldr	r3, [pc, #112]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0eb      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005872:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005876:	2b00      	cmp	r3, #0
 8005878:	d129      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800587a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800587e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005886:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800588a:	d10e      	bne.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800588c:	4b12      	ldr	r3, [pc, #72]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005898:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800589c:	091a      	lsrs	r2, r3, #4
 800589e:	4b10      	ldr	r3, [pc, #64]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	4a0d      	ldr	r2, [pc, #52]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058a4:	430b      	orrs	r3, r1
 80058a6:	6113      	str	r3, [r2, #16]
 80058a8:	e005      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80058aa:	4b0b      	ldr	r3, [pc, #44]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	4a0a      	ldr	r2, [pc, #40]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80058b4:	6113      	str	r3, [r2, #16]
 80058b6:	4b08      	ldr	r3, [pc, #32]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058b8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80058ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80058c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058c6:	4a04      	ldr	r2, [pc, #16]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058c8:	430b      	orrs	r3, r1
 80058ca:	6713      	str	r3, [r2, #112]	; 0x70
 80058cc:	e00e      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80058d6:	e009      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x924>
 80058d8:	58024400 	.word	0x58024400
 80058dc:	58024800 	.word	0x58024800
 80058e0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80058ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f4:	f002 0301 	and.w	r3, r2, #1
 80058f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058fc:	2300      	movs	r3, #0
 80058fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005902:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005906:	460b      	mov	r3, r1
 8005908:	4313      	orrs	r3, r2
 800590a:	f000 8089 	beq.w	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800590e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005914:	2b28      	cmp	r3, #40	; 0x28
 8005916:	d86b      	bhi.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005918:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800591a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591e:	bf00      	nop
 8005920:	080059f9 	.word	0x080059f9
 8005924:	080059f1 	.word	0x080059f1
 8005928:	080059f1 	.word	0x080059f1
 800592c:	080059f1 	.word	0x080059f1
 8005930:	080059f1 	.word	0x080059f1
 8005934:	080059f1 	.word	0x080059f1
 8005938:	080059f1 	.word	0x080059f1
 800593c:	080059f1 	.word	0x080059f1
 8005940:	080059c5 	.word	0x080059c5
 8005944:	080059f1 	.word	0x080059f1
 8005948:	080059f1 	.word	0x080059f1
 800594c:	080059f1 	.word	0x080059f1
 8005950:	080059f1 	.word	0x080059f1
 8005954:	080059f1 	.word	0x080059f1
 8005958:	080059f1 	.word	0x080059f1
 800595c:	080059f1 	.word	0x080059f1
 8005960:	080059db 	.word	0x080059db
 8005964:	080059f1 	.word	0x080059f1
 8005968:	080059f1 	.word	0x080059f1
 800596c:	080059f1 	.word	0x080059f1
 8005970:	080059f1 	.word	0x080059f1
 8005974:	080059f1 	.word	0x080059f1
 8005978:	080059f1 	.word	0x080059f1
 800597c:	080059f1 	.word	0x080059f1
 8005980:	080059f9 	.word	0x080059f9
 8005984:	080059f1 	.word	0x080059f1
 8005988:	080059f1 	.word	0x080059f1
 800598c:	080059f1 	.word	0x080059f1
 8005990:	080059f1 	.word	0x080059f1
 8005994:	080059f1 	.word	0x080059f1
 8005998:	080059f1 	.word	0x080059f1
 800599c:	080059f1 	.word	0x080059f1
 80059a0:	080059f9 	.word	0x080059f9
 80059a4:	080059f1 	.word	0x080059f1
 80059a8:	080059f1 	.word	0x080059f1
 80059ac:	080059f1 	.word	0x080059f1
 80059b0:	080059f1 	.word	0x080059f1
 80059b4:	080059f1 	.word	0x080059f1
 80059b8:	080059f1 	.word	0x080059f1
 80059bc:	080059f1 	.word	0x080059f1
 80059c0:	080059f9 	.word	0x080059f9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c8:	3308      	adds	r3, #8
 80059ca:	2101      	movs	r1, #1
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 ffc3 	bl	8006958 <RCCEx_PLL2_Config>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80059d8:	e00f      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059de:	3328      	adds	r3, #40	; 0x28
 80059e0:	2101      	movs	r1, #1
 80059e2:	4618      	mov	r0, r3
 80059e4:	f001 f86a 	bl	8006abc <RCCEx_PLL3_Config>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80059ee:	e004      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059f6:	e000      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80059f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10a      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005a02:	4bbf      	ldr	r3, [pc, #764]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a06:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a10:	4abb      	ldr	r2, [pc, #748]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a12:	430b      	orrs	r3, r1
 8005a14:	6553      	str	r3, [r2, #84]	; 0x54
 8005a16:	e003      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a28:	f002 0302 	and.w	r3, r2, #2
 8005a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a30:	2300      	movs	r3, #0
 8005a32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005a36:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	d041      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a46:	2b05      	cmp	r3, #5
 8005a48:	d824      	bhi.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005a4a:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a50:	08005a9d 	.word	0x08005a9d
 8005a54:	08005a69 	.word	0x08005a69
 8005a58:	08005a7f 	.word	0x08005a7f
 8005a5c:	08005a9d 	.word	0x08005a9d
 8005a60:	08005a9d 	.word	0x08005a9d
 8005a64:	08005a9d 	.word	0x08005a9d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	2101      	movs	r1, #1
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 ff71 	bl	8006958 <RCCEx_PLL2_Config>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a7c:	e00f      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a82:	3328      	adds	r3, #40	; 0x28
 8005a84:	2101      	movs	r1, #1
 8005a86:	4618      	mov	r0, r3
 8005a88:	f001 f818 	bl	8006abc <RCCEx_PLL3_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a92:	e004      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a9a:	e000      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10a      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005aa6:	4b96      	ldr	r3, [pc, #600]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aaa:	f023 0107 	bic.w	r1, r3, #7
 8005aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ab2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ab4:	4a92      	ldr	r2, [pc, #584]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ab6:	430b      	orrs	r3, r1
 8005ab8:	6553      	str	r3, [r2, #84]	; 0x54
 8005aba:	e003      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ac0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f002 0304 	and.w	r3, r2, #4
 8005ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ada:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	d044      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aec:	2b05      	cmp	r3, #5
 8005aee:	d825      	bhi.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005af0:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af6:	bf00      	nop
 8005af8:	08005b45 	.word	0x08005b45
 8005afc:	08005b11 	.word	0x08005b11
 8005b00:	08005b27 	.word	0x08005b27
 8005b04:	08005b45 	.word	0x08005b45
 8005b08:	08005b45 	.word	0x08005b45
 8005b0c:	08005b45 	.word	0x08005b45
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b14:	3308      	adds	r3, #8
 8005b16:	2101      	movs	r1, #1
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 ff1d 	bl	8006958 <RCCEx_PLL2_Config>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b24:	e00f      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b2a:	3328      	adds	r3, #40	; 0x28
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 ffc4 	bl	8006abc <RCCEx_PLL3_Config>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b3a:	e004      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b42:	e000      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10b      	bne.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b4e:	4b6c      	ldr	r3, [pc, #432]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b52:	f023 0107 	bic.w	r1, r3, #7
 8005b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b5e:	4a68      	ldr	r2, [pc, #416]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b60:	430b      	orrs	r3, r1
 8005b62:	6593      	str	r3, [r2, #88]	; 0x58
 8005b64:	e003      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b76:	f002 0320 	and.w	r3, r2, #32
 8005b7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	d055      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b9a:	d033      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ba0:	d82c      	bhi.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba6:	d02f      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bac:	d826      	bhi.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005bae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bb2:	d02b      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005bb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bb8:	d820      	bhi.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bbe:	d012      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bc4:	d81a      	bhi.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d022      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005bca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bce:	d115      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd4:	3308      	adds	r3, #8
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 febd 	bl	8006958 <RCCEx_PLL2_Config>
 8005bde:	4603      	mov	r3, r0
 8005be0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005be4:	e015      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bea:	3328      	adds	r3, #40	; 0x28
 8005bec:	2102      	movs	r1, #2
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 ff64 	bl	8006abc <RCCEx_PLL3_Config>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005bfa:	e00a      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c02:	e006      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c04:	bf00      	nop
 8005c06:	e004      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c08:	bf00      	nop
 8005c0a:	e002      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c0c:	bf00      	nop
 8005c0e:	e000      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10b      	bne.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c1a:	4b39      	ldr	r3, [pc, #228]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2a:	4a35      	ldr	r2, [pc, #212]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	6553      	str	r3, [r2, #84]	; 0x54
 8005c30:	e003      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005c46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c50:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4313      	orrs	r3, r2
 8005c58:	d058      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c66:	d033      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005c68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c6c:	d82c      	bhi.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c72:	d02f      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c78:	d826      	bhi.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c7e:	d02b      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005c80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c84:	d820      	bhi.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c8a:	d012      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c90:	d81a      	bhi.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d022      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c9a:	d115      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fe57 	bl	8006958 <RCCEx_PLL2_Config>
 8005caa:	4603      	mov	r3, r0
 8005cac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005cb0:	e015      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb6:	3328      	adds	r3, #40	; 0x28
 8005cb8:	2102      	movs	r1, #2
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 fefe 	bl	8006abc <RCCEx_PLL3_Config>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005cc6:	e00a      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005cce:	e006      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005cd0:	bf00      	nop
 8005cd2:	e004      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005cd4:	bf00      	nop
 8005cd6:	e002      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005cd8:	bf00      	nop
 8005cda:	e000      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10e      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ce6:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cea:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cf6:	4a02      	ldr	r2, [pc, #8]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8005cfc:	e006      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005cfe:	bf00      	nop
 8005d00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005d18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d22:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005d26:	460b      	mov	r3, r1
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	d055      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005d38:	d033      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005d3a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005d3e:	d82c      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d44:	d02f      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d4a:	d826      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005d50:	d02b      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005d52:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005d56:	d820      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d5c:	d012      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005d5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d62:	d81a      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d022      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d6c:	d115      	bne.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d72:	3308      	adds	r3, #8
 8005d74:	2100      	movs	r1, #0
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fdee 	bl	8006958 <RCCEx_PLL2_Config>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d82:	e015      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d88:	3328      	adds	r3, #40	; 0x28
 8005d8a:	2102      	movs	r1, #2
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 fe95 	bl	8006abc <RCCEx_PLL3_Config>
 8005d92:	4603      	mov	r3, r0
 8005d94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d98:	e00a      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005da0:	e006      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005da2:	bf00      	nop
 8005da4:	e004      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005da6:	bf00      	nop
 8005da8:	e002      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005daa:	bf00      	nop
 8005dac:	e000      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005db0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10b      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005db8:	4ba1      	ldr	r3, [pc, #644]	; (8006040 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dbc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005dc8:	4a9d      	ldr	r2, [pc, #628]	; (8006040 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dca:	430b      	orrs	r3, r1
 8005dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8005dce:	e003      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	f002 0308 	and.w	r3, r2, #8
 8005de4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005de8:	2300      	movs	r3, #0
 8005dea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005dee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005df2:	460b      	mov	r3, r1
 8005df4:	4313      	orrs	r3, r2
 8005df6:	d01e      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e04:	d10c      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e0a:	3328      	adds	r3, #40	; 0x28
 8005e0c:	2102      	movs	r1, #2
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fe54 	bl	8006abc <RCCEx_PLL3_Config>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005e20:	4b87      	ldr	r3, [pc, #540]	; (8006040 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e30:	4a83      	ldr	r2, [pc, #524]	; (8006040 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e32:	430b      	orrs	r3, r1
 8005e34:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	f002 0310 	and.w	r3, r2, #16
 8005e42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e46:	2300      	movs	r3, #0
 8005e48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e4c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005e50:	460b      	mov	r3, r1
 8005e52:	4313      	orrs	r3, r2
 8005e54:	d01e      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e62:	d10c      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e68:	3328      	adds	r3, #40	; 0x28
 8005e6a:	2102      	movs	r1, #2
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 fe25 	bl	8006abc <RCCEx_PLL3_Config>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e7e:	4b70      	ldr	r3, [pc, #448]	; (8006040 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e8e:	4a6c      	ldr	r2, [pc, #432]	; (8006040 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e90:	430b      	orrs	r3, r1
 8005e92:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005ea0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005eaa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	d03e      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ebc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ec0:	d022      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005ec2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ec6:	d81b      	bhi.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed0:	d00b      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005ed2:	e015      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ed8:	3308      	adds	r3, #8
 8005eda:	2100      	movs	r1, #0
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 fd3b 	bl	8006958 <RCCEx_PLL2_Config>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005ee8:	e00f      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eee:	3328      	adds	r3, #40	; 0x28
 8005ef0:	2102      	movs	r1, #2
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 fde2 	bl	8006abc <RCCEx_PLL3_Config>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005efe:	e004      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f06:	e000      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10b      	bne.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f12:	4b4b      	ldr	r3, [pc, #300]	; (8006040 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f16:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f22:	4a47      	ldr	r2, [pc, #284]	; (8006040 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f24:	430b      	orrs	r3, r1
 8005f26:	6593      	str	r3, [r2, #88]	; 0x58
 8005f28:	e003      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005f3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f40:	2300      	movs	r3, #0
 8005f42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f44:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	d03b      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f5a:	d01f      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005f5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f60:	d818      	bhi.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f66:	d003      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005f68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f6c:	d007      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005f6e:	e011      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f70:	4b33      	ldr	r3, [pc, #204]	; (8006040 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	4a32      	ldr	r2, [pc, #200]	; (8006040 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f7c:	e00f      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f82:	3328      	adds	r3, #40	; 0x28
 8005f84:	2101      	movs	r1, #1
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fd98 	bl	8006abc <RCCEx_PLL3_Config>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f92:	e004      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f9a:	e000      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10b      	bne.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fa6:	4b26      	ldr	r3, [pc, #152]	; (8006040 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005faa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb6:	4a22      	ldr	r2, [pc, #136]	; (8006040 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	6553      	str	r3, [r2, #84]	; 0x54
 8005fbc:	e003      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fce:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005fd2:	673b      	str	r3, [r7, #112]	; 0x70
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	677b      	str	r3, [r7, #116]	; 0x74
 8005fd8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005fdc:	460b      	mov	r3, r1
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	d034      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff0:	d007      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005ff2:	e011      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ff4:	4b12      	ldr	r3, [pc, #72]	; (8006040 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	4a11      	ldr	r2, [pc, #68]	; (8006040 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ffe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006000:	e00e      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006006:	3308      	adds	r3, #8
 8006008:	2102      	movs	r1, #2
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fca4 	bl	8006958 <RCCEx_PLL2_Config>
 8006010:	4603      	mov	r3, r0
 8006012:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006016:	e003      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800601e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006020:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10d      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006028:	4b05      	ldr	r3, [pc, #20]	; (8006040 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800602a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800602c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006036:	4a02      	ldr	r2, [pc, #8]	; (8006040 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006038:	430b      	orrs	r3, r1
 800603a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800603c:	e006      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800603e:	bf00      	nop
 8006040:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006044:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006048:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800604c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006054:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006058:	66bb      	str	r3, [r7, #104]	; 0x68
 800605a:	2300      	movs	r3, #0
 800605c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800605e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006062:	460b      	mov	r3, r1
 8006064:	4313      	orrs	r3, r2
 8006066:	d00c      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800606c:	3328      	adds	r3, #40	; 0x28
 800606e:	2102      	movs	r1, #2
 8006070:	4618      	mov	r0, r3
 8006072:	f000 fd23 	bl	8006abc <RCCEx_PLL3_Config>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800608e:	663b      	str	r3, [r7, #96]	; 0x60
 8006090:	2300      	movs	r3, #0
 8006092:	667b      	str	r3, [r7, #100]	; 0x64
 8006094:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006098:	460b      	mov	r3, r1
 800609a:	4313      	orrs	r3, r2
 800609c:	d038      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800609e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060aa:	d018      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80060ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060b0:	d811      	bhi.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80060b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b6:	d014      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80060b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060bc:	d80b      	bhi.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d011      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80060c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060c6:	d106      	bne.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060c8:	4bc3      	ldr	r3, [pc, #780]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060cc:	4ac2      	ldr	r2, [pc, #776]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80060d4:	e008      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060dc:	e004      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80060de:	bf00      	nop
 80060e0:	e002      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80060e2:	bf00      	nop
 80060e4:	e000      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80060e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10b      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060f0:	4bb9      	ldr	r3, [pc, #740]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006100:	4ab5      	ldr	r2, [pc, #724]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006102:	430b      	orrs	r3, r1
 8006104:	6553      	str	r3, [r2, #84]	; 0x54
 8006106:	e003      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006108:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800610c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800611c:	65bb      	str	r3, [r7, #88]	; 0x58
 800611e:	2300      	movs	r3, #0
 8006120:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006122:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006126:	460b      	mov	r3, r1
 8006128:	4313      	orrs	r3, r2
 800612a:	d009      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800612c:	4baa      	ldr	r3, [pc, #680]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800612e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006130:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800613a:	4aa7      	ldr	r2, [pc, #668]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800613c:	430b      	orrs	r3, r1
 800613e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800614c:	653b      	str	r3, [r7, #80]	; 0x50
 800614e:	2300      	movs	r3, #0
 8006150:	657b      	str	r3, [r7, #84]	; 0x54
 8006152:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006156:	460b      	mov	r3, r1
 8006158:	4313      	orrs	r3, r2
 800615a:	d00a      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800615c:	4b9e      	ldr	r3, [pc, #632]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006168:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800616c:	4a9a      	ldr	r2, [pc, #616]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800616e:	430b      	orrs	r3, r1
 8006170:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800617e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006180:	2300      	movs	r3, #0
 8006182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006184:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006188:	460b      	mov	r3, r1
 800618a:	4313      	orrs	r3, r2
 800618c:	d009      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800618e:	4b92      	ldr	r3, [pc, #584]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006192:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800619c:	4a8e      	ldr	r2, [pc, #568]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800619e:	430b      	orrs	r3, r1
 80061a0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80061a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80061ae:	643b      	str	r3, [r7, #64]	; 0x40
 80061b0:	2300      	movs	r3, #0
 80061b2:	647b      	str	r3, [r7, #68]	; 0x44
 80061b4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80061b8:	460b      	mov	r3, r1
 80061ba:	4313      	orrs	r3, r2
 80061bc:	d00e      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061be:	4b86      	ldr	r3, [pc, #536]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	4a85      	ldr	r2, [pc, #532]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061c8:	6113      	str	r3, [r2, #16]
 80061ca:	4b83      	ldr	r3, [pc, #524]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061cc:	6919      	ldr	r1, [r3, #16]
 80061ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80061d6:	4a80      	ldr	r2, [pc, #512]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061d8:	430b      	orrs	r3, r1
 80061da:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80061dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80061e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80061ea:	2300      	movs	r3, #0
 80061ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061ee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80061f2:	460b      	mov	r3, r1
 80061f4:	4313      	orrs	r3, r2
 80061f6:	d009      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80061f8:	4b77      	ldr	r3, [pc, #476]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061fc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006206:	4a74      	ldr	r2, [pc, #464]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006208:	430b      	orrs	r3, r1
 800620a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800620c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006218:	633b      	str	r3, [r7, #48]	; 0x30
 800621a:	2300      	movs	r3, #0
 800621c:	637b      	str	r3, [r7, #52]	; 0x34
 800621e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006222:	460b      	mov	r3, r1
 8006224:	4313      	orrs	r3, r2
 8006226:	d00a      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006228:	4b6b      	ldr	r3, [pc, #428]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800622a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006238:	4a67      	ldr	r2, [pc, #412]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800623a:	430b      	orrs	r3, r1
 800623c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800623e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	2100      	movs	r1, #0
 8006248:	62b9      	str	r1, [r7, #40]	; 0x28
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006250:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006254:	460b      	mov	r3, r1
 8006256:	4313      	orrs	r3, r2
 8006258:	d011      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800625a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800625e:	3308      	adds	r3, #8
 8006260:	2100      	movs	r1, #0
 8006262:	4618      	mov	r0, r3
 8006264:	f000 fb78 	bl	8006958 <RCCEx_PLL2_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800626e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006276:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800627a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800627e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	2100      	movs	r1, #0
 8006288:	6239      	str	r1, [r7, #32]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
 8006290:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006294:	460b      	mov	r3, r1
 8006296:	4313      	orrs	r3, r2
 8006298:	d011      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800629a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800629e:	3308      	adds	r3, #8
 80062a0:	2101      	movs	r1, #1
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 fb58 	bl	8006958 <RCCEx_PLL2_Config>
 80062a8:	4603      	mov	r3, r0
 80062aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80062ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80062be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c6:	2100      	movs	r1, #0
 80062c8:	61b9      	str	r1, [r7, #24]
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	61fb      	str	r3, [r7, #28]
 80062d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80062d4:	460b      	mov	r3, r1
 80062d6:	4313      	orrs	r3, r2
 80062d8:	d011      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062de:	3308      	adds	r3, #8
 80062e0:	2102      	movs	r1, #2
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fb38 	bl	8006958 <RCCEx_PLL2_Config>
 80062e8:	4603      	mov	r3, r0
 80062ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80062ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80062fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	2100      	movs	r1, #0
 8006308:	6139      	str	r1, [r7, #16]
 800630a:	f003 0308 	and.w	r3, r3, #8
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006314:	460b      	mov	r3, r1
 8006316:	4313      	orrs	r3, r2
 8006318:	d011      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800631e:	3328      	adds	r3, #40	; 0x28
 8006320:	2100      	movs	r1, #0
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fbca 	bl	8006abc <RCCEx_PLL3_Config>
 8006328:	4603      	mov	r3, r0
 800632a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800632e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006336:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800633a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800633e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	2100      	movs	r1, #0
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	f003 0310 	and.w	r3, r3, #16
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006354:	460b      	mov	r3, r1
 8006356:	4313      	orrs	r3, r2
 8006358:	d011      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800635a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800635e:	3328      	adds	r3, #40	; 0x28
 8006360:	2101      	movs	r1, #1
 8006362:	4618      	mov	r0, r3
 8006364:	f000 fbaa 	bl	8006abc <RCCEx_PLL3_Config>
 8006368:	4603      	mov	r3, r0
 800636a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800636e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006376:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800637a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800637e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006386:	2100      	movs	r1, #0
 8006388:	6039      	str	r1, [r7, #0]
 800638a:	f003 0320 	and.w	r3, r3, #32
 800638e:	607b      	str	r3, [r7, #4]
 8006390:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006394:	460b      	mov	r3, r1
 8006396:	4313      	orrs	r3, r2
 8006398:	d011      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800639a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800639e:	3328      	adds	r3, #40	; 0x28
 80063a0:	2102      	movs	r1, #2
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fb8a 	bl	8006abc <RCCEx_PLL3_Config>
 80063a8:	4603      	mov	r3, r0
 80063aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80063ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80063be:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	e000      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80063d2:	46bd      	mov	sp, r7
 80063d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063d8:	58024400 	.word	0x58024400

080063dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80063e0:	f7fe fd96 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 80063e4:	4602      	mov	r2, r0
 80063e6:	4b06      	ldr	r3, [pc, #24]	; (8006400 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	091b      	lsrs	r3, r3, #4
 80063ec:	f003 0307 	and.w	r3, r3, #7
 80063f0:	4904      	ldr	r1, [pc, #16]	; (8006404 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80063f2:	5ccb      	ldrb	r3, [r1, r3]
 80063f4:	f003 031f 	and.w	r3, r3, #31
 80063f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	58024400 	.word	0x58024400
 8006404:	08009930 	.word	0x08009930

08006408 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006408:	b480      	push	{r7}
 800640a:	b089      	sub	sp, #36	; 0x24
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006410:	4ba1      	ldr	r3, [pc, #644]	; (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006414:	f003 0303 	and.w	r3, r3, #3
 8006418:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800641a:	4b9f      	ldr	r3, [pc, #636]	; (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641e:	0b1b      	lsrs	r3, r3, #12
 8006420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006424:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006426:	4b9c      	ldr	r3, [pc, #624]	; (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642a:	091b      	lsrs	r3, r3, #4
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006432:	4b99      	ldr	r3, [pc, #612]	; (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006436:	08db      	lsrs	r3, r3, #3
 8006438:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	fb02 f303 	mul.w	r3, r2, r3
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800644a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 8111 	beq.w	8006678 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	2b02      	cmp	r3, #2
 800645a:	f000 8083 	beq.w	8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b02      	cmp	r3, #2
 8006462:	f200 80a1 	bhi.w	80065a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d056      	beq.n	8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006472:	e099      	b.n	80065a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006474:	4b88      	ldr	r3, [pc, #544]	; (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0320 	and.w	r3, r3, #32
 800647c:	2b00      	cmp	r3, #0
 800647e:	d02d      	beq.n	80064dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006480:	4b85      	ldr	r3, [pc, #532]	; (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	08db      	lsrs	r3, r3, #3
 8006486:	f003 0303 	and.w	r3, r3, #3
 800648a:	4a84      	ldr	r2, [pc, #528]	; (800669c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800648c:	fa22 f303 	lsr.w	r3, r2, r3
 8006490:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	ee07 3a90 	vmov	s15, r3
 8006498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064aa:	4b7b      	ldr	r3, [pc, #492]	; (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80064be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80066a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80064da:	e087      	b.n	80065ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	ee07 3a90 	vmov	s15, r3
 80064e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80064ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ee:	4b6a      	ldr	r3, [pc, #424]	; (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f6:	ee07 3a90 	vmov	s15, r3
 80064fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006502:	eddf 5a67 	vldr	s11, [pc, #412]	; 80066a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800650a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800650e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800651a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800651e:	e065      	b.n	80065ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	ee07 3a90 	vmov	s15, r3
 8006526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800652a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80066a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800652e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006532:	4b59      	ldr	r3, [pc, #356]	; (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006542:	ed97 6a03 	vldr	s12, [r7, #12]
 8006546:	eddf 5a56 	vldr	s11, [pc, #344]	; 80066a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800654a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800654e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800655a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800655e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006562:	e043      	b.n	80065ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	ee07 3a90 	vmov	s15, r3
 800656a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80066ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006576:	4b48      	ldr	r3, [pc, #288]	; (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800657e:	ee07 3a90 	vmov	s15, r3
 8006582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006586:	ed97 6a03 	vldr	s12, [r7, #12]
 800658a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80066a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800658e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800659a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800659e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065a6:	e021      	b.n	80065ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	ee07 3a90 	vmov	s15, r3
 80065ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80066a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80065b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ba:	4b37      	ldr	r3, [pc, #220]	; (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80066a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80065d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80065ec:	4b2a      	ldr	r3, [pc, #168]	; (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	0a5b      	lsrs	r3, r3, #9
 80065f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065f6:	ee07 3a90 	vmov	s15, r3
 80065fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006602:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006606:	edd7 6a07 	vldr	s13, [r7, #28]
 800660a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800660e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006612:	ee17 2a90 	vmov	r2, s15
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800661a:	4b1f      	ldr	r3, [pc, #124]	; (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	0c1b      	lsrs	r3, r3, #16
 8006620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006624:	ee07 3a90 	vmov	s15, r3
 8006628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800662c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006630:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006634:	edd7 6a07 	vldr	s13, [r7, #28]
 8006638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800663c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006640:	ee17 2a90 	vmov	r2, s15
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006648:	4b13      	ldr	r3, [pc, #76]	; (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	0e1b      	lsrs	r3, r3, #24
 800664e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006652:	ee07 3a90 	vmov	s15, r3
 8006656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800665a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800665e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006662:	edd7 6a07 	vldr	s13, [r7, #28]
 8006666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800666a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800666e:	ee17 2a90 	vmov	r2, s15
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006676:	e008      	b.n	800668a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	609a      	str	r2, [r3, #8]
}
 800668a:	bf00      	nop
 800668c:	3724      	adds	r7, #36	; 0x24
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	58024400 	.word	0x58024400
 800669c:	03d09000 	.word	0x03d09000
 80066a0:	46000000 	.word	0x46000000
 80066a4:	4c742400 	.word	0x4c742400
 80066a8:	4a742400 	.word	0x4a742400
 80066ac:	4af42400 	.word	0x4af42400

080066b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b089      	sub	sp, #36	; 0x24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066b8:	4ba1      	ldr	r3, [pc, #644]	; (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066bc:	f003 0303 	and.w	r3, r3, #3
 80066c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80066c2:	4b9f      	ldr	r3, [pc, #636]	; (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c6:	0d1b      	lsrs	r3, r3, #20
 80066c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80066ce:	4b9c      	ldr	r3, [pc, #624]	; (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d2:	0a1b      	lsrs	r3, r3, #8
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80066da:	4b99      	ldr	r3, [pc, #612]	; (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066de:	08db      	lsrs	r3, r3, #3
 80066e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	fb02 f303 	mul.w	r3, r2, r3
 80066ea:	ee07 3a90 	vmov	s15, r3
 80066ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 8111 	beq.w	8006920 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	2b02      	cmp	r3, #2
 8006702:	f000 8083 	beq.w	800680c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	2b02      	cmp	r3, #2
 800670a:	f200 80a1 	bhi.w	8006850 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d056      	beq.n	80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800671a:	e099      	b.n	8006850 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800671c:	4b88      	ldr	r3, [pc, #544]	; (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0320 	and.w	r3, r3, #32
 8006724:	2b00      	cmp	r3, #0
 8006726:	d02d      	beq.n	8006784 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006728:	4b85      	ldr	r3, [pc, #532]	; (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	08db      	lsrs	r3, r3, #3
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	4a84      	ldr	r2, [pc, #528]	; (8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006734:	fa22 f303 	lsr.w	r3, r2, r3
 8006738:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	ee07 3a90 	vmov	s15, r3
 8006740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	ee07 3a90 	vmov	s15, r3
 800674a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006752:	4b7b      	ldr	r3, [pc, #492]	; (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800675a:	ee07 3a90 	vmov	s15, r3
 800675e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006762:	ed97 6a03 	vldr	s12, [r7, #12]
 8006766:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800676a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800676e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800677a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800677e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006782:	e087      	b.n	8006894 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	ee07 3a90 	vmov	s15, r3
 800678a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800694c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006796:	4b6a      	ldr	r3, [pc, #424]	; (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679e:	ee07 3a90 	vmov	s15, r3
 80067a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80067aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067c6:	e065      	b.n	8006894 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	ee07 3a90 	vmov	s15, r3
 80067ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80067d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067da:	4b59      	ldr	r3, [pc, #356]	; (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800680a:	e043      	b.n	8006894 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	ee07 3a90 	vmov	s15, r3
 8006812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006816:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006954 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800681a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800681e:	4b48      	ldr	r3, [pc, #288]	; (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006826:	ee07 3a90 	vmov	s15, r3
 800682a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800682e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006832:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800683a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800683e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800684e:	e021      	b.n	8006894 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	ee07 3a90 	vmov	s15, r3
 8006856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800685e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006862:	4b37      	ldr	r3, [pc, #220]	; (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686a:	ee07 3a90 	vmov	s15, r3
 800686e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006872:	ed97 6a03 	vldr	s12, [r7, #12]
 8006876:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800687a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800687e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800688a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800688e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006892:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006894:	4b2a      	ldr	r3, [pc, #168]	; (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006898:	0a5b      	lsrs	r3, r3, #9
 800689a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800689e:	ee07 3a90 	vmov	s15, r3
 80068a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80068b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068ba:	ee17 2a90 	vmov	r2, s15
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80068c2:	4b1f      	ldr	r3, [pc, #124]	; (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	0c1b      	lsrs	r3, r3, #16
 80068c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068cc:	ee07 3a90 	vmov	s15, r3
 80068d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80068e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068e8:	ee17 2a90 	vmov	r2, s15
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80068f0:	4b13      	ldr	r3, [pc, #76]	; (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f4:	0e1b      	lsrs	r3, r3, #24
 80068f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068fa:	ee07 3a90 	vmov	s15, r3
 80068fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006906:	ee37 7a87 	vadd.f32	s14, s15, s14
 800690a:	edd7 6a07 	vldr	s13, [r7, #28]
 800690e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006916:	ee17 2a90 	vmov	r2, s15
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800691e:	e008      	b.n	8006932 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	609a      	str	r2, [r3, #8]
}
 8006932:	bf00      	nop
 8006934:	3724      	adds	r7, #36	; 0x24
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	58024400 	.word	0x58024400
 8006944:	03d09000 	.word	0x03d09000
 8006948:	46000000 	.word	0x46000000
 800694c:	4c742400 	.word	0x4c742400
 8006950:	4a742400 	.word	0x4a742400
 8006954:	4af42400 	.word	0x4af42400

08006958 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006966:	4b53      	ldr	r3, [pc, #332]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 8006968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	2b03      	cmp	r3, #3
 8006970:	d101      	bne.n	8006976 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e099      	b.n	8006aaa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006976:	4b4f      	ldr	r3, [pc, #316]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a4e      	ldr	r2, [pc, #312]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 800697c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006982:	f7fa fd85 	bl	8001490 <HAL_GetTick>
 8006986:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006988:	e008      	b.n	800699c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800698a:	f7fa fd81 	bl	8001490 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	2b02      	cmp	r3, #2
 8006996:	d901      	bls.n	800699c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e086      	b.n	8006aaa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800699c:	4b45      	ldr	r3, [pc, #276]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1f0      	bne.n	800698a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80069a8:	4b42      	ldr	r3, [pc, #264]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 80069aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	031b      	lsls	r3, r3, #12
 80069b6:	493f      	ldr	r1, [pc, #252]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	628b      	str	r3, [r1, #40]	; 0x28
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	3b01      	subs	r3, #1
 80069c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	025b      	lsls	r3, r3, #9
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	431a      	orrs	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	041b      	lsls	r3, r3, #16
 80069da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80069de:	431a      	orrs	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	061b      	lsls	r3, r3, #24
 80069e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80069ec:	4931      	ldr	r1, [pc, #196]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80069f2:	4b30      	ldr	r3, [pc, #192]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 80069f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	492d      	ldr	r1, [pc, #180]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006a04:	4b2b      	ldr	r3, [pc, #172]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 8006a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a08:	f023 0220 	bic.w	r2, r3, #32
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	4928      	ldr	r1, [pc, #160]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006a16:	4b27      	ldr	r3, [pc, #156]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 8006a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1a:	4a26      	ldr	r2, [pc, #152]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 8006a1c:	f023 0310 	bic.w	r3, r3, #16
 8006a20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a22:	4b24      	ldr	r3, [pc, #144]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 8006a24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a26:	4b24      	ldr	r3, [pc, #144]	; (8006ab8 <RCCEx_PLL2_Config+0x160>)
 8006a28:	4013      	ands	r3, r2
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	69d2      	ldr	r2, [r2, #28]
 8006a2e:	00d2      	lsls	r2, r2, #3
 8006a30:	4920      	ldr	r1, [pc, #128]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006a36:	4b1f      	ldr	r3, [pc, #124]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 8006a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3a:	4a1e      	ldr	r2, [pc, #120]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 8006a3c:	f043 0310 	orr.w	r3, r3, #16
 8006a40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d106      	bne.n	8006a56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006a48:	4b1a      	ldr	r3, [pc, #104]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 8006a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4c:	4a19      	ldr	r2, [pc, #100]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 8006a4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a54:	e00f      	b.n	8006a76 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d106      	bne.n	8006a6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006a5c:	4b15      	ldr	r3, [pc, #84]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 8006a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a60:	4a14      	ldr	r2, [pc, #80]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 8006a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a68:	e005      	b.n	8006a76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a6a:	4b12      	ldr	r3, [pc, #72]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 8006a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6e:	4a11      	ldr	r2, [pc, #68]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 8006a70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a76:	4b0f      	ldr	r3, [pc, #60]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a0e      	ldr	r2, [pc, #56]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 8006a7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a82:	f7fa fd05 	bl	8001490 <HAL_GetTick>
 8006a86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a88:	e008      	b.n	8006a9c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a8a:	f7fa fd01 	bl	8001490 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d901      	bls.n	8006a9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e006      	b.n	8006aaa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a9c:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <RCCEx_PLL2_Config+0x15c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d0f0      	beq.n	8006a8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	58024400 	.word	0x58024400
 8006ab8:	ffff0007 	.word	0xffff0007

08006abc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006aca:	4b53      	ldr	r3, [pc, #332]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ace:	f003 0303 	and.w	r3, r3, #3
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	d101      	bne.n	8006ada <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e099      	b.n	8006c0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006ada:	4b4f      	ldr	r3, [pc, #316]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a4e      	ldr	r2, [pc, #312]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ae4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ae6:	f7fa fcd3 	bl	8001490 <HAL_GetTick>
 8006aea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006aec:	e008      	b.n	8006b00 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006aee:	f7fa fccf 	bl	8001490 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d901      	bls.n	8006b00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e086      	b.n	8006c0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b00:	4b45      	ldr	r3, [pc, #276]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1f0      	bne.n	8006aee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006b0c:	4b42      	ldr	r3, [pc, #264]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b10:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	051b      	lsls	r3, r3, #20
 8006b1a:	493f      	ldr	r1, [pc, #252]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	628b      	str	r3, [r1, #40]	; 0x28
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	3b01      	subs	r3, #1
 8006b26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	025b      	lsls	r3, r3, #9
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	431a      	orrs	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	041b      	lsls	r3, r3, #16
 8006b3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b42:	431a      	orrs	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	061b      	lsls	r3, r3, #24
 8006b4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b50:	4931      	ldr	r1, [pc, #196]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006b56:	4b30      	ldr	r3, [pc, #192]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	492d      	ldr	r1, [pc, #180]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006b64:	4313      	orrs	r3, r2
 8006b66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006b68:	4b2b      	ldr	r3, [pc, #172]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	4928      	ldr	r1, [pc, #160]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b7a:	4b27      	ldr	r3, [pc, #156]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7e:	4a26      	ldr	r2, [pc, #152]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b86:	4b24      	ldr	r3, [pc, #144]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b8a:	4b24      	ldr	r3, [pc, #144]	; (8006c1c <RCCEx_PLL3_Config+0x160>)
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	69d2      	ldr	r2, [r2, #28]
 8006b92:	00d2      	lsls	r2, r2, #3
 8006b94:	4920      	ldr	r1, [pc, #128]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006b9a:	4b1f      	ldr	r3, [pc, #124]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9e:	4a1e      	ldr	r2, [pc, #120]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ba4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d106      	bne.n	8006bba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006bac:	4b1a      	ldr	r3, [pc, #104]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb0:	4a19      	ldr	r2, [pc, #100]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006bb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006bb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006bb8:	e00f      	b.n	8006bda <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d106      	bne.n	8006bce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006bc0:	4b15      	ldr	r3, [pc, #84]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	4a14      	ldr	r2, [pc, #80]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006bc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006bca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006bcc:	e005      	b.n	8006bda <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006bce:	4b12      	ldr	r3, [pc, #72]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd2:	4a11      	ldr	r2, [pc, #68]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006bd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006bda:	4b0f      	ldr	r3, [pc, #60]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a0e      	ldr	r2, [pc, #56]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006be6:	f7fa fc53 	bl	8001490 <HAL_GetTick>
 8006bea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bec:	e008      	b.n	8006c00 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006bee:	f7fa fc4f 	bl	8001490 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d901      	bls.n	8006c00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e006      	b.n	8006c0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c00:	4b05      	ldr	r3, [pc, #20]	; (8006c18 <RCCEx_PLL3_Config+0x15c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d0f0      	beq.n	8006bee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	58024400 	.word	0x58024400
 8006c1c:	ffff0007 	.word	0xffff0007

08006c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e049      	b.n	8006cc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d106      	bne.n	8006c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fa f9cc 	bl	8000fe4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4610      	mov	r0, r2
 8006c60:	f000 fd5e 	bl	8007720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d001      	beq.n	8006ce8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e04c      	b.n	8006d82 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a26      	ldr	r2, [pc, #152]	; (8006d90 <HAL_TIM_Base_Start+0xc0>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d022      	beq.n	8006d40 <HAL_TIM_Base_Start+0x70>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d02:	d01d      	beq.n	8006d40 <HAL_TIM_Base_Start+0x70>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a22      	ldr	r2, [pc, #136]	; (8006d94 <HAL_TIM_Base_Start+0xc4>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d018      	beq.n	8006d40 <HAL_TIM_Base_Start+0x70>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a21      	ldr	r2, [pc, #132]	; (8006d98 <HAL_TIM_Base_Start+0xc8>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d013      	beq.n	8006d40 <HAL_TIM_Base_Start+0x70>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a1f      	ldr	r2, [pc, #124]	; (8006d9c <HAL_TIM_Base_Start+0xcc>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00e      	beq.n	8006d40 <HAL_TIM_Base_Start+0x70>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a1e      	ldr	r2, [pc, #120]	; (8006da0 <HAL_TIM_Base_Start+0xd0>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d009      	beq.n	8006d40 <HAL_TIM_Base_Start+0x70>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a1c      	ldr	r2, [pc, #112]	; (8006da4 <HAL_TIM_Base_Start+0xd4>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d004      	beq.n	8006d40 <HAL_TIM_Base_Start+0x70>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a1b      	ldr	r2, [pc, #108]	; (8006da8 <HAL_TIM_Base_Start+0xd8>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d115      	bne.n	8006d6c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689a      	ldr	r2, [r3, #8]
 8006d46:	4b19      	ldr	r3, [pc, #100]	; (8006dac <HAL_TIM_Base_Start+0xdc>)
 8006d48:	4013      	ands	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b06      	cmp	r3, #6
 8006d50:	d015      	beq.n	8006d7e <HAL_TIM_Base_Start+0xae>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d58:	d011      	beq.n	8006d7e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f042 0201 	orr.w	r2, r2, #1
 8006d68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d6a:	e008      	b.n	8006d7e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0201 	orr.w	r2, r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	e000      	b.n	8006d80 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	40010000 	.word	0x40010000
 8006d94:	40000400 	.word	0x40000400
 8006d98:	40000800 	.word	0x40000800
 8006d9c:	40000c00 	.word	0x40000c00
 8006da0:	40010400 	.word	0x40010400
 8006da4:	40001800 	.word	0x40001800
 8006da8:	40014000 	.word	0x40014000
 8006dac:	00010007 	.word	0x00010007

08006db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d001      	beq.n	8006dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e054      	b.n	8006e72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f042 0201 	orr.w	r2, r2, #1
 8006dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a26      	ldr	r2, [pc, #152]	; (8006e80 <HAL_TIM_Base_Start_IT+0xd0>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d022      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x80>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df2:	d01d      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x80>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a22      	ldr	r2, [pc, #136]	; (8006e84 <HAL_TIM_Base_Start_IT+0xd4>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d018      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x80>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a21      	ldr	r2, [pc, #132]	; (8006e88 <HAL_TIM_Base_Start_IT+0xd8>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d013      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x80>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a1f      	ldr	r2, [pc, #124]	; (8006e8c <HAL_TIM_Base_Start_IT+0xdc>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d00e      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x80>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a1e      	ldr	r2, [pc, #120]	; (8006e90 <HAL_TIM_Base_Start_IT+0xe0>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d009      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x80>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a1c      	ldr	r2, [pc, #112]	; (8006e94 <HAL_TIM_Base_Start_IT+0xe4>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d004      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x80>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a1b      	ldr	r2, [pc, #108]	; (8006e98 <HAL_TIM_Base_Start_IT+0xe8>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d115      	bne.n	8006e5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689a      	ldr	r2, [r3, #8]
 8006e36:	4b19      	ldr	r3, [pc, #100]	; (8006e9c <HAL_TIM_Base_Start_IT+0xec>)
 8006e38:	4013      	ands	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b06      	cmp	r3, #6
 8006e40:	d015      	beq.n	8006e6e <HAL_TIM_Base_Start_IT+0xbe>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e48:	d011      	beq.n	8006e6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f042 0201 	orr.w	r2, r2, #1
 8006e58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e5a:	e008      	b.n	8006e6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0201 	orr.w	r2, r2, #1
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	e000      	b.n	8006e70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	40010000 	.word	0x40010000
 8006e84:	40000400 	.word	0x40000400
 8006e88:	40000800 	.word	0x40000800
 8006e8c:	40000c00 	.word	0x40000c00
 8006e90:	40010400 	.word	0x40010400
 8006e94:	40001800 	.word	0x40001800
 8006e98:	40014000 	.word	0x40014000
 8006e9c:	00010007 	.word	0x00010007

08006ea0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68da      	ldr	r2, [r3, #12]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f022 0201 	bic.w	r2, r2, #1
 8006eb6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6a1a      	ldr	r2, [r3, #32]
 8006ebe:	f241 1311 	movw	r3, #4369	; 0x1111
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10f      	bne.n	8006ee8 <HAL_TIM_Base_Stop_IT+0x48>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6a1a      	ldr	r2, [r3, #32]
 8006ece:	f240 4344 	movw	r3, #1092	; 0x444
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d107      	bne.n	8006ee8 <HAL_TIM_Base_Stop_IT+0x48>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 0201 	bic.w	r2, r2, #1
 8006ee6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b082      	sub	sp, #8
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d101      	bne.n	8006f10 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e049      	b.n	8006fa4 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d106      	bne.n	8006f2a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f841 	bl	8006fac <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	f000 fbef 	bl	8007720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d109      	bne.n	8006fe4 <HAL_TIM_OC_Start+0x24>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	bf14      	ite	ne
 8006fdc:	2301      	movne	r3, #1
 8006fde:	2300      	moveq	r3, #0
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	e03c      	b.n	800705e <HAL_TIM_OC_Start+0x9e>
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	2b04      	cmp	r3, #4
 8006fe8:	d109      	bne.n	8006ffe <HAL_TIM_OC_Start+0x3e>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	bf14      	ite	ne
 8006ff6:	2301      	movne	r3, #1
 8006ff8:	2300      	moveq	r3, #0
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	e02f      	b.n	800705e <HAL_TIM_OC_Start+0x9e>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b08      	cmp	r3, #8
 8007002:	d109      	bne.n	8007018 <HAL_TIM_OC_Start+0x58>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b01      	cmp	r3, #1
 800700e:	bf14      	ite	ne
 8007010:	2301      	movne	r3, #1
 8007012:	2300      	moveq	r3, #0
 8007014:	b2db      	uxtb	r3, r3
 8007016:	e022      	b.n	800705e <HAL_TIM_OC_Start+0x9e>
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2b0c      	cmp	r3, #12
 800701c:	d109      	bne.n	8007032 <HAL_TIM_OC_Start+0x72>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b01      	cmp	r3, #1
 8007028:	bf14      	ite	ne
 800702a:	2301      	movne	r3, #1
 800702c:	2300      	moveq	r3, #0
 800702e:	b2db      	uxtb	r3, r3
 8007030:	e015      	b.n	800705e <HAL_TIM_OC_Start+0x9e>
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b10      	cmp	r3, #16
 8007036:	d109      	bne.n	800704c <HAL_TIM_OC_Start+0x8c>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b01      	cmp	r3, #1
 8007042:	bf14      	ite	ne
 8007044:	2301      	movne	r3, #1
 8007046:	2300      	moveq	r3, #0
 8007048:	b2db      	uxtb	r3, r3
 800704a:	e008      	b.n	800705e <HAL_TIM_OC_Start+0x9e>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b01      	cmp	r3, #1
 8007056:	bf14      	ite	ne
 8007058:	2301      	movne	r3, #1
 800705a:	2300      	moveq	r3, #0
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e0a1      	b.n	80071aa <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d104      	bne.n	8007076 <HAL_TIM_OC_Start+0xb6>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007074:	e023      	b.n	80070be <HAL_TIM_OC_Start+0xfe>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b04      	cmp	r3, #4
 800707a:	d104      	bne.n	8007086 <HAL_TIM_OC_Start+0xc6>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2202      	movs	r2, #2
 8007080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007084:	e01b      	b.n	80070be <HAL_TIM_OC_Start+0xfe>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b08      	cmp	r3, #8
 800708a:	d104      	bne.n	8007096 <HAL_TIM_OC_Start+0xd6>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007094:	e013      	b.n	80070be <HAL_TIM_OC_Start+0xfe>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b0c      	cmp	r3, #12
 800709a:	d104      	bne.n	80070a6 <HAL_TIM_OC_Start+0xe6>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070a4:	e00b      	b.n	80070be <HAL_TIM_OC_Start+0xfe>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b10      	cmp	r3, #16
 80070aa:	d104      	bne.n	80070b6 <HAL_TIM_OC_Start+0xf6>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2202      	movs	r2, #2
 80070b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070b4:	e003      	b.n	80070be <HAL_TIM_OC_Start+0xfe>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2202      	movs	r2, #2
 80070ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2201      	movs	r2, #1
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 ff44 	bl	8007f54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a38      	ldr	r2, [pc, #224]	; (80071b4 <HAL_TIM_OC_Start+0x1f4>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d013      	beq.n	80070fe <HAL_TIM_OC_Start+0x13e>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a37      	ldr	r2, [pc, #220]	; (80071b8 <HAL_TIM_OC_Start+0x1f8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d00e      	beq.n	80070fe <HAL_TIM_OC_Start+0x13e>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a35      	ldr	r2, [pc, #212]	; (80071bc <HAL_TIM_OC_Start+0x1fc>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d009      	beq.n	80070fe <HAL_TIM_OC_Start+0x13e>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a34      	ldr	r2, [pc, #208]	; (80071c0 <HAL_TIM_OC_Start+0x200>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d004      	beq.n	80070fe <HAL_TIM_OC_Start+0x13e>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a32      	ldr	r2, [pc, #200]	; (80071c4 <HAL_TIM_OC_Start+0x204>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d101      	bne.n	8007102 <HAL_TIM_OC_Start+0x142>
 80070fe:	2301      	movs	r3, #1
 8007100:	e000      	b.n	8007104 <HAL_TIM_OC_Start+0x144>
 8007102:	2300      	movs	r3, #0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d007      	beq.n	8007118 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007116:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a25      	ldr	r2, [pc, #148]	; (80071b4 <HAL_TIM_OC_Start+0x1f4>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d022      	beq.n	8007168 <HAL_TIM_OC_Start+0x1a8>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800712a:	d01d      	beq.n	8007168 <HAL_TIM_OC_Start+0x1a8>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a25      	ldr	r2, [pc, #148]	; (80071c8 <HAL_TIM_OC_Start+0x208>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d018      	beq.n	8007168 <HAL_TIM_OC_Start+0x1a8>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a24      	ldr	r2, [pc, #144]	; (80071cc <HAL_TIM_OC_Start+0x20c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d013      	beq.n	8007168 <HAL_TIM_OC_Start+0x1a8>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a22      	ldr	r2, [pc, #136]	; (80071d0 <HAL_TIM_OC_Start+0x210>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d00e      	beq.n	8007168 <HAL_TIM_OC_Start+0x1a8>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a1a      	ldr	r2, [pc, #104]	; (80071b8 <HAL_TIM_OC_Start+0x1f8>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d009      	beq.n	8007168 <HAL_TIM_OC_Start+0x1a8>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a1e      	ldr	r2, [pc, #120]	; (80071d4 <HAL_TIM_OC_Start+0x214>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d004      	beq.n	8007168 <HAL_TIM_OC_Start+0x1a8>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a16      	ldr	r2, [pc, #88]	; (80071bc <HAL_TIM_OC_Start+0x1fc>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d115      	bne.n	8007194 <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689a      	ldr	r2, [r3, #8]
 800716e:	4b1a      	ldr	r3, [pc, #104]	; (80071d8 <HAL_TIM_OC_Start+0x218>)
 8007170:	4013      	ands	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b06      	cmp	r3, #6
 8007178:	d015      	beq.n	80071a6 <HAL_TIM_OC_Start+0x1e6>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007180:	d011      	beq.n	80071a6 <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f042 0201 	orr.w	r2, r2, #1
 8007190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007192:	e008      	b.n	80071a6 <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0201 	orr.w	r2, r2, #1
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	e000      	b.n	80071a8 <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	40010000 	.word	0x40010000
 80071b8:	40010400 	.word	0x40010400
 80071bc:	40014000 	.word	0x40014000
 80071c0:	40014400 	.word	0x40014400
 80071c4:	40014800 	.word	0x40014800
 80071c8:	40000400 	.word	0x40000400
 80071cc:	40000800 	.word	0x40000800
 80071d0:	40000c00 	.word	0x40000c00
 80071d4:	40001800 	.word	0x40001800
 80071d8:	00010007 	.word	0x00010007

080071dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d020      	beq.n	8007240 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	d01b      	beq.n	8007240 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f06f 0202 	mvn.w	r2, #2
 8007210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fa5c 	bl	80076e4 <HAL_TIM_IC_CaptureCallback>
 800722c:	e005      	b.n	800723a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fa4e 	bl	80076d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fa5f 	bl	80076f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	f003 0304 	and.w	r3, r3, #4
 8007246:	2b00      	cmp	r3, #0
 8007248:	d020      	beq.n	800728c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f003 0304 	and.w	r3, r3, #4
 8007250:	2b00      	cmp	r3, #0
 8007252:	d01b      	beq.n	800728c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f06f 0204 	mvn.w	r2, #4
 800725c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2202      	movs	r2, #2
 8007262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fa36 	bl	80076e4 <HAL_TIM_IC_CaptureCallback>
 8007278:	e005      	b.n	8007286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fa28 	bl	80076d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fa39 	bl	80076f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f003 0308 	and.w	r3, r3, #8
 8007292:	2b00      	cmp	r3, #0
 8007294:	d020      	beq.n	80072d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f003 0308 	and.w	r3, r3, #8
 800729c:	2b00      	cmp	r3, #0
 800729e:	d01b      	beq.n	80072d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f06f 0208 	mvn.w	r2, #8
 80072a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2204      	movs	r2, #4
 80072ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fa10 	bl	80076e4 <HAL_TIM_IC_CaptureCallback>
 80072c4:	e005      	b.n	80072d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fa02 	bl	80076d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fa13 	bl	80076f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	f003 0310 	and.w	r3, r3, #16
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d020      	beq.n	8007324 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f003 0310 	and.w	r3, r3, #16
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d01b      	beq.n	8007324 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f06f 0210 	mvn.w	r2, #16
 80072f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2208      	movs	r2, #8
 80072fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	69db      	ldr	r3, [r3, #28]
 8007302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f9ea 	bl	80076e4 <HAL_TIM_IC_CaptureCallback>
 8007310:	e005      	b.n	800731e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f9dc 	bl	80076d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f9ed 	bl	80076f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00c      	beq.n	8007348 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b00      	cmp	r3, #0
 8007336:	d007      	beq.n	8007348 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f06f 0201 	mvn.w	r2, #1
 8007340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7f9 fda2 	bl	8000e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800734e:	2b00      	cmp	r3, #0
 8007350:	d104      	bne.n	800735c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00c      	beq.n	8007376 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007362:	2b00      	cmp	r3, #0
 8007364:	d007      	beq.n	8007376 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800736e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fead 	bl	80080d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00c      	beq.n	800739a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007386:	2b00      	cmp	r3, #0
 8007388:	d007      	beq.n	800739a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fea5 	bl	80080e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00c      	beq.n	80073be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d007      	beq.n	80073be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f9a7 	bl	800770c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f003 0320 	and.w	r3, r3, #32
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00c      	beq.n	80073e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f003 0320 	and.w	r3, r3, #32
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d007      	beq.n	80073e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f06f 0220 	mvn.w	r2, #32
 80073da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fe6d 	bl	80080bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073e2:	bf00      	nop
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
	...

080073ec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007402:	2b01      	cmp	r3, #1
 8007404:	d101      	bne.n	800740a <HAL_TIM_OC_ConfigChannel+0x1e>
 8007406:	2302      	movs	r3, #2
 8007408:	e066      	b.n	80074d8 <HAL_TIM_OC_ConfigChannel+0xec>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b14      	cmp	r3, #20
 8007416:	d857      	bhi.n	80074c8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007418:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <HAL_TIM_OC_ConfigChannel+0x34>)
 800741a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741e:	bf00      	nop
 8007420:	08007475 	.word	0x08007475
 8007424:	080074c9 	.word	0x080074c9
 8007428:	080074c9 	.word	0x080074c9
 800742c:	080074c9 	.word	0x080074c9
 8007430:	08007483 	.word	0x08007483
 8007434:	080074c9 	.word	0x080074c9
 8007438:	080074c9 	.word	0x080074c9
 800743c:	080074c9 	.word	0x080074c9
 8007440:	08007491 	.word	0x08007491
 8007444:	080074c9 	.word	0x080074c9
 8007448:	080074c9 	.word	0x080074c9
 800744c:	080074c9 	.word	0x080074c9
 8007450:	0800749f 	.word	0x0800749f
 8007454:	080074c9 	.word	0x080074c9
 8007458:	080074c9 	.word	0x080074c9
 800745c:	080074c9 	.word	0x080074c9
 8007460:	080074ad 	.word	0x080074ad
 8007464:	080074c9 	.word	0x080074c9
 8007468:	080074c9 	.word	0x080074c9
 800746c:	080074c9 	.word	0x080074c9
 8007470:	080074bb 	.word	0x080074bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68b9      	ldr	r1, [r7, #8]
 800747a:	4618      	mov	r0, r3
 800747c:	f000 f9f6 	bl	800786c <TIM_OC1_SetConfig>
      break;
 8007480:	e025      	b.n	80074ce <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68b9      	ldr	r1, [r7, #8]
 8007488:	4618      	mov	r0, r3
 800748a:	f000 fa7f 	bl	800798c <TIM_OC2_SetConfig>
      break;
 800748e:	e01e      	b.n	80074ce <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68b9      	ldr	r1, [r7, #8]
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fb02 	bl	8007aa0 <TIM_OC3_SetConfig>
      break;
 800749c:	e017      	b.n	80074ce <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68b9      	ldr	r1, [r7, #8]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 fb83 	bl	8007bb0 <TIM_OC4_SetConfig>
      break;
 80074aa:	e010      	b.n	80074ce <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68b9      	ldr	r1, [r7, #8]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 fbe6 	bl	8007c84 <TIM_OC5_SetConfig>
      break;
 80074b8:	e009      	b.n	80074ce <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68b9      	ldr	r1, [r7, #8]
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 fc43 	bl	8007d4c <TIM_OC6_SetConfig>
      break;
 80074c6:	e002      	b.n	80074ce <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	75fb      	strb	r3, [r7, #23]
      break;
 80074cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074ea:	2300      	movs	r3, #0
 80074ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d101      	bne.n	80074fc <HAL_TIM_ConfigClockSource+0x1c>
 80074f8:	2302      	movs	r3, #2
 80074fa:	e0dc      	b.n	80076b6 <HAL_TIM_ConfigClockSource+0x1d6>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2202      	movs	r2, #2
 8007508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	4b6a      	ldr	r3, [pc, #424]	; (80076c0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007518:	4013      	ands	r3, r2
 800751a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007522:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a64      	ldr	r2, [pc, #400]	; (80076c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007532:	4293      	cmp	r3, r2
 8007534:	f000 80a9 	beq.w	800768a <HAL_TIM_ConfigClockSource+0x1aa>
 8007538:	4a62      	ldr	r2, [pc, #392]	; (80076c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800753a:	4293      	cmp	r3, r2
 800753c:	f200 80ae 	bhi.w	800769c <HAL_TIM_ConfigClockSource+0x1bc>
 8007540:	4a61      	ldr	r2, [pc, #388]	; (80076c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007542:	4293      	cmp	r3, r2
 8007544:	f000 80a1 	beq.w	800768a <HAL_TIM_ConfigClockSource+0x1aa>
 8007548:	4a5f      	ldr	r2, [pc, #380]	; (80076c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800754a:	4293      	cmp	r3, r2
 800754c:	f200 80a6 	bhi.w	800769c <HAL_TIM_ConfigClockSource+0x1bc>
 8007550:	4a5e      	ldr	r2, [pc, #376]	; (80076cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8007552:	4293      	cmp	r3, r2
 8007554:	f000 8099 	beq.w	800768a <HAL_TIM_ConfigClockSource+0x1aa>
 8007558:	4a5c      	ldr	r2, [pc, #368]	; (80076cc <HAL_TIM_ConfigClockSource+0x1ec>)
 800755a:	4293      	cmp	r3, r2
 800755c:	f200 809e 	bhi.w	800769c <HAL_TIM_ConfigClockSource+0x1bc>
 8007560:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007564:	f000 8091 	beq.w	800768a <HAL_TIM_ConfigClockSource+0x1aa>
 8007568:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800756c:	f200 8096 	bhi.w	800769c <HAL_TIM_ConfigClockSource+0x1bc>
 8007570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007574:	f000 8089 	beq.w	800768a <HAL_TIM_ConfigClockSource+0x1aa>
 8007578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800757c:	f200 808e 	bhi.w	800769c <HAL_TIM_ConfigClockSource+0x1bc>
 8007580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007584:	d03e      	beq.n	8007604 <HAL_TIM_ConfigClockSource+0x124>
 8007586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800758a:	f200 8087 	bhi.w	800769c <HAL_TIM_ConfigClockSource+0x1bc>
 800758e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007592:	f000 8086 	beq.w	80076a2 <HAL_TIM_ConfigClockSource+0x1c2>
 8007596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800759a:	d87f      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x1bc>
 800759c:	2b70      	cmp	r3, #112	; 0x70
 800759e:	d01a      	beq.n	80075d6 <HAL_TIM_ConfigClockSource+0xf6>
 80075a0:	2b70      	cmp	r3, #112	; 0x70
 80075a2:	d87b      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x1bc>
 80075a4:	2b60      	cmp	r3, #96	; 0x60
 80075a6:	d050      	beq.n	800764a <HAL_TIM_ConfigClockSource+0x16a>
 80075a8:	2b60      	cmp	r3, #96	; 0x60
 80075aa:	d877      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x1bc>
 80075ac:	2b50      	cmp	r3, #80	; 0x50
 80075ae:	d03c      	beq.n	800762a <HAL_TIM_ConfigClockSource+0x14a>
 80075b0:	2b50      	cmp	r3, #80	; 0x50
 80075b2:	d873      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x1bc>
 80075b4:	2b40      	cmp	r3, #64	; 0x40
 80075b6:	d058      	beq.n	800766a <HAL_TIM_ConfigClockSource+0x18a>
 80075b8:	2b40      	cmp	r3, #64	; 0x40
 80075ba:	d86f      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x1bc>
 80075bc:	2b30      	cmp	r3, #48	; 0x30
 80075be:	d064      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x1aa>
 80075c0:	2b30      	cmp	r3, #48	; 0x30
 80075c2:	d86b      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x1bc>
 80075c4:	2b20      	cmp	r3, #32
 80075c6:	d060      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x1aa>
 80075c8:	2b20      	cmp	r3, #32
 80075ca:	d867      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x1bc>
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d05c      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x1aa>
 80075d0:	2b10      	cmp	r3, #16
 80075d2:	d05a      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x1aa>
 80075d4:	e062      	b.n	800769c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075e6:	f000 fc95 	bl	8007f14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	609a      	str	r2, [r3, #8]
      break;
 8007602:	e04f      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007614:	f000 fc7e 	bl	8007f14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689a      	ldr	r2, [r3, #8]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007626:	609a      	str	r2, [r3, #8]
      break;
 8007628:	e03c      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007636:	461a      	mov	r2, r3
 8007638:	f000 fbee 	bl	8007e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2150      	movs	r1, #80	; 0x50
 8007642:	4618      	mov	r0, r3
 8007644:	f000 fc48 	bl	8007ed8 <TIM_ITRx_SetConfig>
      break;
 8007648:	e02c      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007656:	461a      	mov	r2, r3
 8007658:	f000 fc0d 	bl	8007e76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2160      	movs	r1, #96	; 0x60
 8007662:	4618      	mov	r0, r3
 8007664:	f000 fc38 	bl	8007ed8 <TIM_ITRx_SetConfig>
      break;
 8007668:	e01c      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007676:	461a      	mov	r2, r3
 8007678:	f000 fbce 	bl	8007e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2140      	movs	r1, #64	; 0x40
 8007682:	4618      	mov	r0, r3
 8007684:	f000 fc28 	bl	8007ed8 <TIM_ITRx_SetConfig>
      break;
 8007688:	e00c      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4619      	mov	r1, r3
 8007694:	4610      	mov	r0, r2
 8007696:	f000 fc1f 	bl	8007ed8 <TIM_ITRx_SetConfig>
      break;
 800769a:	e003      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	73fb      	strb	r3, [r7, #15]
      break;
 80076a0:	e000      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80076a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	ffceff88 	.word	0xffceff88
 80076c4:	00100040 	.word	0x00100040
 80076c8:	00100030 	.word	0x00100030
 80076cc:	00100020 	.word	0x00100020

080076d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a46      	ldr	r2, [pc, #280]	; (800784c <TIM_Base_SetConfig+0x12c>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d013      	beq.n	8007760 <TIM_Base_SetConfig+0x40>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800773e:	d00f      	beq.n	8007760 <TIM_Base_SetConfig+0x40>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a43      	ldr	r2, [pc, #268]	; (8007850 <TIM_Base_SetConfig+0x130>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d00b      	beq.n	8007760 <TIM_Base_SetConfig+0x40>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a42      	ldr	r2, [pc, #264]	; (8007854 <TIM_Base_SetConfig+0x134>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d007      	beq.n	8007760 <TIM_Base_SetConfig+0x40>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a41      	ldr	r2, [pc, #260]	; (8007858 <TIM_Base_SetConfig+0x138>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d003      	beq.n	8007760 <TIM_Base_SetConfig+0x40>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a40      	ldr	r2, [pc, #256]	; (800785c <TIM_Base_SetConfig+0x13c>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d108      	bne.n	8007772 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a35      	ldr	r2, [pc, #212]	; (800784c <TIM_Base_SetConfig+0x12c>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d01f      	beq.n	80077ba <TIM_Base_SetConfig+0x9a>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007780:	d01b      	beq.n	80077ba <TIM_Base_SetConfig+0x9a>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a32      	ldr	r2, [pc, #200]	; (8007850 <TIM_Base_SetConfig+0x130>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d017      	beq.n	80077ba <TIM_Base_SetConfig+0x9a>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a31      	ldr	r2, [pc, #196]	; (8007854 <TIM_Base_SetConfig+0x134>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d013      	beq.n	80077ba <TIM_Base_SetConfig+0x9a>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a30      	ldr	r2, [pc, #192]	; (8007858 <TIM_Base_SetConfig+0x138>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d00f      	beq.n	80077ba <TIM_Base_SetConfig+0x9a>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a2f      	ldr	r2, [pc, #188]	; (800785c <TIM_Base_SetConfig+0x13c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d00b      	beq.n	80077ba <TIM_Base_SetConfig+0x9a>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a2e      	ldr	r2, [pc, #184]	; (8007860 <TIM_Base_SetConfig+0x140>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d007      	beq.n	80077ba <TIM_Base_SetConfig+0x9a>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a2d      	ldr	r2, [pc, #180]	; (8007864 <TIM_Base_SetConfig+0x144>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d003      	beq.n	80077ba <TIM_Base_SetConfig+0x9a>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a2c      	ldr	r2, [pc, #176]	; (8007868 <TIM_Base_SetConfig+0x148>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d108      	bne.n	80077cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	689a      	ldr	r2, [r3, #8]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a16      	ldr	r2, [pc, #88]	; (800784c <TIM_Base_SetConfig+0x12c>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d00f      	beq.n	8007818 <TIM_Base_SetConfig+0xf8>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a18      	ldr	r2, [pc, #96]	; (800785c <TIM_Base_SetConfig+0x13c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d00b      	beq.n	8007818 <TIM_Base_SetConfig+0xf8>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a17      	ldr	r2, [pc, #92]	; (8007860 <TIM_Base_SetConfig+0x140>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d007      	beq.n	8007818 <TIM_Base_SetConfig+0xf8>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a16      	ldr	r2, [pc, #88]	; (8007864 <TIM_Base_SetConfig+0x144>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d003      	beq.n	8007818 <TIM_Base_SetConfig+0xf8>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a15      	ldr	r2, [pc, #84]	; (8007868 <TIM_Base_SetConfig+0x148>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d103      	bne.n	8007820 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	691a      	ldr	r2, [r3, #16]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b01      	cmp	r3, #1
 8007830:	d105      	bne.n	800783e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	f023 0201 	bic.w	r2, r3, #1
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	611a      	str	r2, [r3, #16]
  }
}
 800783e:	bf00      	nop
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	40010000 	.word	0x40010000
 8007850:	40000400 	.word	0x40000400
 8007854:	40000800 	.word	0x40000800
 8007858:	40000c00 	.word	0x40000c00
 800785c:	40010400 	.word	0x40010400
 8007860:	40014000 	.word	0x40014000
 8007864:	40014400 	.word	0x40014400
 8007868:	40014800 	.word	0x40014800

0800786c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	f023 0201 	bic.w	r2, r3, #1
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	4b37      	ldr	r3, [pc, #220]	; (8007974 <TIM_OC1_SetConfig+0x108>)
 8007898:	4013      	ands	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f023 0303 	bic.w	r3, r3, #3
 80078a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f023 0302 	bic.w	r3, r3, #2
 80078b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	4313      	orrs	r3, r2
 80078be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a2d      	ldr	r2, [pc, #180]	; (8007978 <TIM_OC1_SetConfig+0x10c>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d00f      	beq.n	80078e8 <TIM_OC1_SetConfig+0x7c>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a2c      	ldr	r2, [pc, #176]	; (800797c <TIM_OC1_SetConfig+0x110>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d00b      	beq.n	80078e8 <TIM_OC1_SetConfig+0x7c>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a2b      	ldr	r2, [pc, #172]	; (8007980 <TIM_OC1_SetConfig+0x114>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d007      	beq.n	80078e8 <TIM_OC1_SetConfig+0x7c>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a2a      	ldr	r2, [pc, #168]	; (8007984 <TIM_OC1_SetConfig+0x118>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d003      	beq.n	80078e8 <TIM_OC1_SetConfig+0x7c>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a29      	ldr	r2, [pc, #164]	; (8007988 <TIM_OC1_SetConfig+0x11c>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d10c      	bne.n	8007902 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f023 0308 	bic.w	r3, r3, #8
 80078ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f023 0304 	bic.w	r3, r3, #4
 8007900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a1c      	ldr	r2, [pc, #112]	; (8007978 <TIM_OC1_SetConfig+0x10c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00f      	beq.n	800792a <TIM_OC1_SetConfig+0xbe>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a1b      	ldr	r2, [pc, #108]	; (800797c <TIM_OC1_SetConfig+0x110>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d00b      	beq.n	800792a <TIM_OC1_SetConfig+0xbe>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a1a      	ldr	r2, [pc, #104]	; (8007980 <TIM_OC1_SetConfig+0x114>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d007      	beq.n	800792a <TIM_OC1_SetConfig+0xbe>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a19      	ldr	r2, [pc, #100]	; (8007984 <TIM_OC1_SetConfig+0x118>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d003      	beq.n	800792a <TIM_OC1_SetConfig+0xbe>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a18      	ldr	r2, [pc, #96]	; (8007988 <TIM_OC1_SetConfig+0x11c>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d111      	bne.n	800794e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	4313      	orrs	r3, r2
 8007942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	4313      	orrs	r3, r2
 800794c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	621a      	str	r2, [r3, #32]
}
 8007968:	bf00      	nop
 800796a:	371c      	adds	r7, #28
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	fffeff8f 	.word	0xfffeff8f
 8007978:	40010000 	.word	0x40010000
 800797c:	40010400 	.word	0x40010400
 8007980:	40014000 	.word	0x40014000
 8007984:	40014400 	.word	0x40014400
 8007988:	40014800 	.word	0x40014800

0800798c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800798c:	b480      	push	{r7}
 800798e:	b087      	sub	sp, #28
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a1b      	ldr	r3, [r3, #32]
 80079a0:	f023 0210 	bic.w	r2, r3, #16
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	4b34      	ldr	r3, [pc, #208]	; (8007a88 <TIM_OC2_SetConfig+0xfc>)
 80079b8:	4013      	ands	r3, r2
 80079ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	021b      	lsls	r3, r3, #8
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f023 0320 	bic.w	r3, r3, #32
 80079d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	011b      	lsls	r3, r3, #4
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a29      	ldr	r2, [pc, #164]	; (8007a8c <TIM_OC2_SetConfig+0x100>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d003      	beq.n	80079f4 <TIM_OC2_SetConfig+0x68>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a28      	ldr	r2, [pc, #160]	; (8007a90 <TIM_OC2_SetConfig+0x104>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d10d      	bne.n	8007a10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	011b      	lsls	r3, r3, #4
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a1e      	ldr	r2, [pc, #120]	; (8007a8c <TIM_OC2_SetConfig+0x100>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d00f      	beq.n	8007a38 <TIM_OC2_SetConfig+0xac>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a1d      	ldr	r2, [pc, #116]	; (8007a90 <TIM_OC2_SetConfig+0x104>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d00b      	beq.n	8007a38 <TIM_OC2_SetConfig+0xac>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a1c      	ldr	r2, [pc, #112]	; (8007a94 <TIM_OC2_SetConfig+0x108>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d007      	beq.n	8007a38 <TIM_OC2_SetConfig+0xac>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a1b      	ldr	r2, [pc, #108]	; (8007a98 <TIM_OC2_SetConfig+0x10c>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d003      	beq.n	8007a38 <TIM_OC2_SetConfig+0xac>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a1a      	ldr	r2, [pc, #104]	; (8007a9c <TIM_OC2_SetConfig+0x110>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d113      	bne.n	8007a60 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	621a      	str	r2, [r3, #32]
}
 8007a7a:	bf00      	nop
 8007a7c:	371c      	adds	r7, #28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	feff8fff 	.word	0xfeff8fff
 8007a8c:	40010000 	.word	0x40010000
 8007a90:	40010400 	.word	0x40010400
 8007a94:	40014000 	.word	0x40014000
 8007a98:	40014400 	.word	0x40014400
 8007a9c:	40014800 	.word	0x40014800

08007aa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b087      	sub	sp, #28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
 8007ab4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4b33      	ldr	r3, [pc, #204]	; (8007b98 <TIM_OC3_SetConfig+0xf8>)
 8007acc:	4013      	ands	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f023 0303 	bic.w	r3, r3, #3
 8007ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	021b      	lsls	r3, r3, #8
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a28      	ldr	r2, [pc, #160]	; (8007b9c <TIM_OC3_SetConfig+0xfc>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d003      	beq.n	8007b06 <TIM_OC3_SetConfig+0x66>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a27      	ldr	r2, [pc, #156]	; (8007ba0 <TIM_OC3_SetConfig+0x100>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d10d      	bne.n	8007b22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	021b      	lsls	r3, r3, #8
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a1d      	ldr	r2, [pc, #116]	; (8007b9c <TIM_OC3_SetConfig+0xfc>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d00f      	beq.n	8007b4a <TIM_OC3_SetConfig+0xaa>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a1c      	ldr	r2, [pc, #112]	; (8007ba0 <TIM_OC3_SetConfig+0x100>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d00b      	beq.n	8007b4a <TIM_OC3_SetConfig+0xaa>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a1b      	ldr	r2, [pc, #108]	; (8007ba4 <TIM_OC3_SetConfig+0x104>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d007      	beq.n	8007b4a <TIM_OC3_SetConfig+0xaa>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a1a      	ldr	r2, [pc, #104]	; (8007ba8 <TIM_OC3_SetConfig+0x108>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d003      	beq.n	8007b4a <TIM_OC3_SetConfig+0xaa>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a19      	ldr	r2, [pc, #100]	; (8007bac <TIM_OC3_SetConfig+0x10c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d113      	bne.n	8007b72 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	011b      	lsls	r3, r3, #4
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	621a      	str	r2, [r3, #32]
}
 8007b8c:	bf00      	nop
 8007b8e:	371c      	adds	r7, #28
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	fffeff8f 	.word	0xfffeff8f
 8007b9c:	40010000 	.word	0x40010000
 8007ba0:	40010400 	.word	0x40010400
 8007ba4:	40014000 	.word	0x40014000
 8007ba8:	40014400 	.word	0x40014400
 8007bac:	40014800 	.word	0x40014800

08007bb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b087      	sub	sp, #28
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a1b      	ldr	r3, [r3, #32]
 8007bc4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	4b24      	ldr	r3, [pc, #144]	; (8007c6c <TIM_OC4_SetConfig+0xbc>)
 8007bdc:	4013      	ands	r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	021b      	lsls	r3, r3, #8
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	031b      	lsls	r3, r3, #12
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a19      	ldr	r2, [pc, #100]	; (8007c70 <TIM_OC4_SetConfig+0xc0>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d00f      	beq.n	8007c30 <TIM_OC4_SetConfig+0x80>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a18      	ldr	r2, [pc, #96]	; (8007c74 <TIM_OC4_SetConfig+0xc4>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d00b      	beq.n	8007c30 <TIM_OC4_SetConfig+0x80>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a17      	ldr	r2, [pc, #92]	; (8007c78 <TIM_OC4_SetConfig+0xc8>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d007      	beq.n	8007c30 <TIM_OC4_SetConfig+0x80>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a16      	ldr	r2, [pc, #88]	; (8007c7c <TIM_OC4_SetConfig+0xcc>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d003      	beq.n	8007c30 <TIM_OC4_SetConfig+0x80>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a15      	ldr	r2, [pc, #84]	; (8007c80 <TIM_OC4_SetConfig+0xd0>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d109      	bne.n	8007c44 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	695b      	ldr	r3, [r3, #20]
 8007c3c:	019b      	lsls	r3, r3, #6
 8007c3e:	697a      	ldr	r2, [r7, #20]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	685a      	ldr	r2, [r3, #4]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	621a      	str	r2, [r3, #32]
}
 8007c5e:	bf00      	nop
 8007c60:	371c      	adds	r7, #28
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	feff8fff 	.word	0xfeff8fff
 8007c70:	40010000 	.word	0x40010000
 8007c74:	40010400 	.word	0x40010400
 8007c78:	40014000 	.word	0x40014000
 8007c7c:	40014400 	.word	0x40014400
 8007c80:	40014800 	.word	0x40014800

08007c84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	4b21      	ldr	r3, [pc, #132]	; (8007d34 <TIM_OC5_SetConfig+0xb0>)
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007cc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	041b      	lsls	r3, r3, #16
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a18      	ldr	r2, [pc, #96]	; (8007d38 <TIM_OC5_SetConfig+0xb4>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d00f      	beq.n	8007cfa <TIM_OC5_SetConfig+0x76>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a17      	ldr	r2, [pc, #92]	; (8007d3c <TIM_OC5_SetConfig+0xb8>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d00b      	beq.n	8007cfa <TIM_OC5_SetConfig+0x76>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a16      	ldr	r2, [pc, #88]	; (8007d40 <TIM_OC5_SetConfig+0xbc>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d007      	beq.n	8007cfa <TIM_OC5_SetConfig+0x76>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a15      	ldr	r2, [pc, #84]	; (8007d44 <TIM_OC5_SetConfig+0xc0>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d003      	beq.n	8007cfa <TIM_OC5_SetConfig+0x76>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a14      	ldr	r2, [pc, #80]	; (8007d48 <TIM_OC5_SetConfig+0xc4>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d109      	bne.n	8007d0e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	021b      	lsls	r3, r3, #8
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	621a      	str	r2, [r3, #32]
}
 8007d28:	bf00      	nop
 8007d2a:	371c      	adds	r7, #28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	fffeff8f 	.word	0xfffeff8f
 8007d38:	40010000 	.word	0x40010000
 8007d3c:	40010400 	.word	0x40010400
 8007d40:	40014000 	.word	0x40014000
 8007d44:	40014400 	.word	0x40014400
 8007d48:	40014800 	.word	0x40014800

08007d4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b087      	sub	sp, #28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a1b      	ldr	r3, [r3, #32]
 8007d60:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	4b22      	ldr	r3, [pc, #136]	; (8007e00 <TIM_OC6_SetConfig+0xb4>)
 8007d78:	4013      	ands	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	021b      	lsls	r3, r3, #8
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	051b      	lsls	r3, r3, #20
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a19      	ldr	r2, [pc, #100]	; (8007e04 <TIM_OC6_SetConfig+0xb8>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d00f      	beq.n	8007dc4 <TIM_OC6_SetConfig+0x78>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a18      	ldr	r2, [pc, #96]	; (8007e08 <TIM_OC6_SetConfig+0xbc>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d00b      	beq.n	8007dc4 <TIM_OC6_SetConfig+0x78>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a17      	ldr	r2, [pc, #92]	; (8007e0c <TIM_OC6_SetConfig+0xc0>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d007      	beq.n	8007dc4 <TIM_OC6_SetConfig+0x78>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a16      	ldr	r2, [pc, #88]	; (8007e10 <TIM_OC6_SetConfig+0xc4>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d003      	beq.n	8007dc4 <TIM_OC6_SetConfig+0x78>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a15      	ldr	r2, [pc, #84]	; (8007e14 <TIM_OC6_SetConfig+0xc8>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d109      	bne.n	8007dd8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	695b      	ldr	r3, [r3, #20]
 8007dd0:	029b      	lsls	r3, r3, #10
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	621a      	str	r2, [r3, #32]
}
 8007df2:	bf00      	nop
 8007df4:	371c      	adds	r7, #28
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	feff8fff 	.word	0xfeff8fff
 8007e04:	40010000 	.word	0x40010000
 8007e08:	40010400 	.word	0x40010400
 8007e0c:	40014000 	.word	0x40014000
 8007e10:	40014400 	.word	0x40014400
 8007e14:	40014800 	.word	0x40014800

08007e18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	f023 0201 	bic.w	r2, r3, #1
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	011b      	lsls	r3, r3, #4
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f023 030a 	bic.w	r3, r3, #10
 8007e54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	621a      	str	r2, [r3, #32]
}
 8007e6a:	bf00      	nop
 8007e6c:	371c      	adds	r7, #28
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b087      	sub	sp, #28
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	f023 0210 	bic.w	r2, r3, #16
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	031b      	lsls	r3, r3, #12
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007eb2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	011b      	lsls	r3, r3, #4
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	621a      	str	r2, [r3, #32]
}
 8007eca:	bf00      	nop
 8007ecc:	371c      	adds	r7, #28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
	...

08007ed8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	4b09      	ldr	r3, [pc, #36]	; (8007f10 <TIM_ITRx_SetConfig+0x38>)
 8007eec:	4013      	ands	r3, r2
 8007eee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	f043 0307 	orr.w	r3, r3, #7
 8007efa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	609a      	str	r2, [r3, #8]
}
 8007f02:	bf00      	nop
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	ffcfff8f 	.word	0xffcfff8f

08007f14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
 8007f20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	021a      	lsls	r2, r3, #8
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	431a      	orrs	r2, r3
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	609a      	str	r2, [r3, #8]
}
 8007f48:	bf00      	nop
 8007f4a:	371c      	adds	r7, #28
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b087      	sub	sp, #28
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	f003 031f 	and.w	r3, r3, #31
 8007f66:	2201      	movs	r2, #1
 8007f68:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6a1a      	ldr	r2, [r3, #32]
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	43db      	mvns	r3, r3
 8007f76:	401a      	ands	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6a1a      	ldr	r2, [r3, #32]
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f003 031f 	and.w	r3, r3, #31
 8007f86:	6879      	ldr	r1, [r7, #4]
 8007f88:	fa01 f303 	lsl.w	r3, r1, r3
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	621a      	str	r2, [r3, #32]
}
 8007f92:	bf00      	nop
 8007f94:	371c      	adds	r7, #28
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
	...

08007fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d101      	bne.n	8007fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	e06d      	b.n	8008094 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a30      	ldr	r2, [pc, #192]	; (80080a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d004      	beq.n	8007fec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a2f      	ldr	r2, [pc, #188]	; (80080a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d108      	bne.n	8007ffe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ff2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008004:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	4313      	orrs	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a20      	ldr	r2, [pc, #128]	; (80080a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d022      	beq.n	8008068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800802a:	d01d      	beq.n	8008068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a1d      	ldr	r2, [pc, #116]	; (80080a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d018      	beq.n	8008068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a1c      	ldr	r2, [pc, #112]	; (80080ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d013      	beq.n	8008068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a1a      	ldr	r2, [pc, #104]	; (80080b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d00e      	beq.n	8008068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a15      	ldr	r2, [pc, #84]	; (80080a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d009      	beq.n	8008068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a16      	ldr	r2, [pc, #88]	; (80080b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d004      	beq.n	8008068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a15      	ldr	r2, [pc, #84]	; (80080b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d10c      	bne.n	8008082 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800806e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	4313      	orrs	r3, r2
 8008078:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	40010000 	.word	0x40010000
 80080a4:	40010400 	.word	0x40010400
 80080a8:	40000400 	.word	0x40000400
 80080ac:	40000800 	.word	0x40000800
 80080b0:	40000c00 	.word	0x40000c00
 80080b4:	40001800 	.word	0x40001800
 80080b8:	40014000 	.word	0x40014000

080080bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e042      	b.n	8008190 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008110:	2b00      	cmp	r3, #0
 8008112:	d106      	bne.n	8008122 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7f8 ffd3 	bl	80010c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2224      	movs	r2, #36	; 0x24
 8008126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f022 0201 	bic.w	r2, r2, #1
 8008138:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813e:	2b00      	cmp	r3, #0
 8008140:	d002      	beq.n	8008148 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fd90 	bl	8008c68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f825 	bl	8008198 <UART_SetConfig>
 800814e:	4603      	mov	r3, r0
 8008150:	2b01      	cmp	r3, #1
 8008152:	d101      	bne.n	8008158 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e01b      	b.n	8008190 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008166:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689a      	ldr	r2, [r3, #8]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008176:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f042 0201 	orr.w	r2, r2, #1
 8008186:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fe0f 	bl	8008dac <UART_CheckIdleState>
 800818e:	4603      	mov	r3, r0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800819c:	b092      	sub	sp, #72	; 0x48
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	689a      	ldr	r2, [r3, #8]
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	431a      	orrs	r2, r3
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	431a      	orrs	r2, r3
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	69db      	ldr	r3, [r3, #28]
 80081bc:	4313      	orrs	r3, r2
 80081be:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	4bbe      	ldr	r3, [pc, #760]	; (80084c0 <UART_SetConfig+0x328>)
 80081c8:	4013      	ands	r3, r2
 80081ca:	697a      	ldr	r2, [r7, #20]
 80081cc:	6812      	ldr	r2, [r2, #0]
 80081ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081d0:	430b      	orrs	r3, r1
 80081d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	68da      	ldr	r2, [r3, #12]
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	430a      	orrs	r2, r1
 80081e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4ab3      	ldr	r2, [pc, #716]	; (80084c4 <UART_SetConfig+0x32c>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d004      	beq.n	8008204 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008200:	4313      	orrs	r3, r2
 8008202:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	689a      	ldr	r2, [r3, #8]
 800820a:	4baf      	ldr	r3, [pc, #700]	; (80084c8 <UART_SetConfig+0x330>)
 800820c:	4013      	ands	r3, r2
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	6812      	ldr	r2, [r2, #0]
 8008212:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008214:	430b      	orrs	r3, r1
 8008216:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821e:	f023 010f 	bic.w	r1, r3, #15
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	430a      	orrs	r2, r1
 800822c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4aa6      	ldr	r2, [pc, #664]	; (80084cc <UART_SetConfig+0x334>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d177      	bne.n	8008328 <UART_SetConfig+0x190>
 8008238:	4ba5      	ldr	r3, [pc, #660]	; (80084d0 <UART_SetConfig+0x338>)
 800823a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008240:	2b28      	cmp	r3, #40	; 0x28
 8008242:	d86d      	bhi.n	8008320 <UART_SetConfig+0x188>
 8008244:	a201      	add	r2, pc, #4	; (adr r2, 800824c <UART_SetConfig+0xb4>)
 8008246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824a:	bf00      	nop
 800824c:	080082f1 	.word	0x080082f1
 8008250:	08008321 	.word	0x08008321
 8008254:	08008321 	.word	0x08008321
 8008258:	08008321 	.word	0x08008321
 800825c:	08008321 	.word	0x08008321
 8008260:	08008321 	.word	0x08008321
 8008264:	08008321 	.word	0x08008321
 8008268:	08008321 	.word	0x08008321
 800826c:	080082f9 	.word	0x080082f9
 8008270:	08008321 	.word	0x08008321
 8008274:	08008321 	.word	0x08008321
 8008278:	08008321 	.word	0x08008321
 800827c:	08008321 	.word	0x08008321
 8008280:	08008321 	.word	0x08008321
 8008284:	08008321 	.word	0x08008321
 8008288:	08008321 	.word	0x08008321
 800828c:	08008301 	.word	0x08008301
 8008290:	08008321 	.word	0x08008321
 8008294:	08008321 	.word	0x08008321
 8008298:	08008321 	.word	0x08008321
 800829c:	08008321 	.word	0x08008321
 80082a0:	08008321 	.word	0x08008321
 80082a4:	08008321 	.word	0x08008321
 80082a8:	08008321 	.word	0x08008321
 80082ac:	08008309 	.word	0x08008309
 80082b0:	08008321 	.word	0x08008321
 80082b4:	08008321 	.word	0x08008321
 80082b8:	08008321 	.word	0x08008321
 80082bc:	08008321 	.word	0x08008321
 80082c0:	08008321 	.word	0x08008321
 80082c4:	08008321 	.word	0x08008321
 80082c8:	08008321 	.word	0x08008321
 80082cc:	08008311 	.word	0x08008311
 80082d0:	08008321 	.word	0x08008321
 80082d4:	08008321 	.word	0x08008321
 80082d8:	08008321 	.word	0x08008321
 80082dc:	08008321 	.word	0x08008321
 80082e0:	08008321 	.word	0x08008321
 80082e4:	08008321 	.word	0x08008321
 80082e8:	08008321 	.word	0x08008321
 80082ec:	08008319 	.word	0x08008319
 80082f0:	2301      	movs	r3, #1
 80082f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082f6:	e222      	b.n	800873e <UART_SetConfig+0x5a6>
 80082f8:	2304      	movs	r3, #4
 80082fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082fe:	e21e      	b.n	800873e <UART_SetConfig+0x5a6>
 8008300:	2308      	movs	r3, #8
 8008302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008306:	e21a      	b.n	800873e <UART_SetConfig+0x5a6>
 8008308:	2310      	movs	r3, #16
 800830a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800830e:	e216      	b.n	800873e <UART_SetConfig+0x5a6>
 8008310:	2320      	movs	r3, #32
 8008312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008316:	e212      	b.n	800873e <UART_SetConfig+0x5a6>
 8008318:	2340      	movs	r3, #64	; 0x40
 800831a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800831e:	e20e      	b.n	800873e <UART_SetConfig+0x5a6>
 8008320:	2380      	movs	r3, #128	; 0x80
 8008322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008326:	e20a      	b.n	800873e <UART_SetConfig+0x5a6>
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a69      	ldr	r2, [pc, #420]	; (80084d4 <UART_SetConfig+0x33c>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d130      	bne.n	8008394 <UART_SetConfig+0x1fc>
 8008332:	4b67      	ldr	r3, [pc, #412]	; (80084d0 <UART_SetConfig+0x338>)
 8008334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008336:	f003 0307 	and.w	r3, r3, #7
 800833a:	2b05      	cmp	r3, #5
 800833c:	d826      	bhi.n	800838c <UART_SetConfig+0x1f4>
 800833e:	a201      	add	r2, pc, #4	; (adr r2, 8008344 <UART_SetConfig+0x1ac>)
 8008340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008344:	0800835d 	.word	0x0800835d
 8008348:	08008365 	.word	0x08008365
 800834c:	0800836d 	.word	0x0800836d
 8008350:	08008375 	.word	0x08008375
 8008354:	0800837d 	.word	0x0800837d
 8008358:	08008385 	.word	0x08008385
 800835c:	2300      	movs	r3, #0
 800835e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008362:	e1ec      	b.n	800873e <UART_SetConfig+0x5a6>
 8008364:	2304      	movs	r3, #4
 8008366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836a:	e1e8      	b.n	800873e <UART_SetConfig+0x5a6>
 800836c:	2308      	movs	r3, #8
 800836e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008372:	e1e4      	b.n	800873e <UART_SetConfig+0x5a6>
 8008374:	2310      	movs	r3, #16
 8008376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800837a:	e1e0      	b.n	800873e <UART_SetConfig+0x5a6>
 800837c:	2320      	movs	r3, #32
 800837e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008382:	e1dc      	b.n	800873e <UART_SetConfig+0x5a6>
 8008384:	2340      	movs	r3, #64	; 0x40
 8008386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800838a:	e1d8      	b.n	800873e <UART_SetConfig+0x5a6>
 800838c:	2380      	movs	r3, #128	; 0x80
 800838e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008392:	e1d4      	b.n	800873e <UART_SetConfig+0x5a6>
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a4f      	ldr	r2, [pc, #316]	; (80084d8 <UART_SetConfig+0x340>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d130      	bne.n	8008400 <UART_SetConfig+0x268>
 800839e:	4b4c      	ldr	r3, [pc, #304]	; (80084d0 <UART_SetConfig+0x338>)
 80083a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083a2:	f003 0307 	and.w	r3, r3, #7
 80083a6:	2b05      	cmp	r3, #5
 80083a8:	d826      	bhi.n	80083f8 <UART_SetConfig+0x260>
 80083aa:	a201      	add	r2, pc, #4	; (adr r2, 80083b0 <UART_SetConfig+0x218>)
 80083ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b0:	080083c9 	.word	0x080083c9
 80083b4:	080083d1 	.word	0x080083d1
 80083b8:	080083d9 	.word	0x080083d9
 80083bc:	080083e1 	.word	0x080083e1
 80083c0:	080083e9 	.word	0x080083e9
 80083c4:	080083f1 	.word	0x080083f1
 80083c8:	2300      	movs	r3, #0
 80083ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ce:	e1b6      	b.n	800873e <UART_SetConfig+0x5a6>
 80083d0:	2304      	movs	r3, #4
 80083d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083d6:	e1b2      	b.n	800873e <UART_SetConfig+0x5a6>
 80083d8:	2308      	movs	r3, #8
 80083da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083de:	e1ae      	b.n	800873e <UART_SetConfig+0x5a6>
 80083e0:	2310      	movs	r3, #16
 80083e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083e6:	e1aa      	b.n	800873e <UART_SetConfig+0x5a6>
 80083e8:	2320      	movs	r3, #32
 80083ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ee:	e1a6      	b.n	800873e <UART_SetConfig+0x5a6>
 80083f0:	2340      	movs	r3, #64	; 0x40
 80083f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083f6:	e1a2      	b.n	800873e <UART_SetConfig+0x5a6>
 80083f8:	2380      	movs	r3, #128	; 0x80
 80083fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083fe:	e19e      	b.n	800873e <UART_SetConfig+0x5a6>
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a35      	ldr	r2, [pc, #212]	; (80084dc <UART_SetConfig+0x344>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d130      	bne.n	800846c <UART_SetConfig+0x2d4>
 800840a:	4b31      	ldr	r3, [pc, #196]	; (80084d0 <UART_SetConfig+0x338>)
 800840c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800840e:	f003 0307 	and.w	r3, r3, #7
 8008412:	2b05      	cmp	r3, #5
 8008414:	d826      	bhi.n	8008464 <UART_SetConfig+0x2cc>
 8008416:	a201      	add	r2, pc, #4	; (adr r2, 800841c <UART_SetConfig+0x284>)
 8008418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841c:	08008435 	.word	0x08008435
 8008420:	0800843d 	.word	0x0800843d
 8008424:	08008445 	.word	0x08008445
 8008428:	0800844d 	.word	0x0800844d
 800842c:	08008455 	.word	0x08008455
 8008430:	0800845d 	.word	0x0800845d
 8008434:	2300      	movs	r3, #0
 8008436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800843a:	e180      	b.n	800873e <UART_SetConfig+0x5a6>
 800843c:	2304      	movs	r3, #4
 800843e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008442:	e17c      	b.n	800873e <UART_SetConfig+0x5a6>
 8008444:	2308      	movs	r3, #8
 8008446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800844a:	e178      	b.n	800873e <UART_SetConfig+0x5a6>
 800844c:	2310      	movs	r3, #16
 800844e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008452:	e174      	b.n	800873e <UART_SetConfig+0x5a6>
 8008454:	2320      	movs	r3, #32
 8008456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800845a:	e170      	b.n	800873e <UART_SetConfig+0x5a6>
 800845c:	2340      	movs	r3, #64	; 0x40
 800845e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008462:	e16c      	b.n	800873e <UART_SetConfig+0x5a6>
 8008464:	2380      	movs	r3, #128	; 0x80
 8008466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800846a:	e168      	b.n	800873e <UART_SetConfig+0x5a6>
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a1b      	ldr	r2, [pc, #108]	; (80084e0 <UART_SetConfig+0x348>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d142      	bne.n	80084fc <UART_SetConfig+0x364>
 8008476:	4b16      	ldr	r3, [pc, #88]	; (80084d0 <UART_SetConfig+0x338>)
 8008478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800847a:	f003 0307 	and.w	r3, r3, #7
 800847e:	2b05      	cmp	r3, #5
 8008480:	d838      	bhi.n	80084f4 <UART_SetConfig+0x35c>
 8008482:	a201      	add	r2, pc, #4	; (adr r2, 8008488 <UART_SetConfig+0x2f0>)
 8008484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008488:	080084a1 	.word	0x080084a1
 800848c:	080084a9 	.word	0x080084a9
 8008490:	080084b1 	.word	0x080084b1
 8008494:	080084b9 	.word	0x080084b9
 8008498:	080084e5 	.word	0x080084e5
 800849c:	080084ed 	.word	0x080084ed
 80084a0:	2300      	movs	r3, #0
 80084a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084a6:	e14a      	b.n	800873e <UART_SetConfig+0x5a6>
 80084a8:	2304      	movs	r3, #4
 80084aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ae:	e146      	b.n	800873e <UART_SetConfig+0x5a6>
 80084b0:	2308      	movs	r3, #8
 80084b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084b6:	e142      	b.n	800873e <UART_SetConfig+0x5a6>
 80084b8:	2310      	movs	r3, #16
 80084ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084be:	e13e      	b.n	800873e <UART_SetConfig+0x5a6>
 80084c0:	cfff69f3 	.word	0xcfff69f3
 80084c4:	58000c00 	.word	0x58000c00
 80084c8:	11fff4ff 	.word	0x11fff4ff
 80084cc:	40011000 	.word	0x40011000
 80084d0:	58024400 	.word	0x58024400
 80084d4:	40004400 	.word	0x40004400
 80084d8:	40004800 	.word	0x40004800
 80084dc:	40004c00 	.word	0x40004c00
 80084e0:	40005000 	.word	0x40005000
 80084e4:	2320      	movs	r3, #32
 80084e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ea:	e128      	b.n	800873e <UART_SetConfig+0x5a6>
 80084ec:	2340      	movs	r3, #64	; 0x40
 80084ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084f2:	e124      	b.n	800873e <UART_SetConfig+0x5a6>
 80084f4:	2380      	movs	r3, #128	; 0x80
 80084f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084fa:	e120      	b.n	800873e <UART_SetConfig+0x5a6>
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4acb      	ldr	r2, [pc, #812]	; (8008830 <UART_SetConfig+0x698>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d176      	bne.n	80085f4 <UART_SetConfig+0x45c>
 8008506:	4bcb      	ldr	r3, [pc, #812]	; (8008834 <UART_SetConfig+0x69c>)
 8008508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800850a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800850e:	2b28      	cmp	r3, #40	; 0x28
 8008510:	d86c      	bhi.n	80085ec <UART_SetConfig+0x454>
 8008512:	a201      	add	r2, pc, #4	; (adr r2, 8008518 <UART_SetConfig+0x380>)
 8008514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008518:	080085bd 	.word	0x080085bd
 800851c:	080085ed 	.word	0x080085ed
 8008520:	080085ed 	.word	0x080085ed
 8008524:	080085ed 	.word	0x080085ed
 8008528:	080085ed 	.word	0x080085ed
 800852c:	080085ed 	.word	0x080085ed
 8008530:	080085ed 	.word	0x080085ed
 8008534:	080085ed 	.word	0x080085ed
 8008538:	080085c5 	.word	0x080085c5
 800853c:	080085ed 	.word	0x080085ed
 8008540:	080085ed 	.word	0x080085ed
 8008544:	080085ed 	.word	0x080085ed
 8008548:	080085ed 	.word	0x080085ed
 800854c:	080085ed 	.word	0x080085ed
 8008550:	080085ed 	.word	0x080085ed
 8008554:	080085ed 	.word	0x080085ed
 8008558:	080085cd 	.word	0x080085cd
 800855c:	080085ed 	.word	0x080085ed
 8008560:	080085ed 	.word	0x080085ed
 8008564:	080085ed 	.word	0x080085ed
 8008568:	080085ed 	.word	0x080085ed
 800856c:	080085ed 	.word	0x080085ed
 8008570:	080085ed 	.word	0x080085ed
 8008574:	080085ed 	.word	0x080085ed
 8008578:	080085d5 	.word	0x080085d5
 800857c:	080085ed 	.word	0x080085ed
 8008580:	080085ed 	.word	0x080085ed
 8008584:	080085ed 	.word	0x080085ed
 8008588:	080085ed 	.word	0x080085ed
 800858c:	080085ed 	.word	0x080085ed
 8008590:	080085ed 	.word	0x080085ed
 8008594:	080085ed 	.word	0x080085ed
 8008598:	080085dd 	.word	0x080085dd
 800859c:	080085ed 	.word	0x080085ed
 80085a0:	080085ed 	.word	0x080085ed
 80085a4:	080085ed 	.word	0x080085ed
 80085a8:	080085ed 	.word	0x080085ed
 80085ac:	080085ed 	.word	0x080085ed
 80085b0:	080085ed 	.word	0x080085ed
 80085b4:	080085ed 	.word	0x080085ed
 80085b8:	080085e5 	.word	0x080085e5
 80085bc:	2301      	movs	r3, #1
 80085be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085c2:	e0bc      	b.n	800873e <UART_SetConfig+0x5a6>
 80085c4:	2304      	movs	r3, #4
 80085c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ca:	e0b8      	b.n	800873e <UART_SetConfig+0x5a6>
 80085cc:	2308      	movs	r3, #8
 80085ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085d2:	e0b4      	b.n	800873e <UART_SetConfig+0x5a6>
 80085d4:	2310      	movs	r3, #16
 80085d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085da:	e0b0      	b.n	800873e <UART_SetConfig+0x5a6>
 80085dc:	2320      	movs	r3, #32
 80085de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085e2:	e0ac      	b.n	800873e <UART_SetConfig+0x5a6>
 80085e4:	2340      	movs	r3, #64	; 0x40
 80085e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ea:	e0a8      	b.n	800873e <UART_SetConfig+0x5a6>
 80085ec:	2380      	movs	r3, #128	; 0x80
 80085ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085f2:	e0a4      	b.n	800873e <UART_SetConfig+0x5a6>
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a8f      	ldr	r2, [pc, #572]	; (8008838 <UART_SetConfig+0x6a0>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d130      	bne.n	8008660 <UART_SetConfig+0x4c8>
 80085fe:	4b8d      	ldr	r3, [pc, #564]	; (8008834 <UART_SetConfig+0x69c>)
 8008600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008602:	f003 0307 	and.w	r3, r3, #7
 8008606:	2b05      	cmp	r3, #5
 8008608:	d826      	bhi.n	8008658 <UART_SetConfig+0x4c0>
 800860a:	a201      	add	r2, pc, #4	; (adr r2, 8008610 <UART_SetConfig+0x478>)
 800860c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008610:	08008629 	.word	0x08008629
 8008614:	08008631 	.word	0x08008631
 8008618:	08008639 	.word	0x08008639
 800861c:	08008641 	.word	0x08008641
 8008620:	08008649 	.word	0x08008649
 8008624:	08008651 	.word	0x08008651
 8008628:	2300      	movs	r3, #0
 800862a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800862e:	e086      	b.n	800873e <UART_SetConfig+0x5a6>
 8008630:	2304      	movs	r3, #4
 8008632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008636:	e082      	b.n	800873e <UART_SetConfig+0x5a6>
 8008638:	2308      	movs	r3, #8
 800863a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800863e:	e07e      	b.n	800873e <UART_SetConfig+0x5a6>
 8008640:	2310      	movs	r3, #16
 8008642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008646:	e07a      	b.n	800873e <UART_SetConfig+0x5a6>
 8008648:	2320      	movs	r3, #32
 800864a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800864e:	e076      	b.n	800873e <UART_SetConfig+0x5a6>
 8008650:	2340      	movs	r3, #64	; 0x40
 8008652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008656:	e072      	b.n	800873e <UART_SetConfig+0x5a6>
 8008658:	2380      	movs	r3, #128	; 0x80
 800865a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800865e:	e06e      	b.n	800873e <UART_SetConfig+0x5a6>
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a75      	ldr	r2, [pc, #468]	; (800883c <UART_SetConfig+0x6a4>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d130      	bne.n	80086cc <UART_SetConfig+0x534>
 800866a:	4b72      	ldr	r3, [pc, #456]	; (8008834 <UART_SetConfig+0x69c>)
 800866c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800866e:	f003 0307 	and.w	r3, r3, #7
 8008672:	2b05      	cmp	r3, #5
 8008674:	d826      	bhi.n	80086c4 <UART_SetConfig+0x52c>
 8008676:	a201      	add	r2, pc, #4	; (adr r2, 800867c <UART_SetConfig+0x4e4>)
 8008678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867c:	08008695 	.word	0x08008695
 8008680:	0800869d 	.word	0x0800869d
 8008684:	080086a5 	.word	0x080086a5
 8008688:	080086ad 	.word	0x080086ad
 800868c:	080086b5 	.word	0x080086b5
 8008690:	080086bd 	.word	0x080086bd
 8008694:	2300      	movs	r3, #0
 8008696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800869a:	e050      	b.n	800873e <UART_SetConfig+0x5a6>
 800869c:	2304      	movs	r3, #4
 800869e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086a2:	e04c      	b.n	800873e <UART_SetConfig+0x5a6>
 80086a4:	2308      	movs	r3, #8
 80086a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086aa:	e048      	b.n	800873e <UART_SetConfig+0x5a6>
 80086ac:	2310      	movs	r3, #16
 80086ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086b2:	e044      	b.n	800873e <UART_SetConfig+0x5a6>
 80086b4:	2320      	movs	r3, #32
 80086b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ba:	e040      	b.n	800873e <UART_SetConfig+0x5a6>
 80086bc:	2340      	movs	r3, #64	; 0x40
 80086be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086c2:	e03c      	b.n	800873e <UART_SetConfig+0x5a6>
 80086c4:	2380      	movs	r3, #128	; 0x80
 80086c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ca:	e038      	b.n	800873e <UART_SetConfig+0x5a6>
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a5b      	ldr	r2, [pc, #364]	; (8008840 <UART_SetConfig+0x6a8>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d130      	bne.n	8008738 <UART_SetConfig+0x5a0>
 80086d6:	4b57      	ldr	r3, [pc, #348]	; (8008834 <UART_SetConfig+0x69c>)
 80086d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086da:	f003 0307 	and.w	r3, r3, #7
 80086de:	2b05      	cmp	r3, #5
 80086e0:	d826      	bhi.n	8008730 <UART_SetConfig+0x598>
 80086e2:	a201      	add	r2, pc, #4	; (adr r2, 80086e8 <UART_SetConfig+0x550>)
 80086e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e8:	08008701 	.word	0x08008701
 80086ec:	08008709 	.word	0x08008709
 80086f0:	08008711 	.word	0x08008711
 80086f4:	08008719 	.word	0x08008719
 80086f8:	08008721 	.word	0x08008721
 80086fc:	08008729 	.word	0x08008729
 8008700:	2302      	movs	r3, #2
 8008702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008706:	e01a      	b.n	800873e <UART_SetConfig+0x5a6>
 8008708:	2304      	movs	r3, #4
 800870a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800870e:	e016      	b.n	800873e <UART_SetConfig+0x5a6>
 8008710:	2308      	movs	r3, #8
 8008712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008716:	e012      	b.n	800873e <UART_SetConfig+0x5a6>
 8008718:	2310      	movs	r3, #16
 800871a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800871e:	e00e      	b.n	800873e <UART_SetConfig+0x5a6>
 8008720:	2320      	movs	r3, #32
 8008722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008726:	e00a      	b.n	800873e <UART_SetConfig+0x5a6>
 8008728:	2340      	movs	r3, #64	; 0x40
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800872e:	e006      	b.n	800873e <UART_SetConfig+0x5a6>
 8008730:	2380      	movs	r3, #128	; 0x80
 8008732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008736:	e002      	b.n	800873e <UART_SetConfig+0x5a6>
 8008738:	2380      	movs	r3, #128	; 0x80
 800873a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a3f      	ldr	r2, [pc, #252]	; (8008840 <UART_SetConfig+0x6a8>)
 8008744:	4293      	cmp	r3, r2
 8008746:	f040 80f8 	bne.w	800893a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800874a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800874e:	2b20      	cmp	r3, #32
 8008750:	dc46      	bgt.n	80087e0 <UART_SetConfig+0x648>
 8008752:	2b02      	cmp	r3, #2
 8008754:	f2c0 8082 	blt.w	800885c <UART_SetConfig+0x6c4>
 8008758:	3b02      	subs	r3, #2
 800875a:	2b1e      	cmp	r3, #30
 800875c:	d87e      	bhi.n	800885c <UART_SetConfig+0x6c4>
 800875e:	a201      	add	r2, pc, #4	; (adr r2, 8008764 <UART_SetConfig+0x5cc>)
 8008760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008764:	080087e7 	.word	0x080087e7
 8008768:	0800885d 	.word	0x0800885d
 800876c:	080087ef 	.word	0x080087ef
 8008770:	0800885d 	.word	0x0800885d
 8008774:	0800885d 	.word	0x0800885d
 8008778:	0800885d 	.word	0x0800885d
 800877c:	080087ff 	.word	0x080087ff
 8008780:	0800885d 	.word	0x0800885d
 8008784:	0800885d 	.word	0x0800885d
 8008788:	0800885d 	.word	0x0800885d
 800878c:	0800885d 	.word	0x0800885d
 8008790:	0800885d 	.word	0x0800885d
 8008794:	0800885d 	.word	0x0800885d
 8008798:	0800885d 	.word	0x0800885d
 800879c:	0800880f 	.word	0x0800880f
 80087a0:	0800885d 	.word	0x0800885d
 80087a4:	0800885d 	.word	0x0800885d
 80087a8:	0800885d 	.word	0x0800885d
 80087ac:	0800885d 	.word	0x0800885d
 80087b0:	0800885d 	.word	0x0800885d
 80087b4:	0800885d 	.word	0x0800885d
 80087b8:	0800885d 	.word	0x0800885d
 80087bc:	0800885d 	.word	0x0800885d
 80087c0:	0800885d 	.word	0x0800885d
 80087c4:	0800885d 	.word	0x0800885d
 80087c8:	0800885d 	.word	0x0800885d
 80087cc:	0800885d 	.word	0x0800885d
 80087d0:	0800885d 	.word	0x0800885d
 80087d4:	0800885d 	.word	0x0800885d
 80087d8:	0800885d 	.word	0x0800885d
 80087dc:	0800884f 	.word	0x0800884f
 80087e0:	2b40      	cmp	r3, #64	; 0x40
 80087e2:	d037      	beq.n	8008854 <UART_SetConfig+0x6bc>
 80087e4:	e03a      	b.n	800885c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80087e6:	f7fd fdf9 	bl	80063dc <HAL_RCCEx_GetD3PCLK1Freq>
 80087ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80087ec:	e03c      	b.n	8008868 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fd fe08 	bl	8006408 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087fc:	e034      	b.n	8008868 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087fe:	f107 0318 	add.w	r3, r7, #24
 8008802:	4618      	mov	r0, r3
 8008804:	f7fd ff54 	bl	80066b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800880c:	e02c      	b.n	8008868 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800880e:	4b09      	ldr	r3, [pc, #36]	; (8008834 <UART_SetConfig+0x69c>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 0320 	and.w	r3, r3, #32
 8008816:	2b00      	cmp	r3, #0
 8008818:	d016      	beq.n	8008848 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800881a:	4b06      	ldr	r3, [pc, #24]	; (8008834 <UART_SetConfig+0x69c>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	08db      	lsrs	r3, r3, #3
 8008820:	f003 0303 	and.w	r3, r3, #3
 8008824:	4a07      	ldr	r2, [pc, #28]	; (8008844 <UART_SetConfig+0x6ac>)
 8008826:	fa22 f303 	lsr.w	r3, r2, r3
 800882a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800882c:	e01c      	b.n	8008868 <UART_SetConfig+0x6d0>
 800882e:	bf00      	nop
 8008830:	40011400 	.word	0x40011400
 8008834:	58024400 	.word	0x58024400
 8008838:	40007800 	.word	0x40007800
 800883c:	40007c00 	.word	0x40007c00
 8008840:	58000c00 	.word	0x58000c00
 8008844:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008848:	4b9d      	ldr	r3, [pc, #628]	; (8008ac0 <UART_SetConfig+0x928>)
 800884a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800884c:	e00c      	b.n	8008868 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800884e:	4b9d      	ldr	r3, [pc, #628]	; (8008ac4 <UART_SetConfig+0x92c>)
 8008850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008852:	e009      	b.n	8008868 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008858:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800885a:	e005      	b.n	8008868 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800885c:	2300      	movs	r3, #0
 800885e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008866:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800886a:	2b00      	cmp	r3, #0
 800886c:	f000 81de 	beq.w	8008c2c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008874:	4a94      	ldr	r2, [pc, #592]	; (8008ac8 <UART_SetConfig+0x930>)
 8008876:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800887a:	461a      	mov	r2, r3
 800887c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800887e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008882:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	685a      	ldr	r2, [r3, #4]
 8008888:	4613      	mov	r3, r2
 800888a:	005b      	lsls	r3, r3, #1
 800888c:	4413      	add	r3, r2
 800888e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008890:	429a      	cmp	r2, r3
 8008892:	d305      	bcc.n	80088a0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800889a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800889c:	429a      	cmp	r2, r3
 800889e:	d903      	bls.n	80088a8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80088a6:	e1c1      	b.n	8008c2c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088aa:	2200      	movs	r2, #0
 80088ac:	60bb      	str	r3, [r7, #8]
 80088ae:	60fa      	str	r2, [r7, #12]
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b4:	4a84      	ldr	r2, [pc, #528]	; (8008ac8 <UART_SetConfig+0x930>)
 80088b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	2200      	movs	r2, #0
 80088be:	603b      	str	r3, [r7, #0]
 80088c0:	607a      	str	r2, [r7, #4]
 80088c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088ca:	f7f7 fd05 	bl	80002d8 <__aeabi_uldivmod>
 80088ce:	4602      	mov	r2, r0
 80088d0:	460b      	mov	r3, r1
 80088d2:	4610      	mov	r0, r2
 80088d4:	4619      	mov	r1, r3
 80088d6:	f04f 0200 	mov.w	r2, #0
 80088da:	f04f 0300 	mov.w	r3, #0
 80088de:	020b      	lsls	r3, r1, #8
 80088e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80088e4:	0202      	lsls	r2, r0, #8
 80088e6:	6979      	ldr	r1, [r7, #20]
 80088e8:	6849      	ldr	r1, [r1, #4]
 80088ea:	0849      	lsrs	r1, r1, #1
 80088ec:	2000      	movs	r0, #0
 80088ee:	460c      	mov	r4, r1
 80088f0:	4605      	mov	r5, r0
 80088f2:	eb12 0804 	adds.w	r8, r2, r4
 80088f6:	eb43 0905 	adc.w	r9, r3, r5
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	469a      	mov	sl, r3
 8008902:	4693      	mov	fp, r2
 8008904:	4652      	mov	r2, sl
 8008906:	465b      	mov	r3, fp
 8008908:	4640      	mov	r0, r8
 800890a:	4649      	mov	r1, r9
 800890c:	f7f7 fce4 	bl	80002d8 <__aeabi_uldivmod>
 8008910:	4602      	mov	r2, r0
 8008912:	460b      	mov	r3, r1
 8008914:	4613      	mov	r3, r2
 8008916:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800891e:	d308      	bcc.n	8008932 <UART_SetConfig+0x79a>
 8008920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008926:	d204      	bcs.n	8008932 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800892e:	60da      	str	r2, [r3, #12]
 8008930:	e17c      	b.n	8008c2c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008938:	e178      	b.n	8008c2c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008942:	f040 80c5 	bne.w	8008ad0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008946:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800894a:	2b20      	cmp	r3, #32
 800894c:	dc48      	bgt.n	80089e0 <UART_SetConfig+0x848>
 800894e:	2b00      	cmp	r3, #0
 8008950:	db7b      	blt.n	8008a4a <UART_SetConfig+0x8b2>
 8008952:	2b20      	cmp	r3, #32
 8008954:	d879      	bhi.n	8008a4a <UART_SetConfig+0x8b2>
 8008956:	a201      	add	r2, pc, #4	; (adr r2, 800895c <UART_SetConfig+0x7c4>)
 8008958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895c:	080089e7 	.word	0x080089e7
 8008960:	080089ef 	.word	0x080089ef
 8008964:	08008a4b 	.word	0x08008a4b
 8008968:	08008a4b 	.word	0x08008a4b
 800896c:	080089f7 	.word	0x080089f7
 8008970:	08008a4b 	.word	0x08008a4b
 8008974:	08008a4b 	.word	0x08008a4b
 8008978:	08008a4b 	.word	0x08008a4b
 800897c:	08008a07 	.word	0x08008a07
 8008980:	08008a4b 	.word	0x08008a4b
 8008984:	08008a4b 	.word	0x08008a4b
 8008988:	08008a4b 	.word	0x08008a4b
 800898c:	08008a4b 	.word	0x08008a4b
 8008990:	08008a4b 	.word	0x08008a4b
 8008994:	08008a4b 	.word	0x08008a4b
 8008998:	08008a4b 	.word	0x08008a4b
 800899c:	08008a17 	.word	0x08008a17
 80089a0:	08008a4b 	.word	0x08008a4b
 80089a4:	08008a4b 	.word	0x08008a4b
 80089a8:	08008a4b 	.word	0x08008a4b
 80089ac:	08008a4b 	.word	0x08008a4b
 80089b0:	08008a4b 	.word	0x08008a4b
 80089b4:	08008a4b 	.word	0x08008a4b
 80089b8:	08008a4b 	.word	0x08008a4b
 80089bc:	08008a4b 	.word	0x08008a4b
 80089c0:	08008a4b 	.word	0x08008a4b
 80089c4:	08008a4b 	.word	0x08008a4b
 80089c8:	08008a4b 	.word	0x08008a4b
 80089cc:	08008a4b 	.word	0x08008a4b
 80089d0:	08008a4b 	.word	0x08008a4b
 80089d4:	08008a4b 	.word	0x08008a4b
 80089d8:	08008a4b 	.word	0x08008a4b
 80089dc:	08008a3d 	.word	0x08008a3d
 80089e0:	2b40      	cmp	r3, #64	; 0x40
 80089e2:	d02e      	beq.n	8008a42 <UART_SetConfig+0x8aa>
 80089e4:	e031      	b.n	8008a4a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089e6:	f7fc fac3 	bl	8004f70 <HAL_RCC_GetPCLK1Freq>
 80089ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80089ec:	e033      	b.n	8008a56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089ee:	f7fc fad5 	bl	8004f9c <HAL_RCC_GetPCLK2Freq>
 80089f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80089f4:	e02f      	b.n	8008a56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fd fd04 	bl	8006408 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a04:	e027      	b.n	8008a56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a06:	f107 0318 	add.w	r3, r7, #24
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fd fe50 	bl	80066b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a14:	e01f      	b.n	8008a56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a16:	4b2d      	ldr	r3, [pc, #180]	; (8008acc <UART_SetConfig+0x934>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 0320 	and.w	r3, r3, #32
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d009      	beq.n	8008a36 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a22:	4b2a      	ldr	r3, [pc, #168]	; (8008acc <UART_SetConfig+0x934>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	08db      	lsrs	r3, r3, #3
 8008a28:	f003 0303 	and.w	r3, r3, #3
 8008a2c:	4a24      	ldr	r2, [pc, #144]	; (8008ac0 <UART_SetConfig+0x928>)
 8008a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a34:	e00f      	b.n	8008a56 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008a36:	4b22      	ldr	r3, [pc, #136]	; (8008ac0 <UART_SetConfig+0x928>)
 8008a38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a3a:	e00c      	b.n	8008a56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a3c:	4b21      	ldr	r3, [pc, #132]	; (8008ac4 <UART_SetConfig+0x92c>)
 8008a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a40:	e009      	b.n	8008a56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a48:	e005      	b.n	8008a56 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008a54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 80e7 	beq.w	8008c2c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a62:	4a19      	ldr	r2, [pc, #100]	; (8008ac8 <UART_SetConfig+0x930>)
 8008a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a70:	005a      	lsls	r2, r3, #1
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	085b      	lsrs	r3, r3, #1
 8008a78:	441a      	add	r2, r3
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a82:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a86:	2b0f      	cmp	r3, #15
 8008a88:	d916      	bls.n	8008ab8 <UART_SetConfig+0x920>
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a90:	d212      	bcs.n	8008ab8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	f023 030f 	bic.w	r3, r3, #15
 8008a9a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9e:	085b      	lsrs	r3, r3, #1
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	f003 0307 	and.w	r3, r3, #7
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008ab4:	60da      	str	r2, [r3, #12]
 8008ab6:	e0b9      	b.n	8008c2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008abe:	e0b5      	b.n	8008c2c <UART_SetConfig+0xa94>
 8008ac0:	03d09000 	.word	0x03d09000
 8008ac4:	003d0900 	.word	0x003d0900
 8008ac8:	08009948 	.word	0x08009948
 8008acc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ad0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008ad4:	2b20      	cmp	r3, #32
 8008ad6:	dc49      	bgt.n	8008b6c <UART_SetConfig+0x9d4>
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	db7c      	blt.n	8008bd6 <UART_SetConfig+0xa3e>
 8008adc:	2b20      	cmp	r3, #32
 8008ade:	d87a      	bhi.n	8008bd6 <UART_SetConfig+0xa3e>
 8008ae0:	a201      	add	r2, pc, #4	; (adr r2, 8008ae8 <UART_SetConfig+0x950>)
 8008ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae6:	bf00      	nop
 8008ae8:	08008b73 	.word	0x08008b73
 8008aec:	08008b7b 	.word	0x08008b7b
 8008af0:	08008bd7 	.word	0x08008bd7
 8008af4:	08008bd7 	.word	0x08008bd7
 8008af8:	08008b83 	.word	0x08008b83
 8008afc:	08008bd7 	.word	0x08008bd7
 8008b00:	08008bd7 	.word	0x08008bd7
 8008b04:	08008bd7 	.word	0x08008bd7
 8008b08:	08008b93 	.word	0x08008b93
 8008b0c:	08008bd7 	.word	0x08008bd7
 8008b10:	08008bd7 	.word	0x08008bd7
 8008b14:	08008bd7 	.word	0x08008bd7
 8008b18:	08008bd7 	.word	0x08008bd7
 8008b1c:	08008bd7 	.word	0x08008bd7
 8008b20:	08008bd7 	.word	0x08008bd7
 8008b24:	08008bd7 	.word	0x08008bd7
 8008b28:	08008ba3 	.word	0x08008ba3
 8008b2c:	08008bd7 	.word	0x08008bd7
 8008b30:	08008bd7 	.word	0x08008bd7
 8008b34:	08008bd7 	.word	0x08008bd7
 8008b38:	08008bd7 	.word	0x08008bd7
 8008b3c:	08008bd7 	.word	0x08008bd7
 8008b40:	08008bd7 	.word	0x08008bd7
 8008b44:	08008bd7 	.word	0x08008bd7
 8008b48:	08008bd7 	.word	0x08008bd7
 8008b4c:	08008bd7 	.word	0x08008bd7
 8008b50:	08008bd7 	.word	0x08008bd7
 8008b54:	08008bd7 	.word	0x08008bd7
 8008b58:	08008bd7 	.word	0x08008bd7
 8008b5c:	08008bd7 	.word	0x08008bd7
 8008b60:	08008bd7 	.word	0x08008bd7
 8008b64:	08008bd7 	.word	0x08008bd7
 8008b68:	08008bc9 	.word	0x08008bc9
 8008b6c:	2b40      	cmp	r3, #64	; 0x40
 8008b6e:	d02e      	beq.n	8008bce <UART_SetConfig+0xa36>
 8008b70:	e031      	b.n	8008bd6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b72:	f7fc f9fd 	bl	8004f70 <HAL_RCC_GetPCLK1Freq>
 8008b76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b78:	e033      	b.n	8008be2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b7a:	f7fc fa0f 	bl	8004f9c <HAL_RCC_GetPCLK2Freq>
 8008b7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b80:	e02f      	b.n	8008be2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fd fc3e 	bl	8006408 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b90:	e027      	b.n	8008be2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b92:	f107 0318 	add.w	r3, r7, #24
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7fd fd8a 	bl	80066b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ba0:	e01f      	b.n	8008be2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ba2:	4b2d      	ldr	r3, [pc, #180]	; (8008c58 <UART_SetConfig+0xac0>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 0320 	and.w	r3, r3, #32
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d009      	beq.n	8008bc2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008bae:	4b2a      	ldr	r3, [pc, #168]	; (8008c58 <UART_SetConfig+0xac0>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	08db      	lsrs	r3, r3, #3
 8008bb4:	f003 0303 	and.w	r3, r3, #3
 8008bb8:	4a28      	ldr	r2, [pc, #160]	; (8008c5c <UART_SetConfig+0xac4>)
 8008bba:	fa22 f303 	lsr.w	r3, r2, r3
 8008bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008bc0:	e00f      	b.n	8008be2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008bc2:	4b26      	ldr	r3, [pc, #152]	; (8008c5c <UART_SetConfig+0xac4>)
 8008bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bc6:	e00c      	b.n	8008be2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008bc8:	4b25      	ldr	r3, [pc, #148]	; (8008c60 <UART_SetConfig+0xac8>)
 8008bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bcc:	e009      	b.n	8008be2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bd4:	e005      	b.n	8008be2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008be0:	bf00      	nop
    }

    if (pclk != 0U)
 8008be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d021      	beq.n	8008c2c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bec:	4a1d      	ldr	r2, [pc, #116]	; (8008c64 <UART_SetConfig+0xacc>)
 8008bee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	085b      	lsrs	r3, r3, #1
 8008c00:	441a      	add	r2, r3
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c0a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0e:	2b0f      	cmp	r3, #15
 8008c10:	d909      	bls.n	8008c26 <UART_SetConfig+0xa8e>
 8008c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c18:	d205      	bcs.n	8008c26 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	60da      	str	r2, [r3, #12]
 8008c24:	e002      	b.n	8008c2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	2200      	movs	r2, #0
 8008c46:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008c48:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3748      	adds	r7, #72	; 0x48
 8008c50:	46bd      	mov	sp, r7
 8008c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c56:	bf00      	nop
 8008c58:	58024400 	.word	0x58024400
 8008c5c:	03d09000 	.word	0x03d09000
 8008c60:	003d0900 	.word	0x003d0900
 8008c64:	08009948 	.word	0x08009948

08008c68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c74:	f003 0308 	and.w	r3, r3, #8
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00a      	beq.n	8008c92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	430a      	orrs	r2, r1
 8008c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00a      	beq.n	8008cb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	430a      	orrs	r2, r1
 8008cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb8:	f003 0302 	and.w	r3, r3, #2
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00a      	beq.n	8008cd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	430a      	orrs	r2, r1
 8008cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cda:	f003 0304 	and.w	r3, r3, #4
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00a      	beq.n	8008cf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	430a      	orrs	r2, r1
 8008cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfc:	f003 0310 	and.w	r3, r3, #16
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00a      	beq.n	8008d1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	430a      	orrs	r2, r1
 8008d18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1e:	f003 0320 	and.w	r3, r3, #32
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00a      	beq.n	8008d3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d01a      	beq.n	8008d7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	430a      	orrs	r2, r1
 8008d5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d66:	d10a      	bne.n	8008d7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00a      	beq.n	8008da0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	430a      	orrs	r2, r1
 8008d9e:	605a      	str	r2, [r3, #4]
  }
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b098      	sub	sp, #96	; 0x60
 8008db0:	af02      	add	r7, sp, #8
 8008db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008dbc:	f7f8 fb68 	bl	8001490 <HAL_GetTick>
 8008dc0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 0308 	and.w	r3, r3, #8
 8008dcc:	2b08      	cmp	r3, #8
 8008dce:	d12f      	bne.n	8008e30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f88e 	bl	8008f00 <UART_WaitOnFlagUntilTimeout>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d022      	beq.n	8008e30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df2:	e853 3f00 	ldrex	r3, [r3]
 8008df6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	461a      	mov	r2, r3
 8008e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e08:	647b      	str	r3, [r7, #68]	; 0x44
 8008e0a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e10:	e841 2300 	strex	r3, r2, [r1]
 8008e14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1e6      	bne.n	8008dea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2220      	movs	r2, #32
 8008e20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e063      	b.n	8008ef8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 0304 	and.w	r3, r3, #4
 8008e3a:	2b04      	cmp	r3, #4
 8008e3c:	d149      	bne.n	8008ed2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e46:	2200      	movs	r2, #0
 8008e48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f857 	bl	8008f00 <UART_WaitOnFlagUntilTimeout>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d03c      	beq.n	8008ed2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	623b      	str	r3, [r7, #32]
   return(result);
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e76:	633b      	str	r3, [r7, #48]	; 0x30
 8008e78:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e7e:	e841 2300 	strex	r3, r2, [r1]
 8008e82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1e6      	bne.n	8008e58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3308      	adds	r3, #8
 8008e90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f023 0301 	bic.w	r3, r3, #1
 8008ea0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3308      	adds	r3, #8
 8008ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008eaa:	61fa      	str	r2, [r7, #28]
 8008eac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	69b9      	ldr	r1, [r7, #24]
 8008eb0:	69fa      	ldr	r2, [r7, #28]
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	617b      	str	r3, [r7, #20]
   return(result);
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e5      	bne.n	8008e8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2220      	movs	r2, #32
 8008ec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	e012      	b.n	8008ef8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2220      	movs	r2, #32
 8008ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2220      	movs	r2, #32
 8008ede:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3758      	adds	r7, #88	; 0x58
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	603b      	str	r3, [r7, #0]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f10:	e04f      	b.n	8008fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f18:	d04b      	beq.n	8008fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f1a:	f7f8 fab9 	bl	8001490 <HAL_GetTick>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d302      	bcc.n	8008f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d101      	bne.n	8008f34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e04e      	b.n	8008fd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 0304 	and.w	r3, r3, #4
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d037      	beq.n	8008fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2b80      	cmp	r3, #128	; 0x80
 8008f46:	d034      	beq.n	8008fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2b40      	cmp	r3, #64	; 0x40
 8008f4c:	d031      	beq.n	8008fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	69db      	ldr	r3, [r3, #28]
 8008f54:	f003 0308 	and.w	r3, r3, #8
 8008f58:	2b08      	cmp	r3, #8
 8008f5a:	d110      	bne.n	8008f7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2208      	movs	r2, #8
 8008f62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 f839 	bl	8008fdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2208      	movs	r2, #8
 8008f6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e029      	b.n	8008fd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	69db      	ldr	r3, [r3, #28]
 8008f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f8c:	d111      	bne.n	8008fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f000 f81f 	bl	8008fdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2220      	movs	r2, #32
 8008fa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e00f      	b.n	8008fd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	69da      	ldr	r2, [r3, #28]
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	4013      	ands	r3, r2
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	bf0c      	ite	eq
 8008fc2:	2301      	moveq	r3, #1
 8008fc4:	2300      	movne	r3, #0
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	461a      	mov	r2, r3
 8008fca:	79fb      	ldrb	r3, [r7, #7]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d0a0      	beq.n	8008f12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b095      	sub	sp, #84	; 0x54
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fec:	e853 3f00 	ldrex	r3, [r3]
 8008ff0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009002:	643b      	str	r3, [r7, #64]	; 0x40
 8009004:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009006:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009008:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800900a:	e841 2300 	strex	r3, r2, [r1]
 800900e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1e6      	bne.n	8008fe4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3308      	adds	r3, #8
 800901c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	61fb      	str	r3, [r7, #28]
   return(result);
 8009026:	69fa      	ldr	r2, [r7, #28]
 8009028:	4b1e      	ldr	r3, [pc, #120]	; (80090a4 <UART_EndRxTransfer+0xc8>)
 800902a:	4013      	ands	r3, r2
 800902c:	64bb      	str	r3, [r7, #72]	; 0x48
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	3308      	adds	r3, #8
 8009034:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009036:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009038:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800903c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800903e:	e841 2300 	strex	r3, r2, [r1]
 8009042:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1e5      	bne.n	8009016 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800904e:	2b01      	cmp	r3, #1
 8009050:	d118      	bne.n	8009084 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	e853 3f00 	ldrex	r3, [r3]
 800905e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	f023 0310 	bic.w	r3, r3, #16
 8009066:	647b      	str	r3, [r7, #68]	; 0x44
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	461a      	mov	r2, r3
 800906e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009070:	61bb      	str	r3, [r7, #24]
 8009072:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009074:	6979      	ldr	r1, [r7, #20]
 8009076:	69ba      	ldr	r2, [r7, #24]
 8009078:	e841 2300 	strex	r3, r2, [r1]
 800907c:	613b      	str	r3, [r7, #16]
   return(result);
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1e6      	bne.n	8009052 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2220      	movs	r2, #32
 8009088:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009098:	bf00      	nop
 800909a:	3754      	adds	r7, #84	; 0x54
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr
 80090a4:	effffffe 	.word	0xeffffffe

080090a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d101      	bne.n	80090be <HAL_UARTEx_DisableFifoMode+0x16>
 80090ba:	2302      	movs	r3, #2
 80090bc:	e027      	b.n	800910e <HAL_UARTEx_DisableFifoMode+0x66>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2224      	movs	r2, #36	; 0x24
 80090ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f022 0201 	bic.w	r2, r2, #1
 80090e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80090ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2220      	movs	r2, #32
 8009100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b084      	sub	sp, #16
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800912a:	2b01      	cmp	r3, #1
 800912c:	d101      	bne.n	8009132 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800912e:	2302      	movs	r3, #2
 8009130:	e02d      	b.n	800918e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2201      	movs	r2, #1
 8009136:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2224      	movs	r2, #36	; 0x24
 800913e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f022 0201 	bic.w	r2, r2, #1
 8009158:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	430a      	orrs	r2, r1
 800916c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f850 	bl	8009214 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2220      	movs	r2, #32
 8009180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b084      	sub	sp, #16
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d101      	bne.n	80091ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80091aa:	2302      	movs	r3, #2
 80091ac:	e02d      	b.n	800920a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2224      	movs	r2, #36	; 0x24
 80091ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f022 0201 	bic.w	r2, r2, #1
 80091d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	430a      	orrs	r2, r1
 80091e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f812 	bl	8009214 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2220      	movs	r2, #32
 80091fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009220:	2b00      	cmp	r3, #0
 8009222:	d108      	bne.n	8009236 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009234:	e031      	b.n	800929a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009236:	2310      	movs	r3, #16
 8009238:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800923a:	2310      	movs	r3, #16
 800923c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	0e5b      	lsrs	r3, r3, #25
 8009246:	b2db      	uxtb	r3, r3
 8009248:	f003 0307 	and.w	r3, r3, #7
 800924c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	0f5b      	lsrs	r3, r3, #29
 8009256:	b2db      	uxtb	r3, r3
 8009258:	f003 0307 	and.w	r3, r3, #7
 800925c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800925e:	7bbb      	ldrb	r3, [r7, #14]
 8009260:	7b3a      	ldrb	r2, [r7, #12]
 8009262:	4911      	ldr	r1, [pc, #68]	; (80092a8 <UARTEx_SetNbDataToProcess+0x94>)
 8009264:	5c8a      	ldrb	r2, [r1, r2]
 8009266:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800926a:	7b3a      	ldrb	r2, [r7, #12]
 800926c:	490f      	ldr	r1, [pc, #60]	; (80092ac <UARTEx_SetNbDataToProcess+0x98>)
 800926e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009270:	fb93 f3f2 	sdiv	r3, r3, r2
 8009274:	b29a      	uxth	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800927c:	7bfb      	ldrb	r3, [r7, #15]
 800927e:	7b7a      	ldrb	r2, [r7, #13]
 8009280:	4909      	ldr	r1, [pc, #36]	; (80092a8 <UARTEx_SetNbDataToProcess+0x94>)
 8009282:	5c8a      	ldrb	r2, [r1, r2]
 8009284:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009288:	7b7a      	ldrb	r2, [r7, #13]
 800928a:	4908      	ldr	r1, [pc, #32]	; (80092ac <UARTEx_SetNbDataToProcess+0x98>)
 800928c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800928e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009292:	b29a      	uxth	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800929a:	bf00      	nop
 800929c:	3714      	adds	r7, #20
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	08009960 	.word	0x08009960
 80092ac:	08009968 	.word	0x08009968

080092b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092b0:	b084      	sub	sp, #16
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b084      	sub	sp, #16
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	f107 001c 	add.w	r0, r7, #28
 80092be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092c2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d121      	bne.n	800930e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68da      	ldr	r2, [r3, #12]
 80092da:	4b2c      	ldr	r3, [pc, #176]	; (800938c <USB_CoreInit+0xdc>)
 80092dc:	4013      	ands	r3, r2
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80092ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d105      	bne.n	8009302 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 faaa 	bl	800985c <USB_CoreReset>
 8009308:	4603      	mov	r3, r0
 800930a:	73fb      	strb	r3, [r7, #15]
 800930c:	e01b      	b.n	8009346 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fa9e 	bl	800985c <USB_CoreReset>
 8009320:	4603      	mov	r3, r0
 8009322:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009324:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009328:	2b00      	cmp	r3, #0
 800932a:	d106      	bne.n	800933a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009330:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	639a      	str	r2, [r3, #56]	; 0x38
 8009338:	e005      	b.n	8009346 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800933e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009346:	7fbb      	ldrb	r3, [r7, #30]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d116      	bne.n	800937a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009350:	b29a      	uxth	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800935a:	4b0d      	ldr	r3, [pc, #52]	; (8009390 <USB_CoreInit+0xe0>)
 800935c:	4313      	orrs	r3, r2
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	f043 0206 	orr.w	r2, r3, #6
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	f043 0220 	orr.w	r2, r3, #32
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800937a:	7bfb      	ldrb	r3, [r7, #15]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009386:	b004      	add	sp, #16
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	ffbdffbf 	.word	0xffbdffbf
 8009390:	03ee0000 	.word	0x03ee0000

08009394 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	f023 0201 	bic.w	r2, r3, #1
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	370c      	adds	r7, #12
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr

080093b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b084      	sub	sp, #16
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
 80093be:	460b      	mov	r3, r1
 80093c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80093c2:	2300      	movs	r3, #0
 80093c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80093d2:	78fb      	ldrb	r3, [r7, #3]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d115      	bne.n	8009404 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80093e4:	200a      	movs	r0, #10
 80093e6:	f7f8 f85f 	bl	80014a8 <HAL_Delay>
      ms += 10U;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	330a      	adds	r3, #10
 80093ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fa25 	bl	8009840 <USB_GetMode>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d01e      	beq.n	800943a <USB_SetCurrentMode+0x84>
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2bc7      	cmp	r3, #199	; 0xc7
 8009400:	d9f0      	bls.n	80093e4 <USB_SetCurrentMode+0x2e>
 8009402:	e01a      	b.n	800943a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009404:	78fb      	ldrb	r3, [r7, #3]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d115      	bne.n	8009436 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009416:	200a      	movs	r0, #10
 8009418:	f7f8 f846 	bl	80014a8 <HAL_Delay>
      ms += 10U;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	330a      	adds	r3, #10
 8009420:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fa0c 	bl	8009840 <USB_GetMode>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d005      	beq.n	800943a <USB_SetCurrentMode+0x84>
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2bc7      	cmp	r3, #199	; 0xc7
 8009432:	d9f0      	bls.n	8009416 <USB_SetCurrentMode+0x60>
 8009434:	e001      	b.n	800943a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	e005      	b.n	8009446 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2bc8      	cmp	r3, #200	; 0xc8
 800943e:	d101      	bne.n	8009444 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e000      	b.n	8009446 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
	...

08009450 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009450:	b084      	sub	sp, #16
 8009452:	b580      	push	{r7, lr}
 8009454:	b086      	sub	sp, #24
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
 800945a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800945e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800946a:	2300      	movs	r3, #0
 800946c:	613b      	str	r3, [r7, #16]
 800946e:	e009      	b.n	8009484 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	3340      	adds	r3, #64	; 0x40
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4413      	add	r3, r2
 800947a:	2200      	movs	r2, #0
 800947c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	3301      	adds	r3, #1
 8009482:	613b      	str	r3, [r7, #16]
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	2b0e      	cmp	r3, #14
 8009488:	d9f2      	bls.n	8009470 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800948a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800948e:	2b00      	cmp	r3, #0
 8009490:	d11c      	bne.n	80094cc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094a0:	f043 0302 	orr.w	r3, r3, #2
 80094a4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	601a      	str	r2, [r3, #0]
 80094ca:	e005      	b.n	80094d8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094de:	461a      	mov	r2, r3
 80094e0:	2300      	movs	r3, #0
 80094e2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094e4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d10d      	bne.n	8009508 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80094ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d104      	bne.n	80094fe <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80094f4:	2100      	movs	r1, #0
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 f968 	bl	80097cc <USB_SetDevSpeed>
 80094fc:	e008      	b.n	8009510 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80094fe:	2101      	movs	r1, #1
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 f963 	bl	80097cc <USB_SetDevSpeed>
 8009506:	e003      	b.n	8009510 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009508:	2103      	movs	r1, #3
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f95e 	bl	80097cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009510:	2110      	movs	r1, #16
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f8fa 	bl	800970c <USB_FlushTxFifo>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f924 	bl	8009770 <USB_FlushRxFifo>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009538:	461a      	mov	r2, r3
 800953a:	2300      	movs	r3, #0
 800953c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009544:	461a      	mov	r2, r3
 8009546:	2300      	movs	r3, #0
 8009548:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009550:	461a      	mov	r2, r3
 8009552:	2300      	movs	r3, #0
 8009554:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009556:	2300      	movs	r3, #0
 8009558:	613b      	str	r3, [r7, #16]
 800955a:	e043      	b.n	80095e4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	015a      	lsls	r2, r3, #5
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	4413      	add	r3, r2
 8009564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800956e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009572:	d118      	bne.n	80095a6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d10a      	bne.n	8009590 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	015a      	lsls	r2, r3, #5
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	4413      	add	r3, r2
 8009582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009586:	461a      	mov	r2, r3
 8009588:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800958c:	6013      	str	r3, [r2, #0]
 800958e:	e013      	b.n	80095b8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	015a      	lsls	r2, r3, #5
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	4413      	add	r3, r2
 8009598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800959c:	461a      	mov	r2, r3
 800959e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80095a2:	6013      	str	r3, [r2, #0]
 80095a4:	e008      	b.n	80095b8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	015a      	lsls	r2, r3, #5
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	4413      	add	r3, r2
 80095ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b2:	461a      	mov	r2, r3
 80095b4:	2300      	movs	r3, #0
 80095b6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	015a      	lsls	r2, r3, #5
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	4413      	add	r3, r2
 80095c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c4:	461a      	mov	r2, r3
 80095c6:	2300      	movs	r3, #0
 80095c8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	015a      	lsls	r2, r3, #5
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	4413      	add	r3, r2
 80095d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095d6:	461a      	mov	r2, r3
 80095d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80095dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	3301      	adds	r3, #1
 80095e2:	613b      	str	r3, [r7, #16]
 80095e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80095e8:	461a      	mov	r2, r3
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d3b5      	bcc.n	800955c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095f0:	2300      	movs	r3, #0
 80095f2:	613b      	str	r3, [r7, #16]
 80095f4:	e043      	b.n	800967e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	015a      	lsls	r2, r3, #5
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	4413      	add	r3, r2
 80095fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800960c:	d118      	bne.n	8009640 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10a      	bne.n	800962a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	015a      	lsls	r2, r3, #5
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	4413      	add	r3, r2
 800961c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009620:	461a      	mov	r2, r3
 8009622:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009626:	6013      	str	r3, [r2, #0]
 8009628:	e013      	b.n	8009652 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	015a      	lsls	r2, r3, #5
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	4413      	add	r3, r2
 8009632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009636:	461a      	mov	r2, r3
 8009638:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800963c:	6013      	str	r3, [r2, #0]
 800963e:	e008      	b.n	8009652 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	015a      	lsls	r2, r3, #5
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	4413      	add	r3, r2
 8009648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800964c:	461a      	mov	r2, r3
 800964e:	2300      	movs	r3, #0
 8009650:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	015a      	lsls	r2, r3, #5
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	4413      	add	r3, r2
 800965a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800965e:	461a      	mov	r2, r3
 8009660:	2300      	movs	r3, #0
 8009662:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	015a      	lsls	r2, r3, #5
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	4413      	add	r3, r2
 800966c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009670:	461a      	mov	r2, r3
 8009672:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009676:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	3301      	adds	r3, #1
 800967c:	613b      	str	r3, [r7, #16]
 800967e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009682:	461a      	mov	r2, r3
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	4293      	cmp	r3, r2
 8009688:	d3b5      	bcc.n	80095f6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800969c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80096aa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80096ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d105      	bne.n	80096c0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	f043 0210 	orr.w	r2, r3, #16
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	699a      	ldr	r2, [r3, #24]
 80096c4:	4b0f      	ldr	r3, [pc, #60]	; (8009704 <USB_DevInit+0x2b4>)
 80096c6:	4313      	orrs	r3, r2
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80096cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d005      	beq.n	80096e0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	699b      	ldr	r3, [r3, #24]
 80096d8:	f043 0208 	orr.w	r2, r3, #8
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80096e0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d105      	bne.n	80096f4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	699a      	ldr	r2, [r3, #24]
 80096ec:	4b06      	ldr	r3, [pc, #24]	; (8009708 <USB_DevInit+0x2b8>)
 80096ee:	4313      	orrs	r3, r2
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80096f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3718      	adds	r7, #24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009700:	b004      	add	sp, #16
 8009702:	4770      	bx	lr
 8009704:	803c3800 	.word	0x803c3800
 8009708:	40000004 	.word	0x40000004

0800970c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009716:	2300      	movs	r3, #0
 8009718:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3301      	adds	r3, #1
 800971e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009726:	d901      	bls.n	800972c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009728:	2303      	movs	r3, #3
 800972a:	e01b      	b.n	8009764 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	2b00      	cmp	r3, #0
 8009732:	daf2      	bge.n	800971a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009734:	2300      	movs	r3, #0
 8009736:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	019b      	lsls	r3, r3, #6
 800973c:	f043 0220 	orr.w	r2, r3, #32
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	3301      	adds	r3, #1
 8009748:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009750:	d901      	bls.n	8009756 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009752:	2303      	movs	r3, #3
 8009754:	e006      	b.n	8009764 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	f003 0320 	and.w	r3, r3, #32
 800975e:	2b20      	cmp	r3, #32
 8009760:	d0f0      	beq.n	8009744 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3714      	adds	r7, #20
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009778:	2300      	movs	r3, #0
 800977a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	3301      	adds	r3, #1
 8009780:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009788:	d901      	bls.n	800978e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800978a:	2303      	movs	r3, #3
 800978c:	e018      	b.n	80097c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	2b00      	cmp	r3, #0
 8009794:	daf2      	bge.n	800977c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009796:	2300      	movs	r3, #0
 8009798:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2210      	movs	r2, #16
 800979e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	3301      	adds	r3, #1
 80097a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80097ac:	d901      	bls.n	80097b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e006      	b.n	80097c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	f003 0310 	and.w	r3, r3, #16
 80097ba:	2b10      	cmp	r3, #16
 80097bc:	d0f0      	beq.n	80097a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80097be:	2300      	movs	r3, #0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3714      	adds	r7, #20
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	460b      	mov	r3, r1
 80097d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	78fb      	ldrb	r3, [r7, #3]
 80097e6:	68f9      	ldr	r1, [r7, #12]
 80097e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097ec:	4313      	orrs	r3, r2
 80097ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3714      	adds	r7, #20
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr

080097fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80097fe:	b480      	push	{r7}
 8009800:	b085      	sub	sp, #20
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009818:	f023 0303 	bic.w	r3, r3, #3
 800981c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800982c:	f043 0302 	orr.w	r3, r3, #2
 8009830:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	3714      	adds	r7, #20
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	695b      	ldr	r3, [r3, #20]
 800984c:	f003 0301 	and.w	r3, r3, #1
}
 8009850:	4618      	mov	r0, r3
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009864:	2300      	movs	r3, #0
 8009866:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	3301      	adds	r3, #1
 800986c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009874:	d901      	bls.n	800987a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009876:	2303      	movs	r3, #3
 8009878:	e01b      	b.n	80098b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	2b00      	cmp	r3, #0
 8009880:	daf2      	bge.n	8009868 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009882:	2300      	movs	r3, #0
 8009884:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	f043 0201 	orr.w	r2, r3, #1
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	3301      	adds	r3, #1
 8009896:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800989e:	d901      	bls.n	80098a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80098a0:	2303      	movs	r3, #3
 80098a2:	e006      	b.n	80098b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	f003 0301 	and.w	r3, r3, #1
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d0f0      	beq.n	8009892 <USB_CoreReset+0x36>

  return HAL_OK;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3714      	adds	r7, #20
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <memset>:
 80098be:	4402      	add	r2, r0
 80098c0:	4603      	mov	r3, r0
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d100      	bne.n	80098c8 <memset+0xa>
 80098c6:	4770      	bx	lr
 80098c8:	f803 1b01 	strb.w	r1, [r3], #1
 80098cc:	e7f9      	b.n	80098c2 <memset+0x4>
	...

080098d0 <__libc_init_array>:
 80098d0:	b570      	push	{r4, r5, r6, lr}
 80098d2:	4d0d      	ldr	r5, [pc, #52]	; (8009908 <__libc_init_array+0x38>)
 80098d4:	4c0d      	ldr	r4, [pc, #52]	; (800990c <__libc_init_array+0x3c>)
 80098d6:	1b64      	subs	r4, r4, r5
 80098d8:	10a4      	asrs	r4, r4, #2
 80098da:	2600      	movs	r6, #0
 80098dc:	42a6      	cmp	r6, r4
 80098de:	d109      	bne.n	80098f4 <__libc_init_array+0x24>
 80098e0:	4d0b      	ldr	r5, [pc, #44]	; (8009910 <__libc_init_array+0x40>)
 80098e2:	4c0c      	ldr	r4, [pc, #48]	; (8009914 <__libc_init_array+0x44>)
 80098e4:	f000 f818 	bl	8009918 <_init>
 80098e8:	1b64      	subs	r4, r4, r5
 80098ea:	10a4      	asrs	r4, r4, #2
 80098ec:	2600      	movs	r6, #0
 80098ee:	42a6      	cmp	r6, r4
 80098f0:	d105      	bne.n	80098fe <__libc_init_array+0x2e>
 80098f2:	bd70      	pop	{r4, r5, r6, pc}
 80098f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80098f8:	4798      	blx	r3
 80098fa:	3601      	adds	r6, #1
 80098fc:	e7ee      	b.n	80098dc <__libc_init_array+0xc>
 80098fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009902:	4798      	blx	r3
 8009904:	3601      	adds	r6, #1
 8009906:	e7f2      	b.n	80098ee <__libc_init_array+0x1e>
 8009908:	08009978 	.word	0x08009978
 800990c:	08009978 	.word	0x08009978
 8009910:	08009978 	.word	0x08009978
 8009914:	0800997c 	.word	0x0800997c

08009918 <_init>:
 8009918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991a:	bf00      	nop
 800991c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800991e:	bc08      	pop	{r3}
 8009920:	469e      	mov	lr, r3
 8009922:	4770      	bx	lr

08009924 <_fini>:
 8009924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009926:	bf00      	nop
 8009928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800992a:	bc08      	pop	{r3}
 800992c:	469e      	mov	lr, r3
 800992e:	4770      	bx	lr
